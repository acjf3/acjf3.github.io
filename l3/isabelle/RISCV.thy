(* RISCV.thy - generated by L3 - 27/10/2017 *)
theory RISCV
imports "$ISABELLE_HOME/src/HOL/Word/Word" "L3_Lib"
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "L3.ML"

datatype accessType = Read | Write | ReadWrite | Execute

datatype fetchType = Instruction | Data

datatype Architecture = RV32I | RV64I | RV128I

datatype Privilege = User | Supervisor | Hypervisor | Machine

datatype VM_Mode = Mbare | Mbb | Mbbid | Sv32 | Sv39 | Sv48 | Sv57 | Sv64

datatype ExtStatus = Off | Initial | Clean | Dirty

datatype InterruptType = I_U_Software | I_S_Software | I_H_Software | I_M_Software | I_U_Timer |
  I_S_Timer | I_H_Timer | I_M_Timer | I_U_External | I_S_External | I_H_External | I_M_External

datatype ExceptionType = E_Fetch_Misaligned | E_Fetch_Fault | E_Illegal_Instr | E_Breakpoint |
  E_Load_Fault | E_AMO_Misaligned | E_Store_AMO_Fault | E_Env_Call

record misa =
  A :: bool
  ArchBase :: "2 word"
  D :: bool
  F :: bool
  I :: bool
  M :: bool
  N :: bool
  S :: bool
  U :: bool
  X :: bool
  misa'rst :: "53 word"

record mstatus =
  M_FS :: "2 word"
  M_HIE :: bool
  M_HPIE :: bool
  M_HPP :: "2 word"
  M_MIE :: bool
  M_MPIE :: bool
  M_MPP :: "2 word"
  M_MPRV :: bool
  M_MXR :: bool
  M_PUM :: bool
  M_SD :: bool
  M_SIE :: bool
  M_SPIE :: bool
  M_SPP :: bool
  M_UIE :: bool
  M_UPIE :: bool
  M_VM :: "5 word"
  M_XS :: "2 word"
  mstatus'rst :: "38 word"

record medeleg =
  M_Breakpoint :: bool
  M_Fetch_Addr_Align :: bool
  M_Fetch_Fault :: bool
  M_HEnvCall :: bool
  M_Illegal_Instr :: bool
  M_Load_Access :: bool
  M_Load_Addr_Align :: bool
  M_MEnvCall :: bool
  M_SAMO_Access :: bool
  M_SAMO_Addr :: bool
  M_SEnvCall :: bool
  M_UEnvCall :: bool
  medeleg'rst :: "52 word"

record mideleg =
  M_HEIP :: bool
  M_HSIP :: bool
  M_HTIP :: bool
  M_MEIP :: bool
  M_MSIP :: bool
  M_MTIP :: bool
  M_SEIP :: bool
  M_SSIP :: bool
  M_STIP :: bool
  M_UEIP :: bool
  M_USIP :: bool
  M_UTIP :: bool
  mideleg'rst :: "52 word"

record mip =
  M_HEIP :: bool
  M_HSIP :: bool
  M_HTIP :: bool
  M_MEIP :: bool
  M_MSIP :: bool
  M_MTIP :: bool
  M_SEIP :: bool
  M_SSIP :: bool
  M_STIP :: bool
  M_UEIP :: bool
  M_USIP :: bool
  M_UTIP :: bool
  mip'rst :: "52 word"

record mie =
  M_HEIE :: bool
  M_HSIE :: bool
  M_HTIE :: bool
  M_MEIE :: bool
  M_MSIE :: bool
  M_MTIE :: bool
  M_SEIE :: bool
  M_SSIE :: bool
  M_STIE :: bool
  M_UEIE :: bool
  M_USIE :: bool
  M_UTIE :: bool
  mie'rst :: "52 word"

record mcounteren = M_CY :: bool M_IR :: bool M_TM :: bool mcounteren'rst :: "61 word"

record mcause = M_ExcCause :: "63 word" M_Intr :: bool

record MachineCSR =
  marchid :: "64 word"
  mbadaddr :: "64 word"
  mbase :: "64 word"
  mbound :: "64 word"
  mcause :: mcause
  mcycle :: "64 word"
  mdbase :: "64 word"
  mdbound :: "64 word"
  medeleg :: medeleg
  mepc :: "64 word"
  mfromhost :: "64 word"
  mhartid :: "64 word"
  mhcounteren :: mcounteren
  mibase :: "64 word"
  mibound :: "64 word"
  mideleg :: mideleg
  mie :: mie
  mimpid :: "64 word"
  minstret :: "64 word"
  mip :: mip
  misa :: misa
  mscounteren :: mcounteren
  mscratch :: "64 word"
  mscycle_delta :: "64 word"
  msinstret_delta :: "64 word"
  mstatus :: mstatus
  mstime_delta :: "64 word"
  mtime :: "64 word"
  mtohost :: "64 word"
  mtvec :: "64 word"
  mucounteren :: mcounteren
  mucycle_delta :: "64 word"
  muinstret_delta :: "64 word"
  mutime_delta :: "64 word"
  mvendorid :: "64 word"

record HypervisorCSR =
  hbadaddr :: "64 word"
  hcause :: mcause
  hedeleg :: "64 word"
  hepc :: "64 word"
  hideleg :: "64 word"
  hie :: "64 word"
  hscratch :: "64 word"
  hstatus :: mstatus
  htvec :: "64 word"

record sstatus =
  S_FS :: "2 word"
  S_PUM :: bool
  S_SD :: bool
  S_SIE :: bool
  S_SPIE :: bool
  S_SPP :: bool
  S_UIE :: bool
  S_UPIE :: bool
  S_XS :: "2 word"
  sstatus'rst :: "53 word"

record sedeleg =
  S_Breakpoint :: bool
  S_Fetch_Addr_Align :: bool
  S_Fetch_Fault :: bool
  S_Illegal_Instr :: bool
  S_Load_Access :: bool
  S_Load_Addr_Align :: bool
  S_SAMO_Access :: bool
  S_SAMO_Addr :: bool
  S_SEnvCall :: bool
  S_UEnvCall :: bool
  sedeleg'rst :: "54 word"

record sideleg =
  S_SEIP :: bool
  S_SSIP :: bool
  S_STIP :: bool
  S_UEIP :: bool
  S_USIP :: bool
  S_UTIP :: bool
  sideleg'rst :: "58 word"

record sip =
  S_SEIP :: bool
  S_SSIP :: bool
  S_STIP :: bool
  S_UEIP :: bool
  S_USIP :: bool
  S_UTIP :: bool
  sip'rst :: "58 word"

record sie =
  S_SEIE :: bool
  S_SSIE :: bool
  S_STIE :: bool
  S_UEIE :: bool
  S_USIE :: bool
  S_UTIE :: bool
  sie'rst :: "58 word"

record sptbr32 = ASID_32 :: "10 word" PPN_32 :: "22 word"

record sptbr64 = ASID_64 :: "26 word" PPN_64 :: "38 word"

record SupervisorCSR =
  sbadaddr :: "64 word"
  scause :: mcause
  sedeleg :: sedeleg
  sepc :: "64 word"
  sideleg :: sideleg
  sip :: sip
  sptbr :: "64 word"
  sscratch :: "64 word"
  sstatus :: sstatus
  stvec :: "64 word"

record FPCSR =
  DZ :: bool FRM :: "3 word" NV :: bool NX :: bool OF :: bool UF :: bool fpcsr'rst :: "24 word"

record ustatus = U_IE :: bool U_PIE :: bool ustatus'rst :: "62 word"

record uip = U_EIP :: bool U_SIP :: bool U_TIP :: bool uip'rst :: "61 word"

record uie = U_EIE :: bool U_SIE :: bool U_TIE :: bool uie'rst :: "61 word"

record UserCSR =
  fpcsr :: FPCSR
  ubadaddr :: "64 word"
  ucause :: mcause
  uepc :: "64 word"
  uscratch :: "64 word"
  utvec :: "64 word"

record SynchronousException = badaddr :: "64 word option" trap :: ExceptionType

datatype instrResult = BranchTo "64 word" | Hret | Mret | Sret | Trap SynchronousException | Uret

datatype Rounding = RNE | RTZ | RDN | RUP | RMM | RDYN

record StateDelta =
  addr :: "64 word option"
  data1 :: "64 word option"
  data2 :: "64 word option"
  exc_taken :: bool
  fetch_exc :: bool
  fp_data :: "64 word option"
  pc :: "64 word"
  rinstr :: "32 word"
  st_width :: "32 word option"

record memPerm = Mem_R :: bool Mem_U :: bool Mem_W :: bool Mem_X :: bool

record SV32_Vaddr = VA32_PgOfs :: "12 word" VA32_VPNi :: "20 word"

record SV32_Paddr = PA32_PPNi :: "22 word" PA32_PgOfs :: "12 word"

record SV32_PTE =
  PTE32_A :: bool
  PTE32_D :: bool
  PTE32_G :: bool
  PTE32_PERM :: "4 word"
  PTE32_PPNi :: "22 word"
  PTE32_V :: bool
  sv32_pte'rst :: "2 word"

record TLB32_Entry =
  age_32 :: "64 word"
  asid_32 :: "10 word"
  global_32 :: bool
  pAddr_32 :: "34 word"
  pteAddr_32 :: "34 word"
  pte_32 :: SV32_PTE
  vAddrMask_32 :: "32 word"
  vAddr_32 :: "32 word"
  vMatchMask_32 :: "32 word"

record SV39_Vaddr = VA39_PgOfs :: "12 word" VA39_VPNi :: "27 word"

record SV39_Paddr = PA39_PPNi :: "38 word" PA39_PgOfs :: "12 word"

record SV39_PTE =
  PTE39_A :: bool
  PTE39_D :: bool
  PTE39_G :: bool
  PTE39_PERM :: "4 word"
  PTE39_PPNi :: "38 word"
  PTE39_V :: bool
  sv39_pte'rst :: "18 word"

record TLB39_Entry =
  age_39 :: "64 word"
  asid_39 :: "26 word"
  global_39 :: bool
  pAddr_39 :: "50 word"
  pteAddr_39 :: "50 word"
  pte_39 :: SV39_PTE
  vAddrMask_39 :: "39 word"
  vAddr_39 :: "39 word"
  vMatchMask_39 :: "39 word"

datatype Internal = FETCH_FAULT "64 word" | FETCH_MISALIGNED "64 word"

datatype System =
    CSRRC "5 word \<times> 5 word \<times> 12 word"
  | CSRRCI "5 word \<times> 5 word \<times> 12 word"
  | CSRRS "5 word \<times> 5 word \<times> 12 word"
  | CSRRSI "5 word \<times> 5 word \<times> 12 word"
  | CSRRW "5 word \<times> 5 word \<times> 12 word"
  | CSRRWI "5 word \<times> 5 word \<times> 12 word"
  | EBREAK
  | ECALL
  | HRET
  | MRET
  | SFENCE_VM "5 word"
  | SRET
  | URET
  | WFI

datatype FConv =
    FCLASS_D "5 word \<times> 5 word"
  | FCLASS_S "5 word \<times> 5 word"
  | FCVT_D_L "5 word \<times> 5 word \<times> 3 word"
  | FCVT_D_LU "5 word \<times> 5 word \<times> 3 word"
  | FCVT_D_S "5 word \<times> 5 word \<times> 3 word"
  | FCVT_D_W "5 word \<times> 5 word \<times> 3 word"
  | FCVT_D_WU "5 word \<times> 5 word \<times> 3 word"
  | FCVT_LU_D "5 word \<times> 5 word \<times> 3 word"
  | FCVT_LU_S "5 word \<times> 5 word \<times> 3 word"
  | FCVT_L_D "5 word \<times> 5 word \<times> 3 word"
  | FCVT_L_S "5 word \<times> 5 word \<times> 3 word"
  | FCVT_S_D "5 word \<times> 5 word \<times> 3 word"
  | FCVT_S_L "5 word \<times> 5 word \<times> 3 word"
  | FCVT_S_LU "5 word \<times> 5 word \<times> 3 word"
  | FCVT_S_W "5 word \<times> 5 word \<times> 3 word"
  | FCVT_S_WU "5 word \<times> 5 word \<times> 3 word"
  | FCVT_WU_D "5 word \<times> 5 word \<times> 3 word"
  | FCVT_WU_S "5 word \<times> 5 word \<times> 3 word"
  | FCVT_W_D "5 word \<times> 5 word \<times> 3 word"
  | FCVT_W_S "5 word \<times> 5 word \<times> 3 word"
  | FMV_D_X "5 word \<times> 5 word"
  | FMV_S_X "5 word \<times> 5 word"
  | FMV_X_D "5 word \<times> 5 word"
  | FMV_X_S "5 word \<times> 5 word"
  | FSGNJN_D "5 word \<times> 5 word \<times> 5 word"
  | FSGNJN_S "5 word \<times> 5 word \<times> 5 word"
  | FSGNJX_D "5 word \<times> 5 word \<times> 5 word"
  | FSGNJX_S "5 word \<times> 5 word \<times> 5 word"
  | FSGNJ_D "5 word \<times> 5 word \<times> 5 word"
  | FSGNJ_S "5 word \<times> 5 word \<times> 5 word"

datatype FArith =
    FADD_D "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FADD_S "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FDIV_D "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FDIV_S "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FEQ_D "5 word \<times> 5 word \<times> 5 word"
  | FEQ_S "5 word \<times> 5 word \<times> 5 word"
  | FLE_D "5 word \<times> 5 word \<times> 5 word"
  | FLE_S "5 word \<times> 5 word \<times> 5 word"
  | FLT_D "5 word \<times> 5 word \<times> 5 word"
  | FLT_S "5 word \<times> 5 word \<times> 5 word"
  | FMADD_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FMADD_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FMAX_D "5 word \<times> 5 word \<times> 5 word"
  | FMAX_S "5 word \<times> 5 word \<times> 5 word"
  | FMIN_D "5 word \<times> 5 word \<times> 5 word"
  | FMIN_S "5 word \<times> 5 word \<times> 5 word"
  | FMSUB_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FMSUB_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FMUL_D "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FMUL_S "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FNMADD_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FNMADD_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FNMSUB_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FNMSUB_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FSQRT_D "5 word \<times> 5 word \<times> 3 word"
  | FSQRT_S "5 word \<times> 5 word \<times> 3 word"
  | FSUB_D "5 word \<times> 5 word \<times> 5 word \<times> 3 word"
  | FSUB_S "5 word \<times> 5 word \<times> 5 word \<times> 3 word"

datatype FPStore =
    FSD "5 word \<times> 5 word \<times> 12 word"
  | FSW "5 word \<times> 5 word \<times> 12 word"

datatype FPLoad =
    FLD "5 word \<times> 5 word \<times> 12 word"
  | FLW "5 word \<times> 5 word \<times> 12 word"

datatype AMO =
    AMOADD_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOADD_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOAND_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOAND_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMAXU_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMAXU_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMAX_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMAX_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMINU_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMINU_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMIN_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOMIN_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOOR_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOOR_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOSWAP_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOSWAP_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOXOR_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | AMOXOR_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | LR_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word"
  | LR_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word"
  | SC_D "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | SC_W "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"

datatype Store =
    SB "5 word \<times> 5 word \<times> 12 word"
  | SD "5 word \<times> 5 word \<times> 12 word"
  | SH "5 word \<times> 5 word \<times> 12 word"
  | SW "5 word \<times> 5 word \<times> 12 word"

datatype Load =
    LB "5 word \<times> 5 word \<times> 12 word"
  | LBU "5 word \<times> 5 word \<times> 12 word"
  | LD "5 word \<times> 5 word \<times> 12 word"
  | LH "5 word \<times> 5 word \<times> 12 word"
  | LHU "5 word \<times> 5 word \<times> 12 word"
  | LW "5 word \<times> 5 word \<times> 12 word"
  | LWU "5 word \<times> 5 word \<times> 12 word"

datatype Branch =
    BEQ "5 word \<times> 5 word \<times> 12 word"
  | BGE "5 word \<times> 5 word \<times> 12 word"
  | BGEU "5 word \<times> 5 word \<times> 12 word"
  | BLT "5 word \<times> 5 word \<times> 12 word"
  | BLTU "5 word \<times> 5 word \<times> 12 word"
  | BNE "5 word \<times> 5 word \<times> 12 word"
  | JAL "5 word \<times> 20 word"
  | JALR "5 word \<times> 5 word \<times> 12 word"

datatype MulDiv =
    DIV "5 word \<times> 5 word \<times> 5 word"
  | DIVU "5 word \<times> 5 word \<times> 5 word"
  | DIVUW "5 word \<times> 5 word \<times> 5 word"
  | DIVW "5 word \<times> 5 word \<times> 5 word"
  | MUL "5 word \<times> 5 word \<times> 5 word"
  | MULH "5 word \<times> 5 word \<times> 5 word"
  | MULHSU "5 word \<times> 5 word \<times> 5 word"
  | MULHU "5 word \<times> 5 word \<times> 5 word"
  | MULW "5 word \<times> 5 word \<times> 5 word"
  | REM "5 word \<times> 5 word \<times> 5 word"
  | REMU "5 word \<times> 5 word \<times> 5 word"
  | REMUW "5 word \<times> 5 word \<times> 5 word"
  | REMW "5 word \<times> 5 word \<times> 5 word"

datatype Shift =
    SLL "5 word \<times> 5 word \<times> 5 word"
  | SLLI "5 word \<times> 5 word \<times> 6 word"
  | SLLIW "5 word \<times> 5 word \<times> 5 word"
  | SLLW "5 word \<times> 5 word \<times> 5 word"
  | SRA "5 word \<times> 5 word \<times> 5 word"
  | SRAI "5 word \<times> 5 word \<times> 6 word"
  | SRAIW "5 word \<times> 5 word \<times> 5 word"
  | SRAW "5 word \<times> 5 word \<times> 5 word"
  | SRL "5 word \<times> 5 word \<times> 5 word"
  | SRLI "5 word \<times> 5 word \<times> 6 word"
  | SRLIW "5 word \<times> 5 word \<times> 5 word"
  | SRLW "5 word \<times> 5 word \<times> 5 word"

datatype ArithR =
    ADD "5 word \<times> 5 word \<times> 5 word"
  | ADDW "5 word \<times> 5 word \<times> 5 word"
  | AND "5 word \<times> 5 word \<times> 5 word"
  | OR "5 word \<times> 5 word \<times> 5 word"
  | SLT "5 word \<times> 5 word \<times> 5 word"
  | SLTU "5 word \<times> 5 word \<times> 5 word"
  | SUB "5 word \<times> 5 word \<times> 5 word"
  | SUBW "5 word \<times> 5 word \<times> 5 word"
  | XOR "5 word \<times> 5 word \<times> 5 word"

datatype ArithI =
    ADDI "5 word \<times> 5 word \<times> 12 word"
  | ADDIW "5 word \<times> 5 word \<times> 12 word"
  | ANDI "5 word \<times> 5 word \<times> 12 word"
  | AUIPC "5 word \<times> 20 word"
  | LUI "5 word \<times> 20 word"
  | ORI "5 word \<times> 5 word \<times> 12 word"
  | SLTI "5 word \<times> 5 word \<times> 12 word"
  | SLTIU "5 word \<times> 5 word \<times> 12 word"
  | XORI "5 word \<times> 5 word \<times> 12 word"

datatype instruction =
    AMO AMO
  | ArithI ArithI
  | ArithR ArithR
  | Branch Branch
  | FArith FArith
  | FConv FConv
  | FENCE "5 word \<times> 5 word \<times> 4 word \<times> 4 word"
  | FENCE_I "5 word \<times> 5 word \<times> 12 word"
  | FPLoad FPLoad
  | FPStore FPStore
  | Internal Internal
  | Load Load
  | MulDiv MulDiv
  | Shift Shift
  | Store Store
  | System System
  | UnknownInstruction

datatype FetchResult = F_Error instruction | F_Result "32 word"

datatype exception = INTERNAL_ERROR string | NoException | UNDEFINED string

record state =
  MEM :: "61 word \<Rightarrow> 64 word"
  c_ExitCode :: "8 word \<Rightarrow> 64 word"
  c_HCSR :: "8 word \<Rightarrow> HypervisorCSR"
  c_MCSR :: "8 word \<Rightarrow> MachineCSR"
  c_NextFetch :: "8 word \<Rightarrow> (instrResult option)"
  c_PC :: "8 word \<Rightarrow> 64 word"
  c_ReserveLoad :: "8 word \<Rightarrow> (64 word option)"
  c_SCSR :: "8 word \<Rightarrow> SupervisorCSR"
  c_UCSR :: "8 word \<Rightarrow> UserCSR"
  c_cycles :: "8 word \<Rightarrow> 64 word"
  c_fpr :: "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"
  c_gpr :: "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"
  c_instret :: "8 word \<Rightarrow> 64 word"
  c_privilege :: "8 word \<Rightarrow> Privilege"
  c_tlb32 :: "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB32_Entry option))"
  c_tlb39 :: "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB39_Entry option))"
  c_update :: "8 word \<Rightarrow> StateDelta"
  clock :: "64 word"
  "done" :: bool
  exception :: exception
  log :: "(nat \<times> string) list"
  procID :: "8 word"
  totalCore :: nat

fun nat_to_accessType :: "nat \<Rightarrow> accessType" where
  "nat_to_accessType x =
   (if x = 0 then RISCV.Read
    else if x = 1 then RISCV.Write
    else if x = 2 then RISCV.ReadWrite
    else if x = 3 then RISCV.Execute
    else HOL.undefined)"

fun nat_to_fetchType :: "nat \<Rightarrow> fetchType" where
  "nat_to_fetchType x =
   (if x = 0 then RISCV.Instruction else if x = 1 then RISCV.Data
    else HOL.undefined)"

fun nat_to_Architecture :: "nat \<Rightarrow> Architecture" where
  "nat_to_Architecture x =
   (if x = 0 then RISCV.RV32I else if x = 1 then RISCV.RV64I else if x = 2 then RISCV.RV128I
    else HOL.undefined)"

fun nat_to_Privilege :: "nat \<Rightarrow> Privilege" where
  "nat_to_Privilege x =
   (if x = 0 then RISCV.User
    else if x = 1 then RISCV.Supervisor
    else if x = 2 then RISCV.Hypervisor
    else if x = 3 then RISCV.Machine
    else HOL.undefined)"

fun nat_to_VM_Mode :: "nat \<Rightarrow> VM_Mode" where
  "nat_to_VM_Mode x =
   (if x = 0 then RISCV.Mbare
    else if x = 1 then RISCV.Mbb
    else if x = 2 then RISCV.Mbbid
    else if x = 3 then RISCV.Sv32
    else if x = 4 then RISCV.Sv39
    else if x = 5 then RISCV.Sv48
    else if x = 6 then RISCV.Sv57
    else if x = 7 then RISCV.Sv64
    else HOL.undefined)"

fun nat_to_ExtStatus :: "nat \<Rightarrow> ExtStatus" where
  "nat_to_ExtStatus x =
   (if x = 0 then RISCV.Off
    else if x = 1 then RISCV.Initial
    else if x = 2 then RISCV.Clean
    else if x = 3 then RISCV.Dirty
    else HOL.undefined)"

fun nat_to_InterruptType :: "nat \<Rightarrow> InterruptType" where
  "nat_to_InterruptType x =
   (if x = 0 then RISCV.I_U_Software
    else if x = 1 then RISCV.I_S_Software
    else if x = 2 then RISCV.I_H_Software
    else if x = 3 then RISCV.I_M_Software
    else if x = 4 then RISCV.I_U_Timer
    else if x = 5 then RISCV.I_S_Timer
    else if x = 6 then RISCV.I_H_Timer
    else if x = 7 then RISCV.I_M_Timer
    else if x = 8 then RISCV.I_U_External
    else if x = 9 then RISCV.I_S_External
    else if x = 10 then RISCV.I_H_External
    else if x = 11 then RISCV.I_M_External
    else HOL.undefined)"

fun nat_to_ExceptionType :: "nat \<Rightarrow> ExceptionType" where
  "nat_to_ExceptionType x =
   (if x = 0 then RISCV.E_Fetch_Misaligned
    else if x = 1 then RISCV.E_Fetch_Fault
    else if x = 2 then RISCV.E_Illegal_Instr
    else if x = 3 then RISCV.E_Breakpoint
    else if x = 4 then RISCV.E_Load_Fault
    else if x = 5 then RISCV.E_AMO_Misaligned
    else if x = 6 then RISCV.E_Store_AMO_Fault
    else if x = 7 then RISCV.E_Env_Call
    else HOL.undefined)"

fun nat_to_Rounding :: "nat \<Rightarrow> Rounding" where
  "nat_to_Rounding x =
   (if x = 0 then RISCV.RNE
    else if x = 1 then RISCV.RTZ
    else if x = 2 then RISCV.RDN
    else if x = 3 then RISCV.RUP
    else if x = 4 then RISCV.RMM
    else if x = 5 then RISCV.RDYN
    else HOL.undefined)"

fun accessType_to_nat :: "accessType \<Rightarrow> nat" where
  "accessType_to_nat x =
   (case x of
       RISCV.Read => 0 | RISCV.Write => 1 | RISCV.ReadWrite => 2 | RISCV.Execute => 3)"

fun fetchType_to_nat :: "fetchType \<Rightarrow> nat" where
  "fetchType_to_nat x =
   (case x of
       RISCV.Instruction => 0 | RISCV.Data => 1)"

fun Architecture_to_nat :: "Architecture \<Rightarrow> nat" where
  "Architecture_to_nat x =
   (case x of
       RISCV.RV32I => 0 | RISCV.RV64I => 1 | RISCV.RV128I => 2)"

fun Privilege_to_nat :: "Privilege \<Rightarrow> nat" where
  "Privilege_to_nat x =
   (case x of
       RISCV.User => 0 | RISCV.Supervisor => 1 | RISCV.Hypervisor => 2 | RISCV.Machine => 3)"

fun VM_Mode_to_nat :: "VM_Mode \<Rightarrow> nat" where
  "VM_Mode_to_nat x =
   (case x of
       RISCV.Mbare => 0
     | RISCV.Mbb => 1
     | RISCV.Mbbid => 2
     | RISCV.Sv32 => 3
     | RISCV.Sv39 => 4
     | RISCV.Sv48 => 5
     | RISCV.Sv57 => 6
     | RISCV.Sv64 => 7)"

fun ExtStatus_to_nat :: "ExtStatus \<Rightarrow> nat" where
  "ExtStatus_to_nat x =
   (case x of
       RISCV.Off => 0 | RISCV.Initial => 1 | RISCV.Clean => 2 | RISCV.Dirty => 3)"

fun InterruptType_to_nat :: "InterruptType \<Rightarrow> nat" where
  "InterruptType_to_nat x =
   (case x of
       RISCV.I_U_Software => 0
     | RISCV.I_S_Software => 1
     | RISCV.I_H_Software => 2
     | RISCV.I_M_Software => 3
     | RISCV.I_U_Timer => 4
     | RISCV.I_S_Timer => 5
     | RISCV.I_H_Timer => 6
     | RISCV.I_M_Timer => 7
     | RISCV.I_U_External => 8
     | RISCV.I_S_External => 9
     | RISCV.I_H_External => 10
     | RISCV.I_M_External => 11)"

fun ExceptionType_to_nat :: "ExceptionType \<Rightarrow> nat" where
  "ExceptionType_to_nat x =
   (case x of
       RISCV.E_Fetch_Misaligned => 0
     | RISCV.E_Fetch_Fault => 1
     | RISCV.E_Illegal_Instr => 2
     | RISCV.E_Breakpoint => 3
     | RISCV.E_Load_Fault => 4
     | RISCV.E_AMO_Misaligned => 5
     | RISCV.E_Store_AMO_Fault => 6
     | RISCV.E_Env_Call => 7)"

fun Rounding_to_nat :: "Rounding \<Rightarrow> nat" where
  "Rounding_to_nat x =
   (case x of
       RISCV.RNE => 0
     | RISCV.RTZ => 1
     | RISCV.RDN => 2
     | RISCV.RUP => 3
     | RISCV.RMM => 4
     | RISCV.RDYN => 5)"

fun accessType_to_string :: "accessType \<Rightarrow> string" where
  "accessType_to_string x =
   (case x of
       RISCV.Read => ''Read''
     | RISCV.Write => ''Write''
     | RISCV.ReadWrite => ''ReadWrite''
     | RISCV.Execute => ''Execute'')"

fun fetchType_to_string :: "fetchType \<Rightarrow> string" where
  "fetchType_to_string x =
   (case x of
       RISCV.Instruction => ''Instruction'' | RISCV.Data => ''Data'')"

fun Architecture_to_string :: "Architecture \<Rightarrow> string" where
  "Architecture_to_string x =
   (case x of
       RISCV.RV32I => ''RV32I'' | RISCV.RV64I => ''RV64I'' | RISCV.RV128I => ''RV128I'')"

fun Privilege_to_string :: "Privilege \<Rightarrow> string" where
  "Privilege_to_string x =
   (case x of
       RISCV.User => ''User''
     | RISCV.Supervisor => ''Supervisor''
     | RISCV.Hypervisor => ''Hypervisor''
     | RISCV.Machine => ''Machine'')"

fun VM_Mode_to_string :: "VM_Mode \<Rightarrow> string" where
  "VM_Mode_to_string x =
   (case x of
       RISCV.Mbare => ''Mbare''
     | RISCV.Mbb => ''Mbb''
     | RISCV.Mbbid => ''Mbbid''
     | RISCV.Sv32 => ''Sv32''
     | RISCV.Sv39 => ''Sv39''
     | RISCV.Sv48 => ''Sv48''
     | RISCV.Sv57 => ''Sv57''
     | RISCV.Sv64 => ''Sv64'')"

fun ExtStatus_to_string :: "ExtStatus \<Rightarrow> string" where
  "ExtStatus_to_string x =
   (case x of
       RISCV.Off => ''Off''
     | RISCV.Initial => ''Initial''
     | RISCV.Clean => ''Clean''
     | RISCV.Dirty => ''Dirty'')"

fun InterruptType_to_string :: "InterruptType \<Rightarrow> string" where
  "InterruptType_to_string x =
   (case x of
       RISCV.I_U_Software => ''I_U_Software''
     | RISCV.I_S_Software => ''I_S_Software''
     | RISCV.I_H_Software => ''I_H_Software''
     | RISCV.I_M_Software => ''I_M_Software''
     | RISCV.I_U_Timer => ''I_U_Timer''
     | RISCV.I_S_Timer => ''I_S_Timer''
     | RISCV.I_H_Timer => ''I_H_Timer''
     | RISCV.I_M_Timer => ''I_M_Timer''
     | RISCV.I_U_External => ''I_U_External''
     | RISCV.I_S_External => ''I_S_External''
     | RISCV.I_H_External => ''I_H_External''
     | RISCV.I_M_External => ''I_M_External'')"

fun ExceptionType_to_string :: "ExceptionType \<Rightarrow> string" where
  "ExceptionType_to_string x =
   (case x of
       RISCV.E_Fetch_Misaligned => ''E_Fetch_Misaligned''
     | RISCV.E_Fetch_Fault => ''E_Fetch_Fault''
     | RISCV.E_Illegal_Instr => ''E_Illegal_Instr''
     | RISCV.E_Breakpoint => ''E_Breakpoint''
     | RISCV.E_Load_Fault => ''E_Load_Fault''
     | RISCV.E_AMO_Misaligned => ''E_AMO_Misaligned''
     | RISCV.E_Store_AMO_Fault => ''E_Store_AMO_Fault''
     | RISCV.E_Env_Call => ''E_Env_Call'')"

fun Rounding_to_string :: "Rounding \<Rightarrow> string" where
  "Rounding_to_string x =
   (case x of
       RISCV.RNE => ''RNE''
     | RISCV.RTZ => ''RTZ''
     | RISCV.RDN => ''RDN''
     | RISCV.RUP => ''RUP''
     | RISCV.RMM => ''RMM''
     | RISCV.RDYN => ''RDYN'')"

fun string_to_accessType :: "string \<Rightarrow> accessType" where
  "string_to_accessType x =
   (if x = ''Read'' then RISCV.Read
    else if x = ''Write'' then RISCV.Write
    else if x = ''ReadWrite'' then RISCV.ReadWrite
    else if x = ''Execute'' then RISCV.Execute
    else HOL.undefined)"

fun string_to_fetchType :: "string \<Rightarrow> fetchType" where
  "string_to_fetchType x =
   (if x = ''Instruction'' then RISCV.Instruction else if x = ''Data'' then RISCV.Data
    else HOL.undefined)"

fun string_to_Architecture :: "string \<Rightarrow> Architecture" where
  "string_to_Architecture x =
   (if x = ''RV32I'' then RISCV.RV32I
    else if x = ''RV64I'' then RISCV.RV64I
    else if x = ''RV128I'' then RISCV.RV128I
    else HOL.undefined)"

fun string_to_Privilege :: "string \<Rightarrow> Privilege" where
  "string_to_Privilege x =
   (if x = ''User'' then RISCV.User
    else if x = ''Supervisor'' then RISCV.Supervisor
    else if x = ''Hypervisor'' then RISCV.Hypervisor
    else if x = ''Machine'' then RISCV.Machine
    else HOL.undefined)"

fun string_to_VM_Mode :: "string \<Rightarrow> VM_Mode" where
  "string_to_VM_Mode x =
   (if x = ''Mbare'' then RISCV.Mbare
    else if x = ''Mbb'' then RISCV.Mbb
    else if x = ''Mbbid'' then RISCV.Mbbid
    else if x = ''Sv32'' then RISCV.Sv32
    else if x = ''Sv39'' then RISCV.Sv39
    else if x = ''Sv48'' then RISCV.Sv48
    else if x = ''Sv57'' then RISCV.Sv57
    else if x = ''Sv64'' then RISCV.Sv64
    else HOL.undefined)"

fun string_to_ExtStatus :: "string \<Rightarrow> ExtStatus" where
  "string_to_ExtStatus x =
   (if x = ''Off'' then RISCV.Off
    else if x = ''Initial'' then RISCV.Initial
    else if x = ''Clean'' then RISCV.Clean
    else if x = ''Dirty'' then RISCV.Dirty
    else HOL.undefined)"

fun string_to_InterruptType :: "string \<Rightarrow> InterruptType" where
  "string_to_InterruptType x =
   (if x = ''I_U_Software'' then RISCV.I_U_Software
    else if x = ''I_S_Software'' then RISCV.I_S_Software
    else if x = ''I_H_Software'' then RISCV.I_H_Software
    else if x = ''I_M_Software'' then RISCV.I_M_Software
    else if x = ''I_U_Timer'' then RISCV.I_U_Timer
    else if x = ''I_S_Timer'' then RISCV.I_S_Timer
    else if x = ''I_H_Timer'' then RISCV.I_H_Timer
    else if x = ''I_M_Timer'' then RISCV.I_M_Timer
    else if x = ''I_U_External'' then RISCV.I_U_External
    else if x = ''I_S_External'' then RISCV.I_S_External
    else if x = ''I_H_External'' then RISCV.I_H_External
    else if x = ''I_M_External'' then RISCV.I_M_External
    else HOL.undefined)"

fun string_to_ExceptionType :: "string \<Rightarrow> ExceptionType" where
  "string_to_ExceptionType x =
   (if x = ''E_Fetch_Misaligned'' then RISCV.E_Fetch_Misaligned
    else if x = ''E_Fetch_Fault'' then RISCV.E_Fetch_Fault
    else if x = ''E_Illegal_Instr'' then RISCV.E_Illegal_Instr
    else if x = ''E_Breakpoint'' then RISCV.E_Breakpoint
    else if x = ''E_Load_Fault'' then RISCV.E_Load_Fault
    else if x = ''E_AMO_Misaligned'' then RISCV.E_AMO_Misaligned
    else if x = ''E_Store_AMO_Fault'' then RISCV.E_Store_AMO_Fault
    else if x = ''E_Env_Call'' then RISCV.E_Env_Call
    else HOL.undefined)"

fun string_to_Rounding :: "string \<Rightarrow> Rounding" where
  "string_to_Rounding x =
   (if x = ''RNE'' then RISCV.RNE
    else if x = ''RTZ'' then RISCV.RTZ
    else if x = ''RDN'' then RISCV.RDN
    else if x = ''RUP'' then RISCV.RUP
    else if x = ''RMM'' then RISCV.RMM
    else if x = ''RDYN'' then RISCV.RDYN
    else HOL.undefined)"

fun boolify'32 :: "32 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'32 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31))"

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("raise'exception",
   close
     (var("e",@{typ exception}),
      close
        (var("state",qTy),
         tp[lx(@{typ 'a}),
            ite(eq(call("state.exception",@{typ exception},var("state",qTy),@{theory}),
                   Term.Const(@{const_name "NoException"},@{typ exception})),
                rupd("state.exception",tp[var("state",qTy),var("e",@{typ exception})],@{theory}),
                var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("BYTE",lw(0,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("HALFWORD",lw(1,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("WORD",lw(3,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("DOUBLEWORD",lw(7,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("archBase",
   close
     (var("a",@{typ Architecture}),
      cs(var("a",@{typ Architecture}),
         [(lc("RV32I","Architecture",@{theory}),lw(0,2)),
          (lc("RV64I","Architecture",@{theory}),lw(2,2)),
          (lc("RV128I","Architecture",@{theory}),lw(3,2))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("architecture",
   close
     (var_w("ab",2),
      close
        (var("state",qTy),
         itb([(eq(var_w("ab",2),lw(0,2)),tp[lc("RV32I","Architecture",@{theory}),var("state",qTy)]),
              (eq(var_w("ab",2),lw(2,2)),tp[lc("RV64I","Architecture",@{theory}),var("state",qTy)]),
              (eq(var_w("ab",2),lw(3,2)),tp[lc("RV128I","Architecture",@{theory}),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (Architecture \<times> state)"},
                   call
                     ("exception.UNDEFINED",@{typ exception},
                      cc[ls"Unknown architecture: ",
                         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("ab",2)))],@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("archName",
   close
     (var("a",@{typ Architecture}),
      cs(var("a",@{typ Architecture}),
         [(lc("RV32I","Architecture",@{theory}),ls"RV32I"),
          (lc("RV64I","Architecture",@{theory}),ls"RV64I"),
          (lc("RV128I","Architecture",@{theory}),ls"RV128I")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("privLevel",
   close
     (var("p",@{typ Privilege}),
      cs(var("p",@{typ Privilege}),
         [(lc("User","Privilege",@{theory}),lw(0,2)),
          (lc("Supervisor","Privilege",@{theory}),lw(1,2)),
          (lc("Hypervisor","Privilege",@{theory}),lw(2,2)),
          (lc("Machine","Privilege",@{theory}),lw(3,2))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("privilege",
   close
     (var_w("p",2),
      itb([(eq(var_w("p",2),lw(0,2)),lc("User","Privilege",@{theory})),
           (eq(var_w("p",2),lw(1,2)),lc("Supervisor","Privilege",@{theory})),
           (eq(var_w("p",2),lw(2,2)),lc("Hypervisor","Privilege",@{theory})),
           (eq(var_w("p",2),lw(3,2)),lc("Machine","Privilege",@{theory}))],lx @{typ Privilege})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("privName",
   close
     (var("p",@{typ Privilege}),
      cs(var("p",@{typ Privilege}),
         [(lc("User","Privilege",@{theory}),ls"U"),(lc("Supervisor","Privilege",@{theory}),ls"S"),
          (lc("Hypervisor","Privilege",@{theory}),ls"H"),(lc("Machine","Privilege",@{theory}),ls"M")],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("vmType",
   close
     (var_w("vm",5),
      close
        (var("state",qTy),
         itb([(eq(var_w("vm",5),lw(0,5)),tp[lc("Mbare","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(1,5)),tp[lc("Mbb","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(2,5)),tp[lc("Mbbid","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(8,5)),tp[lc("Sv32","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(9,5)),tp[lc("Sv39","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(10,5)),tp[lc("Sv48","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(11,5)),tp[lc("Sv57","VM_Mode",@{theory}),var("state",qTy)]),
              (eq(var_w("vm",5),lw(12,5)),tp[lc("Sv64","VM_Mode",@{theory}),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (VM_Mode \<times> state)"},
                   call
                     ("exception.UNDEFINED",@{typ exception},
                      cc[ls"Unknown address translation mode: ",
                         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("vm",5)))],@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isValidVM",
   close
     (var_w("vm",5),
      bop(Or,eq(var_w("vm",5),lw(0,5)),
          bop(Or,eq(var_w("vm",5),lw(1,5)),
              bop(Or,eq(var_w("vm",5),lw(2,5)),
                  bop(Or,eq(var_w("vm",5),lw(8,5)),
                      bop(Or,eq(var_w("vm",5),lw(9,5)),
                          bop(Or,eq(var_w("vm",5),lw(10,5)),
                              bop(Or,eq(var_w("vm",5),lw(11,5)),eq(var_w("vm",5),lw(12,5)))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("vmMode",
   close
     (var("vm",@{typ VM_Mode}),
      cs(var("vm",@{typ VM_Mode}),
         [(lc("Mbare","VM_Mode",@{theory}),lw(0,5)),(lc("Mbb","VM_Mode",@{theory}),lw(1,5)),
          (lc("Mbbid","VM_Mode",@{theory}),lw(2,5)),(lc("Sv32","VM_Mode",@{theory}),lw(8,5)),
          (lc("Sv39","VM_Mode",@{theory}),lw(9,5)),(lc("Sv48","VM_Mode",@{theory}),lw(10,5)),
          (lc("Sv57","VM_Mode",@{theory}),lw(11,5)),(lc("Sv64","VM_Mode",@{theory}),lw(12,5))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("vmModeName",
   close
     (var("vm",@{typ VM_Mode}),
      cs(var("vm",@{typ VM_Mode}),
         [(lc("Mbare","VM_Mode",@{theory}),ls"Mbare"),(lc("Mbb","VM_Mode",@{theory}),ls"Mbb"),
          (lc("Mbbid","VM_Mode",@{theory}),ls"Mbbid"),(lc("Sv32","VM_Mode",@{theory}),ls"Sv32"),
          (lc("Sv39","VM_Mode",@{theory}),ls"Sv39"),(lc("Sv48","VM_Mode",@{theory}),ls"Sv48"),
          (lc("Sv57","VM_Mode",@{theory}),ls"Sv57"),(lc("Sv64","VM_Mode",@{theory}),ls"Sv64")],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ext_status",
   close
     (var("e",@{typ ExtStatus}),
      cs(var("e",@{typ ExtStatus}),
         [(lc("Off","ExtStatus",@{theory}),lw(0,2)),(lc("Initial","ExtStatus",@{theory}),lw(1,2)),
          (lc("Clean","ExtStatus",@{theory}),lw(2,2)),(lc("Dirty","ExtStatus",@{theory}),lw(3,2))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("extStatus",
   close
     (var_w("e",2),
      itb([(eq(var_w("e",2),lw(0,2)),lc("Off","ExtStatus",@{theory})),
           (eq(var_w("e",2),lw(1,2)),lc("Initial","ExtStatus",@{theory})),
           (eq(var_w("e",2),lw(2,2)),lc("Clean","ExtStatus",@{theory})),
           (eq(var_w("e",2),lw(3,2)),lc("Dirty","ExtStatus",@{theory}))],lx @{typ ExtStatus})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("extStatusName",
   close
     (var("e",@{typ ExtStatus}),
      cs(var("e",@{typ ExtStatus}),
         [(lc("Off","ExtStatus",@{theory}),ls"Off"),
          (lc("Initial","ExtStatus",@{theory}),ls"Initial"),
          (lc("Clean","ExtStatus",@{theory}),ls"Clean"),
          (lc("Dirty","ExtStatus",@{theory}),ls"Dirty")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("interruptIndex",
   close
     (var("i",@{typ InterruptType}),
      cs(var("i",@{typ InterruptType}),
         [(lc("I_U_Software","InterruptType",@{theory}),lw(0,4)),
          (lc("I_S_Software","InterruptType",@{theory}),lw(1,4)),
          (lc("I_H_Software","InterruptType",@{theory}),lw(2,4)),
          (lc("I_M_Software","InterruptType",@{theory}),lw(3,4)),
          (lc("I_U_Timer","InterruptType",@{theory}),lw(4,4)),
          (lc("I_S_Timer","InterruptType",@{theory}),lw(5,4)),
          (lc("I_H_Timer","InterruptType",@{theory}),lw(6,4)),
          (lc("I_M_Timer","InterruptType",@{theory}),lw(7,4)),
          (lc("I_U_External","InterruptType",@{theory}),lw(8,4)),
          (lc("I_S_External","InterruptType",@{theory}),lw(9,4)),
          (lc("I_H_External","InterruptType",@{theory}),lw(10,4)),
          (lc("I_M_External","InterruptType",@{theory}),lw(11,4))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("excCode",
   close
     (var("e",@{typ ExceptionType}),
      cs(var("e",@{typ ExceptionType}),
         [(lc("E_Fetch_Misaligned","ExceptionType",@{theory}),lw(0,4)),
          (lc("E_Fetch_Fault","ExceptionType",@{theory}),lw(1,4)),
          (lc("E_Illegal_Instr","ExceptionType",@{theory}),lw(2,4)),
          (lc("E_Breakpoint","ExceptionType",@{theory}),lw(3,4)),
          (lc("E_Load_Fault","ExceptionType",@{theory}),lw(5,4)),
          (lc("E_AMO_Misaligned","ExceptionType",@{theory}),lw(6,4)),
          (lc("E_Store_AMO_Fault","ExceptionType",@{theory}),lw(7,4)),
          (lc("E_Env_Call","ExceptionType",@{theory}),lw(8,4))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("excType",
   close
     (var_w("e",4),
      close
        (var("state",qTy),
         itb([(eq(var_w("e",4),lw(0,4)),
               tp[lc("E_Fetch_Misaligned","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(1,4)),
               tp[lc("E_Fetch_Fault","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(2,4)),
               tp[lc("E_Illegal_Instr","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(3,4)),
               tp[lc("E_Breakpoint","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(5,4)),
               tp[lc("E_Load_Fault","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(6,4)),
               tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(7,4)),
               tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var("state",qTy)]),
              (eq(var_w("e",4),lw(8,4)),
               tp[lc("E_Env_Call","ExceptionType",@{theory}),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (ExceptionType \<times> state)"},
                   call
                     ("exception.UNDEFINED",@{typ exception},
                      cc[ls"Unknown exception: ",
                         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("e",4)))],@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("excName",
   close
     (var("e",@{typ ExceptionType}),
      cs(var("e",@{typ ExceptionType}),
         [(lc("E_Fetch_Misaligned","ExceptionType",@{theory}),ls"MISALIGNED_FETCH"),
          (lc("E_Fetch_Fault","ExceptionType",@{theory}),ls"FAULT_FETCH"),
          (lc("E_Illegal_Instr","ExceptionType",@{theory}),ls"ILLEGAL_INSTRUCTION"),
          (lc("E_Breakpoint","ExceptionType",@{theory}),ls"BREAKPOINT"),
          (lc("E_Load_Fault","ExceptionType",@{theory}),ls"FAULT_LOAD"),
          (lc("E_AMO_Misaligned","ExceptionType",@{theory}),ls"MISALIGNED_AMO"),
          (lc("E_Store_AMO_Fault","ExceptionType",@{theory}),ls"FAULT_STORE_AMO"),
          (lc("E_Env_Call","ExceptionType",@{theory}),ls"EnvCall")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'misa",
   close
     (var_w("x",64),
      record
        ("misa",
         [bop(Bit,var_w("x",64),ln 0),ex(var_w("x",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 5),bop(Bit,var_w("x",64),ln 8),
          bop(Bit,var_w("x",64),ln 12),bop(Bit,var_w("x",64),ln 13),bop(Bit,var_w("x",64),ln 18),
          bop(Bit,var_w("x",64),ln 20),bop(Bit,var_w("x",64),ln 23),
          cc[ex(var_w("x",64),ln 2,ln 1,(Word_Lib.mk_wordT 2)),ex(var_w("x",64),ln 4,ln 4,w1),
             ex(var_w("x",64),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 11,ln 9,(Word_Lib.mk_wordT 3)),ex(var_w("x",64),ln 17,ln 14,w4),
             ex(var_w("x",64),ln 19,ln 19,w1),ex(var_w("x",64),ln 22,ln 21,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 61,ln 24,(Word_Lib.mk_wordT 38))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'misa",
   close
     (var("x",@{typ misa}),
      let'
        (var_w("misa'rst",53),
         call("misa.misa'rst",(Word_Lib.mk_wordT 53),var("x",@{typ misa}),@{theory}),
         cc[call("misa.ArchBase",(Word_Lib.mk_wordT 2),var("x",@{typ misa}),@{theory}),
            ex(var_w("misa'rst",53),ln 37,ln 0,(Word_Lib.mk_wordT 38)),
            mop(Cast w1,call("misa.X",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 39,ln 38,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("misa.U",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 40,ln 40,w1),
            mop(Cast w1,call("misa.S",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 44,ln 41,w4),
            mop(Cast w1,call("misa.N",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            mop(Cast w1,call("misa.M",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 47,ln 45,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("misa.I",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 49,ln 48,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("misa.F",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 50,ln 50,w1),
            mop(Cast w1,call("misa.D",HOLogic.boolT,var("x",@{typ misa}),@{theory})),
            ex(var_w("misa'rst",53),ln 52,ln 51,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("misa.A",HOLogic.boolT,var("x",@{typ misa}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'misa",
   close(tp[var_a w64,var("x",@{typ misa})],call("reg'misa",w64,var("x",@{typ misa}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'misa",
   close(tp[var_a @{typ misa},var_w("x",64)],call("rec'misa",@{typ misa},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isa_to_32",
   close
     (var_w("v",64),
      cc[ex(var_w("v",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),lw(0,4),
         ex(var_w("v",64),ln 25,ln 0,(Word_Lib.mk_wordT 26))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isa_of_32",
   close
     (var_w("v",32),
      cc[ex(var_w("v",32),ln 31,ln 30,(Word_Lib.mk_wordT 2)),lw(0,36),
         ex(var_w("v",32),ln 25,ln 0,(Word_Lib.mk_wordT 26))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("MVENDORID",lw(0,64))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("MARCHID",lw(0,64))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("MIMPID",lw(0,64))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mstatus",
   close
     (var_w("x",64),
      record
        ("mstatus",
         [ex(var_w("x",64),ln 14,ln 13,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",64),ln 2),
          bop(Bit,var_w("x",64),ln 6),ex(var_w("x",64),ln 10,ln 9,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 7),
          ex(var_w("x",64),ln 12,ln 11,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",64),ln 17),
          bop(Bit,var_w("x",64),ln 19),bop(Bit,var_w("x",64),ln 18),bop(Bit,var_w("x",64),ln 63),
          bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),bop(Bit,var_w("x",64),ln 8),
          bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          ex(var_w("x",64),ln 28,ln 24,(Word_Lib.mk_wordT 5)),
          ex(var_w("x",64),ln 16,ln 15,(Word_Lib.mk_wordT 2)),
          cc[ex(var_w("x",64),ln 23,ln 20,w4),ex(var_w("x",64),ln 62,ln 29,(Word_Lib.mk_wordT 34))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mstatus",
   close
     (var("x",@{typ mstatus}),
      let'
        (var_w("mstatus'rst",38),
         call("mstatus.mstatus'rst",(Word_Lib.mk_wordT 38),var("x",@{typ mstatus}),@{theory}),
         cc[mop(Cast w1,call("mstatus.M_SD",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            ex(var_w("mstatus'rst",38),ln 33,ln 0,(Word_Lib.mk_wordT 34)),
            call("mstatus.M_VM",(Word_Lib.mk_wordT 5),var("x",@{typ mstatus}),@{theory}),
            ex(var_w("mstatus'rst",38),ln 37,ln 34,w4),
            mop(Cast w1,call("mstatus.M_MXR",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_PUM",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_MPRV",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            call("mstatus.M_XS",(Word_Lib.mk_wordT 2),var("x",@{typ mstatus}),@{theory}),
            call("mstatus.M_FS",(Word_Lib.mk_wordT 2),var("x",@{typ mstatus}),@{theory}),
            call("mstatus.M_MPP",(Word_Lib.mk_wordT 2),var("x",@{typ mstatus}),@{theory}),
            call("mstatus.M_HPP",(Word_Lib.mk_wordT 2),var("x",@{typ mstatus}),@{theory}),
            mop(Cast w1,call("mstatus.M_SPP",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_MPIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_HPIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_SPIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_UPIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_MIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_HIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_SIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory})),
            mop(Cast w1,call("mstatus.M_UIE",HOLogic.boolT,var("x",@{typ mstatus}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mstatus",
   close
     (tp[var_a w64,var("x",@{typ mstatus})],
      call("reg'mstatus",w64,var("x",@{typ mstatus}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mstatus",
   close
     (tp[var_a @{typ mstatus},var_w("x",64)],
      call("rec'mstatus",@{typ mstatus},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("status_to_32",
   close
     (var_w("v",64),
      cc[mop(Cast w1,bop(Bit,var_w("v",64),ln 63)),lw(0,2),
         ex(var_w("v",64),ln 28,ln 0,(Word_Lib.mk_wordT 29))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("status_of_32",
   close
     (var_w("v",32),
      cc[mop(Cast w1,bop(Bit,var_w("v",32),ln 31)),lw(0,32),
         ex(var_w("v",32),ln 30,ln 0,(Word_Lib.mk_wordT 31))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'medeleg",
   close
     (var_w("x",64),
      record
        ("medeleg",
         [bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 1),
          bop(Bit,var_w("x",64),ln 10),bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 4),bop(Bit,var_w("x",64),ln 11),bop(Bit,var_w("x",64),ln 7),
          bop(Bit,var_w("x",64),ln 6),bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 8),
          ex(var_w("x",64),ln 63,ln 12,(Word_Lib.mk_wordT 52))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'medeleg",
   close
     (var("x",@{typ medeleg}),
      cc[call("medeleg.medeleg'rst",(Word_Lib.mk_wordT 52),var("x",@{typ medeleg}),@{theory}),
         mop(Cast w1,call("medeleg.M_MEnvCall",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_HEnvCall",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_SEnvCall",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_UEnvCall",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_SAMO_Access",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_SAMO_Addr",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_Load_Access",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,
             call("medeleg.M_Load_Addr_Align",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_Breakpoint",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_Illegal_Instr",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,call("medeleg.M_Fetch_Fault",HOLogic.boolT,var("x",@{typ medeleg}),@{theory})),
         mop(Cast w1,
             call("medeleg.M_Fetch_Addr_Align",HOLogic.boolT,var("x",@{typ medeleg}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'medeleg",
   close
     (tp[var_a w64,var("x",@{typ medeleg})],
      call("reg'medeleg",w64,var("x",@{typ medeleg}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'medeleg",
   close
     (tp[var_a @{typ medeleg},var_w("x",64)],
      call("rec'medeleg",@{typ medeleg},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mideleg",
   close
     (var_w("x",64),
      record
        ("mideleg",
         [bop(Bit,var_w("x",64),ln 10),bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 6),
          bop(Bit,var_w("x",64),ln 11),bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 7),
          bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          ex(var_w("x",64),ln 63,ln 12,(Word_Lib.mk_wordT 52))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mideleg",
   close
     (var("x",@{typ mideleg}),
      cc[call("mideleg.mideleg'rst",(Word_Lib.mk_wordT 52),var("x",@{typ mideleg}),@{theory}),
         mop(Cast w1,call("mideleg.M_MEIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_HEIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_SEIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_UEIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_MTIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_HTIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_STIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_UTIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_MSIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_HSIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_SSIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory})),
         mop(Cast w1,call("mideleg.M_USIP",HOLogic.boolT,var("x",@{typ mideleg}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mideleg",
   close
     (tp[var_a w64,var("x",@{typ mideleg})],
      call("reg'mideleg",w64,var("x",@{typ mideleg}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mideleg",
   close
     (tp[var_a @{typ mideleg},var_w("x",64)],
      call("rec'mideleg",@{typ mideleg},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mip",
   close
     (var_w("x",64),
      record
        ("mip",
         [bop(Bit,var_w("x",64),ln 10),bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 6),
          bop(Bit,var_w("x",64),ln 11),bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 7),
          bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          ex(var_w("x",64),ln 63,ln 12,(Word_Lib.mk_wordT 52))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mip",
   close
     (var("x",@{typ mip}),
      cc[call("mip.mip'rst",(Word_Lib.mk_wordT 52),var("x",@{typ mip}),@{theory}),
         mop(Cast w1,call("mip.M_MEIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_HEIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_SEIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_UEIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_MTIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_HTIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_STIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_UTIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_MSIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_HSIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_SSIP",HOLogic.boolT,var("x",@{typ mip}),@{theory})),
         mop(Cast w1,call("mip.M_USIP",HOLogic.boolT,var("x",@{typ mip}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mip",
   close(tp[var_a w64,var("x",@{typ mip})],call("reg'mip",w64,var("x",@{typ mip}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mip",
   close(tp[var_a @{typ mip},var_w("x",64)],call("rec'mip",@{typ mip},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ip_to_32",close(var_w("v",64),ex(var_w("v",64),ln 31,ln 0,w32)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ip_of_32",close(var_w("v",32),mop(Cast w64,ex(var_w("v",32),ln 11,ln 0,(Word_Lib.mk_wordT 12)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mie",
   close
     (var_w("x",64),
      record
        ("mie",
         [bop(Bit,var_w("x",64),ln 10),bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 6),
          bop(Bit,var_w("x",64),ln 11),bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 7),
          bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          ex(var_w("x",64),ln 63,ln 12,(Word_Lib.mk_wordT 52))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mie",
   close
     (var("x",@{typ mie}),
      cc[call("mie.mie'rst",(Word_Lib.mk_wordT 52),var("x",@{typ mie}),@{theory}),
         mop(Cast w1,call("mie.M_MEIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_HEIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_SEIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_UEIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_MTIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_HTIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_STIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_UTIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_MSIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_HSIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_SSIE",HOLogic.boolT,var("x",@{typ mie}),@{theory})),
         mop(Cast w1,call("mie.M_USIE",HOLogic.boolT,var("x",@{typ mie}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mie",
   close(tp[var_a w64,var("x",@{typ mie})],call("reg'mie",w64,var("x",@{typ mie}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mie",
   close(tp[var_a @{typ mie},var_w("x",64)],call("rec'mie",@{typ mie},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ie_to_32",close(var_w("v",64),ex(var_w("v",64),ln 31,ln 0,w32)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ie_of_32",close(var_w("v",32),mop(Cast w64,ex(var_w("v",32),ln 31,ln 0,w32))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mcounteren",
   close
     (var_w("x",64),
      record
        ("mcounteren",
         [bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 1),
          ex(var_w("x",64),ln 63,ln 3,(Word_Lib.mk_wordT 61))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mcounteren",
   close
     (var("x",@{typ mcounteren}),
      cc[call
           ("mcounteren.mcounteren'rst",(Word_Lib.mk_wordT 61),var("x",@{typ mcounteren}),@{theory}),
         mop(Cast w1,call("mcounteren.M_IR",HOLogic.boolT,var("x",@{typ mcounteren}),@{theory})),
         mop(Cast w1,call("mcounteren.M_TM",HOLogic.boolT,var("x",@{typ mcounteren}),@{theory})),
         mop(Cast w1,call("mcounteren.M_CY",HOLogic.boolT,var("x",@{typ mcounteren}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mcounteren",
   close
     (tp[var_a w64,var("x",@{typ mcounteren})],
      call("reg'mcounteren",w64,var("x",@{typ mcounteren}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mcounteren",
   close
     (tp[var_a @{typ mcounteren},var_w("x",64)],
      call("rec'mcounteren",@{typ mcounteren},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'mcause",
   close
     (var_w("x",64),
      record
        ("mcause",
         [ex(var_w("x",64),ln 62,ln 0,(Word_Lib.mk_wordT 63)),bop(Bit,var_w("x",64),ln 63)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'mcause",
   close
     (var("x",@{typ mcause}),
      cc[mop(Cast w1,call("mcause.M_Intr",HOLogic.boolT,var("x",@{typ mcause}),@{theory})),
         call("mcause.M_ExcCause",(Word_Lib.mk_wordT 63),var("x",@{typ mcause}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'mcause",
   close
     (tp[var_a w64,var("x",@{typ mcause})],call("reg'mcause",w64,var("x",@{typ mcause}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'mcause",
   close
     (tp[var_a @{typ mcause},var_w("x",64)],call("rec'mcause",@{typ mcause},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("cause_to_32",
   close
     (var_w("v",64),
      cc[mop(Cast w1,bop(Bit,var_w("v",64),ln 63)),
         ex(var_w("v",64),ln 30,ln 0,(Word_Lib.mk_wordT 31))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("cause_of_32",
   close
     (var_w("v",32),
      cc[mop(Cast w1,bop(Bit,var_w("v",32),ln 31)),lw(0,32),
         ex(var_w("v",32),ln 30,ln 0,(Word_Lib.mk_wordT 31))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sstatus",
   close
     (var_w("x",64),
      record
        ("sstatus",
         [ex(var_w("x",64),ln 14,ln 13,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",64),ln 18),
          bop(Bit,var_w("x",64),ln 63),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          ex(var_w("x",64),ln 16,ln 15,(Word_Lib.mk_wordT 2)),
          cc[ex(var_w("x",64),ln 3,ln 2,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 7,ln 6,(Word_Lib.mk_wordT 2)),ex(var_w("x",64),ln 12,ln 9,w4),
             ex(var_w("x",64),ln 17,ln 17,w1),ex(var_w("x",64),ln 62,ln 19,(Word_Lib.mk_wordT 44))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sstatus",
   close
     (var("x",@{typ sstatus}),
      let'
        (var_w("sstatus'rst",53),
         call("sstatus.sstatus'rst",(Word_Lib.mk_wordT 53),var("x",@{typ sstatus}),@{theory}),
         cc[mop(Cast w1,call("sstatus.S_SD",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            ex(var_w("sstatus'rst",53),ln 43,ln 0,(Word_Lib.mk_wordT 44)),
            mop(Cast w1,call("sstatus.S_PUM",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            ex(var_w("sstatus'rst",53),ln 44,ln 44,w1),
            call("sstatus.S_XS",(Word_Lib.mk_wordT 2),var("x",@{typ sstatus}),@{theory}),
            call("sstatus.S_FS",(Word_Lib.mk_wordT 2),var("x",@{typ sstatus}),@{theory}),
            ex(var_w("sstatus'rst",53),ln 48,ln 45,w4),
            mop(Cast w1,call("sstatus.S_SPP",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            ex(var_w("sstatus'rst",53),ln 50,ln 49,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sstatus.S_SPIE",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            mop(Cast w1,call("sstatus.S_UPIE",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            ex(var_w("sstatus'rst",53),ln 52,ln 51,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sstatus.S_SIE",HOLogic.boolT,var("x",@{typ sstatus}),@{theory})),
            mop(Cast w1,call("sstatus.S_UIE",HOLogic.boolT,var("x",@{typ sstatus}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sstatus",
   close
     (tp[var_a w64,var("x",@{typ sstatus})],
      call("reg'sstatus",w64,var("x",@{typ sstatus}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sstatus",
   close
     (tp[var_a @{typ sstatus},var_w("x",64)],
      call("rec'sstatus",@{typ sstatus},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_sstatus",
   close
     (var("v",@{typ mstatus}),
      rupd
        ("sstatus.S_UIE",
         tp[rupd
              ("sstatus.S_SIE",
               tp[rupd
                    ("sstatus.S_UPIE",
                     tp[rupd
                          ("sstatus.S_SPIE",
                           tp[rupd
                                ("sstatus.S_SPP",
                                 tp[rupd
                                      ("sstatus.S_FS",
                                       tp[rupd
                                            ("sstatus.S_XS",
                                             tp[rupd
                                                  ("sstatus.S_PUM",
                                                   tp[rupd
                                                        ("sstatus.S_SD",
                                                         tp[call
                                                              ("rec'sstatus",@{typ sstatus},
                                                               lw(0,64),@{theory}),
                                                            call
                                                              ("mstatus.M_SD",HOLogic.boolT,
                                                               var("v",@{typ mstatus}),@{theory})],
                                                         @{theory}),
                                                      call
                                                        ("mstatus.M_PUM",HOLogic.boolT,
                                                         var("v",@{typ mstatus}),@{theory})],
                                                   @{theory}),
                                                call
                                                  ("mstatus.M_XS",(Word_Lib.mk_wordT 2),
                                                   var("v",@{typ mstatus}),@{theory})],@{theory}),
                                          call
                                            ("mstatus.M_FS",(Word_Lib.mk_wordT 2),
                                             var("v",@{typ mstatus}),@{theory})],@{theory}),
                                    call
                                      ("mstatus.M_SPP",HOLogic.boolT,var("v",@{typ mstatus}),
                                       @{theory})],@{theory}),
                              call("mstatus.M_SPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                           @{theory}),
                        call("mstatus.M_UPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                     @{theory}),
                  call("mstatus.M_SIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],@{theory}),
            call("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_sstatus",
   close
     (tp[var("v",@{typ sstatus}),var("orig",@{typ mstatus})],
      rupd
        ("mstatus.M_UIE",
         tp[rupd
              ("mstatus.M_SIE",
               tp[rupd
                    ("mstatus.M_UPIE",
                     tp[rupd
                          ("mstatus.M_SPIE",
                           tp[rupd
                                ("mstatus.M_SPP",
                                 tp[rupd
                                      ("mstatus.M_FS",
                                       tp[rupd
                                            ("mstatus.M_XS",
                                             tp[rupd
                                                  ("mstatus.M_PUM",
                                                   tp[rupd
                                                        ("mstatus.M_SD",
                                                         tp[call
                                                              ("rec'mstatus",@{typ mstatus},
                                                               call
                                                                 ("reg'mstatus",w64,
                                                                  var("orig",@{typ mstatus}),
                                                                  @{theory}),@{theory}),
                                                            call
                                                              ("sstatus.S_SD",HOLogic.boolT,
                                                               var("v",@{typ sstatus}),@{theory})],
                                                         @{theory}),
                                                      call
                                                        ("sstatus.S_PUM",HOLogic.boolT,
                                                         var("v",@{typ sstatus}),@{theory})],
                                                   @{theory}),
                                                call
                                                  ("sstatus.S_XS",(Word_Lib.mk_wordT 2),
                                                   var("v",@{typ sstatus}),@{theory})],@{theory}),
                                          call
                                            ("sstatus.S_FS",(Word_Lib.mk_wordT 2),
                                             var("v",@{typ sstatus}),@{theory})],@{theory}),
                                    call
                                      ("sstatus.S_SPP",HOLogic.boolT,var("v",@{typ sstatus}),
                                       @{theory})],@{theory}),
                              call("sstatus.S_SPIE",HOLogic.boolT,var("v",@{typ sstatus}),@{theory})],
                           @{theory}),
                        call("sstatus.S_UPIE",HOLogic.boolT,var("v",@{typ sstatus}),@{theory})],
                     @{theory}),
                  call("sstatus.S_SIE",HOLogic.boolT,var("v",@{typ sstatus}),@{theory})],@{theory}),
            call("sstatus.S_UIE",HOLogic.boolT,var("v",@{typ sstatus}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sedeleg",
   close
     (var_w("x",64),
      record
        ("sedeleg",
         [bop(Bit,var_w("x",64),ln 3),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 1),
          bop(Bit,var_w("x",64),ln 2),bop(Bit,var_w("x",64),ln 5),bop(Bit,var_w("x",64),ln 4),
          bop(Bit,var_w("x",64),ln 7),bop(Bit,var_w("x",64),ln 6),bop(Bit,var_w("x",64),ln 9),
          bop(Bit,var_w("x",64),ln 8),ex(var_w("x",64),ln 63,ln 10,(Word_Lib.mk_wordT 54))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sedeleg",
   close
     (var("x",@{typ sedeleg}),
      cc[call("sedeleg.sedeleg'rst",(Word_Lib.mk_wordT 54),var("x",@{typ sedeleg}),@{theory}),
         mop(Cast w1,call("sedeleg.S_SEnvCall",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_UEnvCall",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_SAMO_Access",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_SAMO_Addr",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_Load_Access",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,
             call("sedeleg.S_Load_Addr_Align",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_Breakpoint",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_Illegal_Instr",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,call("sedeleg.S_Fetch_Fault",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory})),
         mop(Cast w1,
             call("sedeleg.S_Fetch_Addr_Align",HOLogic.boolT,var("x",@{typ sedeleg}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sedeleg",
   close
     (tp[var_a w64,var("x",@{typ sedeleg})],
      call("reg'sedeleg",w64,var("x",@{typ sedeleg}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sedeleg",
   close
     (tp[var_a @{typ sedeleg},var_w("x",64)],
      call("rec'sedeleg",@{typ sedeleg},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sideleg",
   close
     (var_w("x",64),
      record
        ("sideleg",
         [bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 2,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 63,ln 10,(Word_Lib.mk_wordT 54))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sideleg",
   close
     (var("x",@{typ sideleg}),
      let'
        (var_w("sideleg'rst",58),
         call("sideleg.sideleg'rst",(Word_Lib.mk_wordT 58),var("x",@{typ sideleg}),@{theory}),
         cc[ex(var_w("sideleg'rst",58),ln 53,ln 0,(Word_Lib.mk_wordT 54)),
            mop(Cast w1,call("sideleg.S_SEIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory})),
            mop(Cast w1,call("sideleg.S_UEIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory})),
            ex(var_w("sideleg'rst",58),ln 55,ln 54,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sideleg.S_STIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory})),
            mop(Cast w1,call("sideleg.S_UTIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory})),
            ex(var_w("sideleg'rst",58),ln 57,ln 56,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sideleg.S_SSIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory})),
            mop(Cast w1,call("sideleg.S_USIP",HOLogic.boolT,var("x",@{typ sideleg}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sideleg",
   close
     (tp[var_a w64,var("x",@{typ sideleg})],
      call("reg'sideleg",w64,var("x",@{typ sideleg}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sideleg",
   close
     (tp[var_a @{typ sideleg},var_w("x",64)],
      call("rec'sideleg",@{typ sideleg},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sip",
   close
     (var_w("x",64),
      record
        ("sip",
         [bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 2,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 63,ln 10,(Word_Lib.mk_wordT 54))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sip",
   close
     (var("x",@{typ sip}),
      let'
        (var_w("sip'rst",58),
         call("sip.sip'rst",(Word_Lib.mk_wordT 58),var("x",@{typ sip}),@{theory}),
         cc[ex(var_w("sip'rst",58),ln 53,ln 0,(Word_Lib.mk_wordT 54)),
            mop(Cast w1,call("sip.S_SEIP",HOLogic.boolT,var("x",@{typ sip}),@{theory})),
            mop(Cast w1,call("sip.S_UEIP",HOLogic.boolT,var("x",@{typ sip}),@{theory})),
            ex(var_w("sip'rst",58),ln 55,ln 54,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sip.S_STIP",HOLogic.boolT,var("x",@{typ sip}),@{theory})),
            mop(Cast w1,call("sip.S_UTIP",HOLogic.boolT,var("x",@{typ sip}),@{theory})),
            ex(var_w("sip'rst",58),ln 57,ln 56,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sip.S_SSIP",HOLogic.boolT,var("x",@{typ sip}),@{theory})),
            mop(Cast w1,call("sip.S_USIP",HOLogic.boolT,var("x",@{typ sip}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sip",
   close(tp[var_a w64,var("x",@{typ sip})],call("reg'sip",w64,var("x",@{typ sip}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sip",
   close(tp[var_a @{typ sip},var_w("x",64)],call("rec'sip",@{typ sip},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_sip",
   close
     (var("v",@{typ mip}),
      rupd
        ("sip.S_USIP",
         tp[rupd
              ("sip.S_SSIP",
               tp[rupd
                    ("sip.S_UTIP",
                     tp[rupd
                          ("sip.S_STIP",
                           tp[rupd
                                ("sip.S_UEIP",
                                 tp[rupd
                                      ("sip.S_SEIP",
                                       tp[call("rec'sip",@{typ sip},lw(0,64),@{theory}),
                                          call
                                            ("mip.M_SEIP",HOLogic.boolT,var("v",@{typ mip}),
                                             @{theory})],@{theory}),
                                    call("mip.M_UEIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],
                                 @{theory}),
                              call("mip.M_STIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],
                           @{theory}),call("mip.M_UTIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],
                     @{theory}),call("mip.M_SSIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],
               @{theory}),call("mip.M_USIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_sip",
   close
     (tp[var("v",@{typ sip}),var("orig",@{typ mip})],
      rupd
        ("mip.M_USIP",
         tp[rupd
              ("mip.M_SSIP",
               tp[rupd
                    ("mip.M_UTIP",
                     tp[rupd
                          ("mip.M_STIP",
                           tp[rupd
                                ("mip.M_UEIP",
                                 tp[rupd
                                      ("mip.M_SEIP",
                                       tp[call
                                            ("rec'mip",@{typ mip},
                                             call("reg'mip",w64,var("orig",@{typ mip}),@{theory}),
                                             @{theory}),
                                          call
                                            ("sip.S_SEIP",HOLogic.boolT,var("v",@{typ sip}),
                                             @{theory})],@{theory}),
                                    call("sip.S_UEIP",HOLogic.boolT,var("v",@{typ sip}),@{theory})],
                                 @{theory}),
                              call("sip.S_STIP",HOLogic.boolT,var("v",@{typ sip}),@{theory})],
                           @{theory}),call("sip.S_UTIP",HOLogic.boolT,var("v",@{typ sip}),@{theory})],
                     @{theory}),call("sip.S_SSIP",HOLogic.boolT,var("v",@{typ sip}),@{theory})],
               @{theory}),call("sip.S_USIP",HOLogic.boolT,var("v",@{typ sip}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sie",
   close
     (var_w("x",64),
      record
        ("sie",
         [bop(Bit,var_w("x",64),ln 9),bop(Bit,var_w("x",64),ln 1),bop(Bit,var_w("x",64),ln 5),
          bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 2,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",64),ln 63,ln 10,(Word_Lib.mk_wordT 54))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sie",
   close
     (var("x",@{typ sie}),
      let'
        (var_w("sie'rst",58),
         call("sie.sie'rst",(Word_Lib.mk_wordT 58),var("x",@{typ sie}),@{theory}),
         cc[ex(var_w("sie'rst",58),ln 53,ln 0,(Word_Lib.mk_wordT 54)),
            mop(Cast w1,call("sie.S_SEIE",HOLogic.boolT,var("x",@{typ sie}),@{theory})),
            mop(Cast w1,call("sie.S_UEIE",HOLogic.boolT,var("x",@{typ sie}),@{theory})),
            ex(var_w("sie'rst",58),ln 55,ln 54,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sie.S_STIE",HOLogic.boolT,var("x",@{typ sie}),@{theory})),
            mop(Cast w1,call("sie.S_UTIE",HOLogic.boolT,var("x",@{typ sie}),@{theory})),
            ex(var_w("sie'rst",58),ln 57,ln 56,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("sie.S_SSIE",HOLogic.boolT,var("x",@{typ sie}),@{theory})),
            mop(Cast w1,call("sie.S_USIE",HOLogic.boolT,var("x",@{typ sie}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sie",
   close(tp[var_a w64,var("x",@{typ sie})],call("reg'sie",w64,var("x",@{typ sie}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sie",
   close(tp[var_a @{typ sie},var_w("x",64)],call("rec'sie",@{typ sie},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_sie",
   close
     (var("v",@{typ mie}),
      rupd
        ("sie.S_USIE",
         tp[rupd
              ("sie.S_SSIE",
               tp[rupd
                    ("sie.S_UTIE",
                     tp[rupd
                          ("sie.S_STIE",
                           tp[rupd
                                ("sie.S_UEIE",
                                 tp[rupd
                                      ("sie.S_SEIE",
                                       tp[call("rec'sie",@{typ sie},lw(0,64),@{theory}),
                                          call
                                            ("mie.M_SEIE",HOLogic.boolT,var("v",@{typ mie}),
                                             @{theory})],@{theory}),
                                    call("mie.M_UEIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],
                                 @{theory}),
                              call("mie.M_STIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],
                           @{theory}),call("mie.M_UTIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],
                     @{theory}),call("mie.M_SSIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],
               @{theory}),call("mie.M_USIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_sie",
   close
     (tp[var("v",@{typ sie}),var("orig",@{typ mie})],
      rupd
        ("mie.M_USIE",
         tp[rupd
              ("mie.M_SSIE",
               tp[rupd
                    ("mie.M_UTIE",
                     tp[rupd
                          ("mie.M_STIE",
                           tp[rupd
                                ("mie.M_UEIE",
                                 tp[rupd
                                      ("mie.M_SEIE",
                                       tp[call
                                            ("rec'mie",@{typ mie},
                                             call("reg'mie",w64,var("orig",@{typ mie}),@{theory}),
                                             @{theory}),
                                          call
                                            ("sie.S_SEIE",HOLogic.boolT,var("v",@{typ sie}),
                                             @{theory})],@{theory}),
                                    call("sie.S_UEIE",HOLogic.boolT,var("v",@{typ sie}),@{theory})],
                                 @{theory}),
                              call("sie.S_STIE",HOLogic.boolT,var("v",@{typ sie}),@{theory})],
                           @{theory}),call("sie.S_UTIE",HOLogic.boolT,var("v",@{typ sie}),@{theory})],
                     @{theory}),call("sie.S_SSIE",HOLogic.boolT,var("v",@{typ sie}),@{theory})],
               @{theory}),call("sie.S_USIE",HOLogic.boolT,var("v",@{typ sie}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sptbr32",
   close
     (var_w("x",32),
      record
        ("sptbr32",
         [ex(var_w("x",32),ln 31,ln 22,(Word_Lib.mk_wordT 10)),
          ex(var_w("x",32),ln 21,ln 0,(Word_Lib.mk_wordT 22))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sptbr32",
   close
     (var("x",@{typ sptbr32}),
      cc[call("sptbr32.ASID_32",(Word_Lib.mk_wordT 10),var("x",@{typ sptbr32}),@{theory}),
         call("sptbr32.PPN_32",(Word_Lib.mk_wordT 22),var("x",@{typ sptbr32}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sptbr32",
   close
     (tp[var_a w32,var("x",@{typ sptbr32})],
      call("reg'sptbr32",w32,var("x",@{typ sptbr32}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sptbr32",
   close
     (tp[var_a @{typ sptbr32},var_w("x",32)],
      call("rec'sptbr32",@{typ sptbr32},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'sptbr64",
   close
     (var_w("x",64),
      record
        ("sptbr64",
         [ex(var_w("x",64),ln 63,ln 38,(Word_Lib.mk_wordT 26)),
          ex(var_w("x",64),ln 37,ln 0,(Word_Lib.mk_wordT 38))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'sptbr64",
   close
     (var("x",@{typ sptbr64}),
      cc[call("sptbr64.ASID_64",(Word_Lib.mk_wordT 26),var("x",@{typ sptbr64}),@{theory}),
         call("sptbr64.PPN_64",(Word_Lib.mk_wordT 38),var("x",@{typ sptbr64}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'sptbr64",
   close
     (tp[var_a w64,var("x",@{typ sptbr64})],
      call("reg'sptbr64",w64,var("x",@{typ sptbr64}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'sptbr64",
   close
     (tp[var_a @{typ sptbr64},var_w("x",64)],
      call("rec'sptbr64",@{typ sptbr64},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'FPCSR",
   close
     (var_w("x",32),
      record
        ("FPCSR",
         [bop(Bit,var_w("x",32),ln 3),ex(var_w("x",32),ln 7,ln 5,(Word_Lib.mk_wordT 3)),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 2),
          bop(Bit,var_w("x",32),ln 1),ex(var_w("x",32),ln 31,ln 8,(Word_Lib.mk_wordT 24))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'FPCSR",
   close
     (var("x",@{typ FPCSR}),
      cc[call("FPCSR.fpcsr'rst",(Word_Lib.mk_wordT 24),var("x",@{typ FPCSR}),@{theory}),
         call("FPCSR.FRM",(Word_Lib.mk_wordT 3),var("x",@{typ FPCSR}),@{theory}),
         mop(Cast w1,call("FPCSR.NV",HOLogic.boolT,var("x",@{typ FPCSR}),@{theory})),
         mop(Cast w1,call("FPCSR.DZ",HOLogic.boolT,var("x",@{typ FPCSR}),@{theory})),
         mop(Cast w1,call("FPCSR.OF",HOLogic.boolT,var("x",@{typ FPCSR}),@{theory})),
         mop(Cast w1,call("FPCSR.UF",HOLogic.boolT,var("x",@{typ FPCSR}),@{theory})),
         mop(Cast w1,call("FPCSR.NX",HOLogic.boolT,var("x",@{typ FPCSR}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'FPCSR",
   close(tp[var_a w32,var("x",@{typ FPCSR})],call("reg'FPCSR",w32,var("x",@{typ FPCSR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'FPCSR",
   close
     (tp[var_a @{typ FPCSR},var_w("x",32)],call("rec'FPCSR",@{typ FPCSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ustatus",
   close
     (var_w("x",64),
      record
        ("ustatus",
         [bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 1,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",64),ln 63,ln 5,(Word_Lib.mk_wordT 59))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ustatus",
   close
     (var("x",@{typ ustatus}),
      let'
        (var_w("ustatus'rst",62),
         call("ustatus.ustatus'rst",(Word_Lib.mk_wordT 62),var("x",@{typ ustatus}),@{theory}),
         cc[ex(var_w("ustatus'rst",62),ln 58,ln 0,(Word_Lib.mk_wordT 59)),
            mop(Cast w1,call("ustatus.U_PIE",HOLogic.boolT,var("x",@{typ ustatus}),@{theory})),
            ex(var_w("ustatus'rst",62),ln 61,ln 59,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("ustatus.U_IE",HOLogic.boolT,var("x",@{typ ustatus}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ustatus",
   close
     (tp[var_a w64,var("x",@{typ ustatus})],
      call("reg'ustatus",w64,var("x",@{typ ustatus}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ustatus",
   close
     (tp[var_a @{typ ustatus},var_w("x",64)],
      call("rec'ustatus",@{typ ustatus},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_ustatus",
   close
     (var("v",@{typ mstatus}),
      rupd
        ("ustatus.U_IE",
         tp[rupd
              ("ustatus.U_PIE",
               tp[call("rec'ustatus",@{typ ustatus},lw(0,64),@{theory}),
                  call("mstatus.M_UPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],@{theory}),
            call("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_ustatus",
   close
     (tp[var("v",@{typ ustatus}),var("orig",@{typ mstatus})],
      rupd
        ("mstatus.M_UIE",
         tp[rupd
              ("mstatus.M_UPIE",
               tp[call
                    ("rec'mstatus",@{typ mstatus},
                     call("reg'mstatus",w64,var("orig",@{typ mstatus}),@{theory}),@{theory}),
                  call("ustatus.U_PIE",HOLogic.boolT,var("v",@{typ ustatus}),@{theory})],@{theory}),
            call("ustatus.U_IE",HOLogic.boolT,var("v",@{typ ustatus}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'uip",
   close
     (var_w("x",64),
      record
        ("uip",
         [bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 1,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",64),ln 7,ln 5,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",64),ln 63,ln 9,(Word_Lib.mk_wordT 55))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'uip",
   close
     (var("x",@{typ uip}),
      let'
        (var_w("uip'rst",61),
         call("uip.uip'rst",(Word_Lib.mk_wordT 61),var("x",@{typ uip}),@{theory}),
         cc[ex(var_w("uip'rst",61),ln 54,ln 0,(Word_Lib.mk_wordT 55)),
            mop(Cast w1,call("uip.U_EIP",HOLogic.boolT,var("x",@{typ uip}),@{theory})),
            ex(var_w("uip'rst",61),ln 57,ln 55,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("uip.U_TIP",HOLogic.boolT,var("x",@{typ uip}),@{theory})),
            ex(var_w("uip'rst",61),ln 60,ln 58,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("uip.U_SIP",HOLogic.boolT,var("x",@{typ uip}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'uip",
   close(tp[var_a w64,var("x",@{typ uip})],call("reg'uip",w64,var("x",@{typ uip}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'uip",
   close(tp[var_a @{typ uip},var_w("x",64)],call("rec'uip",@{typ uip},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_uip",
   close
     (var("v",@{typ mip}),
      rupd
        ("uip.U_SIP",
         tp[rupd
              ("uip.U_TIP",
               tp[rupd
                    ("uip.U_EIP",
                     tp[call("rec'uip",@{typ uip},lw(0,64),@{theory}),
                        call("mip.M_UEIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],@{theory}),
                  call("mip.M_UTIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],@{theory}),
            call("mip.M_USIP",HOLogic.boolT,var("v",@{typ mip}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_uip",
   close
     (tp[var("v",@{typ uip}),var("orig",@{typ mip})],
      rupd
        ("mip.M_USIP",
         tp[rupd
              ("mip.M_UTIP",
               tp[rupd
                    ("mip.M_UEIP",
                     tp[call
                          ("rec'mip",@{typ mip},
                           call("reg'mip",w64,var("orig",@{typ mip}),@{theory}),@{theory}),
                        call("uip.U_EIP",HOLogic.boolT,var("v",@{typ uip}),@{theory})],@{theory}),
                  call("uip.U_TIP",HOLogic.boolT,var("v",@{typ uip}),@{theory})],@{theory}),
            call("uip.U_SIP",HOLogic.boolT,var("v",@{typ uip}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'uie",
   close
     (var_w("x",64),
      record
        ("uie",
         [bop(Bit,var_w("x",64),ln 8),bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 4),
          cc[ex(var_w("x",64),ln 3,ln 1,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",64),ln 7,ln 5,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",64),ln 63,ln 9,(Word_Lib.mk_wordT 55))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'uie",
   close
     (var("x",@{typ uie}),
      let'
        (var_w("uie'rst",61),
         call("uie.uie'rst",(Word_Lib.mk_wordT 61),var("x",@{typ uie}),@{theory}),
         cc[ex(var_w("uie'rst",61),ln 54,ln 0,(Word_Lib.mk_wordT 55)),
            mop(Cast w1,call("uie.U_EIE",HOLogic.boolT,var("x",@{typ uie}),@{theory})),
            ex(var_w("uie'rst",61),ln 57,ln 55,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("uie.U_TIE",HOLogic.boolT,var("x",@{typ uie}),@{theory})),
            ex(var_w("uie'rst",61),ln 60,ln 58,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("uie.U_SIE",HOLogic.boolT,var("x",@{typ uie}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'uie",
   close(tp[var_a w64,var("x",@{typ uie})],call("reg'uie",w64,var("x",@{typ uie}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'uie",
   close(tp[var_a @{typ uie},var_w("x",64)],call("rec'uie",@{typ uie},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("to_uie",
   close
     (var("v",@{typ mie}),
      rupd
        ("uie.U_SIE",
         tp[rupd
              ("uie.U_TIE",
               tp[rupd
                    ("uie.U_EIE",
                     tp[call("rec'uie",@{typ uie},lw(0,64),@{theory}),
                        call("mie.M_UEIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],@{theory}),
                  call("mie.M_UTIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],@{theory}),
            call("mie.M_USIE",HOLogic.boolT,var("v",@{typ mie}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("of_uie",
   close
     (tp[var("v",@{typ uie}),var("orig",@{typ mie})],
      rupd
        ("mie.M_USIE",
         tp[rupd
              ("mie.M_UTIE",
               tp[rupd
                    ("mie.M_UEIE",
                     tp[call
                          ("rec'mie",@{typ mie},
                           call("reg'mie",w64,var("orig",@{typ mie}),@{theory}),@{theory}),
                        call("uie.U_EIE",HOLogic.boolT,var("v",@{typ uie}),@{theory})],@{theory}),
                  call("uie.U_TIE",HOLogic.boolT,var("v",@{typ uie}),@{theory})],@{theory}),
            call("uie.U_SIE",HOLogic.boolT,var("v",@{typ uie}),@{theory})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isValidHPP",
   close
     (var_w("p",2),
      mop(Not,
          eq(call("privilege",@{typ Privilege},var_w("p",2),@{theory}),
             lc("Machine","Privilege",@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("update_mstatus",
   close
     (tp[var("orig",@{typ mstatus}),var("v",@{typ mstatus})],
      let'
        (var("s0",@{typ mstatus}),
         rupd
           ("mstatus.M_MXR",
            tp[rupd
                 ("mstatus.M_PUM",
                  tp[rupd
                       ("mstatus.M_MPRV",
                        tp[rupd
                             ("mstatus.M_SD",
                              tp[rupd
                                   ("mstatus.M_XS",
                                    tp[rupd
                                         ("mstatus.M_FS",
                                          tp[rupd
                                               ("mstatus.M_MPP",
                                                tp[rupd
                                                     ("mstatus.M_HPP",
                                                      tp[rupd
                                                           ("mstatus.M_SPP",
                                                            tp[rupd
                                                                 ("mstatus.M_MPIE",
                                                                  tp[rupd
                                                                       ("mstatus.M_HPIE",
                                                                        tp[rupd
                                                                             ("mstatus.M_SPIE",
                                                                              tp[rupd
                                                                                   ("mstatus.M_UPIE",
                                                                                    tp[rupd
                                                                                         ("mstatus.M_MIE",
                                                                                          tp[rupd
                                                                                               ("mstatus.M_HIE",
                                                                                                tp[rupd
                                                                                                     ("mstatus.M_SIE",
                                                                                                      tp[rupd
                                                                                                           ("mstatus.M_UIE",
                                                                                                            tp[var("orig",
                                                                                                                   @{typ mstatus}),
                                                                                                               call
                                                                                                                 ("mstatus.M_UIE",
                                                                                                                  HOLogic.boolT,
                                                                                                                  var("v",
                                                                                                                      @{typ mstatus}),
                                                                                                                  @{theory})],
                                                                                                            @{theory}),
                                                                                                         call
                                                                                                           ("mstatus.M_SIE",
                                                                                                            HOLogic.boolT,
                                                                                                            var("v",
                                                                                                                @{typ mstatus}),
                                                                                                            @{theory})],
                                                                                                      @{theory}),
                                                                                                   call
                                                                                                     ("mstatus.M_HIE",
                                                                                                      HOLogic.boolT,
                                                                                                      var("v",
                                                                                                          @{typ mstatus}),
                                                                                                      @{theory})],
                                                                                                @{theory}),
                                                                                             call
                                                                                               ("mstatus.M_MIE",
                                                                                                HOLogic.boolT,
                                                                                                var("v",
                                                                                                    @{typ mstatus}),
                                                                                                @{theory})],
                                                                                          @{theory}),
                                                                                       call
                                                                                         ("mstatus.M_UPIE",
                                                                                          HOLogic.boolT,
                                                                                          var("v",
                                                                                              @{typ mstatus}),
                                                                                          @{theory})],
                                                                                    @{theory}),
                                                                                 call
                                                                                   ("mstatus.M_SPIE",
                                                                                    HOLogic.boolT,
                                                                                    var("v",
                                                                                        @{typ mstatus}),
                                                                                    @{theory})],
                                                                              @{theory}),
                                                                           call
                                                                             ("mstatus.M_HPIE",
                                                                              HOLogic.boolT,
                                                                              var("v",@{typ mstatus}),
                                                                              @{theory})],@{theory}),
                                                                     call
                                                                       ("mstatus.M_MPIE",
                                                                        HOLogic.boolT,
                                                                        var("v",@{typ mstatus}),
                                                                        @{theory})],@{theory}),
                                                               call
                                                                 ("mstatus.M_SPP",HOLogic.boolT,
                                                                  var("v",@{typ mstatus}),@{theory})],
                                                            @{theory}),
                                                         ite(call
                                                               ("isValidHPP",HOLogic.boolT,
                                                                call
                                                                  ("mstatus.M_HPP",
                                                                   (Word_Lib.mk_wordT 2),
                                                                   var("v",@{typ mstatus}),@{theory}),
                                                                @{theory}),
                                                             call
                                                               ("mstatus.M_HPP",
                                                                (Word_Lib.mk_wordT 2),
                                                                var("v",@{typ mstatus}),@{theory}),
                                                             call
                                                               ("mstatus.M_HPP",
                                                                (Word_Lib.mk_wordT 2),
                                                                var("orig",@{typ mstatus}),@{theory}))],
                                                      @{theory}),
                                                   call
                                                     ("mstatus.M_MPP",(Word_Lib.mk_wordT 2),
                                                      var("v",@{typ mstatus}),@{theory})],@{theory}),
                                             call
                                               ("mstatus.M_FS",(Word_Lib.mk_wordT 2),
                                                var("v",@{typ mstatus}),@{theory})],@{theory}),
                                       call
                                         ("mstatus.M_XS",(Word_Lib.mk_wordT 2),
                                          var("v",@{typ mstatus}),@{theory})],@{theory}),
                                 bop(Or,
                                     eq(call
                                          ("extStatus",@{typ ExtStatus},
                                           call
                                             ("mstatus.M_XS",(Word_Lib.mk_wordT 2),
                                              var("v",@{typ mstatus}),@{theory}),@{theory}),
                                        lc("Dirty","ExtStatus",@{theory})),
                                     eq(call
                                          ("extStatus",@{typ ExtStatus},
                                           call
                                             ("mstatus.M_FS",(Word_Lib.mk_wordT 2),
                                              var("v",@{typ mstatus}),@{theory}),@{theory}),
                                        lc("Dirty","ExtStatus",@{theory})))],@{theory}),
                           call("mstatus.M_MPRV",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                        @{theory}),
                     call("mstatus.M_PUM",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                  @{theory}),call("mstatus.M_MXR",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
            @{theory}),
         ite(call
               ("isValidVM",HOLogic.boolT,
                call("mstatus.M_VM",(Word_Lib.mk_wordT 5),var("v",@{typ mstatus}),@{theory}),
                @{theory}),
             rupd
               ("mstatus.M_VM",
                tp[var("s0",@{typ mstatus}),
                   call("mstatus.M_VM",(Word_Lib.mk_wordT 5),var("v",@{typ mstatus}),@{theory})],
                @{theory}),var("s0",@{typ mstatus})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("menter",
   close
     (tp[var("v",@{typ mstatus}),var("p",@{typ Privilege})],
      rupd
        ("mstatus.M_MIE",
         tp[rupd
              ("mstatus.M_MPP",
               tp[rupd
                    ("mstatus.M_MPIE",
                     let'
                       (tp[var_b"v0",var("s",@{typ "mstatus \<times> unit"})],
                        cs(var("p",@{typ Privilege}),
                           [(lc("User","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),lu]),
                            (lc("Supervisor","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_SIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),lu]),
                            (lc("Hypervisor","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_HIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),lu]),
                            (lc("Machine","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_MIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),lu])],@{context}),
                        tp[var("v",@{typ mstatus}),var_b"v0"]),@{theory}),
                  call("privLevel",(Word_Lib.mk_wordT 2),var("p",@{typ Privilege}),@{theory})],
               @{theory}),lf],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("henter",
   close
     (tp[var("v",@{typ mstatus}),var("p",@{typ Privilege})],
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ mstatus}),var("s1",@{typ "mstatus \<times> state"})],
            let'
              (var("s",@{typ "mstatus \<times> state"}),
               let'
                 (tp[var("v",@{typ mstatus}),var("s",@{typ "mstatus \<times> state"})],
                  let'
                    (tp[var("v",@{typ "mstatus \<times> bool"}),
                        var("s",@{typ "mstatus \<times> state"})],
                     let'
                       (tp[var_b"v0",var("s",@{typ "mstatus \<times> state"})],
                        cs(var("p",@{typ Privilege}),
                           [(lc("User","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),var("state",qTy)]),
                            (lc("Supervisor","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_SIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),var("state",qTy)]),
                            (lc("Hypervisor","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_HIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),var("state",qTy)]),
                            (lc("Machine","Privilege",@{theory}),
                             let'
                               (tp[var_b"v0",var("s3",qTy)],
                                apply
                                  (call
                                     ("raise'exception",
                                      @{typ "state \<Rightarrow> (bool \<times> state)"},
                                      call
                                        ("exception.INTERNAL_ERROR",@{typ exception},
                                         ls"Invalid privilege for henter",@{theory}),@{theory}),
                                   var("state",qTy)),
                                tp[var_b"v0",var("v",@{typ mstatus}),var("s3",qTy)]))],@{context}),
                        tp[tp[var("v",@{typ mstatus}),var_b"v0"],
                           var("s",@{typ "mstatus \<times> state"})]),
                     tp[rupd("mstatus.M_HPIE",var("v",@{typ "mstatus \<times> bool"}),@{theory}),
                        var("s",@{typ "mstatus \<times> state"})]),
                  tp[var("v",@{typ mstatus}),mop(Snd,var("s",@{typ "mstatus \<times> state"}))]),
               let'
                 (var("s0",@{typ mstatus}),
                  rupd
                    ("mstatus.M_HIE",
                     tp[rupd
                          ("mstatus.M_HPP",
                           tp[mop(Fst,var("s",@{typ "mstatus \<times> state"})),
                              call
                                ("privLevel",(Word_Lib.mk_wordT 2),var("p",@{typ Privilege}),
                                 @{theory})],@{theory}),lf],@{theory}),
                  tp[var("s0",@{typ mstatus}),var("s0",@{typ mstatus}),
                     mop(Snd,var("s",@{typ "mstatus \<times> state"}))])),
            tp[var("r",@{typ mstatus}),mop(Snd,var("s1",@{typ "mstatus \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("senter",
   close
     (tp[var("v",@{typ mstatus}),var("p",@{typ Privilege})],
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ mstatus}),var("s1",@{typ "mstatus \<times> state"})],
            let'
              (var("s",@{typ "mstatus \<times> state"}),
               cs(var("p",@{typ Privilege}),
                  [(lc("User","Privilege",@{theory}),
                    tp[rupd
                         ("mstatus.M_SPP",
                          tp[rupd
                               ("mstatus.M_SPIE",
                                tp[var("v",@{typ mstatus}),
                                   call
                                     ("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),
                                      @{theory})],@{theory}),lf],@{theory}),var("state",qTy)]),
                   (lc("Supervisor","Privilege",@{theory}),
                    tp[rupd
                         ("mstatus.M_SPP",
                          tp[rupd
                               ("mstatus.M_SPIE",
                                tp[var("v",@{typ mstatus}),
                                   call
                                     ("mstatus.M_SIE",HOLogic.boolT,var("v",@{typ mstatus}),
                                      @{theory})],@{theory}),lt],@{theory}),var("state",qTy)]),
                   (var_a @{typ Privilege},
                    tp[var("v",@{typ mstatus}),
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.INTERNAL_ERROR",@{typ exception},
                                    ls"Invalid privilege for senter",@{theory}),@{theory}),
                              var("state",qTy)))])],@{context}),
               let'
                 (var("s0",@{typ mstatus}),
                  rupd
                    ("mstatus.M_SIE",tp[mop(Fst,var("s",@{typ "mstatus \<times> state"})),lf],
                     @{theory}),
                  tp[var("s0",@{typ mstatus}),var("s0",@{typ mstatus}),
                     mop(Snd,var("s",@{typ "mstatus \<times> state"}))])),
            tp[var("r",@{typ mstatus}),mop(Snd,var("s1",@{typ "mstatus \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("uenter",
   close
     (tp[var("v",@{typ mstatus}),var("p",@{typ Privilege})],
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ mstatus}),var("s1",@{typ "mstatus \<times> state"})],
            let'
              (var("s",@{typ "mstatus \<times> state"}),
               let'
                 (tp[var("v",@{typ mstatus}),var("s",@{typ "mstatus \<times> state"})],
                  let'
                    (tp[var("v",@{typ "mstatus \<times> bool"}),
                        var("s",@{typ "mstatus \<times> state"})],
                     let'
                       (tp[var_b"v0",var("s",@{typ "mstatus \<times> state"})],
                        cs(var("p",@{typ Privilege}),
                           [(lc("User","Privilege",@{theory}),
                             tp[call
                                  ("mstatus.M_UIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                                var("v",@{typ mstatus}),var("state",qTy)]),
                            (var_a @{typ Privilege},
                             let'
                               (tp[var_b"v0",var("s3",qTy)],
                                apply
                                  (call
                                     ("raise'exception",
                                      @{typ "state \<Rightarrow> (bool \<times> state)"},
                                      call
                                        ("exception.INTERNAL_ERROR",@{typ exception},
                                         ls"Invalid privilege for uenter",@{theory}),@{theory}),
                                   var("state",qTy)),
                                tp[var_b"v0",var("v",@{typ mstatus}),var("s3",qTy)]))],@{context}),
                        tp[tp[var("v",@{typ mstatus}),var_b"v0"],
                           var("s",@{typ "mstatus \<times> state"})]),
                     tp[rupd("mstatus.M_UPIE",var("v",@{typ "mstatus \<times> bool"}),@{theory}),
                        var("s",@{typ "mstatus \<times> state"})]),
                  tp[var("v",@{typ mstatus}),mop(Snd,var("s",@{typ "mstatus \<times> state"}))]),
               let'
                 (var("s0",@{typ mstatus}),
                  rupd
                    ("mstatus.M_UIE",tp[mop(Fst,var("s",@{typ "mstatus \<times> state"})),lf],
                     @{theory}),
                  tp[var("s0",@{typ mstatus}),var("s0",@{typ mstatus}),
                     mop(Snd,var("s",@{typ "mstatus \<times> state"}))])),
            tp[var("r",@{typ mstatus}),mop(Snd,var("s1",@{typ "mstatus \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("mret",
   close
     (var("v",@{typ mstatus}),
      rupd
        ("mstatus.M_MPIE",
         tp[rupd
              ("mstatus.M_MPP",
               tp[cs(call
                       ("privilege",@{typ Privilege},
                        call
                          ("mstatus.M_MPP",(Word_Lib.mk_wordT 2),var("v",@{typ mstatus}),@{theory}),
                        @{theory}),
                     [(lc("User","Privilege",@{theory}),
                       rupd
                         ("mstatus.M_UIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_MPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory})),
                      (lc("Supervisor","Privilege",@{theory}),
                       rupd
                         ("mstatus.M_SIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_MPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory})),
                      (lc("Hypervisor","Privilege",@{theory}),
                       rupd
                         ("mstatus.M_HIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_MPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory})),
                      (lc("Machine","Privilege",@{theory}),
                       rupd
                         ("mstatus.M_MIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_MPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory}))],@{context}),
                  call("privLevel",(Word_Lib.mk_wordT 2),lc("User","Privilege",@{theory}),@{theory})],
               @{theory}),lt],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("hret",
   close
     (var("v",@{typ mstatus}),
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ mstatus}),var("s1",@{typ "mstatus \<times> state"})],
            let'
              (var("s",@{typ "mstatus \<times> state"}),
               cs(call
                    ("privilege",@{typ Privilege},
                     call("mstatus.M_HPP",(Word_Lib.mk_wordT 2),var("v",@{typ mstatus}),@{theory}),
                     @{theory}),
                  [(lc("User","Privilege",@{theory}),
                    tp[rupd
                         ("mstatus.M_UIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_HPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory}),var("state",qTy)]),
                   (lc("Supervisor","Privilege",@{theory}),
                    tp[rupd
                         ("mstatus.M_SIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_HPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory}),var("state",qTy)]),
                   (lc("Hypervisor","Privilege",@{theory}),
                    tp[rupd
                         ("mstatus.M_HIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_HPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory}),var("state",qTy)]),
                   (var_a @{typ Privilege},
                    tp[var("v",@{typ mstatus}),
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.INTERNAL_ERROR",@{typ exception},
                                    ls"Invalid mstatus for HRET",@{theory}),@{theory}),
                              var("state",qTy)))])],@{context}),
               let'
                 (var("s0",@{typ mstatus}),
                  rupd
                    ("mstatus.M_HPIE",
                     tp[rupd
                          ("mstatus.M_HPP",
                           tp[mop(Fst,var("s",@{typ "mstatus \<times> state"})),
                              call
                                ("privLevel",(Word_Lib.mk_wordT 2),lc("User","Privilege",@{theory}),
                                 @{theory})],@{theory}),lt],@{theory}),
                  tp[var("s0",@{typ mstatus}),var("s0",@{typ mstatus}),
                     mop(Snd,var("s",@{typ "mstatus \<times> state"}))])),
            tp[var("r",@{typ mstatus}),mop(Snd,var("s1",@{typ "mstatus \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("sret",
   close
     (var("v",@{typ mstatus}),
      rupd
        ("mstatus.M_SPIE",
         tp[rupd
              ("mstatus.M_SPP",
               tp[cs(call("mstatus.M_SPP",HOLogic.boolT,var("v",@{typ mstatus}),@{theory}),
                     [(lf,
                       rupd
                         ("mstatus.M_UIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_SPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory})),
                      (lt,
                       rupd
                         ("mstatus.M_SIE",
                          tp[var("v",@{typ mstatus}),
                             call("mstatus.M_SPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],
                          @{theory}))],@{context}),lf],@{theory}),lt],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("uret",
   close
     (var("v",@{typ mstatus}),
      rupd
        ("mstatus.M_UPIE",
         tp[rupd
              ("mstatus.M_UIE",
               tp[var("v",@{typ mstatus}),
                  call("mstatus.M_UPIE",HOLogic.boolT,var("v",@{typ mstatus}),@{theory})],@{theory}),
            lt],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("scheduleCore",
   close
     (var_n"id",
      close
        (var("state",qTy),
         ite(bop(Lt,var_n"id",call("state.totalCore",HOLogic.natT,var("state",qTy),@{theory})),
             rupd("state.procID",tp[var("state",qTy),mop(Cast w8,var_n"id")],@{theory}),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("gpr",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (apply
              (call
                 ("state.c_gpr",@{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                  var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory})),
            var_w("n",5)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'gpr",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         rupd
           ("state.c_gpr",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_gpr",@{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  fupd
                    (apply
                       (call
                          ("state.c_gpr",
                           @{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                           var("state",qTy),@{theory}),
                        call("state.procID",w8,var("state",qTy),@{theory})),var_w("n",5),
                     var_w("value",64)))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("fcsr",
   close
     (var("state",qTy),
      call
        ("UserCSR.fpcsr",@{typ FPCSR},
         apply
           (call("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("state",qTy),@{theory}),
            call("state.procID",w8,var("state",qTy),@{theory})),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'fcsr",
   close
     (var("value",@{typ FPCSR}),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            rupd
              ("state.c_UCSR",
               tp[var("state",qTy),
                  fupd
                    (call
                       ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("state",qTy),
                        @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                     rupd
                       ("UserCSR.fpcsr",
                        tp[apply
                             (call
                                ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                 var("state",qTy),@{theory}),
                              call("state.procID",w8,var("state",qTy),@{theory})),
                           var("value",@{typ FPCSR})],@{theory}))],@{theory}),
            let'
              (var("s",qTy),
               let'
                 (var("v",@{typ MachineCSR}),
                  apply
                    (call
                       ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                        @{theory}),call("state.procID",w8,var("s",qTy),@{theory})),
                  rupd
                    ("state.c_MCSR",
                     tp[var("s",qTy),
                        fupd
                          (call
                             ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                              @{theory}),call("state.procID",w8,var("s",qTy),@{theory}),
                           rupd
                             ("MachineCSR.mstatus",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("mstatus.M_FS",
                                    tp[call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          var("v",@{typ MachineCSR}),@{theory}),
                                       call
                                         ("ext_status",(Word_Lib.mk_wordT 2),
                                          lc("Dirty","ExtStatus",@{theory}),@{theory})],@{theory})],
                              @{theory}))],@{theory})),
               let'
                 (var("v",@{typ MachineCSR}),
                  apply
                    (call
                       ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                        @{theory}),call("state.procID",w8,var("s",qTy),@{theory})),
                  rupd
                    ("state.c_MCSR",
                     tp[var("s",qTy),
                        fupd
                          (call
                             ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                              @{theory}),call("state.procID",w8,var("s",qTy),@{theory}),
                           rupd
                             ("MachineCSR.mstatus",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("mstatus.M_SD",
                                    tp[call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          var("v",@{typ MachineCSR}),@{theory}),lt],@{theory})],
                              @{theory}))],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("fpr",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (apply
              (call
                 ("state.c_fpr",@{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                  var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory})),
            var_w("n",5)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'fpr",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         rupd
           ("state.c_fpr",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_fpr",@{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  fupd
                    (apply
                       (call
                          ("state.c_fpr",
                           @{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                           var("state",qTy),@{theory}),
                        call("state.procID",w8,var("state",qTy),@{theory})),var_w("n",5),
                     var_w("value",64)))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PC",
   close
     (var("state",qTy),
      apply
        (call("state.c_PC",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'PC",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         rupd
           ("state.c_PC",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_PC",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                  call("state.procID",w8,var("state",qTy),@{theory}),var_w("value",64))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UCSR",
   close
     (var("state",qTy),
      apply
        (call("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'UCSR",
   close
     (var("value",@{typ UserCSR}),
      close
        (var("state",qTy),
         rupd
           ("state.c_UCSR",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("state",qTy),@{theory}),
                  call("state.procID",w8,var("state",qTy),@{theory}),var("value",@{typ UserCSR}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SCSR",
   close
     (var("state",qTy),
      apply
        (call("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'SCSR",
   close
     (var("value",@{typ SupervisorCSR}),
      close
        (var("state",qTy),
         rupd
           ("state.c_SCSR",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ SupervisorCSR}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HCSR",
   close
     (var("state",qTy),
      apply
        (call("state.c_HCSR",@{typ "8 word \<Rightarrow> HypervisorCSR"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'HCSR",
   close
     (var("value",@{typ HypervisorCSR}),
      close
        (var("state",qTy),
         rupd
           ("state.c_HCSR",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_HCSR",@{typ "8 word \<Rightarrow> HypervisorCSR"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ HypervisorCSR}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MCSR",
   close
     (var("state",qTy),
      apply
        (call("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MCSR",
   close
     (var("value",@{typ MachineCSR}),
      close
        (var("state",qTy),
         rupd
           ("state.c_MCSR",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ MachineCSR}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("NextFetch",
   close
     (var("state",qTy),
      apply
        (call
           ("state.c_NextFetch",@{typ "8 word \<Rightarrow> (instrResult option)"},var("state",qTy),
            @{theory}),call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'NextFetch",
   close
     (var("value",@{typ "instrResult option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_NextFetch",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_NextFetch",@{typ "8 word \<Rightarrow> (instrResult option)"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ "instrResult option"}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReserveLoad",
   close
     (var("state",qTy),
      apply
        (call
           ("state.c_ReserveLoad",@{typ "8 word \<Rightarrow> (64 word option)"},var("state",qTy),
            @{theory}),call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'ReserveLoad",
   close
     (var("value",@{typ "64 word option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_ReserveLoad",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_ReserveLoad",@{typ "8 word \<Rightarrow> (64 word option)"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ "64 word option"}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ExitCode",
   close
     (var("state",qTy),
      apply
        (call("state.c_ExitCode",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'ExitCode",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         rupd
           ("state.c_ExitCode",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_ExitCode",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),var_w("value",64))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curPrivilege",
   close
     (var("state",qTy),
      apply
        (call
           ("state.c_privilege",@{typ "8 word \<Rightarrow> Privilege"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'curPrivilege",
   close
     (var("value",@{typ Privilege}),
      close
        (var("state",qTy),
         rupd
           ("state.c_privilege",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_privilege",@{typ "8 word \<Rightarrow> Privilege"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ Privilege}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curArch",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("architecture",@{typ "state \<Rightarrow> (Architecture \<times> state)"},
               call
                 ("misa.ArchBase",(Word_Lib.mk_wordT 2),
                  call
                    ("MachineCSR.misa",@{typ misa},
                     apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                        var("state",qTy)),@{theory}),@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("in32BitMode",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ Architecture}),var("s",qTy)],
            apply
              (call
                 ("curArch",@{typ "state \<Rightarrow> (Architecture \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            tp[eq(var("v",@{typ Architecture}),lc("RV32I","Architecture",@{theory})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("isFPEnabled",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         call
           ("misa.F",HOLogic.boolT,
            call
              ("MachineCSR.misa",@{typ misa},
               apply
                 (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("state",qTy)),
               @{theory}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curAsid32",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         call
           ("sptbr32.ASID_32",(Word_Lib.mk_wordT 10),
            call
              ("rec'sptbr32",@{typ sptbr32},
               ex(call
                    ("SupervisorCSR.sptbr",w64,
                     apply
                       (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                        var("state",qTy)),@{theory}),ln 31,ln 0,w32),@{theory}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curAsid64",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         call
           ("sptbr64.ASID_64",(Word_Lib.mk_wordT 26),
            call
              ("rec'sptbr64",@{typ sptbr64},
               call
                 ("SupervisorCSR.sptbr",w64,
                  apply
                    (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                     var("state",qTy)),@{theory}),@{theory}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rnd_mode_static",
   close
     (var_w("rnd",3),
      itb([(eq(var_w("rnd",3),lw(0,3)),mop(Some,lc("RNE","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(1,3)),mop(Some,lc("RTZ","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(2,3)),mop(Some,lc("RDN","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(3,3)),mop(Some,lc("RUP","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(4,3)),mop(Some,lc("RMM","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(7,3)),mop(Some,lc("RDYN","Rounding",@{theory})))],
          lo @{typ Rounding})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rnd_mode_dynamic",
   close
     (var_w("rnd",3),
      itb([(eq(var_w("rnd",3),lw(0,3)),mop(Some,lc("RNE","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(1,3)),mop(Some,lc("RTZ","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(2,3)),mop(Some,lc("RDN","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(3,3)),mop(Some,lc("RUP","Rounding",@{theory}))),
           (eq(var_w("rnd",3),lw(4,3)),mop(Some,lc("RMM","Rounding",@{theory})))],lo @{typ Rounding})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("l3round",
   close
     (var("rnd",@{typ Rounding}),
      cs(var("rnd",@{typ Rounding}),
         [(lc("RNE","Rounding",@{theory}),mop(Some,@{term roundTiesToEven})),
          (lc("RTZ","Rounding",@{theory}),mop(Some,@{term roundTowardZero})),
          (lc("RDN","Rounding",@{theory}),mop(Some,@{term roundTowardNegative})),
          (lc("RUP","Rounding",@{theory}),mop(Some,@{term roundTowardPositive})),
          (lc("RMM","Rounding",@{theory}),lo @{typ ieee_rounding}),
          (lc("RDYN","Rounding",@{theory}),lo @{typ ieee_rounding})],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("round",
   close
     (var_w("rnd",3),
      close
        (var("state",qTy),
         cs(call("rnd_mode_static",@{typ "Rounding option"},var_w("rnd",3),@{theory}),
            [(mop(Some,lc("RDYN","Rounding",@{theory})),
              cs(call
                   ("rnd_mode_dynamic",@{typ "Rounding option"},
                    call
                      ("FPCSR.FRM",(Word_Lib.mk_wordT 3),
                       apply
                         (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),
                          var("state",qTy)),@{theory}),@{theory}),
                 [(mop(Some,var("frm",@{typ Rounding})),
                   call
                     ("l3round",@{typ "L3_Lib.ieee_rounding option"},var("frm",@{typ Rounding}),
                      @{theory})),(lo @{typ Rounding},lo @{typ ieee_rounding})],@{context})),
             (mop(Some,var("frm",@{typ Rounding})),
              call
                ("l3round",@{typ "L3_Lib.ieee_rounding option"},var("frm",@{typ Rounding}),@{theory})),
             (lo @{typ Rounding},lo @{typ ieee_rounding})],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("RV32_CanonicalNan",lw(2143289344,32))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("RV64_CanonicalNan",lw(9221120237041090560,64))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP32_IsSignalingNan",
   close
     (var_w("x",32),
      bop(And,eq(ex(var_w("x",32),ln 30,ln 23,w8),lw(255,8)),
          bop(And,eq(bop(Bit,var_w("x",32),ln 22),lf),
              mop(Not,eq(ex(var_w("x",32),ln 21,ln 0,(Word_Lib.mk_wordT 22)),lw(0,22)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP64_IsSignalingNan",
   close
     (var_w("x",64),
      bop(And,eq(ex(var_w("x",64),ln 62,ln 52,(Word_Lib.mk_wordT 11)),lw(2047,11)),
          bop(And,eq(bop(Bit,var_w("x",64),ln 51),lf),
              mop(Not,eq(ex(var_w("x",64),ln 50,ln 0,(Word_Lib.mk_wordT 51)),lw(0,51)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FP32_Sign",close(var_w("x",32),bop(Bit,var_w("x",32),ln 31)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FP64_Sign",close(var_w("x",64),bop(Bit,var_w("x",64),ln 63)))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setFP_Invalid",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'fcsr",@{typ "state \<Rightarrow> state"},
               rupd
                 ("FPCSR.NV",
                  tp[apply
                       (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),var("state",qTy)),
                     lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setFP_DivZero",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'fcsr",@{typ "state \<Rightarrow> state"},
               rupd
                 ("FPCSR.DZ",
                  tp[apply
                       (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),var("state",qTy)),
                     lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setFP_Overflow",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'fcsr",@{typ "state \<Rightarrow> state"},
               rupd
                 ("FPCSR.OF",
                  tp[apply
                       (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),var("state",qTy)),
                     lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setFP_Underflow",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'fcsr",@{typ "state \<Rightarrow> state"},
               rupd
                 ("FPCSR.OF",
                  tp[apply
                       (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),var("state",qTy)),
                     lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setFP_Inexact",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'fcsr",@{typ "state \<Rightarrow> state"},
               rupd
                 ("FPCSR.OF",
                  tp[apply
                       (const("fcsr",@{typ "state \<Rightarrow> FPCSR"},@{theory}),var("state",qTy)),
                     lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("csrRW",close(var_w("csr",12),ex(var_w("csr",12),ln 11,ln 10,(Word_Lib.mk_wordT 2))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("csrPR",close(var_w("csr",12),ex(var_w("csr",12),ln 9,ln 8,(Word_Lib.mk_wordT 2))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("check_CSR_access",
   close
     (tp[var_w("rw",2),var_w("pr",2),var("p",@{typ Privilege}),var("a",@{typ accessType})],
      bop(And,
          bop(Or,eq(var("a",@{typ accessType}),lc("Read","accessType",@{theory})),
              mop(Not,eq(var_w("rw",2),lw(3,2)))),
          bop(Uge,call("privLevel",(Word_Lib.mk_wordT 2),var("p",@{typ Privilege}),@{theory}),
              var_w("pr",2)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("is_CSR_defined",
   close
     (var_w("csr",12),
      close
        (var("state",qTy),
         itb([(eq(var_w("csr",12),lw(0,12)),tp[lt,var("state",qTy)]),
              (eq(var_w("csr",12),lw(4,12)),tp[lt,var("state",qTy)]),
              (eq(var_w("csr",12),lw(5,12)),tp[lt,var("state",qTy)]),
              (bop(And,bop(Ge,var_w("csr",12),lw(1,12)),
                   bop(And,bop(Le,var_w("csr",12),lw(3,12)),
                       apply
                         (call("isFPEnabled",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                          var("state",qTy)))),tp[lt,var("state",qTy)]),
              (bop(And,bop(Ge,var_w("csr",12),lw(64,12)),bop(Le,var_w("csr",12),lw(68,12))),
               tp[lt,var("state",qTy)]),
              (bop(And,eq(var_w("csr",12),lw(3072,12)),
                   call
                     ("mcounteren.M_CY",HOLogic.boolT,
                      call
                        ("MachineCSR.mucounteren",@{typ mcounteren},
                         apply
                           (call
                              ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                               var("state",qTy),@{theory}),
                            call("state.procID",w8,var("state",qTy),@{theory})),@{theory}),@{theory})),
               tp[lt,var("state",qTy)]),
              (bop(And,eq(var_w("csr",12),lw(3073,12)),
                   call
                     ("mcounteren.M_TM",HOLogic.boolT,
                      call
                        ("MachineCSR.mucounteren",@{typ mcounteren},
                         apply
                           (call
                              ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                               var("state",qTy),@{theory}),
                            call("state.procID",w8,var("state",qTy),@{theory})),@{theory}),@{theory})),
               tp[lt,var("state",qTy)]),
              (bop(And,eq(var_w("csr",12),lw(3074,12)),
                   call
                     ("mcounteren.M_IR",HOLogic.boolT,
                      call
                        ("MachineCSR.mucounteren",@{typ mcounteren},
                         apply
                           (call
                              ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                               var("state",qTy),@{theory}),
                            call("state.procID",w8,var("state",qTy),@{theory})),@{theory}),@{theory})),
               tp[lt,var("state",qTy)])],
             let'
               (tp[var_b"v",var("s",qTy)],
                ite(bop(Or,
                        bop(And,eq(var_w("csr",12),lw(3200,12)),
                            call
                              ("mcounteren.M_CY",HOLogic.boolT,
                               call
                                 ("MachineCSR.mucounteren",@{typ mcounteren},
                                  apply
                                    (call
                                       ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                        var("state",qTy),@{theory}),
                                     call("state.procID",w8,var("state",qTy),@{theory})),@{theory}),
                               @{theory})),
                        bop(Or,
                            bop(And,eq(var_w("csr",12),lw(3201,12)),
                                call
                                  ("mcounteren.M_TM",HOLogic.boolT,
                                   call
                                     ("MachineCSR.mucounteren",@{typ mcounteren},
                                      apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("state",qTy),@{theory}),
                                         call("state.procID",w8,var("state",qTy),@{theory})),
                                      @{theory}),@{theory})),
                            bop(And,eq(var_w("csr",12),lw(3202,12)),
                                call
                                  ("mcounteren.M_IR",HOLogic.boolT,
                                   call
                                     ("MachineCSR.mucounteren",@{typ mcounteren},
                                      apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("state",qTy),@{theory}),
                                         call("state.procID",w8,var("state",qTy),@{theory})),
                                      @{theory}),@{theory})))),
                    apply
                      (call
                         ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                          @{theory}),var("state",qTy)),tp[lf,var("state",qTy)]),
                itb([(var_b"v",tp[lt,var("s",qTy)]),
                     (bop(And,bop(Ge,var_w("csr",12),lw(256,12)),
                          bop(And,bop(Le,var_w("csr",12),lw(261,12)),
                              mop(Not,eq(var_w("csr",12),lw(257,12))))),tp[lt,var("s",qTy)]),
                     (bop(And,bop(Ge,var_w("csr",12),lw(320,12)),bop(Le,var_w("csr",12),lw(324,12))),
                      tp[lt,var("s",qTy)]),(eq(var_w("csr",12),lw(384,12)),tp[lt,var("s",qTy)]),
                     (bop(And,eq(var_w("csr",12),lw(3328,12)),
                          call
                            ("mcounteren.M_CY",HOLogic.boolT,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory})),tp[lt,var("s",qTy)]),
                     (bop(And,eq(var_w("csr",12),lw(3329,12)),
                          call
                            ("mcounteren.M_TM",HOLogic.boolT,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory})),tp[lt,var("s",qTy)]),
                     (bop(And,eq(var_w("csr",12),lw(3330,12)),
                          call
                            ("mcounteren.M_IR",HOLogic.boolT,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory})),tp[lt,var("s",qTy)])],
                    let'
                      (tp[var_b"v",var("s",qTy)],
                       ite(bop(Or,
                               bop(And,eq(var_w("csr",12),lw(3456,12)),
                                   call
                                     ("mcounteren.M_CY",HOLogic.boolT,
                                      call
                                        ("MachineCSR.mucounteren",@{typ mcounteren},
                                         apply
                                           (call
                                              ("state.c_MCSR",
                                               @{typ "8 word \<Rightarrow> MachineCSR"},
                                               var("s",qTy),@{theory}),
                                            call("state.procID",w8,var("s",qTy),@{theory})),
                                         @{theory}),@{theory})),
                               bop(Or,
                                   bop(And,eq(var_w("csr",12),lw(3457,12)),
                                       call
                                         ("mcounteren.M_TM",HOLogic.boolT,
                                          call
                                            ("MachineCSR.mucounteren",@{typ mcounteren},
                                             apply
                                               (call
                                                  ("state.c_MCSR",
                                                   @{typ "8 word \<Rightarrow> MachineCSR"},
                                                   var("s",qTy),@{theory}),
                                                call("state.procID",w8,var("s",qTy),@{theory})),
                                             @{theory}),@{theory})),
                                   bop(And,eq(var_w("csr",12),lw(3458,12)),
                                       call
                                         ("mcounteren.M_IR",HOLogic.boolT,
                                          call
                                            ("MachineCSR.mucounteren",@{typ mcounteren},
                                             apply
                                               (call
                                                  ("state.c_MCSR",
                                                   @{typ "8 word \<Rightarrow> MachineCSR"},
                                                   var("s",qTy),@{theory}),
                                                call("state.procID",w8,var("s",qTy),@{theory})),
                                             @{theory}),@{theory})))),
                           apply
                             (call
                                ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 lu,@{theory}),var("s",qTy)),tp[lf,var("s",qTy)]),
                       itb([(var_b"v",tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(768,12)),
                                 bop(And,bop(Le,var_w("csr",12),lw(773,12)),
                                     mop(Not,eq(var_w("csr",12),lw(769,12))))),tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(784,12)),
                                 bop(Le,var_w("csr",12),lw(786,12))),tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(832,12)),
                                 bop(Le,var_w("csr",12),lw(836,12))),tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(896,12)),
                                 bop(Le,var_w("csr",12),lw(901,12))),tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(3840,12)),
                                 bop(Le,var_w("csr",12),lw(3842,12))),tp[lt,var("s",qTy)]),
                            (bop(And,bop(Ge,var_w("csr",12),lw(3856,12)),
                                 bop(Le,var_w("csr",12),lw(3860,12))),tp[lt,var("s",qTy)])],
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              ite(bop(Ge,var_w("csr",12),lw(3968,12)),
                                  ite(bop(Le,var_w("csr",12),lw(3970,12)),
                                      apply
                                        (call
                                           ("in32BitMode",
                                            @{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                                            @{theory}),var("s",qTy)),tp[lf,var("s",qTy)]),
                                  tp[lf,var("s",qTy)]),
                              itb([(var_b"v",tp[lt,var("s",qTy)]),
                                   (bop(And,bop(Ge,var_w("csr",12),lw(1792,12)),
                                        bop(Le,var_w("csr",12),lw(1794,12))),tp[lt,var("s",qTy)]),
                                   (bop(And,bop(Ge,var_w("csr",12),lw(1796,12)),
                                        bop(Le,var_w("csr",12),lw(1798,12))),tp[lt,var("s",qTy)]),
                                   (bop(And,bop(Ge,var_w("csr",12),lw(1800,12)),
                                        bop(Le,var_w("csr",12),lw(1802,12))),tp[lt,var("s",qTy)]),
                                   (bop(Or,
                                        bop(And,bop(Ge,var_w("csr",12),lw(1920,12)),
                                            bop(Le,var_w("csr",12),lw(1922,12))),
                                        bop(Or,
                                            bop(And,bop(Ge,var_w("csr",12),lw(1924,12)),
                                                bop(Le,var_w("csr",12),lw(1926,12))),
                                            bop(And,bop(Ge,var_w("csr",12),lw(1928,12)),
                                                bop(Le,var_w("csr",12),lw(1930,12))))),
                                    apply
                                      (call
                                         ("in32BitMode",
                                          @{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                                          @{theory}),var("s",qTy)))],tp[lf,var("s",qTy)]))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CSRMap",
   close
     (var_w("csr",12),
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            cs(tp[var_w("csr",12),var_b"v"],
               [(tp[var_w("v",12),lt],
                 itb([(eq(var_w("v",12),lw(0,12)),
                       tp[mop(SE w64,
                              call
                                ("status_to_32",w32,
                                 call
                                   ("reg'ustatus",w64,
                                    call
                                      ("to_ustatus",@{typ ustatus},
                                       call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          apply
                                            (call
                                               ("state.c_MCSR",
                                                @{typ "8 word \<Rightarrow> MachineCSR"},
                                                var("s",qTy),@{theory}),
                                             call("state.procID",w8,var("s",qTy),@{theory})),
                                          @{theory}),@{theory}),@{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(4,12)),
                       tp[mop(SE w64,
                              call
                                ("ie_to_32",w32,
                                 call
                                   ("reg'uie",w64,
                                    call
                                      ("to_uie",@{typ uie},
                                       call
                                         ("MachineCSR.mie",@{typ mie},
                                          apply
                                            (call
                                               ("state.c_MCSR",
                                                @{typ "8 word \<Rightarrow> MachineCSR"},
                                                var("s",qTy),@{theory}),
                                             call("state.procID",w8,var("s",qTy),@{theory})),
                                          @{theory}),@{theory}),@{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(5,12)),
                       tp[call
                            ("UserCSR.utvec",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(64,12)),
                       tp[call
                            ("UserCSR.uscratch",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(65,12)),
                       tp[call
                            ("UserCSR.uepc",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(66,12)),
                       tp[mop(SE w64,
                              call
                                ("cause_to_32",w32,
                                 call
                                   ("reg'mcause",w64,
                                    call
                                      ("UserCSR.ucause",@{typ mcause},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(67,12)),
                       tp[call
                            ("UserCSR.ubadaddr",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(68,12)),
                       tp[mop(SE w64,
                              call
                                ("reg'uip",w64,
                                 call
                                   ("to_uip",@{typ uip},
                                    call
                                      ("MachineCSR.mip",@{typ mip},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 4,ln 0,(Word_Lib.mk_wordT 5))),var("s",qTy)]),
                      (eq(var_w("v",12),lw(2,12)),
                       tp[mop(Cast w64,
                              call
                                ("FPCSR.FRM",(Word_Lib.mk_wordT 3),
                                 call
                                   ("UserCSR.fpcsr",@{typ FPCSR},
                                    apply
                                      (call
                                         ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 @{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 7,ln 0,w8)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3072,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mcycle",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mucycle_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3073,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mtime",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mutime_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3074,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.minstret",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.muinstret_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3200,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mcycle",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mucycle_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3201,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mtime",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mutime_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3202,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.minstret",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.muinstret_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(256,12)),
                       tp[mop(SE w64,
                              call
                                ("status_to_32",w32,
                                 call
                                   ("reg'sstatus",w64,
                                    call
                                      ("to_sstatus",@{typ sstatus},
                                       call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          apply
                                            (call
                                               ("state.c_MCSR",
                                                @{typ "8 word \<Rightarrow> MachineCSR"},
                                                var("s",qTy),@{theory}),
                                             call("state.procID",w8,var("s",qTy),@{theory})),
                                          @{theory}),@{theory}),@{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(258,12)),
                       tp[call
                            ("reg'sedeleg",w64,
                             call
                               ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(259,12)),
                       tp[call
                            ("reg'sideleg",w64,
                             call
                               ("SupervisorCSR.sideleg",@{typ sideleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(260,12)),
                       tp[mop(SE w64,
                              call
                                ("ie_to_32",w32,
                                 call
                                   ("reg'uie",w64,
                                    call
                                      ("to_uie",@{typ uie},
                                       call
                                         ("MachineCSR.mie",@{typ mie},
                                          apply
                                            (call
                                               ("state.c_MCSR",
                                                @{typ "8 word \<Rightarrow> MachineCSR"},
                                                var("s",qTy),@{theory}),
                                             call("state.procID",w8,var("s",qTy),@{theory})),
                                          @{theory}),@{theory}),@{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(261,12)),
                       tp[call
                            ("SupervisorCSR.stvec",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(320,12)),
                       tp[call
                            ("SupervisorCSR.sscratch",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(321,12)),
                       tp[call
                            ("SupervisorCSR.sepc",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(322,12)),
                       tp[mop(SE w64,
                              call
                                ("cause_to_32",w32,
                                 call
                                   ("reg'mcause",w64,
                                    call
                                      ("SupervisorCSR.scause",@{typ mcause},
                                       apply
                                         (call
                                            ("state.c_SCSR",
                                             @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(323,12)),
                       tp[call
                            ("SupervisorCSR.sbadaddr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(324,12)),
                       tp[mop(SE w64,
                              call
                                ("ip_to_32",w32,
                                 call
                                   ("reg'sip",w64,
                                    call
                                      ("to_sip",@{typ sip},
                                       call
                                         ("MachineCSR.mip",@{typ mip},
                                          apply
                                            (call
                                               ("state.c_MCSR",
                                                @{typ "8 word \<Rightarrow> MachineCSR"},
                                                var("s",qTy),@{theory}),
                                             call("state.procID",w8,var("s",qTy),@{theory})),
                                          @{theory}),@{theory}),@{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(384,12)),
                       tp[call
                            ("SupervisorCSR.sptbr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3328,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mcycle",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mscycle_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3329,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mtime",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mstime_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3330,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.minstret",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.msinstret_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3456,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mcycle",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mscycle_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3457,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.mtime",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.mstime_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3458,12)),
                       tp[mop(SE w64,
                              ex(bop(Add,
                                     call
                                       ("MachineCSR.minstret",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                     call
                                       ("MachineCSR.msinstret_delta",w64,
                                        apply
                                          (call
                                             ("state.c_MCSR",
                                              @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                              @{theory}),
                                           call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3856,12)),
                       tp[mop(SE w64,
                              call
                                ("isa_to_32",w32,
                                 call
                                   ("reg'misa",w64,
                                    call
                                      ("MachineCSR.misa",@{typ misa},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3857,12)),
                       tp[call
                            ("MachineCSR.mvendorid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3858,12)),
                       tp[call
                            ("MachineCSR.marchid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3859,12)),
                       tp[call
                            ("MachineCSR.mimpid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3860,12)),
                       tp[call
                            ("MachineCSR.mhartid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(768,12)),
                       tp[mop(SE w64,
                              call
                                ("status_to_32",w32,
                                 call
                                   ("reg'mstatus",w64,
                                    call
                                      ("MachineCSR.mstatus",@{typ mstatus},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(770,12)),
                       tp[call
                            ("reg'medeleg",w64,
                             call
                               ("MachineCSR.medeleg",@{typ medeleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(771,12)),
                       tp[call
                            ("reg'mideleg",w64,
                             call
                               ("MachineCSR.mideleg",@{typ mideleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(772,12)),
                       tp[mop(SE w64,
                              call
                                ("ie_to_32",w32,
                                 call
                                   ("reg'mie",w64,
                                    call
                                      ("MachineCSR.mie",@{typ mie},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(773,12)),
                       tp[call
                            ("MachineCSR.mtvec",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(832,12)),
                       tp[call
                            ("MachineCSR.mscratch",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(833,12)),
                       tp[call
                            ("MachineCSR.mepc",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(834,12)),
                       tp[mop(SE w64,
                              call
                                ("cause_to_32",w32,
                                 call
                                   ("reg'mcause",w64,
                                    call
                                      ("MachineCSR.mcause",@{typ mcause},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(835,12)),
                       tp[call
                            ("MachineCSR.mbadaddr",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(836,12)),
                       tp[mop(SE w64,
                              call
                                ("ip_to_32",w32,
                                 call
                                   ("reg'mip",w64,
                                    call
                                      ("MachineCSR.mip",@{typ mip},
                                       apply
                                         (call
                                            ("state.c_MCSR",
                                             @{typ "8 word \<Rightarrow> MachineCSR"},var("s",qTy),
                                             @{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),@{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(896,12)),
                       tp[call
                            ("MachineCSR.mbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(897,12)),
                       tp[call
                            ("MachineCSR.mbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(898,12)),
                       tp[call
                            ("MachineCSR.mibase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(899,12)),
                       tp[call
                            ("MachineCSR.mibound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(900,12)),
                       tp[call
                            ("MachineCSR.mdbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(901,12)),
                       tp[call
                            ("MachineCSR.mdbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3840,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mcycle",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3841,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mtime",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3842,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.minstret",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3968,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mcycle",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3969,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mtime",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3970,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.minstret",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(784,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mucounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(785,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(786,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mhcounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1792,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mucycle_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1793,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mutime_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1794,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.muinstret_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1796,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mscycle_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1797,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mstime_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1798,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.msinstret_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 31,ln 0,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1920,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mucycle_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1921,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mutime_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1922,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.muinstret_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1924,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mscycle_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1925,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.mstime_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1926,12)),
                       tp[mop(SE w64,
                              ex(call
                                   ("MachineCSR.msinstret_delta",w64,
                                    apply
                                      (call
                                         ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 ln 63,ln 32,w32)),var("s",qTy)])],
                     apply
                       (call
                          ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                           call
                             ("exception.UNDEFINED",@{typ exception},
                              cc[ls"unexpected CSR read at ",
                                 mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                        var("s",qTy)))),
                (tp[var_w("v",12),lf],
                 itb([(eq(var_w("v",12),lw(0,12)),
                       tp[call
                            ("reg'ustatus",w64,
                             call
                               ("to_ustatus",@{typ ustatus},
                                call
                                  ("MachineCSR.mstatus",@{typ mstatus},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(4,12)),
                       tp[call
                            ("reg'uie",w64,
                             call
                               ("to_uie",@{typ uie},
                                call
                                  ("MachineCSR.mie",@{typ mie},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(5,12)),
                       tp[call
                            ("UserCSR.utvec",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(64,12)),
                       tp[call
                            ("UserCSR.uscratch",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(65,12)),
                       tp[call
                            ("UserCSR.uepc",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(66,12)),
                       tp[call
                            ("reg'mcause",w64,
                             call
                               ("UserCSR.ucause",@{typ mcause},
                                apply
                                  (call
                                     ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(67,12)),
                       tp[call
                            ("UserCSR.ubadaddr",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(68,12)),
                       tp[call
                            ("reg'uip",w64,
                             call
                               ("to_uip",@{typ uip},
                                call
                                  ("MachineCSR.mip",@{typ mip},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 4,ln 0,(Word_Lib.mk_wordT 5))),var("s",qTy)]),
                      (eq(var_w("v",12),lw(2,12)),
                       tp[mop(Cast w64,
                              call
                                ("FPCSR.FRM",(Word_Lib.mk_wordT 3),
                                 call
                                   ("UserCSR.fpcsr",@{typ FPCSR},
                                    apply
                                      (call
                                         ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 @{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 7,ln 0,w8)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3072,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.mcycle",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.mucycle_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3073,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.mtime",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.mutime_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3074,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.minstret",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.muinstret_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(256,12)),
                       tp[call
                            ("reg'sstatus",w64,
                             call
                               ("to_sstatus",@{typ sstatus},
                                call
                                  ("MachineCSR.mstatus",@{typ mstatus},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(258,12)),
                       tp[call
                            ("reg'sedeleg",w64,
                             call
                               ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(259,12)),
                       tp[call
                            ("reg'sideleg",w64,
                             call
                               ("SupervisorCSR.sideleg",@{typ sideleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(260,12)),
                       tp[call
                            ("reg'sie",w64,
                             call
                               ("to_sie",@{typ sie},
                                call
                                  ("MachineCSR.mie",@{typ mie},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(261,12)),
                       tp[call
                            ("SupervisorCSR.stvec",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(320,12)),
                       tp[call
                            ("SupervisorCSR.sscratch",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(321,12)),
                       tp[call
                            ("SupervisorCSR.sepc",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(322,12)),
                       tp[call
                            ("reg'mcause",w64,
                             call
                               ("SupervisorCSR.scause",@{typ mcause},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(323,12)),
                       tp[call
                            ("SupervisorCSR.sbadaddr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(324,12)),
                       tp[call
                            ("reg'sip",w64,
                             call
                               ("to_sip",@{typ sip},
                                call
                                  ("MachineCSR.mip",@{typ mip},
                                   apply
                                     (call
                                        ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                @{theory}),@{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(384,12)),
                       tp[call
                            ("SupervisorCSR.sptbr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3328,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.mcycle",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.mscycle_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3329,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.mtime",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.mstime_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3330,12)),
                       tp[bop(Add,
                              call
                                ("MachineCSR.minstret",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                              call
                                ("MachineCSR.msinstret_delta",w64,
                                 apply
                                   (call
                                      ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory})),@{theory})),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3856,12)),
                       tp[call
                            ("reg'misa",w64,
                             call
                               ("MachineCSR.misa",@{typ misa},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3857,12)),
                       tp[call
                            ("MachineCSR.mvendorid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3858,12)),
                       tp[call
                            ("MachineCSR.marchid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3859,12)),
                       tp[call
                            ("MachineCSR.mimpid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3860,12)),
                       tp[call
                            ("MachineCSR.mhartid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(768,12)),
                       tp[call
                            ("reg'mstatus",w64,
                             call
                               ("MachineCSR.mstatus",@{typ mstatus},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(770,12)),
                       tp[call
                            ("reg'medeleg",w64,
                             call
                               ("MachineCSR.medeleg",@{typ medeleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(771,12)),
                       tp[call
                            ("reg'mideleg",w64,
                             call
                               ("MachineCSR.mideleg",@{typ mideleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(772,12)),
                       tp[call
                            ("reg'mie",w64,
                             call
                               ("MachineCSR.mie",@{typ mie},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(773,12)),
                       tp[call
                            ("MachineCSR.mtvec",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(832,12)),
                       tp[call
                            ("MachineCSR.mscratch",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(833,12)),
                       tp[call
                            ("MachineCSR.mepc",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(834,12)),
                       tp[call
                            ("reg'mcause",w64,
                             call
                               ("MachineCSR.mcause",@{typ mcause},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(835,12)),
                       tp[call
                            ("MachineCSR.mbadaddr",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(836,12)),
                       tp[call
                            ("reg'mip",w64,
                             call
                               ("MachineCSR.mip",@{typ mip},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(896,12)),
                       tp[call
                            ("MachineCSR.mbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(897,12)),
                       tp[call
                            ("MachineCSR.mbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(898,12)),
                       tp[call
                            ("MachineCSR.mibase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(899,12)),
                       tp[call
                            ("MachineCSR.mibound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(900,12)),
                       tp[call
                            ("MachineCSR.mdbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(901,12)),
                       tp[call
                            ("MachineCSR.mdbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3840,12)),
                       tp[call
                            ("MachineCSR.mcycle",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3841,12)),
                       tp[call
                            ("MachineCSR.mtime",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3842,12)),
                       tp[call
                            ("MachineCSR.minstret",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(784,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mucounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(785,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(786,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mhcounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(1792,12)),
                       tp[call
                            ("MachineCSR.mucycle_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1793,12)),
                       tp[call
                            ("MachineCSR.mutime_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1794,12)),
                       tp[call
                            ("MachineCSR.muinstret_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1796,12)),
                       tp[call
                            ("MachineCSR.mscycle_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1797,12)),
                       tp[call
                            ("MachineCSR.mstime_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1798,12)),
                       tp[call
                            ("MachineCSR.msinstret_delta",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)])],
                     apply
                       (call
                          ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                           call
                             ("exception.UNDEFINED",@{typ exception},
                              cc[ls"unexpected CSR read at ",
                                 mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                        var("s",qTy)))),
                (tp[var_w("v",12),var_b"v0"],
                 itb([(eq(var_w("v",12),lw(5,12)),
                       tp[call
                            ("UserCSR.utvec",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(64,12)),
                       tp[call
                            ("UserCSR.uscratch",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(65,12)),
                       tp[call
                            ("UserCSR.uepc",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(67,12)),
                       tp[call
                            ("UserCSR.ubadaddr",w64,
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(1,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 4,ln 0,(Word_Lib.mk_wordT 5))),var("s",qTy)]),
                      (eq(var_w("v",12),lw(2,12)),
                       tp[mop(Cast w64,
                              call
                                ("FPCSR.FRM",(Word_Lib.mk_wordT 3),
                                 call
                                   ("UserCSR.fpcsr",@{typ FPCSR},
                                    apply
                                      (call
                                         ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                 @{theory})),var("s",qTy)]),
                      (eq(var_w("v",12),lw(3,12)),
                       tp[mop(Cast w64,
                              ex(call
                                   ("reg'FPCSR",w32,
                                    call
                                      ("UserCSR.fpcsr",@{typ FPCSR},
                                       apply
                                         (call
                                            ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                             var("s",qTy),@{theory}),
                                          call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                                    @{theory}),ln 7,ln 0,w8)),var("s",qTy)]),
                      (eq(var_w("v",12),lw(258,12)),
                       tp[call
                            ("reg'sedeleg",w64,
                             call
                               ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(259,12)),
                       tp[call
                            ("reg'sideleg",w64,
                             call
                               ("SupervisorCSR.sideleg",@{typ sideleg},
                                apply
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(261,12)),
                       tp[call
                            ("SupervisorCSR.stvec",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(320,12)),
                       tp[call
                            ("SupervisorCSR.sscratch",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(321,12)),
                       tp[call
                            ("SupervisorCSR.sepc",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(323,12)),
                       tp[call
                            ("SupervisorCSR.sbadaddr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(384,12)),
                       tp[call
                            ("SupervisorCSR.sptbr",w64,
                             apply
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3857,12)),
                       tp[call
                            ("MachineCSR.mvendorid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3858,12)),
                       tp[call
                            ("MachineCSR.marchid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3859,12)),
                       tp[call
                            ("MachineCSR.mimpid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(3860,12)),
                       tp[call
                            ("MachineCSR.mhartid",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(770,12)),
                       tp[call
                            ("reg'medeleg",w64,
                             call
                               ("MachineCSR.medeleg",@{typ medeleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(771,12)),
                       tp[call
                            ("reg'mideleg",w64,
                             call
                               ("MachineCSR.mideleg",@{typ mideleg},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(773,12)),
                       tp[call
                            ("MachineCSR.mtvec",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(832,12)),
                       tp[call
                            ("MachineCSR.mscratch",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(833,12)),
                       tp[call
                            ("MachineCSR.mepc",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(835,12)),
                       tp[call
                            ("MachineCSR.mbadaddr",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(896,12)),
                       tp[call
                            ("MachineCSR.mbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(897,12)),
                       tp[call
                            ("MachineCSR.mbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(898,12)),
                       tp[call
                            ("MachineCSR.mibase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(899,12)),
                       tp[call
                            ("MachineCSR.mibound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(900,12)),
                       tp[call
                            ("MachineCSR.mdbase",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(901,12)),
                       tp[call
                            ("MachineCSR.mdbound",w64,
                             apply
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                          var("s",qTy)]),
                      (eq(var_w("v",12),lw(784,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mucounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(785,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mscounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)]),
                      (eq(var_w("v",12),lw(786,12)),
                       tp[call
                            ("reg'mcounteren",w64,
                             call
                               ("MachineCSR.mhcounteren",@{typ mcounteren},
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),@{theory}),
                             @{theory}),var("s",qTy)])],
                     apply
                       (call
                          ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                           call
                             ("exception.UNDEFINED",@{typ exception},
                              cc[ls"unexpected CSR read at ",
                                 mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                        var("s",qTy))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CSRMap",
   close
     (tp[var_w("value",64),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            cs(tp[var_w("csr",12),var_b"v"],
               [(tp[var_w("v",12),lt],
                 itb([(eq(var_w("v",12),lw(0,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstatus",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_ustatus",@{typ mstatus},
                                         tp[call
                                              ("rec'ustatus",@{typ ustatus},
                                               call
                                                 ("status_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(4,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mie",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_uie",@{typ mie},
                                         tp[call
                                              ("rec'uie",@{typ uie},
                                               call
                                                 ("ie_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mie",@{typ mie},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(5,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.utvec",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(64,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uscratch",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(65,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uepc",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(66,12)),
                       let'
                         (var("v",@{typ UserCSR}),
                          apply
                            (call
                               ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("s",qTy),
                                @{theory}),call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_UCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("UserCSR.ucause",
                                      tp[var("v",@{typ UserCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("UserCSR.ucause",@{typ mcause},
                                                  var("v",@{typ UserCSR}),@{theory}),
                                               call
                                                 ("cause_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(67,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.ubadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(68,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mip",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_uip",@{typ mip},
                                         tp[call
                                              ("rec'uip",@{typ uip},
                                               call
                                                 ("ip_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mip",@{typ mip},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             let'
                               (var("x1",@{typ FPCSR}),
                                call("UserCSR.fpcsr",@{typ FPCSR},var("v",@{typ UserCSR}),@{theory}),
                                rupd
                                  ("state.c_UCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("UserCSR.fpcsr",
                                            tp[var("v",@{typ UserCSR}),
                                               call
                                                 ("write'reg'FPCSR",@{typ FPCSR},
                                                  tp[var("x1",@{typ FPCSR}),
                                                     bfi(ln 4,ln 0,
                                                         ex(var_w("value",64),ln 4,ln 0,
                                                            (Word_Lib.mk_wordT 5)),
                                                         call
                                                           ("reg'FPCSR",w32,var("x1",@{typ FPCSR}),
                                                            @{theory}))],@{theory})],@{theory}))],
                                   @{theory}))),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(2,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            rupd
                                              ("FPCSR.FRM",
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 2,ln 0,
                                                     (Word_Lib.mk_wordT 3))],@{theory})],@{theory}))],
                                @{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(3,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            call
                                              ("write'reg'FPCSR",@{typ FPCSR},
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                                         @{theory}))],@{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(256,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstatus",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sstatus",@{typ mstatus},
                                         tp[call
                                              ("rec'sstatus",@{typ sstatus},
                                               call
                                                 ("status_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(258,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sedeleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sedeleg",@{typ sedeleg},
                                            tp[call
                                                 ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(259,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sideleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sideleg",@{typ sideleg},
                                            tp[call
                                                 ("SupervisorCSR.sideleg",@{typ sideleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(260,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mie",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sie",@{typ mie},
                                         tp[call
                                              ("rec'sie",@{typ sie},
                                               call
                                                 ("ie_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mie",@{typ mie},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(261,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.stvec",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(320,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sscratch",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(321,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sepc",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(322,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.scause",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("SupervisorCSR.scause",@{typ mcause},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               call
                                                 ("cause_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(323,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(324,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mip",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sip",@{typ mip},
                                         tp[call
                                              ("rec'sip",@{typ sip},
                                               call
                                                 ("ip_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mip",@{typ mip},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(384,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sptbr",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      mop(SE w64,
                                          call
                                            ("reg'sptbr32",w32,
                                             call
                                               ("rec'sptbr32",@{typ sptbr32},
                                                ex(var_w("value",64),ln 31,ln 0,w32),@{theory}),
                                             @{theory}))],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(768,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mstatus",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mstatus",@{typ mstatus},
                                            tp[call
                                                 ("MachineCSR.mstatus",@{typ mstatus},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               call
                                                 ("status_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(770,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.medeleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'medeleg",@{typ medeleg},
                                            tp[call
                                                 ("MachineCSR.medeleg",@{typ medeleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(771,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mideleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mideleg",@{typ mideleg},
                                            tp[call
                                                 ("MachineCSR.mideleg",@{typ mideleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(772,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mie",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mie",@{typ mie},
                                            tp[call
                                                 ("MachineCSR.mie",@{typ mie},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               call
                                                 ("ie_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(773,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mtvec",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(832,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscratch",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(833,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mepc",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(834,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mcause",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("MachineCSR.mcause",@{typ mcause},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               call
                                                 ("cause_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(835,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(836,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mip",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mip",@{typ mip},
                                            tp[call
                                                 ("MachineCSR.mip",@{typ mip},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               call
                                                 ("ip_of_32",w64,
                                                  ex(var_w("value",64),ln 31,ln 0,w32),@{theory})],
                                            @{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(896,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(897,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(898,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(899,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(900,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(901,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(784,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mucounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mucounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(785,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mscounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mscounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(786,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mhcounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mhcounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(1792,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mucycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1793,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mutime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1794,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.muinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1796,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1797,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1798,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.msinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1920,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mucycle_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.mucycle_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory}))),
                      (eq(var_w("v",12),lw(1921,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mutime_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.mutime_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory}))),
                      (eq(var_w("v",12),lw(1922,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.muinstret_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.muinstret_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory}))),
                      (eq(var_w("v",12),lw(1924,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mscycle_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.mscycle_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory}))),
                      (eq(var_w("v",12),lw(1925,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mstime_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.mstime_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory}))),
                      (eq(var_w("v",12),lw(1926,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.msinstret_delta",
                                      tp[var("v",@{typ MachineCSR}),
                                         bfi(ln 63,ln 32,ex(var_w("value",64),ln 31,ln 0,w32),
                                             call
                                               ("MachineCSR.msinstret_delta",w64,
                                                var("v",@{typ MachineCSR}),@{theory}))],@{theory}))],
                             @{theory})))],
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.INTERNAL_ERROR",@{typ exception},
                                  cc[ls"unexpected CSR write to ",
                                     mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                            var("s",qTy))))),
                (tp[var_w("v",12),lf],
                 itb([(eq(var_w("v",12),lw(0,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstatus",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_ustatus",@{typ mstatus},
                                         tp[call
                                              ("rec'ustatus",@{typ ustatus},var_w("value",64),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(4,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mie",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_uie",@{typ mie},
                                         tp[call("rec'uie",@{typ uie},var_w("value",64),@{theory}),
                                            call
                                              ("MachineCSR.mie",@{typ mie},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(5,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.utvec",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(64,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uscratch",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(65,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uepc",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(66,12)),
                       let'
                         (var("v",@{typ UserCSR}),
                          apply
                            (call
                               ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},var("s",qTy),
                                @{theory}),call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_UCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("UserCSR.ucause",
                                      tp[var("v",@{typ UserCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("UserCSR.ucause",@{typ mcause},
                                                  var("v",@{typ UserCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(67,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.ubadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(68,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mip",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_uip",@{typ mip},
                                         tp[call("rec'uip",@{typ uip},var_w("value",64),@{theory}),
                                            call
                                              ("MachineCSR.mip",@{typ mip},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             let'
                               (var("x1",@{typ FPCSR}),
                                call("UserCSR.fpcsr",@{typ FPCSR},var("v",@{typ UserCSR}),@{theory}),
                                rupd
                                  ("state.c_UCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("UserCSR.fpcsr",
                                            tp[var("v",@{typ UserCSR}),
                                               call
                                                 ("write'reg'FPCSR",@{typ FPCSR},
                                                  tp[var("x1",@{typ FPCSR}),
                                                     bfi(ln 4,ln 0,
                                                         ex(var_w("value",64),ln 4,ln 0,
                                                            (Word_Lib.mk_wordT 5)),
                                                         call
                                                           ("reg'FPCSR",w32,var("x1",@{typ FPCSR}),
                                                            @{theory}))],@{theory})],@{theory}))],
                                   @{theory}))),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(2,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            rupd
                                              ("FPCSR.FRM",
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 2,ln 0,
                                                     (Word_Lib.mk_wordT 3))],@{theory})],@{theory}))],
                                @{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(3,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            call
                                              ("write'reg'FPCSR",@{typ FPCSR},
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                                         @{theory}))],@{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(256,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstatus",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sstatus",@{typ mstatus},
                                         tp[call
                                              ("rec'sstatus",@{typ sstatus},var_w("value",64),
                                               @{theory}),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(258,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sedeleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sedeleg",@{typ sedeleg},
                                            tp[call
                                                 ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(259,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sideleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sideleg",@{typ sideleg},
                                            tp[call
                                                 ("SupervisorCSR.sideleg",@{typ sideleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(260,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mie",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sie",@{typ mie},
                                         tp[call("rec'sie",@{typ sie},var_w("value",64),@{theory}),
                                            call
                                              ("MachineCSR.mie",@{typ mie},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(261,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.stvec",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(320,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sscratch",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(321,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sepc",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(322,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.scause",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("SupervisorCSR.scause",@{typ mcause},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(323,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(324,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mip",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("of_sip",@{typ mip},
                                         tp[call("rec'sip",@{typ sip},var_w("value",64),@{theory}),
                                            call
                                              ("MachineCSR.mip",@{typ mip},
                                               apply
                                                 (call
                                                    ("state.c_MCSR",
                                                     @{typ "8 word \<Rightarrow> MachineCSR"},
                                                     var("s",qTy),@{theory}),
                                                  call("state.procID",w8,var("s",qTy),@{theory})),
                                               @{theory})],@{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(384,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sptbr",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      call
                                        ("reg'sptbr64",w64,
                                         call
                                           ("rec'sptbr64",@{typ sptbr64},var_w("value",64),@{theory}),
                                         @{theory})],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(768,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mstatus",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mstatus",@{typ mstatus},
                                            tp[call
                                                 ("MachineCSR.mstatus",@{typ mstatus},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(770,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.medeleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'medeleg",@{typ medeleg},
                                            tp[call
                                                 ("MachineCSR.medeleg",@{typ medeleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(771,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mideleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mideleg",@{typ mideleg},
                                            tp[call
                                                 ("MachineCSR.mideleg",@{typ mideleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(772,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mie",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mie",@{typ mie},
                                            tp[call
                                                 ("MachineCSR.mie",@{typ mie},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(773,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mtvec",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(832,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscratch",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(833,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mepc",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(834,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mcause",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcause",@{typ mcause},
                                            tp[call
                                                 ("MachineCSR.mcause",@{typ mcause},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(835,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(836,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mip",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mip",@{typ mip},
                                            tp[call
                                                 ("MachineCSR.mip",@{typ mip},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(896,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(897,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(898,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(899,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(900,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(901,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(784,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mucounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mucounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(785,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mscounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mscounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(786,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mhcounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mhcounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(1792,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mucycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1793,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mutime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1794,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.muinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1796,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1797,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1798,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.msinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory}))],
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.INTERNAL_ERROR",@{typ exception},
                                  cc[ls"unexpected CSR write to ",
                                     mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                            var("s",qTy))))),
                (tp[var_w("v",12),var_b"v0"],
                 itb([(eq(var_w("v",12),lw(5,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.utvec",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(64,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uscratch",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(65,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.uepc",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(67,12)),
                       rupd
                         ("state.c_UCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("UserCSR.ubadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             let'
                               (var("x1",@{typ FPCSR}),
                                call("UserCSR.fpcsr",@{typ FPCSR},var("v",@{typ UserCSR}),@{theory}),
                                rupd
                                  ("state.c_UCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("UserCSR.fpcsr",
                                            tp[var("v",@{typ UserCSR}),
                                               call
                                                 ("write'reg'FPCSR",@{typ FPCSR},
                                                  tp[var("x1",@{typ FPCSR}),
                                                     bfi(ln 4,ln 0,
                                                         ex(var_w("value",64),ln 4,ln 0,
                                                            (Word_Lib.mk_wordT 5)),
                                                         call
                                                           ("reg'FPCSR",w32,var("x1",@{typ FPCSR}),
                                                            @{theory}))],@{theory})],@{theory}))],
                                   @{theory}))),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(2,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            rupd
                                              ("FPCSR.FRM",
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 2,ln 0,
                                                     (Word_Lib.mk_wordT 3))],@{theory})],@{theory}))],
                                @{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(3,12)),
                       let'
                         (var("s",qTy),
                          let'
                            (var("v",@{typ UserCSR}),
                             apply
                               (call
                                  ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory})),
                             rupd
                               ("state.c_UCSR",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.c_UCSR",@{typ "8 word \<Rightarrow> UserCSR"},
                                         var("s",qTy),@{theory}),
                                      call("state.procID",w8,var("s",qTy),@{theory}),
                                      rupd
                                        ("UserCSR.fpcsr",
                                         tp[var("v",@{typ UserCSR}),
                                            call
                                              ("write'reg'FPCSR",@{typ FPCSR},
                                               tp[call
                                                    ("UserCSR.fpcsr",@{typ FPCSR},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                                         @{theory}))],@{theory})),
                          let'
                            (var("s",qTy),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_FS",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),
                                                     call
                                                       ("ext_status",(Word_Lib.mk_wordT 2),
                                                        lc("Dirty","ExtStatus",@{theory}),@{theory})],
                                                  @{theory})],@{theory}))],@{theory})),
                             let'
                               (var("v",@{typ MachineCSR}),
                                apply
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory})),
                                rupd
                                  ("state.c_MCSR",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory}),
                                         rupd
                                           ("MachineCSR.mstatus",
                                            tp[var("v",@{typ MachineCSR}),
                                               rupd
                                                 ("mstatus.M_SD",
                                                  tp[call
                                                       ("MachineCSR.mstatus",@{typ mstatus},
                                                        var("v",@{typ MachineCSR}),@{theory}),lt],
                                                  @{theory})],@{theory}))],@{theory}))))),
                      (eq(var_w("v",12),lw(258,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sedeleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sedeleg",@{typ sedeleg},
                                            tp[call
                                                 ("SupervisorCSR.sedeleg",@{typ sedeleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(259,12)),
                       let'
                         (var("v",@{typ SupervisorCSR}),
                          apply
                            (call
                               ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_SCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("SupervisorCSR.sideleg",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         call
                                           ("write'reg'sideleg",@{typ sideleg},
                                            tp[call
                                                 ("SupervisorCSR.sideleg",@{typ sideleg},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(261,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.stvec",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(320,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sscratch",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(321,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sepc",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(323,12)),
                       rupd
                         ("state.c_SCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_SCSR",@{typ "8 word \<Rightarrow> SupervisorCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("SupervisorCSR.sbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_SCSR",
                                            @{typ "8 word \<Rightarrow> SupervisorCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(770,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.medeleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'medeleg",@{typ medeleg},
                                            tp[call
                                                 ("MachineCSR.medeleg",@{typ medeleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(771,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mideleg",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mideleg",@{typ mideleg},
                                            tp[call
                                                 ("MachineCSR.mideleg",@{typ mideleg},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(773,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mtvec",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(832,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscratch",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(833,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mepc",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      bop(BAnd,var_w("value",64),mop(SE w64,lw(4,3)))],@{theory}))],
                          @{theory})),
                      (eq(var_w("v",12),lw(835,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbadaddr",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(896,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(897,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(898,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(899,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mibound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(900,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbase",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(901,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mdbound",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(784,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mucounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mucounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(785,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mscounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mscounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(786,12)),
                       let'
                         (var("v",@{typ MachineCSR}),
                          apply
                            (call
                               ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                var("s",qTy),@{theory}),
                             call("state.procID",w8,var("s",qTy),@{theory})),
                          rupd
                            ("state.c_MCSR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                      var("s",qTy),@{theory}),
                                   call("state.procID",w8,var("s",qTy),@{theory}),
                                   rupd
                                     ("MachineCSR.mhcounteren",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("write'reg'mcounteren",@{typ mcounteren},
                                            tp[call
                                                 ("MachineCSR.mhcounteren",@{typ mcounteren},
                                                  var("v",@{typ MachineCSR}),@{theory}),
                                               var_w("value",64)],@{theory})],@{theory}))],@{theory}))),
                      (eq(var_w("v",12),lw(1792,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mucycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1793,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mutime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1794,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.muinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1796,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mscycle_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1797,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.mstime_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory})),
                      (eq(var_w("v",12),lw(1798,12)),
                       rupd
                         ("state.c_MCSR",
                          tp[var("s",qTy),
                             fupd
                               (call
                                  ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                   var("s",qTy),@{theory}),
                                call("state.procID",w8,var("s",qTy),@{theory}),
                                rupd
                                  ("MachineCSR.msinstret_delta",
                                   tp[apply
                                        (call
                                           ("state.c_MCSR",@{typ "8 word \<Rightarrow> MachineCSR"},
                                            var("s",qTy),@{theory}),
                                         call("state.procID",w8,var("s",qTy),@{theory})),
                                      var_w("value",64)],@{theory}))],@{theory}))],
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.INTERNAL_ERROR",@{typ exception},
                                  cc[ls"unexpected CSR write to ",
                                     mop(Cast(@{typ string}),var_w("csr",12))],@{theory}),@{theory}),
                            var("s",qTy)))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("csrName",
   close
     (var_w("csr",12),
      itb([(eq(var_w("csr",12),lw(0,12)),ls"ustatus"),(eq(var_w("csr",12),lw(4,12)),ls"uie"),
           (eq(var_w("csr",12),lw(5,12)),ls"utvec"),(eq(var_w("csr",12),lw(1,12)),ls"fflags"),
           (eq(var_w("csr",12),lw(2,12)),ls"frm"),(eq(var_w("csr",12),lw(3,12)),ls"fcsr"),
           (eq(var_w("csr",12),lw(3072,12)),ls"cycle"),(eq(var_w("csr",12),lw(3073,12)),ls"time"),
           (eq(var_w("csr",12),lw(3074,12)),ls"instret"),
           (eq(var_w("csr",12),lw(3200,12)),ls"cycleh"),(eq(var_w("csr",12),lw(3201,12)),ls"timeh"),
           (eq(var_w("csr",12),lw(3202,12)),ls"instreth"),
           (eq(var_w("csr",12),lw(256,12)),ls"sstatus"),
           (eq(var_w("csr",12),lw(258,12)),ls"sedeleg"),
           (eq(var_w("csr",12),lw(259,12)),ls"sideleg"),(eq(var_w("csr",12),lw(260,12)),ls"sie"),
           (eq(var_w("csr",12),lw(261,12)),ls"stvec"),(eq(var_w("csr",12),lw(320,12)),ls"sscratch"),
           (eq(var_w("csr",12),lw(321,12)),ls"sepc"),(eq(var_w("csr",12),lw(322,12)),ls"scause"),
           (eq(var_w("csr",12),lw(323,12)),ls"sbadaddr"),(eq(var_w("csr",12),lw(324,12)),ls"sip"),
           (eq(var_w("csr",12),lw(384,12)),ls"sptbr"),(eq(var_w("csr",12),lw(3328,12)),ls"scycle"),
           (eq(var_w("csr",12),lw(3329,12)),ls"stime"),
           (eq(var_w("csr",12),lw(3330,12)),ls"sinstret"),
           (eq(var_w("csr",12),lw(3456,12)),ls"scycleh"),
           (eq(var_w("csr",12),lw(3457,12)),ls"stimeh"),
           (eq(var_w("csr",12),lw(3458,12)),ls"sinstreth"),
           (eq(var_w("csr",12),lw(512,12)),ls"hstatus"),
           (eq(var_w("csr",12),lw(514,12)),ls"hedeleg"),
           (eq(var_w("csr",12),lw(515,12)),ls"hideleg"),(eq(var_w("csr",12),lw(516,12)),ls"hie"),
           (eq(var_w("csr",12),lw(517,12)),ls"htvec"),(eq(var_w("csr",12),lw(576,12)),ls"hscratch"),
           (eq(var_w("csr",12),lw(577,12)),ls"hepc"),(eq(var_w("csr",12),lw(578,12)),ls"hcause"),
           (eq(var_w("csr",12),lw(579,12)),ls"hbadaddr"),
           (eq(var_w("csr",12),lw(3584,12)),ls"hcycle"),(eq(var_w("csr",12),lw(3585,12)),ls"htime"),
           (eq(var_w("csr",12),lw(3586,12)),ls"hinstret"),
           (eq(var_w("csr",12),lw(3712,12)),ls"hcycleh"),
           (eq(var_w("csr",12),lw(3713,12)),ls"htimeh"),
           (eq(var_w("csr",12),lw(3714,12)),ls"hinstreth"),
           (eq(var_w("csr",12),lw(3856,12)),ls"misa"),
           (eq(var_w("csr",12),lw(3857,12)),ls"mvendorid"),
           (eq(var_w("csr",12),lw(3858,12)),ls"marchid"),
           (eq(var_w("csr",12),lw(3859,12)),ls"mimpid"),
           (eq(var_w("csr",12),lw(3860,12)),ls"mhartid"),
           (eq(var_w("csr",12),lw(768,12)),ls"mstatus"),
           (eq(var_w("csr",12),lw(770,12)),ls"medeleg"),
           (eq(var_w("csr",12),lw(771,12)),ls"mideleg"),(eq(var_w("csr",12),lw(772,12)),ls"mie"),
           (eq(var_w("csr",12),lw(773,12)),ls"mtvec"),(eq(var_w("csr",12),lw(832,12)),ls"mscratch"),
           (eq(var_w("csr",12),lw(833,12)),ls"mepc"),(eq(var_w("csr",12),lw(834,12)),ls"mcause"),
           (eq(var_w("csr",12),lw(835,12)),ls"mbadaddr"),(eq(var_w("csr",12),lw(836,12)),ls"mip"),
           (eq(var_w("csr",12),lw(896,12)),ls"mbase"),(eq(var_w("csr",12),lw(897,12)),ls"mbound"),
           (eq(var_w("csr",12),lw(898,12)),ls"mibase"),(eq(var_w("csr",12),lw(899,12)),ls"mibound"),
           (eq(var_w("csr",12),lw(900,12)),ls"mdbase"),(eq(var_w("csr",12),lw(901,12)),ls"mdbound"),
           (eq(var_w("csr",12),lw(3840,12)),ls"mcycle"),(eq(var_w("csr",12),lw(3841,12)),ls"mtime"),
           (eq(var_w("csr",12),lw(3842,12)),ls"minstret"),
           (eq(var_w("csr",12),lw(3968,12)),ls"mcycleh"),
           (eq(var_w("csr",12),lw(3969,12)),ls"mtimeh"),
           (eq(var_w("csr",12),lw(3970,12)),ls"minstreth"),
           (eq(var_w("csr",12),lw(784,12)),ls"mucounteren"),
           (eq(var_w("csr",12),lw(785,12)),ls"mscounteren"),
           (eq(var_w("csr",12),lw(786,12)),ls"mhcounteren"),
           (eq(var_w("csr",12),lw(1792,12)),ls"mucycle_delta"),
           (eq(var_w("csr",12),lw(1793,12)),ls"mutime_delta"),
           (eq(var_w("csr",12),lw(1794,12)),ls"muinstret_delta"),
           (eq(var_w("csr",12),lw(1796,12)),ls"mscycle_delta"),
           (eq(var_w("csr",12),lw(1797,12)),ls"mstime_delta"),
           (eq(var_w("csr",12),lw(1798,12)),ls"msinstret_delta"),
           (eq(var_w("csr",12),lw(1800,12)),ls"mhcycle_delta"),
           (eq(var_w("csr",12),lw(1801,12)),ls"mhtime_delta"),
           (eq(var_w("csr",12),lw(1802,12)),ls"mhinstret_delta"),
           (eq(var_w("csr",12),lw(1920,12)),ls"mucycle_deltah"),
           (eq(var_w("csr",12),lw(1921,12)),ls"mutime_deltah"),
           (eq(var_w("csr",12),lw(1922,12)),ls"muinstret_deltah"),
           (eq(var_w("csr",12),lw(1924,12)),ls"mscycle_deltah"),
           (eq(var_w("csr",12),lw(1925,12)),ls"mstime_deltah"),
           (eq(var_w("csr",12),lw(1926,12)),ls"msinstret_deltah"),
           (eq(var_w("csr",12),lw(1928,12)),ls"mhcycle_deltah"),
           (eq(var_w("csr",12),lw(1929,12)),ls"mhtime_deltah"),
           (eq(var_w("csr",12),lw(1930,12)),ls"mhinstret_deltah")],ls"UNKNOWN")))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Delta",
   close
     (var("state",qTy),
      apply
        (call("state.c_update",@{typ "8 word \<Rightarrow> StateDelta"},var("state",qTy),@{theory}),
         call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'Delta",
   close
     (var("value",@{typ StateDelta}),
      close
        (var("state",qTy),
         rupd
           ("state.c_update",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_update",@{typ "8 word \<Rightarrow> StateDelta"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ StateDelta}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setupDelta",
   close
     (tp[var_w("pc",64),var_w("instr",32)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'Delta",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("StateDelta.exc_taken",
                        tp[apply
                             (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                              var("state",qTy)),lf],@{theory}),@{theory}),var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            let'
              (tp[var("v",@{typ StateDelta}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd("StateDelta.fetch_exc",tp[var("v",@{typ StateDelta}),lf],@{theory}),
                        @{theory}),var("s",qTy)),
                  tp[apply
                       (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'Delta",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("StateDelta.pc",tp[var("v",@{typ StateDelta}),var_w("pc",64)],
                              @{theory}),@{theory}),var("s",qTy)),
                     tp[apply
                          (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  let'
                    (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'Delta",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("StateDelta.rinstr",
                                 tp[var("v",@{typ StateDelta}),var_w("instr",32)],@{theory}),
                              @{theory}),var("s",qTy)),
                        tp[apply
                             (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                              var("s0",qTy)),var("s0",qTy)]),
                     let'
                       (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'Delta",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("StateDelta.addr",tp[var("v",@{typ StateDelta}),lo w64],
                                    @{theory}),@{theory}),var("s",qTy)),
                           tp[apply
                                (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'Delta",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("StateDelta.data1",tp[var("v",@{typ StateDelta}),lo w64],
                                       @{theory}),@{theory}),var("s",qTy)),
                              tp[apply
                                   (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'Delta",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("StateDelta.data2",tp[var("v",@{typ StateDelta}),lo w64],
                                          @{theory}),@{theory}),var("s",qTy)),
                                 tp[apply
                                      (const
                                         ("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              let'
                                (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                                 let'
                                   (var("s0",qTy),
                                    apply
                                      (call
                                         ("write'Delta",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("StateDelta.fp_data",
                                             tp[var("v",@{typ StateDelta}),lo w64],@{theory}),
                                          @{theory}),var("s",qTy)),
                                    tp[apply
                                         (const
                                            ("Delta",@{typ "state \<Rightarrow> StateDelta"},
                                             @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                 apply
                                   (call
                                      ("write'Delta",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("StateDelta.st_width",
                                          tp[var("v",@{typ StateDelta}),lo w32],@{theory}),@{theory}),
                                    var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("recordLoad",
   close
     (tp[var_w("addr",64),var_w("val",64)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'Delta",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("StateDelta.addr",
                        tp[apply
                             (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                              var("state",qTy)),mop(Some,var_w("addr",64))],@{theory}),@{theory}),
                  var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            apply
              (call
                 ("write'Delta",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("StateDelta.data1",tp[var("v",@{typ StateDelta}),mop(Some,var_w("val",64))],
                     @{theory}),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("recordStore",
   close
     (tp[var_w("addr",64),var_w("val",64),var_w("width",32)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'Delta",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("StateDelta.addr",
                        tp[apply
                             (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                              var("state",qTy)),mop(Some,var_w("addr",64))],@{theory}),@{theory}),
                  var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            let'
              (tp[var("v",@{typ StateDelta}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("StateDelta.data2",
                           tp[var("v",@{typ StateDelta}),mop(Some,var_w("val",64))],@{theory}),
                        @{theory}),var("s",qTy)),
                  tp[apply
                       (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               apply
                 (call
                    ("write'Delta",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("StateDelta.st_width",
                        tp[var("v",@{typ StateDelta}),mop(Some,var_w("width",32))],@{theory}),
                     @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("recordException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("write'Delta",@{typ "state \<Rightarrow> state"},
               rupd
                 ("StateDelta.exc_taken",
                  tp[apply
                       (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                        var("state",qTy)),lt],@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("recordFetchException",
   close
     (var_w("pc",64),
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'Delta",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("StateDelta.fetch_exc",
                        tp[apply
                             (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                              var("state",qTy)),lt],@{theory}),@{theory}),var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            apply
              (call
                 ("write'Delta",@{typ "state \<Rightarrow> state"},
                  rupd("StateDelta.pc",tp[var("v",@{typ StateDelta}),var_w("pc",64)],@{theory}),
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("hex32",
   close(var_w("x",32),mop(PadLeft,tp[lsc #"0",ln 8,mop(Cast(@{typ string}),var_w("x",32))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("hex64",
   close(var_w("x",64),mop(PadLeft,tp[lsc #"0",ln 16,mop(Cast(@{typ string}),var_w("x",64))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_csr",
   close
     (tp[var_w("csr",12),var_w("data",64)],
      cc[ls"CSR (",call("csrName",@{typ string},var_w("csr",12),@{theory}),ls") <- 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg",
   close
     (var_w("r",5),
      itb([(eq(var_w("r",5),lw(0,5)),ls"$0"),(eq(var_w("r",5),lw(1,5)),ls"ra"),
           (eq(var_w("r",5),lw(2,5)),ls"sp"),(eq(var_w("r",5),lw(3,5)),ls"gp"),
           (eq(var_w("r",5),lw(4,5)),ls"tp"),(eq(var_w("r",5),lw(5,5)),ls"t0"),
           (eq(var_w("r",5),lw(6,5)),ls"t1"),(eq(var_w("r",5),lw(7,5)),ls"t2"),
           (eq(var_w("r",5),lw(8,5)),ls"fp"),(eq(var_w("r",5),lw(9,5)),ls"s1"),
           (eq(var_w("r",5),lw(10,5)),ls"a0"),(eq(var_w("r",5),lw(11,5)),ls"a1"),
           (eq(var_w("r",5),lw(12,5)),ls"a2"),(eq(var_w("r",5),lw(13,5)),ls"a3"),
           (eq(var_w("r",5),lw(14,5)),ls"a4"),(eq(var_w("r",5),lw(15,5)),ls"a5"),
           (eq(var_w("r",5),lw(16,5)),ls"a6"),(eq(var_w("r",5),lw(17,5)),ls"a7"),
           (eq(var_w("r",5),lw(18,5)),ls"s2"),(eq(var_w("r",5),lw(19,5)),ls"s3"),
           (eq(var_w("r",5),lw(20,5)),ls"s4"),(eq(var_w("r",5),lw(21,5)),ls"s5"),
           (eq(var_w("r",5),lw(22,5)),ls"s6"),(eq(var_w("r",5),lw(23,5)),ls"s7"),
           (eq(var_w("r",5),lw(24,5)),ls"s8"),(eq(var_w("r",5),lw(25,5)),ls"s9"),
           (eq(var_w("r",5),lw(26,5)),ls"s10"),(eq(var_w("r",5),lw(27,5)),ls"s11"),
           (eq(var_w("r",5),lw(28,5)),ls"t3"),(eq(var_w("r",5),lw(29,5)),ls"t4"),
           (eq(var_w("r",5),lw(30,5)),ls"t5")],ls"t6")))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("fpreg",
   close
     (var_w("r",5),
      itb([(eq(var_w("r",5),lw(0,5)),ls"fs0"),(eq(var_w("r",5),lw(1,5)),ls"fs1"),
           (eq(var_w("r",5),lw(2,5)),ls"fs2"),(eq(var_w("r",5),lw(3,5)),ls"fs3"),
           (eq(var_w("r",5),lw(4,5)),ls"fs4"),(eq(var_w("r",5),lw(5,5)),ls"fs5"),
           (eq(var_w("r",5),lw(6,5)),ls"fs6"),(eq(var_w("r",5),lw(7,5)),ls"fs7"),
           (eq(var_w("r",5),lw(8,5)),ls"fs8"),(eq(var_w("r",5),lw(9,5)),ls"fs9"),
           (eq(var_w("r",5),lw(10,5)),ls"fs10"),(eq(var_w("r",5),lw(11,5)),ls"fs11"),
           (eq(var_w("r",5),lw(12,5)),ls"fs12"),(eq(var_w("r",5),lw(13,5)),ls"fs13"),
           (eq(var_w("r",5),lw(14,5)),ls"fs14"),(eq(var_w("r",5),lw(15,5)),ls"fs15"),
           (eq(var_w("r",5),lw(16,5)),ls"fv0"),(eq(var_w("r",5),lw(17,5)),ls"fv1"),
           (eq(var_w("r",5),lw(18,5)),ls"fa0"),(eq(var_w("r",5),lw(19,5)),ls"fa1"),
           (eq(var_w("r",5),lw(20,5)),ls"fa2"),(eq(var_w("r",5),lw(21,5)),ls"fa3"),
           (eq(var_w("r",5),lw(22,5)),ls"fa4"),(eq(var_w("r",5),lw(23,5)),ls"fa5"),
           (eq(var_w("r",5),lw(24,5)),ls"fa6"),(eq(var_w("r",5),lw(25,5)),ls"fa7"),
           (eq(var_w("r",5),lw(26,5)),ls"ft0"),(eq(var_w("r",5),lw(27,5)),ls"ft1"),
           (eq(var_w("r",5),lw(28,5)),ls"ft2"),(eq(var_w("r",5),lw(29,5)),ls"ft3"),
           (eq(var_w("r",5),lw(30,5)),ls"ft4")],ls"ft5")))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_gpr",
   close
     (tp[var_w("r",5),var_w("data",64)],
      cc[ls"Reg ",call("reg",@{typ string},var_w("r",5),@{theory}),ls" (",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r",5))),ls") <- 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_fprs",
   close
     (tp[var_w("r",5),var_w("data",32)],
      cc[ls"FPR ",call("reg",@{typ string},var_w("r",5),@{theory}),ls" (",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r",5))),ls") <- 0x",
         call("hex32",@{typ string},var_w("data",32),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_fprd",
   close
     (tp[var_w("r",5),var_w("data",64)],
      cc[ls"FPR ",call("reg",@{typ string},var_w("r",5),@{theory}),ls" (",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r",5))),ls") <- 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_mem_mask",
   close
     (tp[var_w("pAddrIdx",61),var_w("vAddr",64),var_w("mask",64),var_w("data",64),var_w("old",64),
         var_w("new",64)],
      cc[ls"MEM[0x",call("hex64",@{typ string},mop(Cast w64,var_w("pAddrIdx",61)),@{theory}),ls"/",
         call("hex64",@{typ string},var_w("vAddr",64),@{theory}),ls"] <- (data: 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory}),ls", mask: 0x",
         call("hex64",@{typ string},var_w("mask",64),@{theory}),ls", old: 0x",
         call("hex64",@{typ string},var_w("old",64),@{theory}),ls", new: 0x",
         call("hex64",@{typ string},var_w("new",64),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_mem_mask_misaligned",
   close
     (tp[var_w("pAddrIdx",61),var_w("vAddr",64),var_w("mask",64),var_w("data",64),var_n"align",
         var_w("old",64),var_w("new",64)],
      cc[ls"MEM[0x",call("hex64",@{typ string},mop(Cast w64,var_w("pAddrIdx",61)),@{theory}),ls"/",
         call("hex64",@{typ string},var_w("vAddr",64),@{theory}),ls"/ misaligned@",
         mop(Cast(@{typ string}),var_n"align"),ls"] <- (data: 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory}),ls", mask: 0x",
         call("hex64",@{typ string},var_w("mask",64),@{theory}),ls", old: 0x",
         call("hex64",@{typ string},var_w("old",64),@{theory}),ls", new: 0x",
         call("hex64",@{typ string},var_w("new",64),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_mem",
   close
     (tp[var_w("pAddrIdx",61),var_w("vAddr",64),var_w("data",64)],
      cc[ls"MEM[0x",call("hex64",@{typ string},mop(Cast w64,var_w("pAddrIdx",61)),@{theory}),ls"/",
         call("hex64",@{typ string},var_w("vAddr",64),@{theory}),ls"] <- (data: 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_r_mem",
   close
     (tp[var_w("pAddrIdx",61),var_w("vAddr",64),var_w("data",64)],
      cc[ls"data <- MEM[0x",
         mop(PadLeft,tp[lsc #"0",ln 10,mop(Cast(@{typ string}),var_w("pAddrIdx",61))]),ls"/",
         call("hex64",@{typ string},var_w("vAddr",64),@{theory}),ls"]: 0x",
         call("hex64",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_exc",
   close
     (var("e",@{typ ExceptionType}),
      cc[ls" Exception ",call("excName",@{typ string},var("e",@{typ ExceptionType}),@{theory}),
         ls" raised!"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_tohost",
   close
     (var_w("tohost",64),
      cc[ls"-> host: ",
         mop(Cast(@{typ string}),mop(Cast HOLogic.charT,ex(var_w("tohost",64),ln 7,ln 0,w8)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("LOG_IO",ln 0)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("LOG_INSN",ln 1)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("LOG_REG",ln 2)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("LOG_MEM",ln 3)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("LOG_ADDRTR",ln 4)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mark_log",
   close
     (tp[var_n"lvl",var_s"s"],
      close
        (var("state",qTy),
         rupd
           ("state.log",
            tp[var("state",qTy),
               llc([tp[var_n"lvl",var_s"s"]],
                   call("state.log",@{typ "(nat \<times> string) list"},var("state",qTy),@{theory}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("clear_logs",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         rupd("state.log",tp[var("state",qTy),lnl(@{typ "nat \<times> string"})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("setTrap",
   close
     (tp[var("e",@{typ ExceptionType}),var("badaddr",@{typ "64 word option"})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'NextFetch",@{typ "state \<Rightarrow> state"},
               mop(Some,
                   call
                     ("instrResult.Trap",@{typ instrResult},
                      rupd
                        ("SynchronousException.badaddr",
                         tp[rupd
                              ("SynchronousException.trap",
                               tp[lx @{typ SynchronousException},var("e",@{typ ExceptionType})],
                               @{theory}),var("badaddr",@{typ "64 word option"})],@{theory}),
                      @{theory})),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("signalException",
   close
     (var("e",@{typ ExceptionType}),
      close
        (var("state",qTy),
         apply
           (call("recordException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            apply
              (call
                 ("setTrap",@{typ "state \<Rightarrow> state"},
                  tp[var("e",@{typ ExceptionType}),lo w64],@{theory}),
               apply
                 (call
                    ("mark_log",@{typ "state \<Rightarrow> state"},
                     tp[const("LOG_INSN",HOLogic.natT,@{theory}),
                        cc[ls"signalling exception ",
                           call("excName",@{typ string},var("e",@{typ ExceptionType}),@{theory})]],
                     @{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("signalAddressException",
   close
     (tp[var("e",@{typ ExceptionType}),var_w("vAddr",64)],
      close
        (var("state",qTy),
         apply
           (call("recordException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            apply
              (call
                 ("setTrap",@{typ "state \<Rightarrow> state"},
                  tp[var("e",@{typ ExceptionType}),mop(Some,var_w("vAddr",64))],@{theory}),
               apply
                 (call
                    ("mark_log",@{typ "state \<Rightarrow> state"},
                     tp[const("LOG_INSN",HOLogic.natT,@{theory}),
                        cc[ls"signalling address exception ",
                           call("excName",@{typ string},var("e",@{typ ExceptionType}),@{theory}),
                           ls" at ",mop(Cast(@{typ string}),var_w("vAddr",64))]],@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("signalEnvCall",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("signalException",@{typ "state \<Rightarrow> state"},
               lc("E_Env_Call","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = function
  ("excHandlerDelegate",tp[var("delegate",@{typ Privilege}),var_n"ec_idx"],
   close
     (var("state",qTy),
      cs(var("delegate",@{typ Privilege}),
         [(lc("Machine","Privilege",@{theory}),
           ite(bop(Bit,
                   call
                     ("reg'medeleg",w64,
                      call
                        ("MachineCSR.medeleg",@{typ medeleg},
                         apply
                           (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                            var("state",qTy)),@{theory}),@{theory}),var_n"ec_idx"),
               apply
                 (apply
                    (var("excHandlerDelegate",
                         @{typ
                         "(Privilege \<times> nat) \<Rightarrow>
                          (state \<Rightarrow> (Privilege \<times> state))"}),
                     tp[lc("Hypervisor","Privilege",@{theory}),var_n"ec_idx"]),var("state",qTy)),
               tp[lc("Machine","Privilege",@{theory}),var("state",qTy)])),
          (lc("Hypervisor","Privilege",@{theory}),
           ite(bop(Bit,
                   call
                     ("HypervisorCSR.hedeleg",w64,
                      apply
                        (const("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                         var("state",qTy)),@{theory}),var_n"ec_idx"),
               apply
                 (apply
                    (var("excHandlerDelegate",
                         @{typ
                         "(Privilege \<times> nat) \<Rightarrow>
                          (state \<Rightarrow> (Privilege \<times> state))"}),
                     tp[lc("Supervisor","Privilege",@{theory}),var_n"ec_idx"]),var("state",qTy)),
               tp[lc("Hypervisor","Privilege",@{theory}),var("state",qTy)])),
          (lc("Supervisor","Privilege",@{theory}),
           tp[ite(bop(Bit,
                      call
                        ("reg'sedeleg",w64,
                         call
                           ("SupervisorCSR.sedeleg",@{typ sedeleg},
                            apply
                              (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory}),var_n"ec_idx"),
                  lc("User","Privilege",@{theory}),lc("Supervisor","Privilege",@{theory})),
              var("state",qTy)]),
          (lc("User","Privilege",@{theory}),
           apply
             (call
                ("raise'exception",@{typ "state \<Rightarrow> (Privilege \<times> state)"},
                 call
                   ("exception.INTERNAL_ERROR",@{typ exception},ls"Exception delegation failure",
                    @{theory}),@{theory}),var("state",qTy)))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = function
  ("intHandlerDelegate",tp[var("delegate",@{typ Privilege}),var_n"int_idx"],
   close
     (var("state",qTy),
      cs(var("delegate",@{typ Privilege}),
         [(lc("Machine","Privilege",@{theory}),
           ite(bop(Bit,
                   call
                     ("reg'mideleg",w64,
                      call
                        ("MachineCSR.mideleg",@{typ mideleg},
                         apply
                           (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                            var("state",qTy)),@{theory}),@{theory}),var_n"int_idx"),
               apply
                 (apply
                    (var("intHandlerDelegate",
                         @{typ
                         "(Privilege \<times> nat) \<Rightarrow>
                          (state \<Rightarrow> (Privilege \<times> state))"}),
                     tp[lc("Hypervisor","Privilege",@{theory}),var_n"int_idx"]),var("state",qTy)),
               tp[lc("Machine","Privilege",@{theory}),var("state",qTy)])),
          (lc("Hypervisor","Privilege",@{theory}),
           ite(bop(Bit,
                   call
                     ("HypervisorCSR.hideleg",w64,
                      apply
                        (const("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                         var("state",qTy)),@{theory}),var_n"int_idx"),
               apply
                 (apply
                    (var("intHandlerDelegate",
                         @{typ
                         "(Privilege \<times> nat) \<Rightarrow>
                          (state \<Rightarrow> (Privilege \<times> state))"}),
                     tp[lc("Supervisor","Privilege",@{theory}),var_n"int_idx"]),var("state",qTy)),
               tp[lc("Hypervisor","Privilege",@{theory}),var("state",qTy)])),
          (lc("Supervisor","Privilege",@{theory}),
           tp[ite(bop(Bit,
                      call
                        ("reg'sideleg",w64,
                         call
                           ("SupervisorCSR.sideleg",@{typ sideleg},
                            apply
                              (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory}),var_n"int_idx"),
                  lc("User","Privilege",@{theory}),lc("Supervisor","Privilege",@{theory})),
              var("state",qTy)]),
          (lc("User","Privilege",@{theory}),
           apply
             (call
                ("raise'exception",@{typ "state \<Rightarrow> (Privilege \<times> state)"},
                 call
                   ("exception.INTERNAL_ERROR",@{typ exception},ls"Interrupt delegation failure",
                    @{theory}),@{theory}),var("state",qTy)))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("excHandler",
   close
     (tp[var_b"intr",var_w("ec",4),var("fromPriv",@{typ Privilege}),var("toPriv",@{typ Privilege}),
         var_w("epc",64),var("badaddr",@{typ "64 word option"})],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("mark_log",@{typ "state \<Rightarrow> state"},
                  tp[const("LOG_INSN",HOLogic.natT,@{theory}),
                     cc[ls"trapping from ",
                        call("privName",@{typ string},var("fromPriv",@{typ Privilege}),@{theory}),
                        ls" to ",
                        call("privName",@{typ string},var("toPriv",@{typ Privilege}),@{theory}),
                        ls" at pc ",mop(Cast(@{typ string}),var_w("epc",64)),
                        ite(var_b"intr",ls" intr:",ls" exc:"),
                        mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("ec",4))),
                        ite(mop(IsSome,var("badaddr",@{typ "64 word option"})),
                            cc[ls" baddaddr:",
                               mop(Cast(@{typ string}),
                                   mop(ValOf,var("badaddr",@{typ "64 word option"})))],ls"")]],
                  @{theory}),var("state",qTy)),
            cs(var("toPriv",@{typ Privilege}),
               [(lc("Machine","Privilege",@{theory}),
                 let'
                   (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       apply
                         (call
                            ("write'MCSR",@{typ "state \<Rightarrow> state"},
                             rupd
                               ("MachineCSR.mstatus",
                                tp[apply
                                     (const
                                        ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                      var("s",qTy)),
                                   call
                                     ("menter",@{typ mstatus},
                                      tp[call
                                           ("MachineCSR.mstatus",@{typ mstatus},
                                            apply
                                              (const
                                                 ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                  @{theory}),var("s",qTy)),@{theory}),
                                         var("fromPriv",@{typ Privilege})],@{theory})],@{theory}),
                             @{theory}),var("s",qTy)),
                       tp[apply
                            (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("MachineCSR.mepc",tp[var("v",@{typ MachineCSR}),var_w("epc",64)],
                                   @{theory}),@{theory}),var("s",qTy)),
                          tp[apply
                               (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("MachineCSR.mcause",
                                      tp[var("v",@{typ MachineCSR}),
                                         rupd
                                           ("mcause.M_Intr",
                                            tp[call
                                                 ("MachineCSR.mcause",@{typ mcause},
                                                  var("v",@{typ MachineCSR}),@{theory}),var_b"intr"],
                                            @{theory})],@{theory}),@{theory}),var("s",qTy)),
                             tp[apply
                                  (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                      rupd
                                        ("MachineCSR.mcause",
                                         tp[var("v",@{typ MachineCSR}),
                                            rupd
                                              ("mcause.M_ExcCause",
                                               tp[call
                                                    ("MachineCSR.mcause",@{typ mcause},
                                                     var("v",@{typ MachineCSR}),@{theory}),
                                                  mop(Cast (Word_Lib.mk_wordT 63),var_w("ec",4))],
                                               @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const
                                        ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             let'
                               (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                                let'
                                  (var("s0",qTy),
                                   apply
                                     (call
                                        ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                         rupd
                                           ("MachineCSR.mbadaddr",
                                            tp[var("v",@{typ MachineCSR}),
                                               ite(mop(IsSome,var("badaddr",@{typ "64 word option"})),
                                                   mop(ValOf,var("badaddr",@{typ "64 word option"})),
                                                   mop(SE w64,lw(1,1)))],@{theory}),@{theory}),
                                      var("s",qTy)),
                                   tp[apply
                                        (const
                                           ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                         var("s0",qTy)),var("s0",qTy)]),
                                apply
                                  (call
                                     ("write'PC",@{typ "state \<Rightarrow> state"},
                                      call
                                        ("MachineCSR.mtvec",w64,var("v",@{typ MachineCSR}),@{theory}),
                                      @{theory}),var("s",qTy)))))))),
                (lc("Hypervisor","Privilege",@{theory}),
                 let'
                   (tp[var("v",@{typ HypervisorCSR}),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (tp[var("v",@{typ "MachineCSR \<times> mstatus"}),var("s",qTy)],
                             let'
                               (tp[var("v0",@{typ mstatus}),var("s0",qTy)],
                                apply
                                  (call
                                     ("henter",
                                      @{typ "state \<Rightarrow> (mstatus \<times> state)"},
                                      tp[call
                                           ("MachineCSR.mstatus",@{typ mstatus},
                                            apply
                                              (const
                                                 ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                  @{theory}),var("s",qTy)),@{theory}),
                                         var("fromPriv",@{typ Privilege})],@{theory}),var("s",qTy)),
                                tp[tp[apply
                                        (const
                                           ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                         var("s",qTy)),var("v0",@{typ mstatus})],var("s0",qTy)]),
                             tp[rupd
                                  ("MachineCSR.mstatus",
                                   var("v",@{typ "MachineCSR \<times> mstatus"}),@{theory}),
                                var("s",qTy)]),
                          apply
                            (call
                               ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                var("v",@{typ MachineCSR}),@{theory}),var("s",qTy))),
                       tp[apply
                            (const("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v",@{typ HypervisorCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'HCSR",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("HypervisorCSR.hepc",
                                   tp[var("v",@{typ HypervisorCSR}),var_w("epc",64)],@{theory}),
                                @{theory}),var("s",qTy)),
                          tp[apply
                               (const("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ HypervisorCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'HCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("HypervisorCSR.hcause",
                                      tp[var("v",@{typ HypervisorCSR}),
                                         rupd
                                           ("mcause.M_Intr",
                                            tp[call
                                                 ("HypervisorCSR.hcause",@{typ mcause},
                                                  var("v",@{typ HypervisorCSR}),@{theory}),
                                               var_b"intr"],@{theory})],@{theory}),@{theory}),
                                var("s",qTy)),
                             tp[apply
                                  (const
                                     ("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ HypervisorCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'HCSR",@{typ "state \<Rightarrow> state"},
                                      rupd
                                        ("HypervisorCSR.hcause",
                                         tp[var("v",@{typ HypervisorCSR}),
                                            rupd
                                              ("mcause.M_ExcCause",
                                               tp[call
                                                    ("HypervisorCSR.hcause",@{typ mcause},
                                                     var("v",@{typ HypervisorCSR}),@{theory}),
                                                  mop(Cast (Word_Lib.mk_wordT 63),var_w("ec",4))],
                                               @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const
                                        ("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call
                                     ("HypervisorCSR.htvec",w64,var("v",@{typ HypervisorCSR}),
                                      @{theory}),@{theory}),var("s",qTy))))))),
                (lc("Supervisor","Privilege",@{theory}),
                 let'
                   (tp[var("v",@{typ SupervisorCSR}),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (tp[var("v",@{typ "MachineCSR \<times> mstatus"}),var("s",qTy)],
                             let'
                               (tp[var("v0",@{typ mstatus}),var("s0",qTy)],
                                apply
                                  (call
                                     ("senter",
                                      @{typ "state \<Rightarrow> (mstatus \<times> state)"},
                                      tp[call
                                           ("MachineCSR.mstatus",@{typ mstatus},
                                            apply
                                              (const
                                                 ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                  @{theory}),var("s",qTy)),@{theory}),
                                         var("fromPriv",@{typ Privilege})],@{theory}),var("s",qTy)),
                                tp[tp[apply
                                        (const
                                           ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                         var("s",qTy)),var("v0",@{typ mstatus})],var("s0",qTy)]),
                             tp[rupd
                                  ("MachineCSR.mstatus",
                                   var("v",@{typ "MachineCSR \<times> mstatus"}),@{theory}),
                                var("s",qTy)]),
                          apply
                            (call
                               ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                var("v",@{typ MachineCSR}),@{theory}),var("s",qTy))),
                       tp[apply
                            (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v",@{typ SupervisorCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'SCSR",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("SupervisorCSR.sepc",
                                   tp[var("v",@{typ SupervisorCSR}),var_w("epc",64)],@{theory}),
                                @{theory}),var("s",qTy)),
                          tp[apply
                               (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ SupervisorCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'SCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("SupervisorCSR.scause",
                                      tp[var("v",@{typ SupervisorCSR}),
                                         rupd
                                           ("mcause.M_Intr",
                                            tp[call
                                                 ("SupervisorCSR.scause",@{typ mcause},
                                                  var("v",@{typ SupervisorCSR}),@{theory}),
                                               var_b"intr"],@{theory})],@{theory}),@{theory}),
                                var("s",qTy)),
                             tp[apply
                                  (const
                                     ("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ SupervisorCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'SCSR",@{typ "state \<Rightarrow> state"},
                                      rupd
                                        ("SupervisorCSR.scause",
                                         tp[var("v",@{typ SupervisorCSR}),
                                            rupd
                                              ("mcause.M_ExcCause",
                                               tp[call
                                                    ("SupervisorCSR.scause",@{typ mcause},
                                                     var("v",@{typ SupervisorCSR}),@{theory}),
                                                  mop(Cast (Word_Lib.mk_wordT 63),var_w("ec",4))],
                                               @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const
                                        ("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call
                                     ("SupervisorCSR.stvec",w64,var("v",@{typ SupervisorCSR}),
                                      @{theory}),@{theory}),var("s",qTy))))))),
                (lc("User","Privilege",@{theory}),
                 let'
                   (tp[var("v",@{typ UserCSR}),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (tp[var("v",@{typ "MachineCSR \<times> mstatus"}),var("s",qTy)],
                             let'
                               (tp[var("v0",@{typ mstatus}),var("s0",qTy)],
                                apply
                                  (call
                                     ("uenter",
                                      @{typ "state \<Rightarrow> (mstatus \<times> state)"},
                                      tp[call
                                           ("MachineCSR.mstatus",@{typ mstatus},
                                            apply
                                              (const
                                                 ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                  @{theory}),var("s",qTy)),@{theory}),
                                         var("fromPriv",@{typ Privilege})],@{theory}),var("s",qTy)),
                                tp[tp[apply
                                        (const
                                           ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                         var("s",qTy)),var("v0",@{typ mstatus})],var("s0",qTy)]),
                             tp[rupd
                                  ("MachineCSR.mstatus",
                                   var("v",@{typ "MachineCSR \<times> mstatus"}),@{theory}),
                                var("s",qTy)]),
                          apply
                            (call
                               ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                var("v",@{typ MachineCSR}),@{theory}),var("s",qTy))),
                       tp[apply
                            (const("UCSR",@{typ "state \<Rightarrow> UserCSR"},@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v",@{typ UserCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'UCSR",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("UserCSR.uepc",tp[var("v",@{typ UserCSR}),var_w("epc",64)],
                                   @{theory}),@{theory}),var("s",qTy)),
                          tp[apply
                               (const("UCSR",@{typ "state \<Rightarrow> UserCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ UserCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'UCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("UserCSR.ucause",
                                      tp[var("v",@{typ UserCSR}),
                                         rupd
                                           ("mcause.M_Intr",
                                            tp[call
                                                 ("UserCSR.ucause",@{typ mcause},
                                                  var("v",@{typ UserCSR}),@{theory}),var_b"intr"],
                                            @{theory})],@{theory}),@{theory}),var("s",qTy)),
                             tp[apply
                                  (const("UCSR",@{typ "state \<Rightarrow> UserCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ UserCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'UCSR",@{typ "state \<Rightarrow> state"},
                                      rupd
                                        ("UserCSR.ucause",
                                         tp[var("v",@{typ UserCSR}),
                                            rupd
                                              ("mcause.M_ExcCause",
                                               tp[call
                                                    ("UserCSR.ucause",@{typ mcause},
                                                     var("v",@{typ UserCSR}),@{theory}),
                                                  mop(Cast (Word_Lib.mk_wordT 63),var_w("ec",4))],
                                               @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const("UCSR",@{typ "state \<Rightarrow> UserCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call("UserCSR.utvec",w64,var("v",@{typ UserCSR}),@{theory}),
                                   @{theory}),var("s",qTy)))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("globallyEnabled",
   close
     (tp[var("delegate",@{typ Privilege}),var("cur",@{typ Privilege})],
      close
        (var("state",qTy),
         cs(tp[var("delegate",@{typ Privilege}),var("cur",@{typ Privilege})],
            [(tp[lc("Machine","Privilege",@{theory}),lc("Machine","Privilege",@{theory})],
              call
                ("mstatus.M_MIE",HOLogic.boolT,
                 call
                   ("MachineCSR.mstatus",@{typ mstatus},
                    apply
                      (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                       var("state",qTy)),@{theory}),@{theory})),
             (tp[lc("Machine","Privilege",@{theory}),var_a @{typ Privilege}],lt),
             (tp[lc("Hypervisor","Privilege",@{theory}),lc("Machine","Privilege",@{theory})],lf),
             (tp[lc("Hypervisor","Privilege",@{theory}),lc("Hypervisor","Privilege",@{theory})],
              call
                ("mstatus.M_HIE",HOLogic.boolT,
                 call
                   ("MachineCSR.mstatus",@{typ mstatus},
                    apply
                      (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                       var("state",qTy)),@{theory}),@{theory})),
             (tp[lc("Hypervisor","Privilege",@{theory}),var_a @{typ Privilege}],lt),
             (tp[lc("Supervisor","Privilege",@{theory}),lc("Supervisor","Privilege",@{theory})],
              call
                ("mstatus.M_SIE",HOLogic.boolT,
                 call
                   ("MachineCSR.mstatus",@{typ mstatus},
                    apply
                      (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                       var("state",qTy)),@{theory}),@{theory})),
             (tp[lc("Supervisor","Privilege",@{theory}),lc("User","Privilege",@{theory})],lt),
             (tp[lc("Supervisor","Privilege",@{theory}),var_a @{typ Privilege}],lf),
             (tp[lc("User","Privilege",@{theory}),lc("User","Privilege",@{theory})],
              call
                ("mstatus.M_UIE",HOLogic.boolT,
                 call
                   ("MachineCSR.mstatus",@{typ mstatus},
                    apply
                      (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                       var("state",qTy)),@{theory}),@{theory})),
             (tp[lc("User","Privilege",@{theory}),var_a @{typ Privilege}],lf)],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("nextInterrupt",
   close
     (var("i",@{typ InterruptType}),
      cs(var("i",@{typ InterruptType}),
         [(lc("I_M_External","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_M_Software","InterruptType",@{theory}),lc("Machine","Privilege",@{theory})])),
          (lc("I_M_Software","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_M_Timer","InterruptType",@{theory}),lc("Machine","Privilege",@{theory})])),
          (lc("I_M_Timer","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_H_External","InterruptType",@{theory}),
                  lc("Hypervisor","Privilege",@{theory})])),
          (lc("I_H_External","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_H_Software","InterruptType",@{theory}),
                  lc("Hypervisor","Privilege",@{theory})])),
          (lc("I_H_Software","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_H_Timer","InterruptType",@{theory}),lc("Hypervisor","Privilege",@{theory})])),
          (lc("I_H_Timer","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_S_External","InterruptType",@{theory}),
                  lc("Supervisor","Privilege",@{theory})])),
          (lc("I_S_External","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_S_Software","InterruptType",@{theory}),
                  lc("Supervisor","Privilege",@{theory})])),
          (lc("I_S_Software","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_S_Timer","InterruptType",@{theory}),lc("Supervisor","Privilege",@{theory})])),
          (lc("I_S_Timer","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_U_External","InterruptType",@{theory}),lc("User","Privilege",@{theory})])),
          (lc("I_U_External","InterruptType",@{theory}),
           mop(Some,
               tp[lc("I_U_Software","InterruptType",@{theory}),lc("User","Privilege",@{theory})])),
          (lc("I_U_Software","InterruptType",@{theory}),
           mop(Some,tp[lc("I_U_Timer","InterruptType",@{theory}),lc("User","Privilege",@{theory})])),
          (lc("I_U_Timer","InterruptType",@{theory}),lo(@{typ "InterruptType \<times> Privilege"}))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = function
  ("searchDispatchableIntr",tp[var("i",@{typ InterruptType}),var("p",@{typ Privilege})],
   close
     (var("state",qTy),
      let'
        (var_n"int_idx",
         mop(Cast HOLogic.natT,call("interruptIndex",w4,var("i",@{typ InterruptType}),@{theory})),
         let'
           (tp[var("v0",@{typ Privilege}),var("s0",qTy)],
            apply
              (call
                 ("intHandlerDelegate",@{typ "state \<Rightarrow> (Privilege \<times> state)"},
                  tp[var("p",@{typ Privilege}),var_n"int_idx"],@{theory}),var("state",qTy)),
            ite(bop(And,
                    apply
                      (call
                         ("globallyEnabled",@{typ "state \<Rightarrow> bool"},
                          tp[var("v0",@{typ Privilege}),
                             apply
                               (const
                                  ("curPrivilege",@{typ "state \<Rightarrow> Privilege"},@{theory}),
                                var("s0",qTy))],@{theory}),var("s0",qTy)),
                    bop(And,
                        bop(Bit,
                            call
                              ("reg'mie",w64,
                               call
                                 ("MachineCSR.mie",@{typ mie},
                                  apply
                                    (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                     var("state",qTy)),@{theory}),@{theory}),var_n"int_idx"),
                        bop(Bit,
                            call
                              ("reg'mip",w64,
                               call
                                 ("MachineCSR.mip",@{typ mip},
                                  apply
                                    (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                     var("state",qTy)),@{theory}),@{theory}),var_n"int_idx"))),
                tp[mop(Some,tp[var("i",@{typ InterruptType}),var("v0",@{typ Privilege})]),
                   var("s0",qTy)],
                cs(call
                     ("nextInterrupt",@{typ "(InterruptType \<times> Privilege) option"},
                      var("i",@{typ InterruptType}),@{theory}),
                   [(mop(Some,tp[var("ni",@{typ InterruptType}),var("np",@{typ Privilege})]),
                     apply
                       (apply
                          (var("searchDispatchableIntr",
                               @{typ
                               "(InterruptType \<times> Privilege) \<Rightarrow>
                                (state \<Rightarrow>
                                 (((InterruptType \<times> Privilege) option) \<times> state))"}),
                           tp[var("ni",@{typ InterruptType}),var("np",@{typ Privilege})]),
                        var("s0",qTy))),
                    (lo(@{typ "InterruptType \<times> Privilege"}),
                     tp[lo(@{typ "InterruptType \<times> Privilege"}),var("s0",qTy)])],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curInterrupt",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         ite(bop(Or,
                 eq(call
                      ("reg'mip",w64,
                       call
                         ("MachineCSR.mip",@{typ mip},
                          apply
                            (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory}),lw(0,64)),
                 mop(Not,
                     bop(Or,
                         mop(Not,
                             eq(apply
                                  (const
                                     ("curPrivilege",@{typ "state \<Rightarrow> Privilege"},
                                      @{theory}),var("state",qTy)),
                                lc("Machine","Privilege",@{theory}))),
                         call
                           ("mstatus.M_MIE",HOLogic.boolT,
                            call
                              ("MachineCSR.mstatus",@{typ mstatus},
                               apply
                                 (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory})))),
             tp[lo(@{typ "InterruptType \<times> Privilege"}),var("state",qTy)],
             apply
               (call
                  ("searchDispatchableIntr",
                   @{typ
                   "state \<Rightarrow> (((InterruptType \<times> Privilege) option) \<times> state)"},
                   tp[lc("I_M_External","InterruptType",@{theory}),
                      lc("Machine","Privilege",@{theory})],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CSR",
   close
     (var_w("n",12),
      close
        (var("state",qTy),
         apply
           (call
              ("CSRMap",@{typ "state \<Rightarrow> (64 word \<times> state)"},var_w("n",12),
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CSR",
   close
     (tp[var_w("value",64),var_w("n",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("mark_log",@{typ "state \<Rightarrow> state"},
               tp[const("LOG_REG",HOLogic.natT,@{theory}),
                  call("log_w_csr",@{typ string},tp[var_w("n",12),var_w("value",64)],@{theory})],
               @{theory}),
            apply
              (call
                 ("write'CSRMap",@{typ "state \<Rightarrow> state"},
                  tp[var_w("value",64),var_w("n",12)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("writeCSR",
   close
     (tp[var_w("csr",12),var_w("val",64)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'CSR",@{typ "state \<Rightarrow> state"},
                     tp[var_w("val",64),var_w("csr",12)],@{theory}),var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            let'
              (tp[var("v",@{typ StateDelta}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("StateDelta.addr",
                           tp[var("v",@{typ StateDelta}),mop(Some,mop(Cast w64,var_w("csr",12)))],
                           @{theory}),@{theory}),var("s",qTy)),
                  tp[apply
                       (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var_w("v0",64),var("s",qTy)],
                  apply
                    (call
                       ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},var_w("csr",12),
                        @{theory}),var("s",qTy)),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("StateDelta.data2",
                           tp[var("v",@{typ StateDelta}),mop(Some,var_w("v0",64))],@{theory}),
                        @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("GPR",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         ite(eq(var_w("n",5),lw(0,5)),lw(0,64),
             apply
               (call("gpr",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'GPR",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         ite(mop(Not,eq(var_w("n",5),lw(0,5))),
             apply
               (call
                  ("mark_log",@{typ "state \<Rightarrow> state"},
                   tp[const("LOG_REG",HOLogic.natT,@{theory}),
                      call("log_w_gpr",@{typ string},tp[var_w("n",5),var_w("value",64)],@{theory})],
                   @{theory}),
                apply
                  (call
                     ("write'gpr",@{typ "state \<Rightarrow> state"},
                      tp[var_w("value",64),var_w("n",5)],@{theory}),var("state",qTy))),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("writeRD",
   close
     (tp[var_w("rd",5),var_w("val",64)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[var_w("val",64),var_w("rd",5)],@{theory}),var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            apply
              (call
                 ("write'Delta",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("StateDelta.data1",tp[var("v",@{typ StateDelta}),mop(Some,var_w("val",64))],
                     @{theory}),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPRS",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         ex(apply
              (call("fpr",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
               var("state",qTy)),ln 31,ln 0,w32))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'FPRS",
   close
     (tp[var_w("value",32),var_w("n",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("mark_log",@{typ "state \<Rightarrow> state"},
               tp[const("LOG_REG",HOLogic.natT,@{theory}),
                  call("log_w_fprs",@{typ string},tp[var_w("n",5),var_w("value",32)],@{theory})],
               @{theory}),
            apply
              (call
                 ("write'fpr",@{typ "state \<Rightarrow> state"},
                  tp[bfi(ln 31,ln 0,var_w("value",32),
                         apply
                           (call("fpr",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                            var("state",qTy))),var_w("n",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPRD",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (call("fpr",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'FPRD",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("mark_log",@{typ "state \<Rightarrow> state"},
               tp[const("LOG_REG",HOLogic.natT,@{theory}),
                  call("log_w_fprd",@{typ string},tp[var_w("n",5),var_w("value",64)],@{theory})],
               @{theory}),
            apply
              (call
                 ("write'fpr",@{typ "state \<Rightarrow> state"},tp[var_w("value",64),var_w("n",5)],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("writeFPRS",
   close
     (tp[var_w("rd",5),var_w("val",32)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'FPRS",@{typ "state \<Rightarrow> state"},
                     tp[var_w("val",32),var_w("rd",5)],@{theory}),var("state",qTy)),
               tp[apply
                    (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            let'
              (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'MCSR",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("MachineCSR.mstatus",
                           tp[var("v",@{typ MachineCSR}),
                              rupd
                                ("mstatus.M_FS",
                                 tp[call
                                      ("MachineCSR.mstatus",@{typ mstatus},
                                       var("v",@{typ MachineCSR}),@{theory}),
                                    call
                                      ("ext_status",(Word_Lib.mk_wordT 2),
                                       lc("Dirty","ExtStatus",@{theory}),@{theory})],@{theory})],
                           @{theory}),@{theory}),var("s",qTy)),
                  tp[apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'MCSR",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("MachineCSR.mstatus",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("mstatus.M_SD",
                                    tp[call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          var("v",@{typ MachineCSR}),@{theory}),lt],@{theory})],
                              @{theory}),@{theory}),var("s",qTy)),
                     tp[apply
                          (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("StateDelta.data1",
                           tp[var("v",@{typ StateDelta}),mop(Some,mop(Cast w64,var_w("val",32)))],
                           @{theory}),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("writeFPRD",
   close
     (tp[var_w("rd",5),var_w("val",64)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'FPRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("val",64),var_w("rd",5)],@{theory}),var("state",qTy)),
               tp[apply
                    (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            let'
              (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'MCSR",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("MachineCSR.mstatus",
                           tp[var("v",@{typ MachineCSR}),
                              rupd
                                ("mstatus.M_FS",
                                 tp[call
                                      ("MachineCSR.mstatus",@{typ mstatus},
                                       var("v",@{typ MachineCSR}),@{theory}),
                                    call
                                      ("ext_status",(Word_Lib.mk_wordT 2),
                                       lc("Dirty","ExtStatus",@{theory}),@{theory})],@{theory})],
                           @{theory}),@{theory}),var("s",qTy)),
                  tp[apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ StateDelta}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'MCSR",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("MachineCSR.mstatus",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("mstatus.M_SD",
                                    tp[call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          var("v",@{typ MachineCSR}),@{theory}),lt],@{theory})],
                              @{theory}),@{theory}),var("s",qTy)),
                     tp[apply
                          (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  apply
                    (call
                       ("write'Delta",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("StateDelta.data1",
                           tp[var("v",@{typ StateDelta}),mop(Some,var_w("val",64))],@{theory}),
                        @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("initMem",
   close
     (var_w("val",64),
      close
        (var("state",qTy),
         rupd
           ("state.MEM",tp[var("state",qTy),mop(K1 (Word_Lib.mk_wordT 61),var_w("val",64))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("rawReadData",
   close
     (var_w("pAddr",64),
      close
        (var("state",qTy),
         let'
           (var_w("pAddrIdx",61),ex(var_w("pAddr",64),ln 63,ln 3,(Word_Lib.mk_wordT 61)),
            let'
              (var_n"align",
               mop(Cast HOLogic.natT,ex(var_w("pAddr",64),ln 2,ln 0,(Word_Lib.mk_wordT 3))),
               ite(eq(var_n"align",ln 0),
                   let'
                     (var_w("v",64),
                      apply
                        (call
                           ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),
                            @{theory}),var_w("pAddrIdx",61)),
                      tp[var_w("v",64),
                         apply
                           (call
                              ("mark_log",@{typ "state \<Rightarrow> state"},
                               tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                  call
                                    ("log_r_mem",@{typ string},
                                     tp[var_w("pAddrIdx",61),var_w("pAddr",64),var_w("v",64)],
                                     @{theory})],@{theory}),var("state",qTy))]),
                   let'
                     (var_w("v",64),
                      apply
                        (call
                           ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),
                            @{theory}),var_w("pAddrIdx",61)),
                      let'
                        (var_w("v0",64),
                         apply
                           (call
                              ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),
                               @{theory}),bop(Add,var_w("pAddrIdx",61),lw(1,61))),
                         let'
                           (var_w("data",64),
                            ex(bop(Asr,cc[var_w("v0",64),var_w("v",64)],bop(Mul,var_n"align",ln 8)),
                               ln 63,ln 0,w64),
                            tp[var_w("data",64),
                               apply
                                 (call
                                    ("mark_log",@{typ "state \<Rightarrow> state"},
                                     tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                        call
                                          ("log_r_mem",@{typ string},
                                           tp[var_w("pAddrIdx",61),var_w("pAddr",64),
                                              var_w("data",64)],@{theory})],@{theory}),
                                  apply
                                    (call
                                       ("mark_log",@{typ "state \<Rightarrow> state"},
                                        tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                           call
                                             ("log_r_mem",@{typ string},
                                              tp[bop(Add,var_w("pAddrIdx",61),lw(1,61)),
                                                 var_w("pAddr",64),var_w("v0",64)],@{theory})],
                                        @{theory}),
                                     apply
                                       (call
                                          ("mark_log",@{typ "state \<Rightarrow> state"},
                                           tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                              call
                                                ("log_r_mem",@{typ string},
                                                 tp[var_w("pAddrIdx",61),var_w("pAddr",64),
                                                    var_w("v",64)],@{theory})],@{theory}),
                                        var("state",qTy))))])))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("rawWriteData",
   close
     (tp[var_w("pAddr",64),var_w("data",64),var_n"nbytes"],
      close
        (var("state",qTy),
         let'
           (var_w("mask",64),
            bop(Sub,bop(Lsl,mop(Cast w64,lw(1,1)),bop(Mul,var_n"nbytes",ln 8)),lw(1,64)),
            let'
              (var_w("pAddrIdx",61),ex(var_w("pAddr",64),ln 63,ln 3,(Word_Lib.mk_wordT 61)),
               let'
                 (var_n"align",
                  mop(Cast HOLogic.natT,ex(var_w("pAddr",64),ln 2,ln 0,(Word_Lib.mk_wordT 3))),
                  let'
                    (var_w("v",64),
                     apply
                       (call
                          ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("pAddrIdx",61)),
                     let'
                       (var("s",qTy),
                        apply
                          (call
                             ("mark_log",@{typ "state \<Rightarrow> state"},
                              tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                 call
                                   ("log_r_mem",@{typ string},
                                    tp[var_w("pAddrIdx",61),var_w("pAddr",64),var_w("v",64)],
                                    @{theory})],@{theory}),var("state",qTy)),
                        itb([(eq(var_n"align",ln 0),
                              let'
                                (var_w("new",64),
                                 bop(BOr,bop(BAnd,var_w("v",64),mop(BNot,var_w("mask",64))),
                                     bop(BAnd,var_w("data",64),var_w("mask",64))),
                                 apply
                                   (call
                                      ("mark_log",@{typ "state \<Rightarrow> state"},
                                       tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                          call
                                            ("log_w_mem_mask",@{typ string},
                                             tp[var_w("pAddrIdx",61),var_w("pAddr",64),
                                                var_w("mask",64),var_w("data",64),var_w("v",64),
                                                var_w("new",64)],@{theory})],@{theory}),
                                    rupd
                                      ("state.MEM",
                                       tp[var("s",qTy),
                                          fupd
                                            (call
                                               ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},
                                                var("s",qTy),@{theory}),var_w("pAddrIdx",61),
                                             var_w("new",64))],@{theory})))),
                             (bop(Le,bop(Add,var_n"align",var_n"nbytes"),
                                  bop(Div,mop(Size,var_w("mask",64)),ln 8)),
                              let'
                                (var_w("new",64),
                                 bop(BOr,
                                     bop(BAnd,var_w("v",64),
                                         mop(BNot,
                                             bop(Lsl,var_w("mask",64),bop(Mul,var_n"align",ln 8)))),
                                     bop(Lsl,bop(BAnd,var_w("data",64),var_w("mask",64)),
                                         bop(Mul,var_n"align",ln 8))),
                                 apply
                                   (call
                                      ("mark_log",@{typ "state \<Rightarrow> state"},
                                       tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                                          call
                                            ("log_w_mem_mask_misaligned",@{typ string},
                                             tp[var_w("pAddrIdx",61),var_w("pAddr",64),
                                                var_w("mask",64),var_w("data",64),var_n"align",
                                                var_w("v",64),var_w("new",64)],@{theory})],@{theory}),
                                    rupd
                                      ("state.MEM",
                                       tp[var("s",qTy),
                                          fupd
                                            (call
                                               ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},
                                                var("s",qTy),@{theory}),var_w("pAddrIdx",61),
                                             var_w("new",64))],@{theory}))))],
                            let'
                              (var_w("dw_mask",128),
                               bop(Lsl,mop(Cast (Word_Lib.mk_wordT 128),var_w("mask",64)),
                                   bop(Mul,var_n"align",ln 8)),
                               let'
                                 (var_w("dw_new",128),
                                  bop(BOr,
                                      bop(BAnd,
                                          cc[apply
                                               (call
                                                  ("state.MEM",
                                                   @{typ "61 word \<Rightarrow> 64 word"},
                                                   var("s",qTy),@{theory}),
                                                bop(Add,var_w("pAddrIdx",61),lw(1,61))),
                                             var_w("v",64)],mop(BNot,var_w("dw_mask",128))),
                                      bop(BAnd,
                                          bop(Lsl,
                                              mop(Cast (Word_Lib.mk_wordT 128),var_w("data",64)),
                                              bop(Mul,var_n"align",ln 8)),var_w("dw_mask",128))),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.MEM",
                                        tp[var("s",qTy),
                                           fupd
                                             (call
                                                ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},
                                                 var("s",qTy),@{theory}),
                                              bop(Add,var_w("pAddrIdx",61),lw(1,61)),
                                              ex(var_w("dw_new",128),
                                                 bop(Sub,bop(Mul,ln 2,mop(Size,var_w("data",64))),
                                                     ln 1),mop(Size,var_w("data",64)),w64))],
                                        @{theory}),
                                     rupd
                                       ("state.MEM",
                                        tp[var("s",qTy),
                                           fupd
                                             (call
                                                ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},
                                                 var("s",qTy),@{theory}),var_w("pAddrIdx",61),
                                              ex(var_w("dw_new",128),
                                                 bop(Sub,mop(Size,var_w("data",64)),ln 1),ln 0,w64))],
                                        @{theory})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("rawReadInst",
   close
     (var_w("pAddr",64),
      close
        (var("state",qTy),
         let'
           (var_w("pAddrIdx",61),ex(var_w("pAddr",64),ln 63,ln 3,(Word_Lib.mk_wordT 61)),
            let'
              (var_w("v",64),
               apply
                 (call
                    ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                  var_w("pAddrIdx",61)),
               tp[ite(bop(Bit,var_w("pAddr",64),ln 2),ex(var_w("v",64),ln 63,ln 32,w32),
                      ex(var_w("v",64),ln 31,ln 0,w32)),
                  apply
                    (call
                       ("mark_log",@{typ "state \<Rightarrow> state"},
                        tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                           call
                             ("log_r_mem",@{typ string},
                              tp[var_w("pAddrIdx",61),var_w("pAddr",64),var_w("v",64)],@{theory})],
                        @{theory}),var("state",qTy))])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("rawWriteMem",
   close
     (tp[var_w("pAddr",64),var_w("data",64)],
      close
        (var("state",qTy),
         let'
           (var_w("pAddrIdx",61),ex(var_w("pAddr",64),ln 63,ln 3,(Word_Lib.mk_wordT 61)),
            apply
              (call
                 ("mark_log",@{typ "state \<Rightarrow> state"},
                  tp[const("LOG_MEM",HOLogic.natT,@{theory}),
                     call
                       ("log_w_mem",@{typ string},
                        tp[var_w("pAddrIdx",61),var_w("pAddr",64),var_w("data",64)],@{theory})],
                  @{theory}),
               rupd
                 ("state.MEM",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.MEM",@{typ "61 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("pAddrIdx",61),var_w("data",64))],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PAGESIZE_BITS",ln 12)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("TLBEntries",ln 16)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'memPerm",
   close
     (var_w("x",4),
      record
        ("memPerm",
         [bop(Bit,var_w("x",4),ln 0),bop(Bit,var_w("x",4),ln 3),bop(Bit,var_w("x",4),ln 1),
          bop(Bit,var_w("x",4),ln 2)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'memPerm",
   close
     (var("x",@{typ memPerm}),
      cc[mop(Cast w1,call("memPerm.Mem_U",HOLogic.boolT,var("x",@{typ memPerm}),@{theory})),
         mop(Cast w1,call("memPerm.Mem_X",HOLogic.boolT,var("x",@{typ memPerm}),@{theory})),
         mop(Cast w1,call("memPerm.Mem_W",HOLogic.boolT,var("x",@{typ memPerm}),@{theory})),
         mop(Cast w1,call("memPerm.Mem_R",HOLogic.boolT,var("x",@{typ memPerm}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'memPerm",
   close
     (tp[var_a w4,var("x",@{typ memPerm})],call("reg'memPerm",w4,var("x",@{typ memPerm}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'memPerm",
   close
     (tp[var_a @{typ memPerm},var_w("x",4)],
      call("rec'memPerm",@{typ memPerm},var_w("x",4),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("checkMemPermission",
   close
     (tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",var_b"pum",
         var("p",@{typ memPerm})],
      close
        (var("state",qTy),
         cs(tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege})],
            [(tp[lc("Read","accessType",@{theory}),lc("User","Privilege",@{theory})],
              tp[bop(And,
                     bop(Or,call("memPerm.Mem_R",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         bop(And,var_b"mxr",
                             call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}))),
                     call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory})),
                 var("state",qTy)]),
             (tp[lc("Write","accessType",@{theory}),lc("User","Privilege",@{theory})],
              tp[bop(And,call("memPerm.Mem_W",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                     call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory})),
                 var("state",qTy)]),
             (tp[lc("ReadWrite","accessType",@{theory}),lc("User","Privilege",@{theory})],
              tp[bop(And,
                     bop(Or,call("memPerm.Mem_R",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         bop(And,var_b"mxr",
                             call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}))),
                     bop(And,call("memPerm.Mem_W",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}))),
                 var("state",qTy)]),
             (tp[lc("Execute","accessType",@{theory}),lc("User","Privilege",@{theory})],
              tp[bop(And,call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                     call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory})),
                 var("state",qTy)]),
             (tp[lc("Read","accessType",@{theory}),lc("Supervisor","Privilege",@{theory})],
              tp[bop(And,
                     bop(Or,call("memPerm.Mem_R",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         bop(And,var_b"mxr",
                             call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}))),
                     mop(Not,
                         bop(And,
                             call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                             var_b"pum"))),var("state",qTy)]),
             (tp[lc("Write","accessType",@{theory}),lc("Supervisor","Privilege",@{theory})],
              tp[bop(And,call("memPerm.Mem_W",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                     mop(Not,
                         bop(And,
                             call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                             var_b"pum"))),var("state",qTy)]),
             (tp[lc("ReadWrite","accessType",@{theory}),lc("Supervisor","Privilege",@{theory})],
              tp[bop(And,
                     bop(Or,call("memPerm.Mem_R",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         bop(And,var_b"mxr",
                             call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}))),
                     bop(And,call("memPerm.Mem_W",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                         mop(Not,
                             bop(And,
                                 call
                                   ("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                                 var_b"pum")))),var("state",qTy)]),
             (tp[lc("Execute","accessType",@{theory}),lc("Supervisor","Privilege",@{theory})],
              tp[bop(And,call("memPerm.Mem_X",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                     mop(Not,
                         bop(And,
                             call("memPerm.Mem_U",HOLogic.boolT,var("p",@{typ memPerm}),@{theory}),
                             var_b"pum"))),var("state",qTy)]),
             (tp[var_a @{typ accessType},lc("Hypervisor","Privilege",@{theory})],
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                    call
                      ("exception.INTERNAL_ERROR",@{typ exception},
                       ls"hypervisor 32-bit mem perm check",@{theory}),@{theory}),var("state",qTy))),
             (tp[var_a @{typ accessType},lc("Machine","Privilege",@{theory})],
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                    call
                      ("exception.INTERNAL_ERROR",@{typ exception},
                       ls"machine 32-bit mem perm check",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isPTEPtr",close(var_w("perm",4),eq(ex(var_w("perm",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("VPN32_LEVEL_BITS",ln 10)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PPN32_LEVEL_BITS",ln 10)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PTE32_LOG_SIZE",ln 2)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("SV32_LEVELS",ln 2)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV32_Vaddr",
   close
     (var_w("x",32),
      record
        ("SV32_Vaddr",
         [ex(var_w("x",32),ln 11,ln 0,(Word_Lib.mk_wordT 12)),
          ex(var_w("x",32),ln 31,ln 12,(Word_Lib.mk_wordT 20))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV32_Vaddr",
   close
     (var("x",@{typ SV32_Vaddr}),
      cc[call("SV32_Vaddr.VA32_VPNi",(Word_Lib.mk_wordT 20),var("x",@{typ SV32_Vaddr}),@{theory}),
         call("SV32_Vaddr.VA32_PgOfs",(Word_Lib.mk_wordT 12),var("x",@{typ SV32_Vaddr}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV32_Vaddr",
   close
     (tp[var_a w32,var("x",@{typ SV32_Vaddr})],
      call("reg'SV32_Vaddr",w32,var("x",@{typ SV32_Vaddr}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV32_Vaddr",
   close
     (tp[var_a @{typ SV32_Vaddr},var_w("x",32)],
      call("rec'SV32_Vaddr",@{typ SV32_Vaddr},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV32_Paddr",
   close
     (var_w("x",34),
      record
        ("SV32_Paddr",
         [ex(var_w("x",34),ln 33,ln 12,(Word_Lib.mk_wordT 22)),
          ex(var_w("x",34),ln 11,ln 0,(Word_Lib.mk_wordT 12))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV32_Paddr",
   close
     (var("x",@{typ SV32_Paddr}),
      cc[call("SV32_Paddr.PA32_PPNi",(Word_Lib.mk_wordT 22),var("x",@{typ SV32_Paddr}),@{theory}),
         call("SV32_Paddr.PA32_PgOfs",(Word_Lib.mk_wordT 12),var("x",@{typ SV32_Paddr}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV32_Paddr",
   close
     (tp[var_a (Word_Lib.mk_wordT 34),var("x",@{typ SV32_Paddr})],
      call("reg'SV32_Paddr",(Word_Lib.mk_wordT 34),var("x",@{typ SV32_Paddr}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV32_Paddr",
   close
     (tp[var_a @{typ SV32_Paddr},var_w("x",34)],
      call("rec'SV32_Paddr",@{typ SV32_Paddr},var_w("x",34),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV32_PTE",
   close
     (var_w("x",32),
      record
        ("SV32_PTE",
         [bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 5),
          ex(var_w("x",32),ln 4,ln 1,w4),ex(var_w("x",32),ln 31,ln 10,(Word_Lib.mk_wordT 22)),
          bop(Bit,var_w("x",32),ln 0),ex(var_w("x",32),ln 9,ln 8,(Word_Lib.mk_wordT 2))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV32_PTE",
   close
     (var("x",@{typ SV32_PTE}),
      cc[call("SV32_PTE.PTE32_PPNi",(Word_Lib.mk_wordT 22),var("x",@{typ SV32_PTE}),@{theory}),
         call("SV32_PTE.sv32_pte'rst",(Word_Lib.mk_wordT 2),var("x",@{typ SV32_PTE}),@{theory}),
         mop(Cast w1,call("SV32_PTE.PTE32_D",HOLogic.boolT,var("x",@{typ SV32_PTE}),@{theory})),
         mop(Cast w1,call("SV32_PTE.PTE32_A",HOLogic.boolT,var("x",@{typ SV32_PTE}),@{theory})),
         mop(Cast w1,call("SV32_PTE.PTE32_G",HOLogic.boolT,var("x",@{typ SV32_PTE}),@{theory})),
         call("SV32_PTE.PTE32_PERM",w4,var("x",@{typ SV32_PTE}),@{theory}),
         mop(Cast w1,call("SV32_PTE.PTE32_V",HOLogic.boolT,var("x",@{typ SV32_PTE}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV32_PTE",
   close
     (tp[var_a w32,var("x",@{typ SV32_PTE})],
      call("reg'SV32_PTE",w32,var("x",@{typ SV32_PTE}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV32_PTE",
   close
     (tp[var_a @{typ SV32_PTE},var_w("x",32)],
      call("rec'SV32_PTE",@{typ SV32_PTE},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curPTB32",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(Lsl,
             mop(Cast (Word_Lib.mk_wordT 34),
                 call
                   ("sptbr32.PPN_32",(Word_Lib.mk_wordT 22),
                    call
                      ("rec'sptbr32",@{typ sptbr32},
                       ex(call
                            ("SupervisorCSR.sptbr",w64,
                             apply
                               (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                                var("state",qTy)),@{theory}),ln 31,ln 0,w32),@{theory}),@{theory})),
             const("PAGESIZE_BITS",HOLogic.natT,@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = function
  ("walk32",
   tp[var_w("vaddr",32),var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
      var_b"pum",var_w("ptb",34),var_n"level",var_b"global"],
   close
     (var("state",qTy),
      let'
        (var("va",@{typ SV32_Vaddr}),
         call("rec'SV32_Vaddr",@{typ SV32_Vaddr},var_w("vaddr",32),@{theory}),
         let'
           (var_w("pt_ofs",34),
            bop(Lsl,
                mop(Cast (Word_Lib.mk_wordT 34),
                    ex(bop(Lsr,
                           call
                             ("SV32_Vaddr.VA32_VPNi",(Word_Lib.mk_wordT 20),
                              var("va",@{typ SV32_Vaddr}),@{theory}),
                           bop(Mul,var_n"level",const("VPN32_LEVEL_BITS",HOLogic.natT,@{theory}))),
                       bop(Sub,const("VPN32_LEVEL_BITS",HOLogic.natT,@{theory}),ln 1),ln 0,
                       (Word_Lib.mk_wordT 10))),const("PTE32_LOG_SIZE",HOLogic.natT,@{theory})),
            let'
              (var_w("pte_addr",34),bop(Add,var_w("ptb",34),var_w("pt_ofs",34)),
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  apply
                    (call
                       ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        mop(Cast w64,var_w("pte_addr",34)),@{theory}),var("state",qTy)),
                  let'
                    (var("v",@{typ SV32_PTE}),
                     call("rec'SV32_PTE",@{typ SV32_PTE},ex(var_w("v",64),ln 31,ln 0,w32),@{theory}),
                     let'
                       (var("mperm",@{typ memPerm}),
                        call
                          ("rec'memPerm",@{typ memPerm},
                           call("SV32_PTE.PTE32_PERM",w4,var("v",@{typ SV32_PTE}),@{theory}),
                           @{theory}),
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                    cc[ls"walk32(vaddr=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),
                                                  call
                                                    ("reg'SV32_Vaddr",w32,
                                                     var("va",@{typ SV32_Vaddr}),@{theory}))]),
                                       ls"): level=",mop(Cast(@{typ string}),var_n"level"),
                                       ls" pt_base=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),var_w("ptb",34))]),
                                       ls" pt_ofs=",
                                       mop(Cast(@{typ string}),
                                           mop(Cast HOLogic.natT,var_w("pt_ofs",34))),
                                       ls" pte_addr=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),var_w("pte_addr",34))]),
                                       ls" pte=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),
                                                  call
                                                    ("reg'SV32_PTE",w32,var("v",@{typ SV32_PTE}),
                                                     @{theory}))])]],@{theory}),var("s",qTy)),
                           itb([(bop(Or,
                                     mop(Not,
                                         call
                                           ("SV32_PTE.PTE32_V",HOLogic.boolT,
                                            var("v",@{typ SV32_PTE}),@{theory})),
                                     bop(And,
                                         call
                                           ("memPerm.Mem_W",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}),
                                         mop(Not,
                                             call
                                               ("memPerm.Mem_R",HOLogic.boolT,
                                                var("mperm",@{typ memPerm}),@{theory})))),
                                 tp[lo(@{typ
                                       "34 word \<times>
                                        SV32_PTE \<times> 34 word \<times> nat \<times> bool"}),
                                    apply
                                      (call
                                         ("mark_log",@{typ "state \<Rightarrow> state"},
                                          tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                             ls"walk32: invalid PTE"],@{theory}),var("s",qTy))]),
                                (mop(Not,
                                     bop(Or,
                                         call
                                           ("memPerm.Mem_R",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}),
                                         call
                                           ("memPerm.Mem_X",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}))),
                                 ite(eq(var_n"level",ln 0),
                                     tp[lo(@{typ
                                           "34 word \<times>
                                            SV32_PTE \<times> 34 word \<times> nat \<times> bool"}),
                                        apply
                                          (call
                                             ("mark_log",@{typ "state \<Rightarrow> state"},
                                              tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                                 ls"last-level PTE contains a pointer!"],@{theory}),
                                           var("s",qTy))],
                                     apply
                                       (apply
                                          (var("walk32",
                                               @{typ
                                               "(32 word \<times>
                                                 accessType \<times>
                                                 Privilege \<times>
                                                 bool \<times>
                                                 bool \<times> 34 word \<times> nat \<times> bool) \<Rightarrow>
                                                (state \<Rightarrow>
                                                 (((34 word \<times>
                                                     SV32_PTE \<times>
                                                     34 word \<times> nat \<times> bool)
                                                      option) \<times> state))"}),
                                           tp[var_w("vaddr",32),var("ac",@{typ accessType}),
                                              var("priv",@{typ Privilege}),var_b"mxr",var_b"pum",
                                              mop(Cast (Word_Lib.mk_wordT 34),
                                                  bop(Lsl,
                                                      call
                                                        ("SV32_PTE.PTE32_PPNi",
                                                         (Word_Lib.mk_wordT 22),
                                                         var("v",@{typ SV32_PTE}),@{theory}),
                                                      const("PAGESIZE_BITS",HOLogic.natT,@{theory}))),
                                              bop(Sub,var_n"level",ln 1),
                                              bop(Or,var_b"global",
                                                  call
                                                    ("SV32_PTE.PTE32_G",HOLogic.boolT,
                                                     var("v",@{typ SV32_PTE}),@{theory}))]),
                                        var("s",qTy))))],
                               let'
                                 (tp[var_b"v0",var("s",qTy)],
                                  apply
                                    (call
                                       ("checkMemPermission",
                                        @{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege}),
                                           var_b"mxr",var_b"pum",var("mperm",@{typ memPerm})],
                                        @{theory}),var("s",qTy)),
                                  ite(mop(Not,var_b"v0"),
                                      tp[lo(@{typ
                                            "34 word \<times>
                                             SV32_PTE \<times> 34 word \<times> nat \<times> bool"}),
                                         apply
                                           (call
                                              ("mark_log",@{typ "state \<Rightarrow> state"},
                                               tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                                  ls"PTE permission check failure!"],@{theory}),
                                            var("s",qTy))],
                                      tp[mop(Some,
                                             tp[mop(Cast (Word_Lib.mk_wordT 34),
                                                    cc[ite(bop(Gt,var_n"level",ln 0),
                                                           bop(BOr,
                                                               mop(Cast (Word_Lib.mk_wordT 22),
                                                                   bop(Lsl,
                                                                       bop(Lsr,
                                                                           call
                                                                             ("SV32_PTE.PTE32_PPNi",
                                                                              (Word_Lib.mk_wordT 22),
                                                                              var("v",
                                                                                  @{typ SV32_PTE}),
                                                                              @{theory}),
                                                                           bop(Mul,var_n"level",
                                                                               const
                                                                                 ("PPN32_LEVEL_BITS",
                                                                                  HOLogic.natT,
                                                                                  @{theory}))),
                                                                       bop(Mul,var_n"level",
                                                                           const
                                                                             ("PPN32_LEVEL_BITS",
                                                                              HOLogic.natT,@{theory})))),
                                                               mop(Cast (Word_Lib.mk_wordT 22),
                                                                   bop(BAnd,
                                                                       call
                                                                         ("SV32_Vaddr.VA32_VPNi",
                                                                          (Word_Lib.mk_wordT 20),
                                                                          var("va",@{typ SV32_Vaddr}),
                                                                          @{theory}),
                                                                       bop(Sub,
                                                                           bop(Lsl,lw(1,20),
                                                                               bop(Mul,var_n"level",
                                                                                   const
                                                                                     ("VPN32_LEVEL_BITS",
                                                                                      HOLogic.natT,
                                                                                      @{theory}))),
                                                                           lw(1,20))))),
                                                           call
                                                             ("SV32_PTE.PTE32_PPNi",
                                                              (Word_Lib.mk_wordT 22),
                                                              var("v",@{typ SV32_PTE}),@{theory})),
                                                       call
                                                         ("SV32_Vaddr.VA32_PgOfs",
                                                          (Word_Lib.mk_wordT 12),
                                                          var("va",@{typ SV32_Vaddr}),@{theory})]),
                                                var("v",@{typ SV32_PTE}),var_w("pte_addr",34),
                                                var_n"level",
                                                bop(Or,var_b"global",
                                                    call
                                                      ("SV32_PTE.PTE32_G",HOLogic.boolT,
                                                       var("v",@{typ SV32_PTE}),@{theory}))]),
                                         var("s",qTy)]))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("updatePTE32",
   close
     (tp[var("pte",@{typ SV32_PTE}),var("ac",@{typ accessType})],
      let'
        (var_b"d_update",
         bop(And,
             bop(Or,eq(var("ac",@{typ accessType}),lc("Write","accessType",@{theory})),
                 eq(var("ac",@{typ accessType}),lc("ReadWrite","accessType",@{theory}))),
             mop(Not,call("SV32_PTE.PTE32_D",HOLogic.boolT,var("pte",@{typ SV32_PTE}),@{theory}))),
         ite(bop(Or,var_b"d_update",
                 mop(Not,call("SV32_PTE.PTE32_A",HOLogic.boolT,var("pte",@{typ SV32_PTE}),@{theory}))),
             let'
               (var("s0",@{typ SV32_PTE}),
                rupd("SV32_PTE.PTE32_A",tp[var("pte",@{typ SV32_PTE}),lt],@{theory}),
                mop(Some,
                    ite(var_b"d_update",
                        rupd("SV32_PTE.PTE32_D",tp[var("s0",@{typ SV32_PTE}),lt],@{theory}),
                        var("s0",@{typ SV32_PTE})))),lo @{typ SV32_PTE}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mkTLB32_Entry",
   close
     (tp[var_w("asid",10),var_b"global",var_w("vAddr",32),var_w("pAddr",34),
         var("pte",@{typ SV32_PTE}),var_n"i",var_w("pteAddr",34)],
      close
        (var("state",qTy),
         let'
           (var("s0",@{typ TLB32_Entry}),
            rupd
              ("TLB32_Entry.vAddrMask_32",
               tp[rupd
                    ("TLB32_Entry.pteAddr_32",
                     tp[rupd
                          ("TLB32_Entry.pte_32",
                           tp[rupd
                                ("TLB32_Entry.global_32",
                                 tp[rupd
                                      ("TLB32_Entry.asid_32",
                                       tp[lx @{typ TLB32_Entry},var_w("asid",10)],@{theory}),
                                    var_b"global"],@{theory}),var("pte",@{typ SV32_PTE})],@{theory}),
                        var_w("pteAddr",34)],@{theory}),
                  bop(Sub,
                      bop(Lsl,lw(1,32),
                          bop(Add,
                              bop(Mul,const("VPN32_LEVEL_BITS",HOLogic.natT,@{theory}),var_n"i"),
                              const("PAGESIZE_BITS",HOLogic.natT,@{theory}))),lw(1,32))],@{theory}),
            let'
              (var("s0",@{typ TLB32_Entry}),
               rupd
                 ("TLB32_Entry.vMatchMask_32",
                  tp[var("s0",@{typ TLB32_Entry}),
                     bop(BXor,mop(SE w32,lw(1,1)),
                         call("TLB32_Entry.vAddrMask_32",w32,var("s0",@{typ TLB32_Entry}),@{theory}))],
                  @{theory}),
               rupd
                 ("TLB32_Entry.age_32",
                  tp[rupd
                       ("TLB32_Entry.pAddr_32",
                        tp[rupd
                             ("TLB32_Entry.vAddr_32",
                              tp[var("s0",@{typ TLB32_Entry}),
                                 bop(BAnd,var_w("vAddr",32),
                                     call
                                       ("TLB32_Entry.vMatchMask_32",w32,
                                        var("s0",@{typ TLB32_Entry}),@{theory}))],@{theory}),
                           bop(Lsl,
                               bop(Asr,var_w("pAddr",34),
                                   bop(Add,const("PAGESIZE_BITS",HOLogic.natT,@{theory}),
                                       bop(Mul,const("PPN32_LEVEL_BITS",HOLogic.natT,@{theory}),
                                           var_n"i"))),
                               bop(Add,const("PAGESIZE_BITS",HOLogic.natT,@{theory}),
                                   bop(Mul,const("PPN32_LEVEL_BITS",HOLogic.natT,@{theory}),var_n"i")))],
                        @{theory}),
                     apply
                       (call
                          ("state.c_cycles",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),call("state.procID",w8,var("state",qTy),@{theory}))],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("lookupTLB32",
   close
     (tp[var_w("asid",10),var_w("vAddr",32),
         var("tlb",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"})],
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("state",
                                 @{typ "((TLB32_Entry \<times> 4 word) option) \<times> unit"}),
                             cs(apply
                                  (var("tlb",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),
                                   mop(Cast w4,var_n"i")),
                                [(mop(Some,var("e",@{typ TLB32_Entry})),
                                  tp[lu,
                                     ite(bop(And,
                                             eq(mop(Fst,
                                                    var("state",
                                                        @{typ
                                                        "((TLB32_Entry \<times> 4 word) option) \<times>
                                                         unit"})),
                                                lo(@{typ "TLB32_Entry \<times> 4 word"})),
                                             bop(And,
                                                 bop(Or,
                                                     call
                                                       ("TLB32_Entry.global_32",HOLogic.boolT,
                                                        var("e",@{typ TLB32_Entry}),@{theory}),
                                                     eq(call
                                                          ("TLB32_Entry.asid_32",
                                                           (Word_Lib.mk_wordT 10),
                                                           var("e",@{typ TLB32_Entry}),@{theory}),
                                                        var_w("asid",10))),
                                                 eq(call
                                                      ("TLB32_Entry.vAddr_32",w32,
                                                       var("e",@{typ TLB32_Entry}),@{theory}),
                                                    bop(BAnd,var_w("vAddr",32),
                                                        call
                                                          ("TLB32_Entry.vMatchMask_32",w32,
                                                           var("e",@{typ TLB32_Entry}),@{theory}))))),
                                         tp[mop(Some,
                                                tp[var("e",@{typ TLB32_Entry}),mop(Cast w4,var_n"i")]),
                                            lu],
                                         var("state",
                                             @{typ
                                             "((TLB32_Entry \<times> 4 word) option) \<times> unit"}))]),
                                 (lo @{typ TLB32_Entry},
                                  tp[lu,
                                     var("state",
                                         @{typ
                                         "((TLB32_Entry \<times> 4 word) option) \<times> unit"})])],
                                @{context})))]),tp[lo(@{typ "TLB32_Entry \<times> 4 word"}),lu])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("addToTLB32",
   close
     (tp[var_w("asid",10),var_w("vAddr",32),var_w("pAddr",34),var("pte",@{typ SV32_PTE}),
         var_w("pteAddr",34),var_n"i",var_b"global",
         var("curTLB",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"})],
      close
        (var("state",qTy),
         let'
           (var("s",
                @{typ
                "bool \<times>
                 nat \<times>
                 64 word \<times>
                 (4 word \<Rightarrow> (TLB32_Entry option)) \<times> TLB32_Entry \<times> state"}),
            mop(Snd,
                apply
                  (forloop
                     (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                         close
                           (var_n"i",
                            close
                              (var("state",
                                   @{typ
                                   "bool \<times>
                                    nat \<times>
                                    64 word \<times>
                                    (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                    TLB32_Entry \<times> state"}),
                               cs(apply
                                    (mop(Fst,
                                         mop(Snd,
                                             mop(Snd,
                                                 mop(Snd,
                                                     var("state",
                                                         @{typ
                                                         "bool \<times>
                                                          nat \<times>
                                                          64 word \<times>
                                                          (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                          TLB32_Entry \<times> state"}))))),
                                     mop(Cast w4,var_n"i")),
                                  [(mop(Some,var("e",@{typ TLB32_Entry})),
                                    ite(bop(Ult,
                                            call
                                              ("TLB32_Entry.age_32",w64,var("e",@{typ TLB32_Entry}),
                                               @{theory}),
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        var("state",
                                                            @{typ
                                                            "bool \<times>
                                                             nat \<times>
                                                             64 word \<times>
                                                             (4 word \<Rightarrow>
                                                              (TLB32_Entry option)) \<times>
                                                             TLB32_Entry \<times> state"}))))),
                                        let'
                                          (var("s",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                TLB32_Entry \<times> state"}),
                                           tp[mop(Fst,
                                                  var("state",
                                                      @{typ
                                                      "bool \<times>
                                                       nat \<times>
                                                       64 word \<times>
                                                       (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                       TLB32_Entry \<times> state"})),
                                              let'
                                                (var("s",
                                                     @{typ
                                                     "nat \<times>
                                                      64 word \<times>
                                                      (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                      TLB32_Entry \<times> state"}),
                                                 mop(Snd,
                                                     var("state",
                                                         @{typ
                                                         "bool \<times>
                                                          nat \<times>
                                                          64 word \<times>
                                                          (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                          TLB32_Entry \<times> state"})),
                                                 tp[mop(Fst,
                                                        var("s",
                                                            @{typ
                                                            "nat \<times>
                                                             64 word \<times>
                                                             (4 word \<Rightarrow>
                                                              (TLB32_Entry option)) \<times>
                                                             TLB32_Entry \<times> state"})),
                                                    call
                                                      ("TLB32_Entry.age_32",w64,
                                                       var("e",@{typ TLB32_Entry}),@{theory}),
                                                    mop(Snd,
                                                        mop(Snd,
                                                            var("s",
                                                                @{typ
                                                                "nat \<times>
                                                                 64 word \<times>
                                                                 (4 word \<Rightarrow>
                                                                  (TLB32_Entry option)) \<times>
                                                                 TLB32_Entry \<times> state"})))])],
                                           tp[lu,
                                              mop(Fst,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       nat \<times>
                                                       64 word \<times>
                                                       (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                       TLB32_Entry \<times> state"})),var_n"i",
                                              mop(Snd,
                                                  mop(Snd,
                                                      var("s",
                                                          @{typ
                                                          "bool \<times>
                                                           nat \<times>
                                                           64 word \<times>
                                                           (4 word \<Rightarrow>
                                                            (TLB32_Entry option)) \<times>
                                                           TLB32_Entry \<times> state"})))]),
                                        tp[lu,
                                           var("state",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                TLB32_Entry \<times> state"})])),
                                   (lo @{typ TLB32_Entry},
                                    tp[lu,lt,
                                       let'
                                         (var("s0",
                                              @{typ
                                              "nat \<times>
                                               64 word \<times>
                                               (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                               TLB32_Entry \<times> state"}),
                                          mop(Snd,
                                              var("state",
                                                  @{typ
                                                  "bool \<times>
                                                   nat \<times>
                                                   64 word \<times>
                                                   (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                   TLB32_Entry \<times> state"})),
                                          tp[mop(Fst,
                                                 var("s0",
                                                     @{typ
                                                     "nat \<times>
                                                      64 word \<times>
                                                      (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                      TLB32_Entry \<times> state"})),
                                             let'
                                               (var("s0",
                                                    @{typ
                                                    "64 word \<times>
                                                     (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                     TLB32_Entry \<times> state"}),
                                                mop(Snd,
                                                    var("s0",
                                                        @{typ
                                                        "nat \<times>
                                                         64 word \<times>
                                                         (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                         TLB32_Entry \<times> state"})),
                                                tp[mop(Fst,
                                                       var("s0",
                                                           @{typ
                                                           "64 word \<times>
                                                            (4 word \<Rightarrow>
                                                             (TLB32_Entry option)) \<times>
                                                            TLB32_Entry \<times> state"})),
                                                   fupd
                                                     (mop(Fst,
                                                          mop(Snd,
                                                              mop(Snd,
                                                                  mop(Snd,
                                                                      var("state",
                                                                          @{typ
                                                                          "bool \<times>
                                                                           nat \<times>
                                                                           64 word \<times>
                                                                           (4 word \<Rightarrow>
                                                                            (TLB32_Entry option)) \<times>
                                                                           TLB32_Entry \<times>
                                                                           state"}))))),
                                                      mop(Cast w4,var_n"i"),
                                                      mop(Some,
                                                          mop(Fst,
                                                              mop(Snd,
                                                                  mop(Snd,
                                                                      mop(Snd,
                                                                          mop(Snd,
                                                                              var("state",
                                                                                  @{typ
                                                                                  "bool \<times>
                                                                                   nat \<times>
                                                                                   64 word \<times>
                                                                                   (4 word \<Rightarrow>
                                                                                    (TLB32_Entry
                                                                                        option)) \<times>
                                                                                   TLB32_Entry \<times>
                                                                                   state"})))))))),
                                                   mop(Snd,
                                                       mop(Snd,
                                                           var("s0",
                                                               @{typ
                                                               "64 word \<times>
                                                                (4 word \<Rightarrow>
                                                                 (TLB32_Entry option)) \<times>
                                                                TLB32_Entry \<times> state"})))])])])],
                                  @{context})))]),
                   tp[lf,ln 0,mop(SE w64,lw(1,1)),
                      var("curTLB",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),
                      apply
                        (call
                           ("mkTLB32_Entry",@{typ "state \<Rightarrow> TLB32_Entry"},
                            tp[var_w("asid",10),var_b"global",var_w("vAddr",32),var_w("pAddr",34),
                               var("pte",@{typ SV32_PTE}),var_n"i",var_w("pteAddr",34)],@{theory}),
                         var("state",qTy)),var("state",qTy)])),
            ite(mop(Not,
                    mop(Fst,
                        var("s",
                            @{typ
                            "bool \<times>
                             nat \<times>
                             64 word \<times>
                             (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                             TLB32_Entry \<times> state"}))),
                fupd
                  (mop(Fst,
                       mop(Snd,
                           mop(Snd,
                               mop(Snd,
                                   var("s",
                                       @{typ
                                       "bool \<times>
                                        nat \<times>
                                        64 word \<times>
                                        (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                        TLB32_Entry \<times> state"}))))),
                   mop(Cast w4,
                       mop(Fst,
                           mop(Snd,
                               var("s",
                                   @{typ
                                   "bool \<times>
                                    nat \<times>
                                    64 word \<times>
                                    (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                    TLB32_Entry \<times> state"})))),
                   mop(Some,
                       mop(Fst,
                           mop(Snd,
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                TLB32_Entry \<times> state"})))))))),
                mop(Fst,
                    mop(Snd,
                        mop(Snd,
                            mop(Snd,
                                var("s",
                                    @{typ
                                    "bool \<times>
                                     nat \<times>
                                     64 word \<times>
                                     (4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                     TLB32_Entry \<times> state"}))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("flushTLB32",
   close
     (tp[var_w("asid",10),var("addr",@{typ "32 word option"}),
         var("curTLB",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"})],
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("state",
                                 @{typ "(4 word \<Rightarrow> (TLB32_Entry option)) \<times> unit"}),
                             cs(tp[apply
                                     (mop(Fst,
                                          var("state",
                                              @{typ
                                              "(4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                               unit"})),mop(Cast w4,var_n"i")),
                                   var("addr",@{typ "32 word option"})],
                                [(tp[mop(Some,var("e",@{typ TLB32_Entry})),mop(Some,var_w("va",32))],
                                  tp[lu,
                                     ite(bop(And,
                                             bop(Or,eq(var_w("asid",10),lw(0,10)),
                                                 bop(And,
                                                     eq(var_w("asid",10),
                                                        call
                                                          ("TLB32_Entry.asid_32",
                                                           (Word_Lib.mk_wordT 10),
                                                           var("e",@{typ TLB32_Entry}),@{theory})),
                                                     mop(Not,
                                                         call
                                                           ("TLB32_Entry.global_32",HOLogic.boolT,
                                                            var("e",@{typ TLB32_Entry}),@{theory})))),
                                             eq(call
                                                  ("TLB32_Entry.vAddr_32",w32,
                                                   var("e",@{typ TLB32_Entry}),@{theory}),
                                                bop(BAnd,var_w("va",32),
                                                    call
                                                      ("TLB32_Entry.vMatchMask_32",w32,
                                                       var("e",@{typ TLB32_Entry}),@{theory})))),
                                         tp[fupd
                                              (mop(Fst,
                                                   var("state",
                                                       @{typ
                                                       "(4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                        unit"})),mop(Cast w4,var_n"i"),
                                               lo @{typ TLB32_Entry}),lu],
                                         var("state",
                                             @{typ
                                             "(4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                              unit"}))]),
                                 (tp[mop(Some,var("e",@{typ TLB32_Entry})),lo w32],
                                  tp[lu,
                                     ite(bop(Or,eq(var_w("asid",10),lw(0,10)),
                                             bop(And,
                                                 eq(var_w("asid",10),
                                                    call
                                                      ("TLB32_Entry.asid_32",(Word_Lib.mk_wordT 10),
                                                       var("e",@{typ TLB32_Entry}),@{theory})),
                                                 mop(Not,
                                                     call
                                                       ("TLB32_Entry.global_32",HOLogic.boolT,
                                                        var("e",@{typ TLB32_Entry}),@{theory})))),
                                         tp[fupd
                                              (mop(Fst,
                                                   var("state",
                                                       @{typ
                                                       "(4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                                        unit"})),mop(Cast w4,var_n"i"),
                                               lo @{typ TLB32_Entry}),lu],
                                         var("state",
                                             @{typ
                                             "(4 word \<Rightarrow> (TLB32_Entry option)) \<times>
                                              unit"}))]),
                                 (tp[lo @{typ TLB32_Entry},var_a(@{typ "32 word option"})],
                                  tp[lu,
                                     var("state",
                                         @{typ
                                         "(4 word \<Rightarrow> (TLB32_Entry option)) \<times> unit"})])],
                                @{context})))]),
                 tp[var("curTLB",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),lu])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TLB32",
   close
     (var("state",qTy),
      apply
        (call
           ("state.c_tlb32",
            @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB32_Entry option))"},
            var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'TLB32",
   close
     (var("value",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_tlb32",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_tlb32",
                     @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB32_Entry option))"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("translate32",
   close
     (tp[var_w("vAddr",32),var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
         var_b"pum",var_n"level"],
      close
        (var("state",qTy),
         let'
           (var_w("v",10),
            apply
              (call("curAsid32",@{typ "state \<Rightarrow> 10 word"},lu,@{theory}),var("state",qTy)),
            cs(call
                 ("lookupTLB32",@{typ "(TLB32_Entry \<times> 4 word) option"},
                  tp[var_w("v",10),var_w("vAddr",32),
                     apply
                       (const
                          ("TLB32",
                           @{typ "state \<Rightarrow> (4 word \<Rightarrow> (TLB32_Entry option))"},
                           @{theory}),var("state",qTy))],@{theory}),
               [(mop(Some,tp[var("ent",@{typ TLB32_Entry}),var_w("idx",4)]),
                 let'
                   (tp[var_b"v",var("s",qTy)],
                    apply
                      (call
                         ("checkMemPermission",@{typ "state \<Rightarrow> (bool \<times> state)"},
                          tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
                             var_b"pum",
                             call
                               ("rec'memPerm",@{typ memPerm},
                                call
                                  ("SV32_PTE.PTE32_PERM",w4,
                                   call
                                     ("TLB32_Entry.pte_32",@{typ SV32_PTE},
                                      var("ent",@{typ TLB32_Entry}),@{theory}),@{theory}),@{theory})],
                          @{theory}),var("state",qTy)),
                    ite(var_b"v",
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),ls"TLB32 hit!"],
                                 @{theory}),var("s",qTy)),
                           tp[mop(Some,
                                  bop(BOr,
                                      call
                                        ("TLB32_Entry.pAddr_32",(Word_Lib.mk_wordT 34),
                                         var("ent",@{typ TLB32_Entry}),@{theory}),
                                      mop(Cast (Word_Lib.mk_wordT 34),
                                          bop(BAnd,var_w("vAddr",32),
                                              call
                                                ("TLB32_Entry.vAddrMask_32",w32,
                                                 var("ent",@{typ TLB32_Entry}),@{theory}))))),
                              ite(mop(IsSome,
                                      call
                                        ("updatePTE32",@{typ "SV32_PTE option"},
                                         tp[call
                                              ("TLB32_Entry.pte_32",@{typ SV32_PTE},
                                               var("ent",@{typ TLB32_Entry}),@{theory}),
                                            var("ac",@{typ accessType})],@{theory})),
                                  let'
                                    (tp[var("v",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),
                                        var("s",qTy)],
                                     let'
                                       (var("s0",qTy),
                                        apply
                                          (call
                                             ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                              tp[mop(Cast w64,
                                                     call
                                                       ("TLB32_Entry.pteAddr_32",
                                                        (Word_Lib.mk_wordT 34),
                                                        var("ent",@{typ TLB32_Entry}),@{theory})),
                                                 mop(Cast w64,
                                                     call
                                                       ("reg'SV32_PTE",w32,
                                                        call
                                                          ("TLB32_Entry.pte_32",@{typ SV32_PTE},
                                                           var("ent",@{typ TLB32_Entry}),@{theory}),
                                                        @{theory})),ln 4],@{theory}),var("s",qTy)),
                                        tp[apply
                                             (const
                                                ("TLB32",
                                                 @{typ
                                                 "state \<Rightarrow>
                                                  (4 word \<Rightarrow> (TLB32_Entry option))"},
                                                 @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                     apply
                                       (call
                                          ("write'TLB32",@{typ "state \<Rightarrow> state"},
                                           fupd
                                             (var("v",
                                                  @{typ "4 word \<Rightarrow> (TLB32_Entry option)"}),
                                              var_w("idx",4),mop(Some,var("ent",@{typ TLB32_Entry}))),
                                           @{theory}),var("s",qTy))),var("s",qTy))]),
                        tp[lo (Word_Lib.mk_wordT 34),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                    ls"TLB32 permission check failure"],@{theory}),var("s",qTy))]))),
                (lo(@{typ "TLB32_Entry \<times> 4 word"}),
                 let'
                   (tp[var_w("v0",34),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       apply
                         (call
                            ("mark_log",@{typ "state \<Rightarrow> state"},
                             tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),ls"TLB32 miss!"],
                             @{theory}),var("state",qTy)),
                       tp[apply
                            (call("curPTB32",@{typ "state \<Rightarrow> 34 word"},lu,@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v0",
                              @{typ
                              "(34 word \<times>
                                 SV32_PTE \<times> 34 word \<times> nat \<times> bool)
                                  option"}),var("s",qTy)],
                       apply
                         (call
                            ("walk32",
                             @{typ
                             "state \<Rightarrow>
                              (((34 word \<times>
                                  SV32_PTE \<times> 34 word \<times> nat \<times> bool)
                                   option) \<times> state)"},
                             tp[var_w("vAddr",32),var("ac",@{typ accessType}),
                                var("priv",@{typ Privilege}),var_b"mxr",var_b"pum",var_w("v0",34),
                                var_n"level",lf],@{theory}),var("s",qTy)),
                       cs(var("v0",
                              @{typ
                              "(34 word \<times>
                                 SV32_PTE \<times> 34 word \<times> nat \<times> bool)
                                  option"}),
                          [(mop(Some,
                                tp[var_w("pAddr",34),var("pte",@{typ SV32_PTE}),var_w("pteAddr",34),
                                   var_n"i",var_b"global"]),
                            tp[mop(Some,var_w("pAddr",34)),
                               apply
                                 (call
                                    ("write'TLB32",@{typ "state \<Rightarrow> state"},
                                     apply
                                       (call
                                          ("addToTLB32",
                                           @{typ
                                           "state \<Rightarrow>
                                            (4 word \<Rightarrow> (TLB32_Entry option))"},
                                           tp[var_w("v",10),var_w("vAddr",32),var_w("pAddr",34),
                                              var("pte",@{typ SV32_PTE}),var_w("pteAddr",34),
                                              var_n"i",var_b"global",
                                              apply
                                                (const
                                                   ("TLB32",
                                                    @{typ
                                                    "state \<Rightarrow>
                                                     (4 word \<Rightarrow> (TLB32_Entry option))"},
                                                    @{theory}),var("s",qTy))],@{theory}),
                                        var("s",qTy)),@{theory}),var("s",qTy))]),
                           (lo(@{typ
                               "34 word \<times>
                                SV32_PTE \<times> 34 word \<times> nat \<times> bool"}),
                            tp[lo (Word_Lib.mk_wordT 34),var("s",qTy)])],@{context}))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("VPN39_LEVEL_BITS",ln 9)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PPN39_LEVEL_BITS",ln 9)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PTE39_LOG_SIZE",ln 3)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("SV39_LEVELS",ln 3)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV39_Vaddr",
   close
     (var_w("x",39),
      record
        ("SV39_Vaddr",
         [ex(var_w("x",39),ln 11,ln 0,(Word_Lib.mk_wordT 12)),
          ex(var_w("x",39),ln 38,ln 12,(Word_Lib.mk_wordT 27))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV39_Vaddr",
   close
     (var("x",@{typ SV39_Vaddr}),
      cc[call("SV39_Vaddr.VA39_VPNi",(Word_Lib.mk_wordT 27),var("x",@{typ SV39_Vaddr}),@{theory}),
         call("SV39_Vaddr.VA39_PgOfs",(Word_Lib.mk_wordT 12),var("x",@{typ SV39_Vaddr}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV39_Vaddr",
   close
     (tp[var_a (Word_Lib.mk_wordT 39),var("x",@{typ SV39_Vaddr})],
      call("reg'SV39_Vaddr",(Word_Lib.mk_wordT 39),var("x",@{typ SV39_Vaddr}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV39_Vaddr",
   close
     (tp[var_a @{typ SV39_Vaddr},var_w("x",39)],
      call("rec'SV39_Vaddr",@{typ SV39_Vaddr},var_w("x",39),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV39_Paddr",
   close
     (var_w("x",50),
      record
        ("SV39_Paddr",
         [ex(var_w("x",50),ln 49,ln 12,(Word_Lib.mk_wordT 38)),
          ex(var_w("x",50),ln 11,ln 0,(Word_Lib.mk_wordT 12))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV39_Paddr",
   close
     (var("x",@{typ SV39_Paddr}),
      cc[call("SV39_Paddr.PA39_PPNi",(Word_Lib.mk_wordT 38),var("x",@{typ SV39_Paddr}),@{theory}),
         call("SV39_Paddr.PA39_PgOfs",(Word_Lib.mk_wordT 12),var("x",@{typ SV39_Paddr}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV39_Paddr",
   close
     (tp[var_a (Word_Lib.mk_wordT 50),var("x",@{typ SV39_Paddr})],
      call("reg'SV39_Paddr",(Word_Lib.mk_wordT 50),var("x",@{typ SV39_Paddr}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV39_Paddr",
   close
     (tp[var_a @{typ SV39_Paddr},var_w("x",50)],
      call("rec'SV39_Paddr",@{typ SV39_Paddr},var_w("x",50),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SV39_PTE",
   close
     (var_w("x",64),
      record
        ("SV39_PTE",
         [bop(Bit,var_w("x",64),ln 6),bop(Bit,var_w("x",64),ln 7),bop(Bit,var_w("x",64),ln 5),
          ex(var_w("x",64),ln 4,ln 1,w4),ex(var_w("x",64),ln 47,ln 10,(Word_Lib.mk_wordT 38)),
          bop(Bit,var_w("x",64),ln 0),
          cc[ex(var_w("x",64),ln 9,ln 8,(Word_Lib.mk_wordT 2)),ex(var_w("x",64),ln 63,ln 48,w16)]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SV39_PTE",
   close
     (var("x",@{typ SV39_PTE}),
      let'
        (var_w("sv39_pte'rst",18),
         call("SV39_PTE.sv39_pte'rst",(Word_Lib.mk_wordT 18),var("x",@{typ SV39_PTE}),@{theory}),
         cc[ex(var_w("sv39_pte'rst",18),ln 15,ln 0,w16),
            call("SV39_PTE.PTE39_PPNi",(Word_Lib.mk_wordT 38),var("x",@{typ SV39_PTE}),@{theory}),
            ex(var_w("sv39_pte'rst",18),ln 17,ln 16,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SV39_PTE.PTE39_D",HOLogic.boolT,var("x",@{typ SV39_PTE}),@{theory})),
            mop(Cast w1,call("SV39_PTE.PTE39_A",HOLogic.boolT,var("x",@{typ SV39_PTE}),@{theory})),
            mop(Cast w1,call("SV39_PTE.PTE39_G",HOLogic.boolT,var("x",@{typ SV39_PTE}),@{theory})),
            call("SV39_PTE.PTE39_PERM",w4,var("x",@{typ SV39_PTE}),@{theory}),
            mop(Cast w1,call("SV39_PTE.PTE39_V",HOLogic.boolT,var("x",@{typ SV39_PTE}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SV39_PTE",
   close
     (tp[var_a w64,var("x",@{typ SV39_PTE})],
      call("reg'SV39_PTE",w64,var("x",@{typ SV39_PTE}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SV39_PTE",
   close
     (tp[var_a @{typ SV39_PTE},var_w("x",64)],
      call("rec'SV39_PTE",@{typ SV39_PTE},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("curPTB39",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(Lsl,
             mop(Cast (Word_Lib.mk_wordT 50),
                 call
                   ("sptbr64.PPN_64",(Word_Lib.mk_wordT 38),
                    call
                      ("rec'sptbr64",@{typ sptbr64},
                       call
                         ("SupervisorCSR.sptbr",w64,
                          apply
                            (const("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory}),@{theory})),
             const("PAGESIZE_BITS",HOLogic.natT,@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = function
  ("walk39",
   tp[var_w("vaddr",39),var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
      var_b"pum",var_w("ptb",50),var_n"level",var_b"global"],
   close
     (var("state",qTy),
      let'
        (var("va",@{typ SV39_Vaddr}),
         call("rec'SV39_Vaddr",@{typ SV39_Vaddr},var_w("vaddr",39),@{theory}),
         let'
           (var_w("pt_ofs",50),
            bop(Lsl,
                mop(Cast (Word_Lib.mk_wordT 50),
                    ex(bop(Lsr,
                           call
                             ("SV39_Vaddr.VA39_VPNi",(Word_Lib.mk_wordT 27),
                              var("va",@{typ SV39_Vaddr}),@{theory}),
                           bop(Mul,var_n"level",const("VPN39_LEVEL_BITS",HOLogic.natT,@{theory}))),
                       bop(Sub,const("VPN39_LEVEL_BITS",HOLogic.natT,@{theory}),ln 1),ln 0,
                       (Word_Lib.mk_wordT 9))),const("PTE39_LOG_SIZE",HOLogic.natT,@{theory})),
            let'
              (var_w("pte_addr",50),bop(Add,var_w("ptb",50),var_w("pt_ofs",50)),
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  apply
                    (call
                       ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        mop(Cast w64,var_w("pte_addr",50)),@{theory}),var("state",qTy)),
                  let'
                    (var("v",@{typ SV39_PTE}),
                     call("rec'SV39_PTE",@{typ SV39_PTE},var_w("v",64),@{theory}),
                     let'
                       (var("mperm",@{typ memPerm}),
                        call
                          ("rec'memPerm",@{typ memPerm},
                           call("SV39_PTE.PTE39_PERM",w4,var("v",@{typ SV39_PTE}),@{theory}),
                           @{theory}),
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                    cc[ls"walk32(vaddr=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),
                                                  call
                                                    ("reg'SV39_Vaddr",(Word_Lib.mk_wordT 39),
                                                     var("va",@{typ SV39_Vaddr}),@{theory}))]),
                                       ls"): level=",mop(Cast(@{typ string}),var_n"level"),
                                       ls" pt_base=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),var_w("ptb",50))]),
                                       ls" pt_ofs=",
                                       mop(Cast(@{typ string}),
                                           mop(Cast HOLogic.natT,var_w("pt_ofs",50))),
                                       ls" pte_addr=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),var_w("pte_addr",50))]),
                                       ls" pte=0x",
                                       mop(PadLeft,
                                           tp[lsc #"0",ln 16,
                                              mop(Cast(@{typ string}),
                                                  call
                                                    ("reg'SV39_PTE",w64,var("v",@{typ SV39_PTE}),
                                                     @{theory}))])]],@{theory}),var("s",qTy)),
                           itb([(bop(Or,
                                     mop(Not,
                                         call
                                           ("SV39_PTE.PTE39_V",HOLogic.boolT,
                                            var("v",@{typ SV39_PTE}),@{theory})),
                                     bop(And,
                                         call
                                           ("memPerm.Mem_W",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}),
                                         mop(Not,
                                             call
                                               ("memPerm.Mem_R",HOLogic.boolT,
                                                var("mperm",@{typ memPerm}),@{theory})))),
                                 tp[lo(@{typ
                                       "50 word \<times>
                                        SV39_PTE \<times> 50 word \<times> nat \<times> bool"}),
                                    apply
                                      (call
                                         ("mark_log",@{typ "state \<Rightarrow> state"},
                                          tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                             ls"walk39: invalid PTE"],@{theory}),var("s",qTy))]),
                                (mop(Not,
                                     bop(Or,
                                         call
                                           ("memPerm.Mem_R",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}),
                                         call
                                           ("memPerm.Mem_X",HOLogic.boolT,
                                            var("mperm",@{typ memPerm}),@{theory}))),
                                 ite(eq(var_n"level",ln 0),
                                     tp[lo(@{typ
                                           "50 word \<times>
                                            SV39_PTE \<times> 50 word \<times> nat \<times> bool"}),
                                        apply
                                          (call
                                             ("mark_log",@{typ "state \<Rightarrow> state"},
                                              tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                                 ls"last-level PTE contains a pointer!"],@{theory}),
                                           var("s",qTy))],
                                     apply
                                       (apply
                                          (var("walk39",
                                               @{typ
                                               "(39 word \<times>
                                                 accessType \<times>
                                                 Privilege \<times>
                                                 bool \<times>
                                                 bool \<times> 50 word \<times> nat \<times> bool) \<Rightarrow>
                                                (state \<Rightarrow>
                                                 (((50 word \<times>
                                                     SV39_PTE \<times>
                                                     50 word \<times> nat \<times> bool)
                                                      option) \<times> state))"}),
                                           tp[var_w("vaddr",39),var("ac",@{typ accessType}),
                                              var("priv",@{typ Privilege}),var_b"mxr",var_b"pum",
                                              mop(Cast (Word_Lib.mk_wordT 50),
                                                  bop(Lsl,
                                                      call
                                                        ("SV39_PTE.PTE39_PPNi",
                                                         (Word_Lib.mk_wordT 38),
                                                         var("v",@{typ SV39_PTE}),@{theory}),
                                                      const("PAGESIZE_BITS",HOLogic.natT,@{theory}))),
                                              bop(Sub,var_n"level",ln 1),
                                              bop(Or,var_b"global",
                                                  call
                                                    ("SV39_PTE.PTE39_G",HOLogic.boolT,
                                                     var("v",@{typ SV39_PTE}),@{theory}))]),
                                        var("s",qTy))))],
                               let'
                                 (tp[var_b"v0",var("s",qTy)],
                                  apply
                                    (call
                                       ("checkMemPermission",
                                        @{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege}),
                                           var_b"mxr",var_b"pum",var("mperm",@{typ memPerm})],
                                        @{theory}),var("s",qTy)),
                                  ite(mop(Not,var_b"v0"),
                                      tp[lo(@{typ
                                            "50 word \<times>
                                             SV39_PTE \<times> 50 word \<times> nat \<times> bool"}),
                                         apply
                                           (call
                                              ("mark_log",@{typ "state \<Rightarrow> state"},
                                               tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                                  ls"PTE permission check failure!"],@{theory}),
                                            var("s",qTy))],
                                      tp[mop(Some,
                                             tp[mop(Cast (Word_Lib.mk_wordT 50),
                                                    cc[ite(bop(Gt,var_n"level",ln 0),
                                                           bop(BOr,
                                                               mop(Cast (Word_Lib.mk_wordT 38),
                                                                   bop(Lsl,
                                                                       bop(Lsr,
                                                                           call
                                                                             ("SV39_PTE.PTE39_PPNi",
                                                                              (Word_Lib.mk_wordT 38),
                                                                              var("v",
                                                                                  @{typ SV39_PTE}),
                                                                              @{theory}),
                                                                           bop(Mul,var_n"level",
                                                                               const
                                                                                 ("PPN39_LEVEL_BITS",
                                                                                  HOLogic.natT,
                                                                                  @{theory}))),
                                                                       bop(Mul,var_n"level",
                                                                           const
                                                                             ("PPN39_LEVEL_BITS",
                                                                              HOLogic.natT,@{theory})))),
                                                               mop(Cast (Word_Lib.mk_wordT 38),
                                                                   bop(BAnd,
                                                                       call
                                                                         ("SV39_Vaddr.VA39_VPNi",
                                                                          (Word_Lib.mk_wordT 27),
                                                                          var("va",@{typ SV39_Vaddr}),
                                                                          @{theory}),
                                                                       bop(Sub,
                                                                           bop(Lsl,lw(1,27),
                                                                               bop(Mul,var_n"level",
                                                                                   const
                                                                                     ("VPN39_LEVEL_BITS",
                                                                                      HOLogic.natT,
                                                                                      @{theory}))),
                                                                           lw(1,27))))),
                                                           call
                                                             ("SV39_PTE.PTE39_PPNi",
                                                              (Word_Lib.mk_wordT 38),
                                                              var("v",@{typ SV39_PTE}),@{theory})),
                                                       call
                                                         ("SV39_Vaddr.VA39_PgOfs",
                                                          (Word_Lib.mk_wordT 12),
                                                          var("va",@{typ SV39_Vaddr}),@{theory})]),
                                                var("v",@{typ SV39_PTE}),var_w("pte_addr",50),
                                                var_n"level",
                                                bop(Or,var_b"global",
                                                    call
                                                      ("SV39_PTE.PTE39_G",HOLogic.boolT,
                                                       var("v",@{typ SV39_PTE}),@{theory}))]),
                                         var("s",qTy)]))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("updatePTE39",
   close
     (tp[var("pte",@{typ SV39_PTE}),var("ac",@{typ accessType})],
      let'
        (var_b"d_update",
         bop(And,
             bop(Or,eq(var("ac",@{typ accessType}),lc("Write","accessType",@{theory})),
                 eq(var("ac",@{typ accessType}),lc("ReadWrite","accessType",@{theory}))),
             mop(Not,call("SV39_PTE.PTE39_D",HOLogic.boolT,var("pte",@{typ SV39_PTE}),@{theory}))),
         ite(bop(Or,var_b"d_update",
                 mop(Not,call("SV39_PTE.PTE39_A",HOLogic.boolT,var("pte",@{typ SV39_PTE}),@{theory}))),
             let'
               (var("s0",@{typ SV39_PTE}),
                rupd("SV39_PTE.PTE39_A",tp[var("pte",@{typ SV39_PTE}),lt],@{theory}),
                mop(Some,
                    ite(var_b"d_update",
                        rupd("SV39_PTE.PTE39_D",tp[var("s0",@{typ SV39_PTE}),lt],@{theory}),
                        var("s0",@{typ SV39_PTE})))),lo @{typ SV39_PTE}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mkTLB39_Entry",
   close
     (tp[var_w("asid",26),var_b"global",var_w("vAddr",39),var_w("pAddr",50),
         var("pte",@{typ SV39_PTE}),var_n"i",var_w("pteAddr",50)],
      close
        (var("state",qTy),
         let'
           (var("s0",@{typ TLB39_Entry}),
            rupd
              ("TLB39_Entry.vAddrMask_39",
               tp[rupd
                    ("TLB39_Entry.pteAddr_39",
                     tp[rupd
                          ("TLB39_Entry.pte_39",
                           tp[rupd
                                ("TLB39_Entry.global_39",
                                 tp[rupd
                                      ("TLB39_Entry.asid_39",
                                       tp[lx @{typ TLB39_Entry},var_w("asid",26)],@{theory}),
                                    var_b"global"],@{theory}),var("pte",@{typ SV39_PTE})],@{theory}),
                        var_w("pteAddr",50)],@{theory}),
                  bop(Sub,
                      bop(Lsl,lw(1,39),
                          bop(Add,
                              bop(Mul,const("VPN39_LEVEL_BITS",HOLogic.natT,@{theory}),var_n"i"),
                              const("PAGESIZE_BITS",HOLogic.natT,@{theory}))),lw(1,39))],@{theory}),
            let'
              (var("s0",@{typ TLB39_Entry}),
               rupd
                 ("TLB39_Entry.vMatchMask_39",
                  tp[var("s0",@{typ TLB39_Entry}),
                     bop(BXor,mop(SE (Word_Lib.mk_wordT 39),lw(1,1)),
                         call
                           ("TLB39_Entry.vAddrMask_39",(Word_Lib.mk_wordT 39),
                            var("s0",@{typ TLB39_Entry}),@{theory}))],@{theory}),
               rupd
                 ("TLB39_Entry.age_39",
                  tp[rupd
                       ("TLB39_Entry.pAddr_39",
                        tp[rupd
                             ("TLB39_Entry.vAddr_39",
                              tp[var("s0",@{typ TLB39_Entry}),
                                 bop(BAnd,var_w("vAddr",39),
                                     call
                                       ("TLB39_Entry.vMatchMask_39",(Word_Lib.mk_wordT 39),
                                        var("s0",@{typ TLB39_Entry}),@{theory}))],@{theory}),
                           bop(Lsl,
                               bop(Asr,var_w("pAddr",50),
                                   bop(Add,const("PAGESIZE_BITS",HOLogic.natT,@{theory}),
                                       bop(Mul,const("PPN39_LEVEL_BITS",HOLogic.natT,@{theory}),
                                           var_n"i"))),
                               bop(Add,const("PAGESIZE_BITS",HOLogic.natT,@{theory}),
                                   bop(Mul,const("PPN39_LEVEL_BITS",HOLogic.natT,@{theory}),var_n"i")))],
                        @{theory}),
                     apply
                       (call
                          ("state.c_cycles",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),call("state.procID",w8,var("state",qTy),@{theory}))],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("lookupTLB39",
   close
     (tp[var_w("asid",26),var_w("vAddr",39),
         var("tlb",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"})],
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("state",
                                 @{typ "((TLB39_Entry \<times> 4 word) option) \<times> unit"}),
                             cs(apply
                                  (var("tlb",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),
                                   mop(Cast w4,var_n"i")),
                                [(mop(Some,var("e",@{typ TLB39_Entry})),
                                  tp[lu,
                                     ite(bop(And,
                                             eq(mop(Fst,
                                                    var("state",
                                                        @{typ
                                                        "((TLB39_Entry \<times> 4 word) option) \<times>
                                                         unit"})),
                                                lo(@{typ "TLB39_Entry \<times> 4 word"})),
                                             bop(And,
                                                 bop(Or,
                                                     call
                                                       ("TLB39_Entry.global_39",HOLogic.boolT,
                                                        var("e",@{typ TLB39_Entry}),@{theory}),
                                                     eq(call
                                                          ("TLB39_Entry.asid_39",
                                                           (Word_Lib.mk_wordT 26),
                                                           var("e",@{typ TLB39_Entry}),@{theory}),
                                                        var_w("asid",26))),
                                                 eq(call
                                                      ("TLB39_Entry.vAddr_39",
                                                       (Word_Lib.mk_wordT 39),
                                                       var("e",@{typ TLB39_Entry}),@{theory}),
                                                    bop(BAnd,var_w("vAddr",39),
                                                        call
                                                          ("TLB39_Entry.vMatchMask_39",
                                                           (Word_Lib.mk_wordT 39),
                                                           var("e",@{typ TLB39_Entry}),@{theory}))))),
                                         tp[mop(Some,
                                                tp[var("e",@{typ TLB39_Entry}),mop(Cast w4,var_n"i")]),
                                            lu],
                                         var("state",
                                             @{typ
                                             "((TLB39_Entry \<times> 4 word) option) \<times> unit"}))]),
                                 (lo @{typ TLB39_Entry},
                                  tp[lu,
                                     var("state",
                                         @{typ
                                         "((TLB39_Entry \<times> 4 word) option) \<times> unit"})])],
                                @{context})))]),tp[lo(@{typ "TLB39_Entry \<times> 4 word"}),lu])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("addToTLB39",
   close
     (tp[var_w("asid",26),var_w("vAddr",39),var_w("pAddr",50),var("pte",@{typ SV39_PTE}),
         var_w("pteAddr",50),var_n"i",var_b"global",
         var("curTLB",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"})],
      close
        (var("state",qTy),
         let'
           (var("s",
                @{typ
                "bool \<times>
                 nat \<times>
                 64 word \<times>
                 (4 word \<Rightarrow> (TLB39_Entry option)) \<times> TLB39_Entry \<times> state"}),
            mop(Snd,
                apply
                  (forloop
                     (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                         close
                           (var_n"i",
                            close
                              (var("state",
                                   @{typ
                                   "bool \<times>
                                    nat \<times>
                                    64 word \<times>
                                    (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                    TLB39_Entry \<times> state"}),
                               cs(apply
                                    (mop(Fst,
                                         mop(Snd,
                                             mop(Snd,
                                                 mop(Snd,
                                                     var("state",
                                                         @{typ
                                                         "bool \<times>
                                                          nat \<times>
                                                          64 word \<times>
                                                          (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                          TLB39_Entry \<times> state"}))))),
                                     mop(Cast w4,var_n"i")),
                                  [(mop(Some,var("e",@{typ TLB39_Entry})),
                                    ite(bop(Ult,
                                            call
                                              ("TLB39_Entry.age_39",w64,var("e",@{typ TLB39_Entry}),
                                               @{theory}),
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        var("state",
                                                            @{typ
                                                            "bool \<times>
                                                             nat \<times>
                                                             64 word \<times>
                                                             (4 word \<Rightarrow>
                                                              (TLB39_Entry option)) \<times>
                                                             TLB39_Entry \<times> state"}))))),
                                        let'
                                          (var("s",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                TLB39_Entry \<times> state"}),
                                           tp[mop(Fst,
                                                  var("state",
                                                      @{typ
                                                      "bool \<times>
                                                       nat \<times>
                                                       64 word \<times>
                                                       (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                       TLB39_Entry \<times> state"})),
                                              let'
                                                (var("s",
                                                     @{typ
                                                     "nat \<times>
                                                      64 word \<times>
                                                      (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                      TLB39_Entry \<times> state"}),
                                                 mop(Snd,
                                                     var("state",
                                                         @{typ
                                                         "bool \<times>
                                                          nat \<times>
                                                          64 word \<times>
                                                          (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                          TLB39_Entry \<times> state"})),
                                                 tp[mop(Fst,
                                                        var("s",
                                                            @{typ
                                                            "nat \<times>
                                                             64 word \<times>
                                                             (4 word \<Rightarrow>
                                                              (TLB39_Entry option)) \<times>
                                                             TLB39_Entry \<times> state"})),
                                                    call
                                                      ("TLB39_Entry.age_39",w64,
                                                       var("e",@{typ TLB39_Entry}),@{theory}),
                                                    mop(Snd,
                                                        mop(Snd,
                                                            var("s",
                                                                @{typ
                                                                "nat \<times>
                                                                 64 word \<times>
                                                                 (4 word \<Rightarrow>
                                                                  (TLB39_Entry option)) \<times>
                                                                 TLB39_Entry \<times> state"})))])],
                                           tp[lu,
                                              mop(Fst,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       nat \<times>
                                                       64 word \<times>
                                                       (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                       TLB39_Entry \<times> state"})),var_n"i",
                                              mop(Snd,
                                                  mop(Snd,
                                                      var("s",
                                                          @{typ
                                                          "bool \<times>
                                                           nat \<times>
                                                           64 word \<times>
                                                           (4 word \<Rightarrow>
                                                            (TLB39_Entry option)) \<times>
                                                           TLB39_Entry \<times> state"})))]),
                                        tp[lu,
                                           var("state",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                TLB39_Entry \<times> state"})])),
                                   (lo @{typ TLB39_Entry},
                                    tp[lu,lt,
                                       let'
                                         (var("s0",
                                              @{typ
                                              "nat \<times>
                                               64 word \<times>
                                               (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                               TLB39_Entry \<times> state"}),
                                          mop(Snd,
                                              var("state",
                                                  @{typ
                                                  "bool \<times>
                                                   nat \<times>
                                                   64 word \<times>
                                                   (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                   TLB39_Entry \<times> state"})),
                                          tp[mop(Fst,
                                                 var("s0",
                                                     @{typ
                                                     "nat \<times>
                                                      64 word \<times>
                                                      (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                      TLB39_Entry \<times> state"})),
                                             let'
                                               (var("s0",
                                                    @{typ
                                                    "64 word \<times>
                                                     (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                     TLB39_Entry \<times> state"}),
                                                mop(Snd,
                                                    var("s0",
                                                        @{typ
                                                        "nat \<times>
                                                         64 word \<times>
                                                         (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                         TLB39_Entry \<times> state"})),
                                                tp[mop(Fst,
                                                       var("s0",
                                                           @{typ
                                                           "64 word \<times>
                                                            (4 word \<Rightarrow>
                                                             (TLB39_Entry option)) \<times>
                                                            TLB39_Entry \<times> state"})),
                                                   fupd
                                                     (mop(Fst,
                                                          mop(Snd,
                                                              mop(Snd,
                                                                  mop(Snd,
                                                                      var("state",
                                                                          @{typ
                                                                          "bool \<times>
                                                                           nat \<times>
                                                                           64 word \<times>
                                                                           (4 word \<Rightarrow>
                                                                            (TLB39_Entry option)) \<times>
                                                                           TLB39_Entry \<times>
                                                                           state"}))))),
                                                      mop(Cast w4,var_n"i"),
                                                      mop(Some,
                                                          mop(Fst,
                                                              mop(Snd,
                                                                  mop(Snd,
                                                                      mop(Snd,
                                                                          mop(Snd,
                                                                              var("state",
                                                                                  @{typ
                                                                                  "bool \<times>
                                                                                   nat \<times>
                                                                                   64 word \<times>
                                                                                   (4 word \<Rightarrow>
                                                                                    (TLB39_Entry
                                                                                        option)) \<times>
                                                                                   TLB39_Entry \<times>
                                                                                   state"})))))))),
                                                   mop(Snd,
                                                       mop(Snd,
                                                           var("s0",
                                                               @{typ
                                                               "64 word \<times>
                                                                (4 word \<Rightarrow>
                                                                 (TLB39_Entry option)) \<times>
                                                                TLB39_Entry \<times> state"})))])])])],
                                  @{context})))]),
                   tp[lf,ln 0,mop(SE w64,lw(1,1)),
                      var("curTLB",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),
                      apply
                        (call
                           ("mkTLB39_Entry",@{typ "state \<Rightarrow> TLB39_Entry"},
                            tp[var_w("asid",26),var_b"global",var_w("vAddr",39),var_w("pAddr",50),
                               var("pte",@{typ SV39_PTE}),var_n"i",var_w("pteAddr",50)],@{theory}),
                         var("state",qTy)),var("state",qTy)])),
            ite(mop(Not,
                    mop(Fst,
                        var("s",
                            @{typ
                            "bool \<times>
                             nat \<times>
                             64 word \<times>
                             (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                             TLB39_Entry \<times> state"}))),
                fupd
                  (mop(Fst,
                       mop(Snd,
                           mop(Snd,
                               mop(Snd,
                                   var("s",
                                       @{typ
                                       "bool \<times>
                                        nat \<times>
                                        64 word \<times>
                                        (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                        TLB39_Entry \<times> state"}))))),
                   mop(Cast w4,
                       mop(Fst,
                           mop(Snd,
                               var("s",
                                   @{typ
                                   "bool \<times>
                                    nat \<times>
                                    64 word \<times>
                                    (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                    TLB39_Entry \<times> state"})))),
                   mop(Some,
                       mop(Fst,
                           mop(Snd,
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s",
                                               @{typ
                                               "bool \<times>
                                                nat \<times>
                                                64 word \<times>
                                                (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                TLB39_Entry \<times> state"})))))))),
                mop(Fst,
                    mop(Snd,
                        mop(Snd,
                            mop(Snd,
                                var("s",
                                    @{typ
                                    "bool \<times>
                                     nat \<times>
                                     64 word \<times>
                                     (4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                     TLB39_Entry \<times> state"}))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("flushTLB39",
   close
     (tp[var_w("asid",26),var("addr",@{typ "39 word option"}),
         var("curTLB",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"})],
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,const("TLBEntries",HOLogic.natT,@{theory}),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("state",
                                 @{typ "(4 word \<Rightarrow> (TLB39_Entry option)) \<times> unit"}),
                             cs(tp[apply
                                     (mop(Fst,
                                          var("state",
                                              @{typ
                                              "(4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                               unit"})),mop(Cast w4,var_n"i")),
                                   var("addr",@{typ "39 word option"})],
                                [(tp[mop(Some,var("e",@{typ TLB39_Entry})),mop(Some,var_w("va",39))],
                                  tp[lu,
                                     ite(bop(And,
                                             bop(Or,eq(var_w("asid",26),lw(0,26)),
                                                 bop(And,
                                                     eq(var_w("asid",26),
                                                        call
                                                          ("TLB39_Entry.asid_39",
                                                           (Word_Lib.mk_wordT 26),
                                                           var("e",@{typ TLB39_Entry}),@{theory})),
                                                     mop(Not,
                                                         call
                                                           ("TLB39_Entry.global_39",HOLogic.boolT,
                                                            var("e",@{typ TLB39_Entry}),@{theory})))),
                                             eq(call
                                                  ("TLB39_Entry.vAddr_39",(Word_Lib.mk_wordT 39),
                                                   var("e",@{typ TLB39_Entry}),@{theory}),
                                                bop(BAnd,var_w("va",39),
                                                    call
                                                      ("TLB39_Entry.vMatchMask_39",
                                                       (Word_Lib.mk_wordT 39),
                                                       var("e",@{typ TLB39_Entry}),@{theory})))),
                                         tp[fupd
                                              (mop(Fst,
                                                   var("state",
                                                       @{typ
                                                       "(4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                        unit"})),mop(Cast w4,var_n"i"),
                                               lo @{typ TLB39_Entry}),lu],
                                         var("state",
                                             @{typ
                                             "(4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                              unit"}))]),
                                 (tp[mop(Some,var("e",@{typ TLB39_Entry})),lo (Word_Lib.mk_wordT 39)],
                                  tp[lu,
                                     ite(bop(Or,eq(var_w("asid",26),lw(0,26)),
                                             bop(And,
                                                 eq(var_w("asid",26),
                                                    call
                                                      ("TLB39_Entry.asid_39",(Word_Lib.mk_wordT 26),
                                                       var("e",@{typ TLB39_Entry}),@{theory})),
                                                 mop(Not,
                                                     call
                                                       ("TLB39_Entry.global_39",HOLogic.boolT,
                                                        var("e",@{typ TLB39_Entry}),@{theory})))),
                                         tp[fupd
                                              (mop(Fst,
                                                   var("state",
                                                       @{typ
                                                       "(4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                                        unit"})),mop(Cast w4,var_n"i"),
                                               lo @{typ TLB39_Entry}),lu],
                                         var("state",
                                             @{typ
                                             "(4 word \<Rightarrow> (TLB39_Entry option)) \<times>
                                              unit"}))]),
                                 (tp[lo @{typ TLB39_Entry},var_a(@{typ "39 word option"})],
                                  tp[lu,
                                     var("state",
                                         @{typ
                                         "(4 word \<Rightarrow> (TLB39_Entry option)) \<times> unit"})])],
                                @{context})))]),
                 tp[var("curTLB",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),lu])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TLB39",
   close
     (var("state",qTy),
      apply
        (call
           ("state.c_tlb39",
            @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB39_Entry option))"},
            var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'TLB39",
   close
     (var("value",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_tlb39",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_tlb39",
                     @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLB39_Entry option))"},
                     var("state",qTy),@{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  var("value",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("translate39",
   close
     (tp[var_w("vAddr",39),var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
         var_b"pum",var_n"level"],
      close
        (var("state",qTy),
         let'
           (var_w("v",26),
            apply
              (call("curAsid64",@{typ "state \<Rightarrow> 26 word"},lu,@{theory}),var("state",qTy)),
            cs(call
                 ("lookupTLB39",@{typ "(TLB39_Entry \<times> 4 word) option"},
                  tp[var_w("v",26),var_w("vAddr",39),
                     apply
                       (const
                          ("TLB39",
                           @{typ "state \<Rightarrow> (4 word \<Rightarrow> (TLB39_Entry option))"},
                           @{theory}),var("state",qTy))],@{theory}),
               [(mop(Some,tp[var("ent",@{typ TLB39_Entry}),var_w("idx",4)]),
                 let'
                   (tp[var_b"v",var("s",qTy)],
                    apply
                      (call
                         ("checkMemPermission",@{typ "state \<Rightarrow> (bool \<times> state)"},
                          tp[var("ac",@{typ accessType}),var("priv",@{typ Privilege}),var_b"mxr",
                             var_b"pum",
                             call
                               ("rec'memPerm",@{typ memPerm},
                                call
                                  ("SV39_PTE.PTE39_PERM",w4,
                                   call
                                     ("TLB39_Entry.pte_39",@{typ SV39_PTE},
                                      var("ent",@{typ TLB39_Entry}),@{theory}),@{theory}),@{theory})],
                          @{theory}),var("state",qTy)),
                    ite(var_b"v",
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),ls"TLB39 hit!"],
                                 @{theory}),var("s",qTy)),
                           tp[mop(Some,
                                  bop(BOr,
                                      call
                                        ("TLB39_Entry.pAddr_39",(Word_Lib.mk_wordT 50),
                                         var("ent",@{typ TLB39_Entry}),@{theory}),
                                      mop(Cast (Word_Lib.mk_wordT 50),
                                          bop(BAnd,var_w("vAddr",39),
                                              call
                                                ("TLB39_Entry.vAddrMask_39",(Word_Lib.mk_wordT 39),
                                                 var("ent",@{typ TLB39_Entry}),@{theory}))))),
                              ite(mop(IsSome,
                                      call
                                        ("updatePTE39",@{typ "SV39_PTE option"},
                                         tp[call
                                              ("TLB39_Entry.pte_39",@{typ SV39_PTE},
                                               var("ent",@{typ TLB39_Entry}),@{theory}),
                                            var("ac",@{typ accessType})],@{theory})),
                                  let'
                                    (tp[var("v",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),
                                        var("s",qTy)],
                                     let'
                                       (var("s0",qTy),
                                        apply
                                          (call
                                             ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                              tp[mop(Cast w64,
                                                     call
                                                       ("TLB39_Entry.pteAddr_39",
                                                        (Word_Lib.mk_wordT 50),
                                                        var("ent",@{typ TLB39_Entry}),@{theory})),
                                                 mop(Cast w64,
                                                     call
                                                       ("reg'SV39_PTE",w64,
                                                        call
                                                          ("TLB39_Entry.pte_39",@{typ SV39_PTE},
                                                           var("ent",@{typ TLB39_Entry}),@{theory}),
                                                        @{theory})),ln 8],@{theory}),var("s",qTy)),
                                        tp[apply
                                             (const
                                                ("TLB39",
                                                 @{typ
                                                 "state \<Rightarrow>
                                                  (4 word \<Rightarrow> (TLB39_Entry option))"},
                                                 @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                     apply
                                       (call
                                          ("write'TLB39",@{typ "state \<Rightarrow> state"},
                                           fupd
                                             (var("v",
                                                  @{typ "4 word \<Rightarrow> (TLB39_Entry option)"}),
                                              var_w("idx",4),mop(Some,var("ent",@{typ TLB39_Entry}))),
                                           @{theory}),var("s",qTy))),var("s",qTy))]),
                        tp[lo (Word_Lib.mk_wordT 50),
                           apply
                             (call
                                ("mark_log",@{typ "state \<Rightarrow> state"},
                                 tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),
                                    ls"TLB39 permission check failure"],@{theory}),var("s",qTy))]))),
                (lo(@{typ "TLB39_Entry \<times> 4 word"}),
                 let'
                   (tp[var_w("v0",50),var("s",qTy)],
                    let'
                      (var("s0",qTy),
                       apply
                         (call
                            ("mark_log",@{typ "state \<Rightarrow> state"},
                             tp[const("LOG_ADDRTR",HOLogic.natT,@{theory}),ls"TLB39 miss!"],
                             @{theory}),var("state",qTy)),
                       tp[apply
                            (call("curPTB39",@{typ "state \<Rightarrow> 50 word"},lu,@{theory}),
                             var("s0",qTy)),var("s0",qTy)]),
                    let'
                      (tp[var("v0",
                              @{typ
                              "(50 word \<times>
                                 SV39_PTE \<times> 50 word \<times> nat \<times> bool)
                                  option"}),var("s",qTy)],
                       apply
                         (call
                            ("walk39",
                             @{typ
                             "state \<Rightarrow>
                              (((50 word \<times>
                                  SV39_PTE \<times> 50 word \<times> nat \<times> bool)
                                   option) \<times> state)"},
                             tp[var_w("vAddr",39),var("ac",@{typ accessType}),
                                var("priv",@{typ Privilege}),var_b"mxr",var_b"pum",var_w("v0",50),
                                var_n"level",lf],@{theory}),var("s",qTy)),
                       cs(var("v0",
                              @{typ
                              "(50 word \<times>
                                 SV39_PTE \<times> 50 word \<times> nat \<times> bool)
                                  option"}),
                          [(mop(Some,
                                tp[var_w("pAddr",50),var("pte",@{typ SV39_PTE}),var_w("pteAddr",50),
                                   var_n"i",var_b"global"]),
                            tp[mop(Some,var_w("pAddr",50)),
                               apply
                                 (call
                                    ("write'TLB39",@{typ "state \<Rightarrow> state"},
                                     apply
                                       (call
                                          ("addToTLB39",
                                           @{typ
                                           "state \<Rightarrow>
                                            (4 word \<Rightarrow> (TLB39_Entry option))"},
                                           tp[var_w("v",26),var_w("vAddr",39),var_w("pAddr",50),
                                              var("pte",@{typ SV39_PTE}),var_w("pteAddr",50),
                                              var_n"i",var_b"global",
                                              apply
                                                (const
                                                   ("TLB39",
                                                    @{typ
                                                    "state \<Rightarrow>
                                                     (4 word \<Rightarrow> (TLB39_Entry option))"},
                                                    @{theory}),var("s",qTy))],@{theory}),
                                        var("s",qTy)),@{theory}),var("s",qTy))]),
                           (lo(@{typ
                               "50 word \<times>
                                SV39_PTE \<times> 50 word \<times> nat \<times> bool"}),
                            tp[lo (Word_Lib.mk_wordT 50),var("s",qTy)])],@{context}))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("translateAddr",
   close
     (tp[var_w("vAddr",64),var("ac",@{typ accessType}),var("ft",@{typ fetchType})],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ Privilege}),var("s",qTy)],
            cs(var("ft",@{typ fetchType}),
               [(lc("Instruction","fetchType",@{theory}),
                 tp[apply
                      (const("curPrivilege",@{typ "state \<Rightarrow> Privilege"},@{theory}),
                       var("state",qTy)),var("state",qTy)]),
                (lc("Data","fetchType",@{theory}),
                 tp[ite(call
                          ("mstatus.M_MPRV",HOLogic.boolT,
                           call
                             ("MachineCSR.mstatus",@{typ mstatus},
                              apply
                                (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                 var("state",qTy)),@{theory}),@{theory}),
                        call
                          ("privilege",@{typ Privilege},
                           call
                             ("mstatus.M_MPP",(Word_Lib.mk_wordT 2),
                              call
                                ("MachineCSR.mstatus",@{typ mstatus},
                                 apply
                                   (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                    var("state",qTy)),@{theory}),@{theory}),@{theory}),
                        apply
                          (const("curPrivilege",@{typ "state \<Rightarrow> Privilege"},@{theory}),
                           var("state",qTy))),var("state",qTy)])],@{context}),
            let'
              (var_b"v0",
               call
                 ("mstatus.M_MXR",HOLogic.boolT,
                  call
                    ("MachineCSR.mstatus",@{typ mstatus},
                     apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("s",qTy)),
                     @{theory}),@{theory}),
               let'
                 (var_b"v1",
                  call
                    ("mstatus.M_PUM",HOLogic.boolT,
                     call
                       ("MachineCSR.mstatus",@{typ mstatus},
                        apply
                          (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                           var("s",qTy)),@{theory}),@{theory}),
                  let'
                    (tp[var("v2",@{typ "VM_Mode \<times> Privilege"}),var("s",qTy)],
                     let'
                       (tp[var("v0",@{typ VM_Mode}),var("s",qTy)],
                        apply
                          (call
                             ("vmType",@{typ "state \<Rightarrow> (VM_Mode \<times> state)"},
                              call
                                ("mstatus.M_VM",(Word_Lib.mk_wordT 5),
                                 call
                                   ("MachineCSR.mstatus",@{typ mstatus},
                                    apply
                                      (const
                                         ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                       var("s",qTy)),@{theory}),@{theory}),@{theory}),var("s",qTy)),
                        tp[tp[var("v0",@{typ VM_Mode}),var("v",@{typ Privilege})],var("s",qTy)]),
                     cs(var("v2",@{typ "VM_Mode \<times> Privilege"}),
                        [(tp[lc("Mbare","VM_Mode",@{theory}),var_a @{typ Privilege}],
                          tp[mop(Some,var_w("vAddr",64)),var("s",qTy)]),
                         (tp[var_a @{typ VM_Mode},lc("Machine","Privilege",@{theory})],
                          tp[mop(Some,var_w("vAddr",64)),var("s",qTy)]),
                         (tp[var_a @{typ VM_Mode},lc("Hypervisor","Privilege",@{theory})],
                          tp[mop(Some,var_w("vAddr",64)),var("s",qTy)]),
                         (tp[lc("Sv32","VM_Mode",@{theory}),var_a @{typ Privilege}],
                          let'
                            (tp[var("v",@{typ "34 word option"}),var("s",qTy)],
                             apply
                               (call
                                  ("translate32",
                                   @{typ "state \<Rightarrow> ((34 word option) \<times> state)"},
                                   tp[ex(var_w("vAddr",64),ln 31,ln 0,w32),
                                      var("ac",@{typ accessType}),var("v",@{typ Privilege}),
                                      var_b"v0",var_b"v1",
                                      const("SV32_LEVELS",HOLogic.natT,@{theory})],@{theory}),
                                var("s",qTy)),
                             tp[cs(var("v",@{typ "34 word option"}),
                                   [(mop(Some,var_w("pa32",34)),
                                     mop(Some,mop(Cast w64,var_w("pa32",34)))),
                                    (lo (Word_Lib.mk_wordT 34),lo w64)],@{context}),var("s",qTy)])),
                         (tp[lc("Sv39","VM_Mode",@{theory}),var_a @{typ Privilege}],
                          let'
                            (tp[var("v",@{typ "50 word option"}),var("s",qTy)],
                             apply
                               (call
                                  ("translate39",
                                   @{typ "state \<Rightarrow> ((50 word option) \<times> state)"},
                                   tp[ex(var_w("vAddr",64),ln 38,ln 0,(Word_Lib.mk_wordT 39)),
                                      var("ac",@{typ accessType}),var("v",@{typ Privilege}),
                                      var_b"v0",var_b"v1",
                                      const("SV39_LEVELS",HOLogic.natT,@{theory})],@{theory}),
                                var("s",qTy)),
                             tp[cs(var("v",@{typ "50 word option"}),
                                   [(mop(Some,var_w("pa39",50)),
                                     mop(Some,mop(Cast w64,var_w("pa39",50)))),
                                    (lo (Word_Lib.mk_wordT 50),lo w64)],@{context}),var("s",qTy)])),
                         (tp[var_a @{typ VM_Mode},var_a @{typ Privilege}],tp[lo w64,var("s",qTy)])],
                        @{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("matchLoadReservation",
   close
     (var_w("vAddr",64),
      close
        (var("state",qTy),
         bop(And,
             mop(IsSome,
                 apply
                   (const("ReserveLoad",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),
                    var("state",qTy))),
             eq(mop(ValOf,
                    apply
                      (const("ReserveLoad",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),
                       var("state",qTy))),var_w("vAddr",64))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("branchTo",
   close
     (var_w("newPC",64),
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ StateDelta}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                     mop(Some,
                         call("instrResult.BranchTo",@{typ instrResult},var_w("newPC",64),@{theory})),
                     @{theory}),var("state",qTy)),
               tp[apply
                    (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            apply
              (call
                 ("write'Delta",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("StateDelta.addr",tp[var("v",@{typ StateDelta}),mop(Some,var_w("newPC",64))],
                     @{theory}),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("noBranch",
   close
     (var_w("nextPC",64),
      close
        (var("state",qTy),
         apply
           (call
              ("write'Delta",@{typ "state \<Rightarrow> state"},
               rupd
                 ("StateDelta.addr",
                  tp[apply
                       (const("Delta",@{typ "state \<Rightarrow> StateDelta"},@{theory}),
                        var("state",qTy)),mop(Some,var_w("nextPC",64))],@{theory}),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("imm",12)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDIW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             ex(bop(Add,
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),mop(SE w64,var_w("imm",12))),
                                ln 31,ln 0,w32))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("writeRD",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     mop(Cast w64,
                         bop(Lt,
                             ite(var_b"v",
                                 mop(SE w64,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                                 apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("s",qTy))),mop(SE w64,var_w("imm",12))))],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTIU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("writeRD",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     mop(Cast w64,
                         bop(Ult,
                             ite(var_b"v",
                                 mop(SE w64,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                                 apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("s",qTy))),mop(SE w64,var_w("imm",12))))],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ANDI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("imm",12)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ORI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("imm",12)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XORI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("imm",12)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLLI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(bop(And,var_b"v",bop(Bit,var_w("imm",6),ln 5)),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                   @{theory}),var("s",qTy)),mop(Cast HOLogic.natT,var_w("imm",6)))],
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRLI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(bop(And,var_b"v",bop(Bit,var_w("imm",6),ln 5)),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                         @{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            bop(Lsr,
                                ite(var_b"v",
                                    mop(Cast w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy))),
                                mop(Cast HOLogic.natT,var_w("imm",6)))],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRAI",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(bop(And,var_b"v",bop(Bit,var_w("imm",6),ln 5)),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                         @{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            bop(Asr,
                                ite(var_b"v",
                                    mop(SE w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy))),
                                mop(Cast HOLogic.natT,var_w("imm",6)))],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLLIW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Lsl,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast HOLogic.natT,var_w("imm",5))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRLIW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Lsr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast HOLogic.natT,var_w("imm",5))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRAIW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Asr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast HOLogic.natT,var_w("imm",5))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LUI",
   close
     (tp[var_w("rd",5),var_w("imm",20)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),mop(SE w64,cc[var_w("imm",20),lw(0,12)])],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AUIPC",
   close
     (tp[var_w("rd",5),var_w("imm",20)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(Add,
                      apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("state",qTy)),
                      mop(SE w64,cc[var_w("imm",20),lw(0,12)]))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADD",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Add,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))],@{theory}),
                   var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUB",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(Sub,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUBW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Sub,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))],@{theory}),
                   var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLT",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               apply
                 (call
                    ("writeRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        mop(Cast w64,
                            bop(Lt,
                                ite(var_b"v",
                                    mop(SE w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy))),
                                ite(var_b"v0",
                                    mop(SE w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs2",5),@{theory}),var("s0",qTy)),ln 31,
                                           ln 0,w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s0",qTy)))))],@{theory}),var("s0",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               apply
                 (call
                    ("writeRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        mop(Cast w64,
                            bop(Ult,
                                ite(var_b"v",
                                    mop(Cast w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy))),
                                ite(var_b"v0",
                                    mop(Cast w64,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs2",5),@{theory}),var("s0",qTy)),ln 31,
                                           ln 0,w32)),
                                    apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s0",qTy)))))],@{theory}),var("s0",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AND",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'OR",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XOR",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLL",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                   @{theory}),var("s",qTy)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 4,ln 0,(Word_Lib.mk_wordT 5))))],
                      @{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                   @{theory}),var("s",qTy)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6))))],
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLLW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Lsl,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast w32,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),ln 4,ln 0,
                                        (Word_Lib.mk_wordT 5)))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRL",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(Cast w64,
                             bop(Lsr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast w32,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),ln 4,ln 0,
                                        (Word_Lib.mk_wordT 5)))))],@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         bop(Lsr,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                   @{theory}),var("s",qTy)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6))))],
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRLW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Lsr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast w32,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),ln 4,ln 0,
                                        (Word_Lib.mk_wordT 5)))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRA",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Asr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast w32,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),ln 4,ln 0,
                                        (Word_Lib.mk_wordT 5)))))],@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         bop(Asr,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                   @{theory}),var("s",qTy)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                          @{theory}),var("s",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6))))],
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRAW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             bop(Asr,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                                 mop(Cast w32,
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),ln 4,ln 0,
                                        (Word_Lib.mk_wordT 5)))))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MUL",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  bop(Mul,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULH",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               let'
                 (var_w("prod",128),
                  bop(Mul,
                      mop(SE (Word_Lib.mk_wordT 128),
                          ite(var_b"v",
                              mop(SE w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("s",qTy)))),
                      mop(SE (Word_Lib.mk_wordT 128),
                          ite(var_b"v0",
                              mop(SE w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s0",qTy))))),
                  let'
                    (tp[var_b"v",var("s",qTy)],
                     apply
                       (call
                          ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                           @{theory}),var("s0",qTy)),
                     apply
                       (call
                          ("writeRD",@{typ "state \<Rightarrow> state"},
                           tp[var_w("rd",5),
                              ite(var_b"v",mop(SE w64,ex(var_w("prod",128),ln 63,ln 32,w32)),
                                  mop(SE w64,ex(var_w("prod",128),ln 127,ln 64,w64)))],@{theory}),
                        var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULHU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               let'
                 (var_w("prod",128),
                  bop(Mul,
                      ite(var_b"v",
                          mop(Cast (Word_Lib.mk_wordT 128),
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                          mop(Cast (Word_Lib.mk_wordT 128),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("s",qTy)))),
                      ite(var_b"v0",
                          mop(Cast (Word_Lib.mk_wordT 128),
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                       @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                          mop(Cast (Word_Lib.mk_wordT 128),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s0",qTy))))),
                  let'
                    (tp[var_b"v",var("s",qTy)],
                     apply
                       (call
                          ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                           @{theory}),var("s0",qTy)),
                     apply
                       (call
                          ("writeRD",@{typ "state \<Rightarrow> state"},
                           tp[var_w("rd",5),
                              ite(var_b"v",mop(Cast w64,ex(var_w("prod",128),ln 63,ln 32,w32)),
                                  ex(var_w("prod",128),ln 127,ln 64,w64))],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULHSU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               let'
                 (var_w("prod",128),
                  bop(Mul,
                      ite(var_b"v",
                          mop(SE (Word_Lib.mk_wordT 128),
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                          mop(SE (Word_Lib.mk_wordT 128),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("s",qTy)))),
                      ite(var_b"v0",
                          mop(Cast (Word_Lib.mk_wordT 128),
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                       @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                          mop(Cast (Word_Lib.mk_wordT 128),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s0",qTy))))),
                  let'
                    (tp[var_b"v",var("s",qTy)],
                     apply
                       (call
                          ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                           @{theory}),var("s0",qTy)),
                     apply
                       (call
                          ("writeRD",@{typ "state \<Rightarrow> state"},
                           tp[var_w("rd",5),
                              ite(var_b"v",mop(SE w64,ex(var_w("prod",128),ln 63,ln 32,w32)),
                                  ex(var_w("prod",128),ln 127,ln 64,w64))],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                apply
                  (call
                     ("writeRD",@{typ "state \<Rightarrow> state"},
                      tp[var_w("rd",5),
                         mop(SE w64,
                             ex(mop(SE w64,
                                    bop(Mul,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs2",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32))),ln 31,ln 0,w32))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIV",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                   var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("writeRD",@{typ "state \<Rightarrow> state"},
                   tp[var_w("rd",5),mop(SE w64,lw(1,1))],@{theory}),var("state",qTy)),
             let'
               (var_w("v",64),
                bop(Lsl,lw(1,64),
                    bop(Sub,
                        mop(Size,
                            apply
                              (call
                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                  @{theory}),var("state",qTy))),ln 1)),
                ite(bop(And,
                        eq(apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                              var("state",qTy)),var_w("v",64)),
                        eq(apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("state",qTy)),mop(SE w64,lw(1,1)))),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),var_w("v",64)],@{theory}),var("state",qTy)),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             bop(Quot,
                                 apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("state",qTy)),
                                 apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                       @{theory}),var("state",qTy)))],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'REM",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         itb([(eq(apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                     var("state",qTy)),lw(0,64)),
               apply
                 (call
                    ("writeRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        apply
                          (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                           var("state",qTy))],@{theory}),var("state",qTy))),
              (bop(And,
                   eq(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy)),
                      bop(Lsl,lw(1,64),
                          bop(Sub,
                              mop(Size,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                        @{theory}),var("state",qTy))),ln 1))),
                   eq(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("state",qTy)),mop(SE w64,lw(1,1)))),
               apply
                 (call
                    ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("writeRD",@{typ "state \<Rightarrow> state"},
                   tp[var_w("rd",5),
                      bop(Rem,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                             var("state",qTy)))],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIVU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               let'
                 (var_w("v0",64),
                  ite(var_b"v0",
                      mop(Cast w64,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                   @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("s0",qTy))),
                  ite(eq(var_w("v0",64),lw(0,64)),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},
                            tp[var_w("rd",5),mop(SE w64,lw(1,1))],@{theory}),var("s0",qTy)),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},
                            tp[var_w("rd",5),
                               bop(Div,
                                   ite(var_b"v",
                                       mop(Cast w64,
                                           ex(apply
                                                (call
                                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                    var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,
                                              ln 0,w32)),
                                       apply
                                         (call
                                            ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                             var_w("rs1",5),@{theory}),var("s",qTy))),var_w("v0",64))],
                            @{theory}),var("s0",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'REMU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                   var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("writeRD",@{typ "state \<Rightarrow> state"},
                   tp[var_w("rd",5),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("state",qTy))],@{theory}),var("state",qTy)),
             apply
               (call
                  ("writeRD",@{typ "state \<Rightarrow> state"},
                   tp[var_w("rd",5),
                      bop(Mod,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                             var("state",qTy)))],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIVW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",32),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("s",qTy)),ln 31,ln 0,w32),
                   let'
                     (var_w("v0",32),
                      ex(apply
                           (call
                              ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                            var("s",qTy)),ln 31,ln 0,w32),
                      ite(eq(var_w("v0",32),lw(0,32)),
                          apply
                            (call
                               ("writeRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("rd",5),mop(SE w64,lw(1,1))],@{theory}),var("s",qTy)),
                          let'
                            (var_w("minus_max",32),
                             bop(Lsl,lw(1,32),bop(Sub,mop(Size,var_w("v",32)),ln 1)),
                             ite(bop(And,eq(var_w("v",32),var_w("minus_max",32)),
                                     eq(var_w("v0",32),mop(SE w32,lw(1,1)))),
                                 apply
                                   (call
                                      ("writeRD",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("rd",5),mop(SE w64,var_w("minus_max",32))],@{theory}),
                                    var("s",qTy)),
                                 apply
                                   (call
                                      ("writeRD",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("rd",5),
                                          mop(SE w64,bop(Quot,var_w("v",32),var_w("v0",32)))],
                                       @{theory}),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'REMW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",32),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("s",qTy)),ln 31,ln 0,w32),
                   let'
                     (var_w("v0",32),
                      ex(apply
                           (call
                              ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                            var("s",qTy)),ln 31,ln 0,w32),
                      ite(eq(var_w("v0",32),lw(0,32)),
                          apply
                            (call
                               ("writeRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("rd",5),mop(SE w64,var_w("v",32))],@{theory}),var("s",qTy)),
                          apply
                            (call
                               ("writeRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("rd",5),mop(SE w64,bop(Rem,var_w("v",32),var_w("v0",32)))],
                                @{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIVUW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v0",32),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                         var("s",qTy)),ln 31,ln 0,w32),
                   ite(eq(var_w("v0",32),lw(0,32)),
                       apply
                         (call
                            ("writeRD",@{typ "state \<Rightarrow> state"},
                             tp[var_w("rd",5),mop(SE w64,lw(1,1))],@{theory}),var("s",qTy)),
                       apply
                         (call
                            ("writeRD",@{typ "state \<Rightarrow> state"},
                             tp[var_w("rd",5),
                                mop(SE w64,
                                    bop(Div,
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                           w32),var_w("v0",32)))],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'REMUW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",32),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                         var("s",qTy)),ln 31,ln 0,w32),
                   let'
                     (var_w("v0",32),
                      ex(apply
                           (call
                              ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                            var("s",qTy)),ln 31,ln 0,w32),
                      ite(eq(var_w("v0",32),lw(0,32)),
                          apply
                            (call
                               ("writeRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("rd",5),mop(SE w64,var_w("v",32))],@{theory}),var("s",qTy)),
                          apply
                            (call
                               ("writeRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("rd",5),mop(SE w64,bop(Mod,var_w("v",32),var_w("v0",32)))],
                                @{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JAL",
   close
     (tp[var_w("rd",5),var_w("imm",20)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply(const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("state",qTy)),
                bop(Lsl,mop(SE w64,var_w("imm",20)),ln 1)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_Fetch_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                apply
                  (call("branchTo",@{typ "state \<Rightarrow> state"},var_w("v",64),@{theory}),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            bop(Add,
                                apply
                                  (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                   var("state",qTy)),lw(4,64))],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JALR",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(BAnd,
                bop(Add,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                       var("state",qTy)),mop(SE w64,var_w("imm",12))),mop(SE w64,lw(2,2))),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_Fetch_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                apply
                  (call("branchTo",@{typ "state \<Rightarrow> state"},var_w("v",64),@{theory}),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            bop(Add,
                                apply
                                  (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                   var("state",qTy)),lw(4,64))],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BEQ",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(eq(ite(var_b"v",
                          mop(SE w64,
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                       @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                             var("s",qTy))),
                      ite(var_b"v0",
                          mop(SE w64,
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                       @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                             var("s0",qTy)))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BNE",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(mop(Not,
                       eq(ite(var_b"v",
                              mop(SE w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs1",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("s",qTy))),
                          ite(var_b"v0",
                              mop(SE w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s0",qTy))))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLT",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(bop(Lt,
                       ite(var_b"v",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                        @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                              var("s",qTy))),
                       ite(var_b"v0",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("s0",qTy)))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTU",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(bop(Ult,
                       ite(var_b"v",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                        @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                              var("s",qTy))),
                       ite(var_b"v0",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("s0",qTy)))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGE",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(bop(Ge,
                       ite(var_b"v",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                        @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                              var("s",qTy))),
                       ite(var_b"v0",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("s0",qTy)))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEU",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v0",var("s0",qTy)],
               apply
                 (call
                    ("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                  var("s",qTy)),
               ite(bop(Uge,
                       ite(var_b"v",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                        @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                              var("s",qTy))),
                       ite(var_b"v0",
                           mop(SE w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s0",qTy)),ln 31,ln 0,w32)),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("s0",qTy)))),
                   apply
                     (call
                        ("branchTo",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),bop(Lsl,mop(SE w64,var_w("offs",12)),ln 1)),@{theory}),
                      var("s0",qTy)),
                   apply
                     (call
                        ("noBranch",@{typ "state \<Rightarrow> state"},
                         bop(Add,
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),lw(4,64)),@{theory}),var("s0",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("v0",64)],@{theory}),
                             apply
                               (call
                                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",64),
                   bop(Add,
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                          var("s",qTy)),mop(SE w64,var_w("offs",12))),
                   let'
                     (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                      apply
                        (call
                           ("translateAddr",
                            @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                            tp[var_w("v",64),lc("Read","accessType",@{theory}),
                               lc("Data","fetchType",@{theory})],@{theory}),var("s",qTy)),
                      cs(var("v0",@{typ "64 word option"}),
                         [(mop(Some,var_w("pAddr",64)),
                           let'
                             (tp[var_w("v0",64),var("s",qTy)],
                              apply
                                (call
                                   ("rawReadData",
                                    @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                    var_w("pAddr",64),@{theory}),var("s",qTy)),
                              let'
                                (var_w("v0",64),mop(Cast w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("write'GPR",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                          (lo w64,
                           apply
                             (call
                                ("signalAddressException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],
                                 @{theory}),var("s",qTy)))],@{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LH",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 15,ln 0,w16)),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("v0",64)],@{theory}),
                             apply
                               (call
                                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LHU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",64),mop(Cast w64,ex(var_w("v0",64),ln 15,ln 0,w16)),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("v0",64)],@{theory}),
                             apply
                               (call
                                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LB",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 7,ln 0,w8)),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("v0",64)],@{theory}),
                             apply
                               (call
                                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LBU",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",64),mop(Cast w64,ex(var_w("v0",64),ln 7,ln 0,w8)),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("v0",64)],@{theory}),
                             apply
                               (call
                                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LD",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",64),
                   bop(Add,
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                          var("s",qTy)),mop(SE w64,var_w("offs",12))),
                   let'
                     (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                      apply
                        (call
                           ("translateAddr",
                            @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                            tp[var_w("v",64),lc("Read","accessType",@{theory}),
                               lc("Data","fetchType",@{theory})],@{theory}),var("s",qTy)),
                      cs(var("v0",@{typ "64 word option"}),
                         [(mop(Some,var_w("pAddr",64)),
                           let'
                             (tp[var_w("v0",64),var("s",qTy)],
                              apply
                                (call
                                   ("rawReadData",
                                    @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                    var_w("pAddr",64),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("recordLoad",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                 apply
                                   (call
                                      ("write'GPR",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy))))),
                          (lo w64,
                           apply
                             (call
                                ("signalAddressException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],
                                 @{theory}),var("s",qTy)))],@{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SW",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Write","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (var_w("v0",64),
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                          var("s",qTy)),
                       apply
                         (call
                            ("recordStore",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("v0",64),lw(4,32)],@{theory}),
                          apply
                            (call
                               ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                tp[var_w("pAddr",64),var_w("v0",64),ln 4],@{theory}),var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                          @{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SH",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Write","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (var_w("v0",64),
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                          var("s",qTy)),
                       apply
                         (call
                            ("recordStore",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("v0",64),lw(2,32)],@{theory}),
                          apply
                            (call
                               ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                tp[var_w("pAddr",64),var_w("v0",64),ln 2],@{theory}),var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                          @{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SB",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Write","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (var_w("v0",64),
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                          var("s",qTy)),
                       apply
                         (call
                            ("recordStore",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("v0",64),lw(1,32)],@{theory}),
                          apply
                            (call
                               ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                tp[var_w("pAddr",64),var_w("v0",64),ln 1],@{theory}),var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                          @{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SD",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",64),
                   bop(Add,
                       apply
                         (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                          var("s",qTy)),mop(SE w64,var_w("offs",12))),
                   let'
                     (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                      apply
                        (call
                           ("translateAddr",
                            @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                            tp[var_w("v",64),lc("Write","accessType",@{theory}),
                               lc("Data","fetchType",@{theory})],@{theory}),var("s",qTy)),
                      cs(var("v0",@{typ "64 word option"}),
                         [(mop(Some,var_w("pAddr",64)),
                           let'
                             (var_w("v0",64),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("v0",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("pAddr",64),var_w("v0",64),ln 8],@{theory}),
                                    var("s",qTy))))),
                          (lo w64,
                           apply
                             (call
                                ("signalAddressException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                                 @{theory}),var("s",qTy)))],@{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'FENCE",close(tp[var_w("rd",5),var_w("rs1",5),var_w("pred",4),var_w("succ",4)],lu))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'FENCE_I",close(tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LR_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("Read","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           apply
                             (call
                                ("write'ReserveLoad",@{typ "state \<Rightarrow> state"},
                                 mop(Some,var_w("v",64)),@{theory}),
                              apply
                                (call
                                   ("writeRD",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("rd",5),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32))],
                                    @{theory}),var("s",qTy))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LR_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                      var("s",qTy)),
                   ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                       apply
                         (call
                            ("signalAddressException",@{typ "state \<Rightarrow> state"},
                             tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],
                             @{theory}),var("s",qTy)),
                       let'
                         (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                          apply
                            (call
                               ("translateAddr",
                                @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                                tp[var_w("v",64),lc("Read","accessType",@{theory}),
                                   lc("Data","fetchType",@{theory})],@{theory}),var("s",qTy)),
                          cs(var("v0",@{typ "64 word option"}),
                             [(mop(Some,var_w("pAddr",64)),
                               let'
                                 (tp[var_w("v0",64),var("s",qTy)],
                                  apply
                                    (call
                                       ("rawReadData",
                                        @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                        var_w("pAddr",64),@{theory}),var("s",qTy)),
                                  apply
                                    (call
                                       ("write'ReserveLoad",@{typ "state \<Rightarrow> state"},
                                        mop(Some,var_w("v",64)),@{theory}),
                                     apply
                                       (call
                                          ("writeRD",@{typ "state \<Rightarrow> state"},
                                           tp[var_w("rd",5),var_w("v0",64)],@{theory}),var("s",qTy))))),
                              (lo w64,
                               apply
                                 (call
                                    ("signalAddressException",@{typ "state \<Rightarrow> state"},
                                     tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],
                                     @{theory}),var("s",qTy)))],@{context})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SC_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            itb([(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                  apply
                    (call
                       ("signalAddressException",@{typ "state \<Rightarrow> state"},
                        tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                     var("state",qTy))),
                 (mop(Not,
                      apply
                        (call
                           ("matchLoadReservation",@{typ "state \<Rightarrow> bool"},var_w("v",64),
                            @{theory}),var("state",qTy))),
                  apply
                    (call
                       ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(1,64)],
                        @{theory}),var("state",qTy)))],
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("Write","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (var_w("v0",64),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                              var("s",qTy)),
                           apply
                             (call
                                ("write'ReserveLoad",@{typ "state \<Rightarrow> state"},lo w64,
                                 @{theory}),
                              apply
                                (call
                                   ("writeRD",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("rd",5),lw(0,64)],@{theory}),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("v0",64),ln 4],@{theory}),
                                       var("s",qTy))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SC_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call("in32BitMode",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                let'
                  (var_w("v",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                      var("s",qTy)),
                   itb([(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                         apply
                           (call
                              ("signalAddressException",@{typ "state \<Rightarrow> state"},
                               tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],
                               @{theory}),var("s",qTy))),
                        (mop(Not,
                             apply
                               (call
                                  ("matchLoadReservation",@{typ "state \<Rightarrow> bool"},
                                   var_w("v",64),@{theory}),var("s",qTy))),
                         apply
                           (call
                              ("writeRD",@{typ "state \<Rightarrow> state"},
                               tp[var_w("rd",5),lw(1,64)],@{theory}),var("s",qTy)))],
                       let'
                         (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                          apply
                            (call
                               ("translateAddr",
                                @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                                tp[var_w("v",64),lc("Write","accessType",@{theory}),
                                   lc("Data","fetchType",@{theory})],@{theory}),var("s",qTy)),
                          cs(var("v0",@{typ "64 word option"}),
                             [(mop(Some,var_w("pAddr",64)),
                               let'
                                 (var_w("v0",64),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s",qTy)),
                                  apply
                                    (call
                                       ("write'ReserveLoad",@{typ "state \<Rightarrow> state"},
                                        lo w64,@{theory}),
                                     apply
                                       (call
                                          ("writeRD",@{typ "state \<Rightarrow> state"},
                                           tp[var_w("rd",5),lw(0,64)],@{theory}),
                                        apply
                                          (call
                                             ("recordStore",@{typ "state \<Rightarrow> state"},
                                              tp[var_w("v",64),var_w("v0",64),lw(4,32)],@{theory}),
                                           apply
                                             (call
                                                ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                                 tp[var_w("pAddr",64),var_w("v0",64),ln 4],@{theory}),
                                              var("s",qTy))))))),
                              (lo w64,
                               apply
                                 (call
                                    ("signalAddressException",@{typ "state \<Rightarrow> state"},
                                     tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),
                                        var_w("v",64)],@{theory}),var("s",qTy)))],@{context})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOSWAP_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("v1",64),
                                 apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                       @{theory}),var("s",qTy)),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v1",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("v1",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOSWAP_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v1",64),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("v1",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("v1",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOADD_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 bop(Add,
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOADD_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              bop(Add,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s",qTy)),var_w("v0",64)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOXOR_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 bop(BXor,
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOXOR_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              bop(BXor,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s",qTy)),var_w("v0",64)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOAND_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 bop(BAnd,
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOAND_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              bop(BAnd,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s",qTy)),var_w("v0",64)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOOR_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 bop(BOr,
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOOR_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              bop(BOr,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                        @{theory}),var("s",qTy)),var_w("v0",64)),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMIN_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 mop(Smin,
                                     tp[apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMIN_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              mop(Smin,
                                  tp[apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMAX_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 mop(Smax,
                                     tp[apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMAX_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              mop(Smax,
                                  tp[apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMINU_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 mop(Min,
                                     tp[apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMINU_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              mop(Min,
                                  tp[apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMAXU_W",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("v0",64),mop(SE w64,ex(var_w("v0",64),ln 31,ln 0,w32)),
                              let'
                                (var_w("val",64),
                                 mop(Max,
                                     tp[apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                                 apply
                                   (call
                                      ("recordStore",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("val",64),lw(4,32)],@{theory}),
                                    apply
                                      (call
                                         ("recordLoad",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                       apply
                                         (call
                                            ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("pAddr",64),var_w("val",64),ln 4],@{theory}),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                             var("s",qTy))))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AMOMAXU_D",
   close
     (tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3))),
                apply
                  (call
                     ("signalAddressException",@{typ "state \<Rightarrow> state"},
                      tp[lc("E_AMO_Misaligned","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("ReadWrite","accessType",@{theory}),
                            lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pAddr",64)),
                        let'
                          (tp[var_w("v0",64),var("s",qTy)],
                           apply
                             (call
                                ("rawReadData",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 var_w("pAddr",64),@{theory}),var("s",qTy)),
                           let'
                             (var_w("val",64),
                              mop(Max,
                                  tp[apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("s",qTy)),var_w("v0",64)]),
                              apply
                                (call
                                   ("recordStore",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("val",64),lw(8,32)],@{theory}),
                                 apply
                                   (call
                                      ("recordLoad",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("v",64),var_w("v0",64)],@{theory}),
                                    apply
                                      (call
                                         ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("pAddr",64),var_w("val",64),ln 8],@{theory}),
                                       apply
                                         (call
                                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                                             tp[var_w("v0",64),var_w("rd",5)],@{theory}),
                                          var("s",qTy)))))))),
                       (lo w64,
                        apply
                          (call
                             ("signalAddressException",@{typ "state \<Rightarrow> state"},
                              tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                              @{theory}),var("s",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       let'
                         (var_w("v0",32),ex(var_w("v0",64),ln 31,ln 0,w32),
                          apply
                            (call
                               ("recordLoad",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),mop(Cast w64,var_w("v0",32))],@{theory}),
                             apply
                               (call
                                  ("write'FPRS",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("v0",32),var_w("rd",5)],@{theory}),var("s",qTy)))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSW",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Write","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (var_w("v0",32),
                       apply
                         (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                          var("s",qTy)),
                       apply
                         (call
                            ("recordStore",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),mop(Cast w64,var_w("v0",32)),lw(4,32)],@{theory}),
                          apply
                            (call
                               ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                tp[var_w("pAddr",64),mop(Cast w64,var_w("v0",32)),ln 4],@{theory}),
                             var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                          @{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FADD_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPAdd false,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSUB_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSub false,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMUL_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPMul false,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FDIV_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPDiv false,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSQRT_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSqrt false,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMIN_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",32),
               apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               apply
                 (call
                    ("writeFPRS",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        cs(mop(FPCompare false,tp[var_w("v",32),var_w("v0",32)]),
                           [(@{term L3_Lib.LT},var_w("v",32)),(@{term L3_Lib.EQ},var_w("v",32)),
                            (@{term L3_Lib.GT},var_w("v0",32)),
                            (@{term L3_Lib.UN},
                             itb([(bop(Or,
                                       bop(Or,
                                           call
                                             ("FP32_IsSignalingNan",HOLogic.boolT,var_w("v",32),
                                              @{theory}),
                                           call
                                             ("FP32_IsSignalingNan",HOLogic.boolT,var_w("v0",32),
                                              @{theory})),
                                       bop(And,
                                           eq(var_w("v",32),const("RV32_CanonicalNan",w32,@{theory})),
                                           eq(var_w("v0",32),
                                              const("RV32_CanonicalNan",w32,@{theory})))),
                                   const("RV32_CanonicalNan",w32,@{theory})),
                                  (eq(var_w("v",32),const("RV32_CanonicalNan",w32,@{theory})),
                                   var_w("v0",32))],var_w("v",32)))],@{context})],@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMAX_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",32),
               apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               apply
                 (call
                    ("writeFPRS",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        cs(mop(FPCompare false,tp[var_w("v",32),var_w("v0",32)]),
                           [(@{term L3_Lib.LT},var_w("v0",32)),(@{term L3_Lib.EQ},var_w("v0",32)),
                            (@{term L3_Lib.GT},var_w("v",32)),
                            (@{term L3_Lib.UN},
                             itb([(bop(Or,
                                       bop(Or,
                                           call
                                             ("FP32_IsSignalingNan",HOLogic.boolT,var_w("v",32),
                                              @{theory}),
                                           call
                                             ("FP32_IsSignalingNan",HOLogic.boolT,var_w("v0",32),
                                              @{theory})),
                                       bop(And,
                                           eq(var_w("v",32),const("RV32_CanonicalNan",w32,@{theory})),
                                           eq(var_w("v0",32),
                                              const("RV32_CanonicalNan",w32,@{theory})))),
                                   const("RV32_CanonicalNan",w32,@{theory})),
                                  (eq(var_w("v",32),const("RV32_CanonicalNan",w32,@{theory})),
                                   var_w("v0",32))],var_w("v",32)))],@{context})],@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMADD_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPAdd false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(FPMul false,
                                  tp[var("r",@{typ ieee_rounding}),
                                     apply
                                       (call
                                          ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                           var_w("rs1",5),@{theory}),var("state",qTy)),
                                     apply
                                       (call
                                          ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                           var_w("rs2",5),@{theory}),var("state",qTy))]),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs3",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMSUB_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSub false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(FPMul false,
                                  tp[var("r",@{typ ieee_rounding}),
                                     apply
                                       (call
                                          ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                           var_w("rs1",5),@{theory}),var("state",qTy)),
                                     apply
                                       (call
                                          ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                           var_w("rs2",5),@{theory}),var("state",qTy))]),
                              apply
                                (call
                                   ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs3",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FNMADD_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPNeg false,
                           mop(FPAdd false,
                               tp[var("r",@{typ ieee_rounding}),
                                  mop(FPMul false,
                                      tp[var("r",@{typ ieee_rounding}),
                                         apply
                                           (call
                                              ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                               var_w("rs1",5),@{theory}),var("state",qTy)),
                                         apply
                                           (call
                                              ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                               var_w("rs2",5),@{theory}),var("state",qTy))]),
                                  apply
                                    (call
                                       ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs3",5),
                                        @{theory}),var("state",qTy))]))],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FNMSUB_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPNeg false,
                           mop(FPSub false,
                               tp[var("r",@{typ ieee_rounding}),
                                  mop(FPMul false,
                                      tp[var("r",@{typ ieee_rounding}),
                                         apply
                                           (call
                                              ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                               var_w("rs1",5),@{theory}),var("state",qTy)),
                                         apply
                                           (call
                                              ("FPRS",@{typ "state \<Rightarrow> 32 word"},
                                               var_w("rs2",5),@{theory}),var("state",qTy))]),
                                  apply
                                    (call
                                       ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs3",5),
                                        @{theory}),var("state",qTy))]))],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_S_W",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                           @{theory}),var("state",qTy)),ln 31,ln 0,w32))])],
                    @{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_S_WU",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  cc[lw(0,1),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs",5),@{theory}),var("state",qTy)),ln 31,ln 0,
                                        w32)])])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_W_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",32),
                 apply
                   (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt false,tp[var("r",@{typ ieee_rounding}),var_w("v",32)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan false,var_w("v",32)),
                                       eq(var_w("v",32),@{term L3_Lib.fp32_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 31),ln 1))),
                                  (eq(var_w("v",32),@{term L3_Lib.fp32_neg_inf}),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 31)))),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 31),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 31),ln 1))),
                                  (bop(Lt,var_i"val",mop(Neg,bop(Exp,li 2,ln 31))),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 31))))],
                                 mop(Cast w64,var_i"val"))],@{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_WU_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",32),
                 apply
                   (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt false,tp[var("r",@{typ ieee_rounding}),var_w("v",32)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan false,var_w("v",32)),
                                       eq(var_w("v",32),@{term L3_Lib.fp32_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 32),ln 1))),
                                  (eq(var_w("v",32),@{term L3_Lib.fp32_neg_inf}),lw(0,64)),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 32),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 32),ln 1))),
                                  (bop(Lt,var_i"val",li 0),lw(0,64))],mop(Cast w64,var_i"val"))],
                          @{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_S_L",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                        @{theory}),var("state",qTy)))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_S_LU",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt false,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  cc[lw(0,1),
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                           @{theory}),var("state",qTy))])])],@{theory}),
                 var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_L_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",32),
                 apply
                   (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt false,tp[var("r",@{typ ieee_rounding}),var_w("v",32)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan false,var_w("v",32)),
                                       eq(var_w("v",32),@{term L3_Lib.fp32_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 63),ln 1))),
                                  (eq(var_w("v",32),@{term L3_Lib.fp32_neg_inf}),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 63)))),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 63),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 63),ln 1))),
                                  (bop(Lt,var_i"val",mop(Neg,bop(Exp,li 2,ln 63))),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 63))))],
                                 mop(Cast w64,var_i"val"))],@{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_LU_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",32),
                 apply
                   (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt false,tp[var("r",@{typ ieee_rounding}),var_w("v",32)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan false,var_w("v",32)),
                                       eq(var_w("v",32),@{term L3_Lib.fp32_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 64),ln 1))),
                                  (eq(var_w("v",32),@{term L3_Lib.fp32_neg_inf}),lw(0,64)),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 64),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 64),ln 1))),
                                  (bop(Lt,var_i"val",li 0),lw(0,64))],mop(Cast w64,var_i"val"))],
                          @{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJ_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRS",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  cc[mop(Cast w1,
                         call
                           ("FP32_Sign",HOLogic.boolT,
                            apply
                              (call
                                 ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     ex(apply
                          (call
                             ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
                           var("state",qTy)),ln 30,ln 0,(Word_Lib.mk_wordT 31))]],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJN_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRS",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  cc[mop(Cast w1,
                         mop(Not,
                             call
                               ("FP32_Sign",HOLogic.boolT,
                                apply
                                  (call
                                     ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                      @{theory}),var("state",qTy)),@{theory}))),
                     ex(apply
                          (call
                             ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
                           var("state",qTy)),ln 30,ln 0,(Word_Lib.mk_wordT 31))]],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJX_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("writeFPRS",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     cc[bop(BXor,
                            mop(Cast w1,
                                call
                                  ("FP32_Sign",HOLogic.boolT,
                                   apply
                                     (call
                                        ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),
                                         @{theory}),var("state",qTy)),@{theory})),
                            mop(Cast w1,call("FP32_Sign",HOLogic.boolT,var_w("v",32),@{theory}))),
                        ex(var_w("v",32),ln 30,ln 0,(Word_Lib.mk_wordT 31))]],@{theory}),
               var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMV_X_S",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      apply
                        (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMV_S_X",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRS",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  ex(apply
                       (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                        var("state",qTy)),ln 31,ln 0,w32)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FEQ_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",32),
               apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,call("FP32_IsSignalingNan",HOLogic.boolT,var_w("v",32),@{theory}),
                       call("FP32_IsSignalingNan",HOLogic.boolT,var_w("v0",32),@{theory})),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare false,tp[var_w("v",32),var_w("v0",32)]),
                               [(@{term L3_Lib.LT},lw(0,64)),(@{term L3_Lib.EQ},lw(1,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLT_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",32),
               apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,mop(FPIsNan false,var_w("v",32)),mop(FPIsNan false,var_w("v0",32))),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare false,tp[var_w("v",32),var_w("v0",32)]),
                               [(@{term L3_Lib.LT},lw(1,64)),(@{term L3_Lib.EQ},lw(0,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLE_S",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            apply
              (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",32),
               apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,mop(FPIsNan false,var_w("v",32)),mop(FPIsNan false,var_w("v0",32))),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare false,tp[var_w("v",32),var_w("v0",32)]),
                               [(@{term L3_Lib.LT},lw(1,64)),(@{term L3_Lib.EQ},lw(1,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCLASS_S",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",@{typ "10 word \<times> state"})],
            tp[apply
                 (call("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),lw(0,10),var("state",qTy)],
            apply
              (call
                 ("writeRD",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     mop(Cast w64,
                         bfi(ln 9,ln 9,
                             mop(Cast w1,eq(var_w("v",32),const("RV32_CanonicalNan",w32,@{theory}))),
                             bfi(ln 8,ln 8,
                                 mop(Cast w1,
                                     call
                                       ("FP32_IsSignalingNan",HOLogic.boolT,var_w("v",32),@{theory})),
                                 bfi(ln 7,ln 7,
                                     mop(Cast w1,eq(var_w("v",32),@{term L3_Lib.fp32_pos_inf})),
                                     bfi(ln 6,ln 6,
                                         mop(Cast w1,
                                             bop(And,
                                                 mop(Not,
                                                     call
                                                       ("FP32_Sign",HOLogic.boolT,var_w("v",32),
                                                        @{theory})),
                                                 mop(FPIsNormal false,var_w("v",32)))),
                                         bfi(ln 5,ln 5,
                                             mop(Cast w1,
                                                 bop(And,
                                                     mop(Not,
                                                         call
                                                           ("FP32_Sign",HOLogic.boolT,var_w("v",32),
                                                            @{theory})),
                                                     mop(FPIsSubnormal false,var_w("v",32)))),
                                             bfi(ln 4,ln 4,
                                                 mop(Cast w1,
                                                     eq(var_w("v",32),@{term L3_Lib.fp32_pos_zero})),
                                                 bfi(ln 3,ln 3,
                                                     mop(Cast w1,
                                                         eq(var_w("v",32),
                                                            @{term L3_Lib.fp32_neg_zero})),
                                                     bfi(ln 2,ln 2,
                                                         mop(Cast w1,
                                                             bop(And,
                                                                 call
                                                                   ("FP32_Sign",HOLogic.boolT,
                                                                    var_w("v",32),@{theory}),
                                                                 mop(FPIsSubnormal false,
                                                                     var_w("v",32)))),
                                                         bfi(ln 1,ln 1,
                                                             mop(Cast w1,
                                                                 bop(And,
                                                                     call
                                                                       ("FP32_Sign",HOLogic.boolT,
                                                                        var_w("v",32),@{theory}),
                                                                     mop(FPIsNormal false,
                                                                         var_w("v",32)))),
                                                             bfi(ln 0,ln 0,
                                                                 mop(Cast w1,
                                                                     eq(var_w("v",32),
                                                                        @{term L3_Lib.fp32_neg_inf})),
                                                                 mop(Fst,
                                                                     var("s",
                                                                         @{typ
                                                                         "10 word \<times> state"})))))))))))))],
                  @{theory}),mop(Snd,var("s",@{typ "10 word \<times> state"})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLD",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Read","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (tp[var_w("v0",64),var("s",qTy)],
                       apply
                         (call
                            ("rawReadData",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             var_w("pAddr",64),@{theory}),var("s",qTy)),
                       apply
                         (call
                            ("recordLoad",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("v0",64)],@{theory}),
                          apply
                            (call
                               ("write'FPRD",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v0",64),var_w("rd",5)],@{theory}),var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Load_Fault","ExceptionType",@{theory}),var_w("v",64)],@{theory}),
                       var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSD",
   close
     (tp[var_w("rs1",5),var_w("rs2",5),var_w("offs",12)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("offs",12))),
            let'
              (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
               apply
                 (call
                    ("translateAddr",@{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                     tp[var_w("v",64),lc("Write","accessType",@{theory}),
                        lc("Data","fetchType",@{theory})],@{theory}),var("state",qTy)),
               cs(var("v0",@{typ "64 word option"}),
                  [(mop(Some,var_w("pAddr",64)),
                    let'
                      (var_w("v0",64),
                       apply
                         (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                          var("s",qTy)),
                       apply
                         (call
                            ("recordStore",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("v0",64),lw(8,32)],@{theory}),
                          apply
                            (call
                               ("rawWriteData",@{typ "state \<Rightarrow> state"},
                                tp[var_w("pAddr",64),var_w("v0",64),ln 8],@{theory}),var("s",qTy))))),
                   (lo w64,
                    apply
                      (call
                         ("signalAddressException",@{typ "state \<Rightarrow> state"},
                          tp[lc("E_Store_AMO_Fault","ExceptionType",@{theory}),var_w("v",64)],
                          @{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FADD_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPAdd true,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSUB_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSub true,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMUL_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPMul true,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FDIV_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPDiv true,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSQRT_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSqrt true,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMIN_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               apply
                 (call
                    ("writeFPRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        cs(mop(FPCompare true,tp[var_w("v",64),var_w("v0",64)]),
                           [(@{term L3_Lib.LT},var_w("v",64)),(@{term L3_Lib.EQ},var_w("v",64)),
                            (@{term L3_Lib.GT},var_w("v0",64)),
                            (@{term L3_Lib.UN},
                             itb([(bop(Or,
                                       bop(Or,
                                           call
                                             ("FP64_IsSignalingNan",HOLogic.boolT,var_w("v",64),
                                              @{theory}),
                                           call
                                             ("FP64_IsSignalingNan",HOLogic.boolT,var_w("v0",64),
                                              @{theory})),
                                       bop(And,
                                           eq(var_w("v",64),const("RV64_CanonicalNan",w64,@{theory})),
                                           eq(var_w("v0",64),
                                              const("RV64_CanonicalNan",w64,@{theory})))),
                                   const("RV64_CanonicalNan",w64,@{theory})),
                                  (eq(var_w("v",64),const("RV64_CanonicalNan",w64,@{theory})),
                                   var_w("v0",64))],var_w("v",64)))],@{context})],@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMAX_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               apply
                 (call
                    ("writeFPRD",@{typ "state \<Rightarrow> state"},
                     tp[var_w("rd",5),
                        cs(mop(FPCompare true,tp[var_w("v",64),var_w("v0",64)]),
                           [(@{term L3_Lib.LT},var_w("v0",64)),(@{term L3_Lib.EQ},var_w("v0",64)),
                            (@{term L3_Lib.GT},var_w("v",64)),
                            (@{term L3_Lib.UN},
                             itb([(bop(Or,
                                       bop(Or,
                                           call
                                             ("FP64_IsSignalingNan",HOLogic.boolT,var_w("v",64),
                                              @{theory}),
                                           call
                                             ("FP64_IsSignalingNan",HOLogic.boolT,var_w("v0",64),
                                              @{theory})),
                                       bop(And,
                                           eq(var_w("v",64),const("RV64_CanonicalNan",w64,@{theory})),
                                           eq(var_w("v0",64),
                                              const("RV64_CanonicalNan",w64,@{theory})))),
                                   const("RV64_CanonicalNan",w64,@{theory})),
                                  (eq(var_w("v",64),const("RV64_CanonicalNan",w64,@{theory})),
                                   var_w("v0",64))],var_w("v",64)))],@{context})],@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMADD_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPAdd true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(FPMul true,
                                  tp[var("r",@{typ ieee_rounding}),
                                     apply
                                       (call
                                          ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs1",5),@{theory}),var("state",qTy)),
                                     apply
                                       (call
                                          ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("state",qTy))]),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs3",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMSUB_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPSub true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(FPMul true,
                                  tp[var("r",@{typ ieee_rounding}),
                                     apply
                                       (call
                                          ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs1",5),@{theory}),var("state",qTy)),
                                     apply
                                       (call
                                          ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                           var_w("rs2",5),@{theory}),var("state",qTy))]),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs3",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FNMADD_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPNeg true,
                           mop(FPAdd true,
                               tp[var("r",@{typ ieee_rounding}),
                                  mop(FPMul true,
                                      tp[var("r",@{typ ieee_rounding}),
                                         apply
                                           (call
                                              ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rs1",5),@{theory}),var("state",qTy)),
                                         apply
                                           (call
                                              ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rs2",5),@{theory}),var("state",qTy))]),
                                  apply
                                    (call
                                       ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs3",5),
                                        @{theory}),var("state",qTy))]))],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FNMSUB_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPNeg true,
                           mop(FPSub true,
                               tp[var("r",@{typ ieee_rounding}),
                                  mop(FPMul true,
                                      tp[var("r",@{typ ieee_rounding}),
                                         apply
                                           (call
                                              ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rs1",5),@{theory}),var("state",qTy)),
                                         apply
                                           (call
                                              ("FPRD",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rs2",5),@{theory}),var("state",qTy))]),
                                  apply
                                    (call
                                       ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs3",5),
                                        @{theory}),var("state",qTy))]))],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_D_W",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                           @{theory}),var("state",qTy)),ln 31,ln 0,w32))])],
                    @{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_D_WU",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  cc[lw(0,1),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rs",5),@{theory}),var("state",qTy)),ln 31,ln 0,
                                        w32)])])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_W_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",64),
                 apply
                   (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt true,tp[var("r",@{typ ieee_rounding}),var_w("v",64)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan true,var_w("v",64)),
                                       eq(var_w("v",64),@{term L3_Lib.fp64_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 31),ln 1))),
                                  (eq(var_w("v",64),@{term L3_Lib.fp64_neg_inf}),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 31)))),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 31),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 31),ln 1))),
                                  (bop(Lt,var_i"val",mop(Neg,bop(Exp,li 2,ln 31))),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 31))))],
                                 mop(Cast w64,var_i"val"))],@{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_WU_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",64),
                 apply
                   (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt true,tp[var("r",@{typ ieee_rounding}),var_w("v",64)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan true,var_w("v",64)),
                                       eq(var_w("v",64),@{term L3_Lib.fp64_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 32),ln 1))),
                                  (eq(var_w("v",64),@{term L3_Lib.fp64_neg_inf}),lw(0,64)),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 32),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 32),ln 1))),
                                  (bop(Lt,var_i"val",li 0),lw(0,64))],mop(Cast w64,var_i"val"))],
                          @{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_D_L",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                        @{theory}),var("state",qTy)))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_D_LU",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FPFromInt true,
                           tp[var("r",@{typ ieee_rounding}),
                              mop(Cast HOLogic.intT,
                                  cc[lw(0,1),
                                     apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                           @{theory}),var("state",qTy))])])],@{theory}),
                 var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_L_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",64),
                 apply
                   (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt true,tp[var("r",@{typ ieee_rounding}),var_w("v",64)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan true,var_w("v",64)),
                                       eq(var_w("v",64),@{term L3_Lib.fp64_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 63),ln 1))),
                                  (eq(var_w("v",64),@{term L3_Lib.fp64_neg_inf}),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 63)))),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 63),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 63),ln 1))),
                                  (bop(Lt,var_i"val",mop(Neg,bop(Exp,li 2,ln 63))),
                                   mop(Neg,mop(Cast w64,bop(Exp,ln 2,ln 63))))],
                                 mop(Cast w64,var_i"val"))],@{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_LU_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              let'
                (var_w("v",64),
                 apply
                   (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 let'
                   (var_i"val",
                    mop(ValOf,mop(FPToInt true,tp[var("r",@{typ ieee_rounding}),var_w("v",64)])),
                    apply
                      (call
                         ("writeRD",@{typ "state \<Rightarrow> state"},
                          tp[var_w("rd",5),
                             itb([(bop(Or,mop(FPIsNan true,var_w("v",64)),
                                       eq(var_w("v",64),@{term L3_Lib.fp64_pos_inf})),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 64),ln 1))),
                                  (eq(var_w("v",64),@{term L3_Lib.fp64_neg_inf}),lw(0,64)),
                                  (bop(Gt,var_i"val",bop(Sub,bop(Exp,li 2,ln 64),li 1)),
                                   mop(Cast w64,bop(Sub,bop(Exp,ln 2,ln 64),ln 1))),
                                  (bop(Lt,var_i"val",li 0),lw(0,64))],mop(Cast w64,var_i"val"))],
                          @{theory}),var("state",qTy))))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_S_D",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRS",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FP64To32,
                           tp[var("r",@{typ ieee_rounding}),
                              apply
                                (call
                                   ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                    @{theory}),var("state",qTy))])],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCVT_D_S",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("fprnd",3)],
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("round",@{typ "state \<Rightarrow> (L3_Lib.ieee_rounding option)"},
                  var_w("fprnd",3),@{theory}),var("state",qTy)),
            [(mop(Some,var("r",@{typ ieee_rounding})),
              apply
                (call
                   ("writeFPRD",@{typ "state \<Rightarrow> state"},
                    tp[var_w("rd",5),
                       mop(FP32To64,
                           apply
                             (call
                                ("FPRS",@{typ "state \<Rightarrow> 32 word"},var_w("rs",5),@{theory}),
                              var("state",qTy)))],@{theory}),var("state",qTy))),
             (lo @{typ ieee_rounding},
              apply
                (call
                   ("signalException",@{typ "state \<Rightarrow> state"},
                    lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJ_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  cc[mop(Cast w1,
                         call
                           ("FP64_Sign",HOLogic.boolT,
                            apply
                              (call
                                 ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     ex(apply
                          (call
                             ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                           var("state",qTy)),ln 62,ln 0,(Word_Lib.mk_wordT 63))]],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJN_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  cc[mop(Cast w1,
                         mop(Not,
                             call
                               ("FP64_Sign",HOLogic.boolT,
                                apply
                                  (call
                                     ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                      @{theory}),var("state",qTy)),@{theory}))),
                     ex(apply
                          (call
                             ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                           var("state",qTy)),ln 62,ln 0,(Word_Lib.mk_wordT 63))]],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FSGNJX_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("writeFPRD",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     cc[bop(BXor,
                            mop(Cast w1,
                                call
                                  ("FP64_Sign",HOLogic.boolT,
                                   apply
                                     (call
                                        ("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),
                                         @{theory}),var("state",qTy)),@{theory})),
                            mop(Cast w1,call("FP64_Sign",HOLogic.boolT,var_w("v",64),@{theory}))),
                        ex(var_w("v",64),ln 62,ln 0,(Word_Lib.mk_wordT 63))]],@{theory}),
               var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMV_X_D",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      apply
                        (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FMV_D_X",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("writeFPRD",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),
                  apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("state",qTy))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FEQ_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,call("FP64_IsSignalingNan",HOLogic.boolT,var_w("v",64),@{theory}),
                       call("FP64_IsSignalingNan",HOLogic.boolT,var_w("v0",64),@{theory})),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare true,tp[var_w("v",64),var_w("v0",64)]),
                               [(@{term L3_Lib.LT},lw(0,64)),(@{term L3_Lib.EQ},lw(1,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLT_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,mop(FPIsNan true,var_w("v",64)),mop(FPIsNan true,var_w("v0",64))),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare true,tp[var_w("v",64),var_w("v0",64)]),
                               [(@{term L3_Lib.LT},lw(1,64)),(@{term L3_Lib.EQ},lw(0,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLE_D",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs2",5),@{theory}),
                  var("state",qTy)),
               ite(bop(Or,mop(FPIsNan true,var_w("v",64)),mop(FPIsNan true,var_w("v0",64))),
                   apply
                     (call("setFP_Invalid",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("writeRD",@{typ "state \<Rightarrow> state"},tp[var_w("rd",5),lw(0,64)],
                            @{theory}),var("state",qTy))),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),
                            cs(mop(FPCompare true,tp[var_w("v",64),var_w("v0",64)]),
                               [(@{term L3_Lib.LT},lw(1,64)),(@{term L3_Lib.EQ},lw(1,64)),
                                (@{term L3_Lib.GT},lw(0,64)),(@{term L3_Lib.UN},lw(0,64))],
                               @{context})],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FCLASS_D",
   close
     (tp[var_w("rd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",@{typ "10 word \<times> state"})],
            tp[apply
                 (call("FPRD",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),lw(0,10),var("state",qTy)],
            apply
              (call
                 ("writeRD",@{typ "state \<Rightarrow> state"},
                  tp[var_w("rd",5),
                     mop(Cast w64,
                         bfi(ln 9,ln 9,
                             mop(Cast w1,eq(var_w("v",64),const("RV64_CanonicalNan",w64,@{theory}))),
                             bfi(ln 8,ln 8,
                                 mop(Cast w1,
                                     call
                                       ("FP64_IsSignalingNan",HOLogic.boolT,var_w("v",64),@{theory})),
                                 bfi(ln 7,ln 7,
                                     mop(Cast w1,eq(var_w("v",64),@{term L3_Lib.fp64_pos_inf})),
                                     bfi(ln 6,ln 6,
                                         mop(Cast w1,
                                             bop(And,
                                                 mop(Not,
                                                     call
                                                       ("FP64_Sign",HOLogic.boolT,var_w("v",64),
                                                        @{theory})),
                                                 mop(FPIsNormal true,var_w("v",64)))),
                                         bfi(ln 5,ln 5,
                                             mop(Cast w1,
                                                 bop(And,
                                                     mop(Not,
                                                         call
                                                           ("FP64_Sign",HOLogic.boolT,var_w("v",64),
                                                            @{theory})),
                                                     mop(FPIsSubnormal true,var_w("v",64)))),
                                             bfi(ln 4,ln 4,
                                                 mop(Cast w1,
                                                     eq(var_w("v",64),@{term L3_Lib.fp64_pos_zero})),
                                                 bfi(ln 3,ln 3,
                                                     mop(Cast w1,
                                                         eq(var_w("v",64),
                                                            @{term L3_Lib.fp64_neg_zero})),
                                                     bfi(ln 2,ln 2,
                                                         mop(Cast w1,
                                                             bop(And,
                                                                 call
                                                                   ("FP64_Sign",HOLogic.boolT,
                                                                    var_w("v",64),@{theory}),
                                                                 mop(FPIsSubnormal true,
                                                                     var_w("v",64)))),
                                                         bfi(ln 1,ln 1,
                                                             mop(Cast w1,
                                                                 bop(And,
                                                                     call
                                                                       ("FP64_Sign",HOLogic.boolT,
                                                                        var_w("v",64),@{theory}),
                                                                     mop(FPIsNormal true,
                                                                         var_w("v",64)))),
                                                             bfi(ln 0,ln 0,
                                                                 mop(Cast w1,
                                                                     eq(var_w("v",64),
                                                                        @{term L3_Lib.fp64_neg_inf})),
                                                                 mop(Fst,
                                                                     var("s",
                                                                         @{typ
                                                                         "10 word \<times> state"})))))))))))))],
                  @{theory}),mop(Snd,var("s",@{typ "10 word \<times> state"})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ECALL",
   close
     (var("state",qTy),
      apply(call("signalEnvCall",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'EBREAK",
   close
     (var("state",qTy),
      apply
        (call
           ("signalException",@{typ "state \<Rightarrow> state"},
            lc("E_Breakpoint","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'URET",
   close
     (var("state",qTy),
      apply
        (call
           ("write'NextFetch",@{typ "state \<Rightarrow> state"},
            mop(Some,Term.Const(@{const_name "Uret"},@{typ instrResult})),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRET",
   close
     (var("state",qTy),
      apply
        (call
           ("write'NextFetch",@{typ "state \<Rightarrow> state"},
            mop(Some,Term.Const(@{const_name "Sret"},@{typ instrResult})),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'HRET",
   close
     (var("state",qTy),
      apply
        (call
           ("write'NextFetch",@{typ "state \<Rightarrow> state"},
            mop(Some,Term.Const(@{const_name "Hret"},@{typ instrResult})),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MRET",
   close
     (var("state",qTy),
      apply
        (call
           ("write'NextFetch",@{typ "state \<Rightarrow> state"},
            mop(Some,Term.Const(@{const_name "Mret"},@{typ instrResult})),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'WFI",lu)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("checkCSROp",
   close
     (tp[var_w("csr",12),var_w("rs1",5),var("a",@{typ accessType})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("is_CSR_defined",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("csr",12),@{theory}),var("state",qTy)),
            tp[bop(And,var_b"v",
                   call
                     ("check_CSR_access",HOLogic.boolT,
                      tp[call("csrRW",(Word_Lib.mk_wordT 2),var_w("csr",12),@{theory}),
                         call("csrPR",(Word_Lib.mk_wordT 2),var_w("csr",12),@{theory}),
                         apply
                           (const("curPrivilege",@{typ "state \<Rightarrow> Privilege"},@{theory}),
                            var("s",qTy)),var("a",@{typ accessType})],@{theory})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRW",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("rs1",5),lc("Write","accessType",@{theory})],@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      apply
                        (call
                           ("writeCSR",@{typ "state \<Rightarrow> state"},
                            tp[var_w("csr",12),
                               apply
                                 (call
                                    ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),
                                     @{theory}),var("s",qTy))],@{theory}),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRS",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("rs1",5),
                     ite(eq(var_w("rs1",5),lw(0,5)),lc("Read","accessType",@{theory}),
                         lc("Write","accessType",@{theory}))],@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      ite(mop(Not,eq(var_w("rs1",5),lw(0,5))),
                          apply
                            (call
                               ("writeCSR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("csr",12),
                                   bop(BOr,var_w("v",64),
                                       apply
                                         (call
                                            ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                             var_w("rs1",5),@{theory}),var("s",qTy)))],@{theory}),
                             var("s",qTy)),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRC",
   close
     (tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("rs1",5),
                     ite(eq(var_w("rs1",5),lw(0,5)),lc("Read","accessType",@{theory}),
                         lc("Write","accessType",@{theory}))],@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      ite(mop(Not,eq(var_w("rs1",5),lw(0,5))),
                          apply
                            (call
                               ("writeCSR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("csr",12),
                                   bop(BAnd,var_w("v",64),
                                       mop(BNot,
                                           apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rs1",5),@{theory}),var("s",qTy))))],
                                @{theory}),var("s",qTy)),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRWI",
   close
     (tp[var_w("rd",5),var_w("zimm",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("zimm",5),
                     ite(eq(var_w("zimm",5),lw(0,5)),lc("Read","accessType",@{theory}),
                         lc("Write","accessType",@{theory}))],@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      ite(mop(Not,eq(var_w("zimm",5),lw(0,5))),
                          apply
                            (call
                               ("writeCSR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("csr",12),mop(Cast w64,var_w("zimm",5))],@{theory}),
                             var("s",qTy)),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRSI",
   close
     (tp[var_w("rd",5),var_w("zimm",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("zimm",5),
                     ite(eq(var_w("zimm",5),lw(0,5)),lc("Read","accessType",@{theory}),
                         lc("Write","accessType",@{theory}))],@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      ite(mop(Not,eq(var_w("zimm",5),lw(0,5))),
                          apply
                            (call
                               ("writeCSR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("csr",12),
                                   bop(BOr,var_w("v",64),mop(Cast w64,var_w("zimm",5)))],@{theory}),
                             var("s",qTy)),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSRRCI",
   close
     (tp[var_w("rd",5),var_w("zimm",5),var_w("csr",12)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("checkCSROp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("csr",12),var_w("zimm",5),
                     ite(eq(var_w("zimm",5),lw(0,5)),lc("Read","accessType",@{theory}),
                         lc("Write","accessType",@{theory}))],@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   apply
                     (call
                        ("CSR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         var_w("csr",12),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("writeRD",@{typ "state \<Rightarrow> state"},
                         tp[var_w("rd",5),var_w("v",64)],@{theory}),
                      ite(mop(Not,eq(var_w("zimm",5),lw(0,5))),
                          apply
                            (call
                               ("writeCSR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("csr",12),
                                   bop(BAnd,var_w("v",64),mop(BNot,mop(Cast w64,var_w("zimm",5))))],
                                @{theory}),var("s",qTy)),var("s",qTy)))),
                apply
                  (call
                     ("signalException",@{typ "state \<Rightarrow> state"},
                      lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SFENCE_VM",
   close
     (var_w("rs1",5),
      close
        (var("state",qTy),
         let'
           (var("v",@{typ "64 word option"}),
            ite(eq(var_w("rs1",5),lw(0,5)),lo w64,
                mop(Some,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs1",5),@{theory}),
                       var("state",qTy)))),
            let'
              (tp[var("v0",@{typ VM_Mode}),var("s",qTy)],
               apply
                 (call
                    ("vmType",@{typ "state \<Rightarrow> (VM_Mode \<times> state)"},
                     call
                       ("mstatus.M_VM",(Word_Lib.mk_wordT 5),
                        call
                          ("MachineCSR.mstatus",@{typ mstatus},
                           apply
                             (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                              var("state",qTy)),@{theory}),@{theory}),@{theory}),var("state",qTy)),
               cs(var("v0",@{typ VM_Mode}),
                  [(lc("Sv32","VM_Mode",@{theory}),
                    apply
                      (call
                         ("write'TLB32",@{typ "state \<Rightarrow> state"},
                          call
                            ("flushTLB32",@{typ "4 word \<Rightarrow> (TLB32_Entry option)"},
                             tp[apply
                                  (call
                                     ("curAsid32",@{typ "state \<Rightarrow> 10 word"},lu,@{theory}),
                                   var("s",qTy)),
                                ite(mop(IsSome,var("v",@{typ "64 word option"})),
                                    mop(Some,
                                        ex(mop(ValOf,var("v",@{typ "64 word option"})),ln 31,ln 0,
                                           w32)),lo w32),
                                apply
                                  (const
                                     ("TLB32",
                                      @{typ
                                      "state \<Rightarrow>
                                       (4 word \<Rightarrow> (TLB32_Entry option))"},@{theory}),
                                   var("s",qTy))],@{theory}),@{theory}),var("s",qTy))),
                   (lc("Sv39","VM_Mode",@{theory}),
                    apply
                      (call
                         ("write'TLB39",@{typ "state \<Rightarrow> state"},
                          call
                            ("flushTLB39",@{typ "4 word \<Rightarrow> (TLB39_Entry option)"},
                             tp[apply
                                  (call
                                     ("curAsid64",@{typ "state \<Rightarrow> 26 word"},lu,@{theory}),
                                   var("s",qTy)),
                                ite(mop(IsSome,var("v",@{typ "64 word option"})),
                                    mop(Some,
                                        ex(mop(ValOf,var("v",@{typ "64 word option"})),ln 38,ln 0,
                                           (Word_Lib.mk_wordT 39))),lo (Word_Lib.mk_wordT 39)),
                                apply
                                  (const
                                     ("TLB39",
                                      @{typ
                                      "state \<Rightarrow>
                                       (4 word \<Rightarrow> (TLB39_Entry option))"},@{theory}),
                                   var("s",qTy))],@{theory}),@{theory}),var("s",qTy))),
                   (var_a @{typ VM_Mode},
                    mop(Snd,
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                              call
                                ("exception.INTERNAL_ERROR",@{typ exception},
                                 ls"sfence.vm: unimplemented VM model",@{theory}),@{theory}),
                           var("s",qTy))))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnknownInstruction",
   close
     (var("state",qTy),
      apply
        (call
           ("signalException",@{typ "state \<Rightarrow> state"},
            lc("E_Illegal_Instr","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FETCH_MISALIGNED",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         apply
           (call
              ("recordFetchException",@{typ "state \<Rightarrow> state"},var_w("addr",64),@{theory}),
            apply
              (call
                 ("signalAddressException",@{typ "state \<Rightarrow> state"},
                  tp[lc("E_Fetch_Misaligned","ExceptionType",@{theory}),var_w("addr",64)],@{theory}),
               var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FETCH_FAULT",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         apply
           (call
              ("recordFetchException",@{typ "state \<Rightarrow> state"},var_w("addr",64),@{theory}),
            apply
              (call
                 ("signalAddressException",@{typ "state \<Rightarrow> state"},
                  tp[lc("E_Fetch_Fault","ExceptionType",@{theory}),var_w("addr",64)],@{theory}),
               var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Run",
   close
     (var("v0",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("v0",@{typ instruction}),
            [(Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}),
              apply
                (const("dfn'UnknownInstruction",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.FENCE",@{typ instruction},
                 var("v170",@{typ "5 word \<times> 5 word \<times> 4 word \<times> 4 word"}),
                 @{theory}),var("state",qTy)),
             (call
                ("instruction.FENCE_I",@{typ instruction},
                 var("v171",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
              var("state",qTy)),
             (call("instruction.AMO",@{typ instruction},var("v1",@{typ AMO}),@{theory}),
              cs(var("v1",@{typ AMO}),
                 [(call
                     ("AMO.AMOADD_D",@{typ AMO},
                      var("v2",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOADD_D",@{typ "state \<Rightarrow> state"},
                         var("v2",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOADD_W",@{typ AMO},
                      var("v3",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOADD_W",@{typ "state \<Rightarrow> state"},
                         var("v3",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOAND_D",@{typ AMO},
                      var("v4",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOAND_D",@{typ "state \<Rightarrow> state"},
                         var("v4",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOAND_W",@{typ AMO},
                      var("v5",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOAND_W",@{typ "state \<Rightarrow> state"},
                         var("v5",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMAXU_D",@{typ AMO},
                      var("v6",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMAXU_D",@{typ "state \<Rightarrow> state"},
                         var("v6",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMAXU_W",@{typ AMO},
                      var("v7",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMAXU_W",@{typ "state \<Rightarrow> state"},
                         var("v7",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMAX_D",@{typ AMO},
                      var("v8",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMAX_D",@{typ "state \<Rightarrow> state"},
                         var("v8",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMAX_W",@{typ AMO},
                      var("v9",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMAX_W",@{typ "state \<Rightarrow> state"},
                         var("v9",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMINU_D",@{typ AMO},
                      var("v10",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMINU_D",@{typ "state \<Rightarrow> state"},
                         var("v10",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMINU_W",@{typ AMO},
                      var("v11",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMINU_W",@{typ "state \<Rightarrow> state"},
                         var("v11",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMIN_D",@{typ AMO},
                      var("v12",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMIN_D",@{typ "state \<Rightarrow> state"},
                         var("v12",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOMIN_W",@{typ AMO},
                      var("v13",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOMIN_W",@{typ "state \<Rightarrow> state"},
                         var("v13",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOOR_D",@{typ AMO},
                      var("v14",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOOR_D",@{typ "state \<Rightarrow> state"},
                         var("v14",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOOR_W",@{typ AMO},
                      var("v15",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOOR_W",@{typ "state \<Rightarrow> state"},
                         var("v15",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOSWAP_D",@{typ AMO},
                      var("v16",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOSWAP_D",@{typ "state \<Rightarrow> state"},
                         var("v16",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOSWAP_W",@{typ AMO},
                      var("v17",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOSWAP_W",@{typ "state \<Rightarrow> state"},
                         var("v17",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOXOR_D",@{typ AMO},
                      var("v18",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOXOR_D",@{typ "state \<Rightarrow> state"},
                         var("v18",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.AMOXOR_W",@{typ AMO},
                      var("v19",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AMOXOR_W",@{typ "state \<Rightarrow> state"},
                         var("v19",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.LR_D",@{typ AMO},
                      var("v20",@{typ "1 word \<times> 1 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LR_D",@{typ "state \<Rightarrow> state"},
                         var("v20",@{typ "1 word \<times> 1 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.LR_W",@{typ AMO},
                      var("v21",@{typ "1 word \<times> 1 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LR_W",@{typ "state \<Rightarrow> state"},
                         var("v21",@{typ "1 word \<times> 1 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.SC_D",@{typ AMO},
                      var("v22",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SC_D",@{typ "state \<Rightarrow> state"},
                         var("v22",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("AMO.SC_W",@{typ AMO},
                      var("v23",
                          @{typ
                          "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SC_W",@{typ "state \<Rightarrow> state"},
                         var("v23",
                             @{typ
                             "1 word \<times> 1 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.ArithI",@{typ instruction},var("v24",@{typ ArithI}),@{theory}),
              cs(var("v24",@{typ ArithI}),
                 [(call
                     ("ArithI.ADDI",@{typ ArithI},
                      var("v25",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDI",@{typ "state \<Rightarrow> state"},
                         var("v25",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ADDIW",@{typ ArithI},
                      var("v26",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDIW",@{typ "state \<Rightarrow> state"},
                         var("v26",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ANDI",@{typ ArithI},
                      var("v27",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ANDI",@{typ "state \<Rightarrow> state"},
                         var("v27",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.AUIPC",@{typ ArithI},var("v28",@{typ "5 word \<times> 20 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AUIPC",@{typ "state \<Rightarrow> state"},
                         var("v28",@{typ "5 word \<times> 20 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("ArithI.LUI",@{typ ArithI},var("v29",@{typ "5 word \<times> 20 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LUI",@{typ "state \<Rightarrow> state"},
                         var("v29",@{typ "5 word \<times> 20 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("ArithI.ORI",@{typ ArithI},
                      var("v30",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ORI",@{typ "state \<Rightarrow> state"},
                         var("v30",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTI",@{typ ArithI},
                      var("v31",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTI",@{typ "state \<Rightarrow> state"},
                         var("v31",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTIU",@{typ ArithI},
                      var("v32",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTIU",@{typ "state \<Rightarrow> state"},
                         var("v32",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.XORI",@{typ ArithI},
                      var("v33",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XORI",@{typ "state \<Rightarrow> state"},
                         var("v33",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.ArithR",@{typ instruction},var("v34",@{typ ArithR}),@{theory}),
              cs(var("v34",@{typ ArithR}),
                 [(call
                     ("ArithR.ADD",@{typ ArithR},
                      var("v35",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADD",@{typ "state \<Rightarrow> state"},
                         var("v35",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.ADDW",@{typ ArithR},
                      var("v36",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDW",@{typ "state \<Rightarrow> state"},
                         var("v36",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.AND",@{typ ArithR},
                      var("v37",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'AND",@{typ "state \<Rightarrow> state"},
                         var("v37",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.OR",@{typ ArithR},
                      var("v38",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'OR",@{typ "state \<Rightarrow> state"},
                         var("v38",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLT",@{typ ArithR},
                      var("v39",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLT",@{typ "state \<Rightarrow> state"},
                         var("v39",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLTU",@{typ ArithR},
                      var("v40",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTU",@{typ "state \<Rightarrow> state"},
                         var("v40",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUB",@{typ ArithR},
                      var("v41",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUB",@{typ "state \<Rightarrow> state"},
                         var("v41",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUBW",@{typ ArithR},
                      var("v42",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUBW",@{typ "state \<Rightarrow> state"},
                         var("v42",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.XOR",@{typ ArithR},
                      var("v43",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XOR",@{typ "state \<Rightarrow> state"},
                         var("v43",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Branch",@{typ instruction},var("v44",@{typ Branch}),@{theory}),
              cs(var("v44",@{typ Branch}),
                 [(call
                     ("Branch.BEQ",@{typ Branch},
                      var("v45",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BEQ",@{typ "state \<Rightarrow> state"},
                         var("v45",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BGE",@{typ Branch},
                      var("v46",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BGE",@{typ "state \<Rightarrow> state"},
                         var("v46",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BGEU",@{typ Branch},
                      var("v47",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BGEU",@{typ "state \<Rightarrow> state"},
                         var("v47",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BLT",@{typ Branch},
                      var("v48",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BLT",@{typ "state \<Rightarrow> state"},
                         var("v48",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BLTU",@{typ Branch},
                      var("v49",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BLTU",@{typ "state \<Rightarrow> state"},
                         var("v49",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BNE",@{typ Branch},
                      var("v50",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BNE",@{typ "state \<Rightarrow> state"},
                         var("v50",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.JAL",@{typ Branch},var("v51",@{typ "5 word \<times> 20 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'JAL",@{typ "state \<Rightarrow> state"},
                         var("v51",@{typ "5 word \<times> 20 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.JALR",@{typ Branch},
                      var("v52",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'JALR",@{typ "state \<Rightarrow> state"},
                         var("v52",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.FArith",@{typ instruction},var("v53",@{typ FArith}),@{theory}),
              cs(var("v53",@{typ FArith}),
                 [(call
                     ("FArith.FADD_D",@{typ FArith},
                      var("v54",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FADD_D",@{typ "state \<Rightarrow> state"},
                         var("v54",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FADD_S",@{typ FArith},
                      var("v55",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FADD_S",@{typ "state \<Rightarrow> state"},
                         var("v55",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FDIV_D",@{typ FArith},
                      var("v56",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FDIV_D",@{typ "state \<Rightarrow> state"},
                         var("v56",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FDIV_S",@{typ FArith},
                      var("v57",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FDIV_S",@{typ "state \<Rightarrow> state"},
                         var("v57",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FEQ_D",@{typ FArith},
                      var("v58",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FEQ_D",@{typ "state \<Rightarrow> state"},
                         var("v58",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FEQ_S",@{typ FArith},
                      var("v59",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FEQ_S",@{typ "state \<Rightarrow> state"},
                         var("v59",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FLE_D",@{typ FArith},
                      var("v60",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLE_D",@{typ "state \<Rightarrow> state"},
                         var("v60",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FLE_S",@{typ FArith},
                      var("v61",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLE_S",@{typ "state \<Rightarrow> state"},
                         var("v61",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FLT_D",@{typ FArith},
                      var("v62",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLT_D",@{typ "state \<Rightarrow> state"},
                         var("v62",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FLT_S",@{typ FArith},
                      var("v63",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLT_S",@{typ "state \<Rightarrow> state"},
                         var("v63",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FMADD_D",@{typ FArith},
                      var("v64",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMADD_D",@{typ "state \<Rightarrow> state"},
                         var("v64",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FMADD_S",@{typ FArith},
                      var("v65",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMADD_S",@{typ "state \<Rightarrow> state"},
                         var("v65",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FMAX_D",@{typ FArith},
                      var("v66",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FMAX_D",@{typ "state \<Rightarrow> state"},
                         var("v66",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FMAX_S",@{typ FArith},
                      var("v67",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FMAX_S",@{typ "state \<Rightarrow> state"},
                         var("v67",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FMIN_D",@{typ FArith},
                      var("v68",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FMIN_D",@{typ "state \<Rightarrow> state"},
                         var("v68",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FMIN_S",@{typ FArith},
                      var("v69",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FMIN_S",@{typ "state \<Rightarrow> state"},
                         var("v69",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FMSUB_D",@{typ FArith},
                      var("v70",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMSUB_D",@{typ "state \<Rightarrow> state"},
                         var("v70",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FMSUB_S",@{typ FArith},
                      var("v71",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMSUB_S",@{typ "state \<Rightarrow> state"},
                         var("v71",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FMUL_D",@{typ FArith},
                      var("v72",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMUL_D",@{typ "state \<Rightarrow> state"},
                         var("v72",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FMUL_S",@{typ FArith},
                      var("v73",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMUL_S",@{typ "state \<Rightarrow> state"},
                         var("v73",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FNMADD_D",@{typ FArith},
                      var("v74",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FNMADD_D",@{typ "state \<Rightarrow> state"},
                         var("v74",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FNMADD_S",@{typ FArith},
                      var("v75",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FNMADD_S",@{typ "state \<Rightarrow> state"},
                         var("v75",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FNMSUB_D",@{typ FArith},
                      var("v76",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FNMSUB_D",@{typ "state \<Rightarrow> state"},
                         var("v76",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FNMSUB_S",@{typ FArith},
                      var("v77",
                          @{typ
                          "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FNMSUB_S",@{typ "state \<Rightarrow> state"},
                         var("v77",
                             @{typ
                             "5 word \<times> 5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FSQRT_D",@{typ FArith},
                      var("v78",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSQRT_D",@{typ "state \<Rightarrow> state"},
                         var("v78",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FSQRT_S",@{typ FArith},
                      var("v79",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSQRT_S",@{typ "state \<Rightarrow> state"},
                         var("v79",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FArith.FSUB_D",@{typ FArith},
                      var("v80",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FSUB_D",@{typ "state \<Rightarrow> state"},
                         var("v80",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("FArith.FSUB_S",@{typ FArith},
                      var("v81",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FSUB_S",@{typ "state \<Rightarrow> state"},
                         var("v81",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 3 word"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.FConv",@{typ instruction},var("v82",@{typ FConv}),@{theory}),
              cs(var("v82",@{typ FConv}),
                 [(call
                     ("FConv.FCLASS_D",@{typ FConv},var("v83",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FCLASS_D",@{typ "state \<Rightarrow> state"},
                         var("v83",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FCLASS_S",@{typ FConv},var("v84",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FCLASS_S",@{typ "state \<Rightarrow> state"},
                         var("v84",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FCVT_D_L",@{typ FConv},
                      var("v85",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_D_L",@{typ "state \<Rightarrow> state"},
                         var("v85",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_D_LU",@{typ FConv},
                      var("v86",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_D_LU",@{typ "state \<Rightarrow> state"},
                         var("v86",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_D_S",@{typ FConv},
                      var("v87",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_D_S",@{typ "state \<Rightarrow> state"},
                         var("v87",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_D_W",@{typ FConv},
                      var("v88",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_D_W",@{typ "state \<Rightarrow> state"},
                         var("v88",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_D_WU",@{typ FConv},
                      var("v89",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_D_WU",@{typ "state \<Rightarrow> state"},
                         var("v89",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_LU_D",@{typ FConv},
                      var("v90",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_LU_D",@{typ "state \<Rightarrow> state"},
                         var("v90",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_LU_S",@{typ FConv},
                      var("v91",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_LU_S",@{typ "state \<Rightarrow> state"},
                         var("v91",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_L_D",@{typ FConv},
                      var("v92",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_L_D",@{typ "state \<Rightarrow> state"},
                         var("v92",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_L_S",@{typ FConv},
                      var("v93",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_L_S",@{typ "state \<Rightarrow> state"},
                         var("v93",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_S_D",@{typ FConv},
                      var("v94",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_S_D",@{typ "state \<Rightarrow> state"},
                         var("v94",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_S_L",@{typ FConv},
                      var("v95",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_S_L",@{typ "state \<Rightarrow> state"},
                         var("v95",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_S_LU",@{typ FConv},
                      var("v96",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_S_LU",@{typ "state \<Rightarrow> state"},
                         var("v96",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_S_W",@{typ FConv},
                      var("v97",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_S_W",@{typ "state \<Rightarrow> state"},
                         var("v97",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_S_WU",@{typ FConv},
                      var("v98",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_S_WU",@{typ "state \<Rightarrow> state"},
                         var("v98",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_WU_D",@{typ FConv},
                      var("v99",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_WU_D",@{typ "state \<Rightarrow> state"},
                         var("v99",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_WU_S",@{typ FConv},
                      var("v100",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_WU_S",@{typ "state \<Rightarrow> state"},
                         var("v100",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_W_D",@{typ FConv},
                      var("v101",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_W_D",@{typ "state \<Rightarrow> state"},
                         var("v101",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FCVT_W_S",@{typ FConv},
                      var("v102",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FCVT_W_S",@{typ "state \<Rightarrow> state"},
                         var("v102",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FMV_D_X",@{typ FConv},var("v103",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMV_D_X",@{typ "state \<Rightarrow> state"},
                         var("v103",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FMV_S_X",@{typ FConv},var("v104",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMV_S_X",@{typ "state \<Rightarrow> state"},
                         var("v104",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FMV_X_D",@{typ FConv},var("v105",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMV_X_D",@{typ "state \<Rightarrow> state"},
                         var("v105",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FMV_X_S",@{typ FConv},var("v106",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FMV_X_S",@{typ "state \<Rightarrow> state"},
                         var("v106",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("FConv.FSGNJN_D",@{typ FConv},
                      var("v107",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJN_D",@{typ "state \<Rightarrow> state"},
                         var("v107",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FSGNJN_S",@{typ FConv},
                      var("v108",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJN_S",@{typ "state \<Rightarrow> state"},
                         var("v108",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FSGNJX_D",@{typ FConv},
                      var("v109",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJX_D",@{typ "state \<Rightarrow> state"},
                         var("v109",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FSGNJX_S",@{typ FConv},
                      var("v110",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJX_S",@{typ "state \<Rightarrow> state"},
                         var("v110",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FSGNJ_D",@{typ FConv},
                      var("v111",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJ_D",@{typ "state \<Rightarrow> state"},
                         var("v111",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FConv.FSGNJ_S",@{typ FConv},
                      var("v112",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSGNJ_S",@{typ "state \<Rightarrow> state"},
                         var("v112",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.FPLoad",@{typ instruction},var("v113",@{typ FPLoad}),@{theory}),
              cs(var("v113",@{typ FPLoad}),
                 [(call
                     ("FPLoad.FLD",@{typ FPLoad},
                      var("v114",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLD",@{typ "state \<Rightarrow> state"},
                         var("v114",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FPLoad.FLW",@{typ FPLoad},
                      var("v115",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FLW",@{typ "state \<Rightarrow> state"},
                         var("v115",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.FPStore",@{typ instruction},var("v116",@{typ FPStore}),@{theory}),
              cs(var("v116",@{typ FPStore}),
                 [(call
                     ("FPStore.FSD",@{typ FPStore},
                      var("v117",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSD",@{typ "state \<Rightarrow> state"},
                         var("v117",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("FPStore.FSW",@{typ FPStore},
                      var("v118",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'FSW",@{typ "state \<Rightarrow> state"},
                         var("v118",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Internal",@{typ instruction},var("v119",@{typ Internal}),@{theory}),
              cs(var("v119",@{typ Internal}),
                 [(call("Internal.FETCH_FAULT",@{typ Internal},var_w("v120",64),@{theory}),
                   apply
                     (call
                        ("dfn'FETCH_FAULT",@{typ "state \<Rightarrow> state"},var_w("v120",64),
                         @{theory}),var("state",qTy))),
                  (call("Internal.FETCH_MISALIGNED",@{typ Internal},var_w("v121",64),@{theory}),
                   apply
                     (call
                        ("dfn'FETCH_MISALIGNED",@{typ "state \<Rightarrow> state"},var_w("v121",64),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.Load",@{typ instruction},var("v122",@{typ Load}),@{theory}),
              cs(var("v122",@{typ Load}),
                 [(call
                     ("Load.LB",@{typ Load},
                      var("v123",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LB",@{typ "state \<Rightarrow> state"},
                         var("v123",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LBU",@{typ Load},
                      var("v124",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LBU",@{typ "state \<Rightarrow> state"},
                         var("v124",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LD",@{typ Load},
                      var("v125",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LD",@{typ "state \<Rightarrow> state"},
                         var("v125",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LH",@{typ Load},
                      var("v126",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LH",@{typ "state \<Rightarrow> state"},
                         var("v126",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LHU",@{typ Load},
                      var("v127",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LHU",@{typ "state \<Rightarrow> state"},
                         var("v127",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LW",@{typ Load},
                      var("v128",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LW",@{typ "state \<Rightarrow> state"},
                         var("v128",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWU",@{typ Load},
                      var("v129",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWU",@{typ "state \<Rightarrow> state"},
                         var("v129",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.MulDiv",@{typ instruction},var("v130",@{typ MulDiv}),@{theory}),
              cs(var("v130",@{typ MulDiv}),
                 [(call
                     ("MulDiv.DIV",@{typ MulDiv},
                      var("v131",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIV",@{typ "state \<Rightarrow> state"},
                         var("v131",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.DIVU",@{typ MulDiv},
                      var("v132",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIVU",@{typ "state \<Rightarrow> state"},
                         var("v132",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.DIVUW",@{typ MulDiv},
                      var("v133",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIVUW",@{typ "state \<Rightarrow> state"},
                         var("v133",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.DIVW",@{typ MulDiv},
                      var("v134",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIVW",@{typ "state \<Rightarrow> state"},
                         var("v134",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.MUL",@{typ MulDiv},
                      var("v135",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MUL",@{typ "state \<Rightarrow> state"},
                         var("v135",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.MULH",@{typ MulDiv},
                      var("v136",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MULH",@{typ "state \<Rightarrow> state"},
                         var("v136",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.MULHSU",@{typ MulDiv},
                      var("v137",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MULHSU",@{typ "state \<Rightarrow> state"},
                         var("v137",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.MULHU",@{typ MulDiv},
                      var("v138",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MULHU",@{typ "state \<Rightarrow> state"},
                         var("v138",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.MULW",@{typ MulDiv},
                      var("v139",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MULW",@{typ "state \<Rightarrow> state"},
                         var("v139",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.REM",@{typ MulDiv},
                      var("v140",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'REM",@{typ "state \<Rightarrow> state"},
                         var("v140",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.REMU",@{typ MulDiv},
                      var("v141",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'REMU",@{typ "state \<Rightarrow> state"},
                         var("v141",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.REMUW",@{typ MulDiv},
                      var("v142",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'REMUW",@{typ "state \<Rightarrow> state"},
                         var("v142",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MulDiv.REMW",@{typ MulDiv},
                      var("v143",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'REMW",@{typ "state \<Rightarrow> state"},
                         var("v143",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Shift",@{typ instruction},var("v144",@{typ Shift}),@{theory}),
              cs(var("v144",@{typ Shift}),
                 [(call
                     ("Shift.SLL",@{typ Shift},
                      var("v145",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLL",@{typ "state \<Rightarrow> state"},
                         var("v145",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLLI",@{typ Shift},
                      var("v146",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLLI",@{typ "state \<Rightarrow> state"},
                         var("v146",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLLIW",@{typ Shift},
                      var("v147",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLLIW",@{typ "state \<Rightarrow> state"},
                         var("v147",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLLW",@{typ Shift},
                      var("v148",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLLW",@{typ "state \<Rightarrow> state"},
                         var("v148",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRA",@{typ Shift},
                      var("v149",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRA",@{typ "state \<Rightarrow> state"},
                         var("v149",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRAI",@{typ Shift},
                      var("v150",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRAI",@{typ "state \<Rightarrow> state"},
                         var("v150",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRAIW",@{typ Shift},
                      var("v151",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRAIW",@{typ "state \<Rightarrow> state"},
                         var("v151",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRAW",@{typ Shift},
                      var("v152",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRAW",@{typ "state \<Rightarrow> state"},
                         var("v152",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRL",@{typ Shift},
                      var("v153",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRL",@{typ "state \<Rightarrow> state"},
                         var("v153",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRLI",@{typ Shift},
                      var("v154",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRLI",@{typ "state \<Rightarrow> state"},
                         var("v154",@{typ "5 word \<times> 5 word \<times> 6 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRLIW",@{typ Shift},
                      var("v155",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRLIW",@{typ "state \<Rightarrow> state"},
                         var("v155",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRLW",@{typ Shift},
                      var("v156",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRLW",@{typ "state \<Rightarrow> state"},
                         var("v156",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Store",@{typ instruction},var("v157",@{typ Store}),@{theory}),
              cs(var("v157",@{typ Store}),
                 [(call
                     ("Store.SB",@{typ Store},
                      var("v158",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SB",@{typ "state \<Rightarrow> state"},
                         var("v158",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SD",@{typ Store},
                      var("v159",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SD",@{typ "state \<Rightarrow> state"},
                         var("v159",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SH",@{typ Store},
                      var("v160",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SH",@{typ "state \<Rightarrow> state"},
                         var("v160",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SW",@{typ Store},
                      var("v161",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SW",@{typ "state \<Rightarrow> state"},
                         var("v161",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.System",@{typ instruction},var("v162",@{typ System}),@{theory}),
              cs(var("v162",@{typ System}),
                 [(Term.Const(@{const_name "EBREAK"},@{typ System}),
                   apply
                     (const("dfn'EBREAK",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "ECALL"},@{typ System}),
                   apply
                     (const("dfn'ECALL",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "HRET"},@{typ System}),
                   apply
                     (const("dfn'HRET",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "MRET"},@{typ System}),
                   apply
                     (const("dfn'MRET",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "SRET"},@{typ System}),
                   apply
                     (const("dfn'SRET",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "URET"},@{typ System}),
                   apply
                     (const("dfn'URET",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "WFI"},@{typ System}),var("state",qTy)),
                  (call
                     ("System.CSRRC",@{typ System},
                      var("v163",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRC",@{typ "state \<Rightarrow> state"},
                         var("v163",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.CSRRCI",@{typ System},
                      var("v164",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRCI",@{typ "state \<Rightarrow> state"},
                         var("v164",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.CSRRS",@{typ System},
                      var("v165",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRS",@{typ "state \<Rightarrow> state"},
                         var("v165",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.CSRRSI",@{typ System},
                      var("v166",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRSI",@{typ "state \<Rightarrow> state"},
                         var("v166",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.CSRRW",@{typ System},
                      var("v167",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRW",@{typ "state \<Rightarrow> state"},
                         var("v167",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.CSRRWI",@{typ System},
                      var("v168",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CSRRWI",@{typ "state \<Rightarrow> state"},
                         var("v168",@{typ "5 word \<times> 5 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call("System.SFENCE_VM",@{typ System},var_w("v169",5),@{theory}),
                   apply
                     (call
                        ("dfn'SFENCE_VM",@{typ "state \<Rightarrow> state"},var_w("v169",5),
                         @{theory}),var("state",qTy)))],@{context}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Fetch",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply(const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("state",qTy)),
            ite(mop(Not,eq(ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                tp[call
                     ("FetchResult.F_Error",@{typ FetchResult},
                      call
                        ("instruction.Internal",@{typ instruction},
                         call("Internal.FETCH_MISALIGNED",@{typ Internal},var_w("v",64),@{theory}),
                         @{theory}),@{theory}),var("state",qTy)],
                let'
                  (tp[var("v0",@{typ "64 word option"}),var("s",qTy)],
                   apply
                     (call
                        ("translateAddr",
                         @{typ "state \<Rightarrow> ((64 word option) \<times> state)"},
                         tp[var_w("v",64),lc("Execute","accessType",@{theory}),
                            lc("Instruction","fetchType",@{theory})],@{theory}),var("state",qTy)),
                   cs(var("v0",@{typ "64 word option"}),
                      [(mop(Some,var_w("pPC",64)),
                        let'
                          (tp[var_w("v0",32),var("s",qTy)],
                           apply
                             (call
                                ("rawReadInst",
                                 @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("pPC",64),@{theory}),var("s",qTy)),
                           tp[call
                                ("FetchResult.F_Result",@{typ FetchResult},var_w("v0",32),@{theory}),
                              apply
                                (call
                                   ("setupDelta",@{typ "state \<Rightarrow> state"},
                                    tp[var_w("v",64),var_w("v0",32)],@{theory}),var("s",qTy))])),
                       (lo w64,
                        tp[call
                             ("FetchResult.F_Error",@{typ FetchResult},
                              call
                                ("instruction.Internal",@{typ instruction},
                                 call
                                   ("Internal.FETCH_FAULT",@{typ Internal},var_w("v",64),@{theory}),
                                 @{theory}),@{theory}),var("s",qTy)])],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("asImm12",
   close
     (tp[var_w("imm12",1),var_w("imm11",1),var_w("immhi",6),var_w("immlo",4)],
      cc[var_w("imm12",1),var_w("imm11",1),var_w("immhi",6),var_w("immlo",4)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("asImm20",
   close
     (tp[var_w("imm20",1),var_w("immhi",8),var_w("imm11",1),var_w("immlo",10)],
      cc[var_w("imm20",1),var_w("immhi",8),var_w("imm11",1),var_w("immlo",10)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("asSImm12",close(tp[var_w("immhi",7),var_w("immlo",5)],cc[var_w("immhi",7),var_w("immlo",5)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_LOAD",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'6"),
                 bop(And,mop(Not,var_b"b'5"),
                     bop(And,mop(Not,var_b"b'4"),
                         bop(And,mop(Not,var_b"b'3"),
                             bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))),
             itb([(bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LB",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LH",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LW",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,var_b"b'13",var_b"b'12")),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LD",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LBU",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LHU",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Load",@{typ instruction},
                      call
                        ("Load.LWU",@{typ Load},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_LOAD_FP",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'14"),
                 bop(And,var_b"b'13",
                     bop(And,mop(Not,var_b"b'6"),
                         bop(And,mop(Not,var_b"b'5"),
                             bop(And,mop(Not,var_b"b'4"),
                                 bop(And,mop(Not,var_b"b'3"),
                                     bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
             itb([(mop(Not,var_b"b'12"),
                   call
                     ("instruction.FPLoad",@{typ instruction},
                      call
                        ("FPLoad.FLW",@{typ FPLoad},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (var_b"b'12",
                   call
                     ("instruction.FPLoad",@{typ instruction},
                      call
                        ("FPLoad.FLD",@{typ FPLoad},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_MISC_MEM",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'14"),
                 bop(And,mop(Not,var_b"b'13"),
                     bop(And,mop(Not,var_b"b'6"),
                         bop(And,mop(Not,var_b"b'5"),
                             bop(And,mop(Not,var_b"b'4"),
                                 bop(And,var_b"b'3",
                                     bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
             itb([(mop(Not,var_b"b'12"),
                   call
                     ("instruction.FENCE",@{typ instruction},
                      tp[mop(Cast (Word_Lib.mk_wordT 5),
                             ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                         mop(Cast (Word_Lib.mk_wordT 5),
                             ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                         mop(Cast w4,ll[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24"]),
                         mop(Cast w4,ll[var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],@{theory})),
                  (var_b"b'12",
                   call
                     ("instruction.FENCE_I",@{typ instruction},
                      tp[mop(Cast (Word_Lib.mk_wordT 5),
                             ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                         mop(Cast (Word_Lib.mk_wordT 5),
                             ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                         mop(Cast (Word_Lib.mk_wordT 12),
                             ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                var_b"b'21",var_b"b'20"])],@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_OP_IMM",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'14",
               ite(bop(And,mop(Not,var_b"b'6"),
                       bop(And,mop(Not,var_b"b'5"),
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))),
                   itb([(bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")),
                         call
                           ("instruction.ArithI",@{typ instruction},
                            call
                              ("ArithI.XORI",@{typ ArithI},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 12),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",
                                         var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,mop(Not,var_b"b'30"),
                                 bop(And,mop(Not,var_b"b'29"),
                                     bop(And,mop(Not,var_b"b'28"),
                                         bop(And,mop(Not,var_b"b'27"),
                                             bop(And,mop(Not,var_b"b'26"),
                                                 bop(And,mop(Not,var_b"b'13"),var_b"b'12"))))))),
                         call
                           ("instruction.Shift",@{typ instruction},
                            call
                              ("Shift.SRLI",@{typ Shift},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                         var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,var_b"b'30",
                                 bop(And,mop(Not,var_b"b'29"),
                                     bop(And,mop(Not,var_b"b'28"),
                                         bop(And,mop(Not,var_b"b'27"),
                                             bop(And,mop(Not,var_b"b'26"),
                                                 bop(And,mop(Not,var_b"b'13"),var_b"b'12"))))))),
                         call
                           ("instruction.Shift",@{typ instruction},
                            call
                              ("Shift.SRAI",@{typ Shift},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                         var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                        (bop(And,var_b"b'13",mop(Not,var_b"b'12")),
                         call
                           ("instruction.ArithI",@{typ instruction},
                            call
                              ("ArithI.ORI",@{typ ArithI},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 12),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",
                                         var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'13",var_b"b'12"),
                         call
                           ("instruction.ArithI",@{typ instruction},
                            call
                              ("ArithI.ANDI",@{typ ArithI},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 12),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",
                                         var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'6"),
                   bop(And,mop(Not,var_b"b'5"),
                       bop(And,var_b"b'4",
                           bop(And,mop(Not,var_b"b'3"),
                               bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))),
               itb([(bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.ADDI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 12),
                                  ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                     var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                     var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'29"),
                                 bop(And,mop(Not,var_b"b'28"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'26"),
                                             bop(And,mop(Not,var_b"b'13"),var_b"b'12"))))))),
                     call
                       ("instruction.Shift",@{typ instruction},
                        call
                          ("Shift.SLLI",@{typ Shift},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 6),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                     var_b"b'20"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'13",mop(Not,var_b"b'12")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.SLTI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 12),
                                  ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                     var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                     var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'13",var_b"b'12"),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.SLTIU",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 12),
                                  ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                     var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                     var_b"b'21",var_b"b'20"])],@{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_OP_IMM_32",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'13"),
                 bop(And,mop(Not,var_b"b'6"),
                     bop(And,mop(Not,var_b"b'5"),
                         bop(And,var_b"b'4",
                             bop(And,var_b"b'3",
                                 bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                   call
                     ("instruction.ArithI",@{typ instruction},
                      call
                        ("ArithI.ADDIW",@{typ ArithI},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'14"),var_b"b'12")))))))),
                   call
                     ("instruction.Shift",@{typ instruction},
                      call
                        ("Shift.SLLIW",@{typ Shift},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                         @{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,var_b"b'14",var_b"b'12")))))))),
                   call
                     ("instruction.Shift",@{typ instruction},
                      call
                        ("Shift.SRLIW",@{typ Shift},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                         @{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,var_b"b'30",
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,var_b"b'14",var_b"b'12")))))))),
                   call
                     ("instruction.Shift",@{typ instruction},
                      call
                        ("Shift.SRAIW",@{typ Shift},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_STORE",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'14"),
                 bop(And,mop(Not,var_b"b'6"),
                     bop(And,var_b"b'5",
                         bop(And,mop(Not,var_b"b'4"),
                             bop(And,mop(Not,var_b"b'3"),
                                 bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")),
                   call
                     ("instruction.Store",@{typ instruction},
                      call
                        ("Store.SB",@{typ Store},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'13"),var_b"b'12"),
                   call
                     ("instruction.Store",@{typ instruction},
                      call
                        ("Store.SH",@{typ Store},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'13",mop(Not,var_b"b'12")),
                   call
                     ("instruction.Store",@{typ instruction},
                      call
                        ("Store.SW",@{typ Store},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'13",var_b"b'12"),
                   call
                     ("instruction.Store",@{typ instruction},
                      call
                        ("Store.SD",@{typ Store},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_STORE_FP",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'14"),
                 bop(And,var_b"b'13",
                     bop(And,mop(Not,var_b"b'6"),
                         bop(And,var_b"b'5",
                             bop(And,mop(Not,var_b"b'4"),
                                 bop(And,mop(Not,var_b"b'3"),
                                     bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
             itb([(mop(Not,var_b"b'12"),
                   call
                     ("instruction.FPStore",@{typ instruction},
                      call
                        ("FPStore.FSW",@{typ FPStore},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory})),
                  (var_b"b'12",
                   call
                     ("instruction.FPStore",@{typ instruction},
                      call
                        ("FPStore.FSD",@{typ FPStore},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asSImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast (Word_Lib.mk_wordT 7),
                                      ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                         var_b"b'27",var_b"b'26",var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"])],
                               @{theory})],@{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_AMO",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'12",
               itb([(var_b"b'31",
                     ite(bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'13",
                                         bop(And,mop(Not,var_b"b'6"),
                                             bop(And,var_b"b'5",
                                                 bop(And,mop(Not,var_b"b'4"),
                                                     bop(And,var_b"b'3",
                                                         bop(And,var_b"b'2",
                                                             bop(And,var_b"b'1",var_b"b'0")))))))))),
                         itb([(bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'29")),
                               call
                                 ("instruction.AMO",@{typ instruction},
                                  call
                                    ("AMO.AMOMIN_D",@{typ AMO},
                                     tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'30"),var_b"b'29"),
                               call
                                 ("instruction.AMO",@{typ instruction},
                                  call
                                    ("AMO.AMOMAX_D",@{typ AMO},
                                     tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'30",mop(Not,var_b"b'29")),
                               call
                                 ("instruction.AMO",@{typ instruction},
                                  call
                                    ("AMO.AMOMINU_D",@{typ AMO},
                                     tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'30",var_b"b'29"),
                               call
                                 ("instruction.AMO",@{typ instruction},
                                  call
                                    ("AMO.AMOMAXU_D",@{typ AMO},
                                     tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory}))],
                             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'14"),
                         bop(And,var_b"b'13",
                             bop(And,mop(Not,var_b"b'6"),
                                 bop(And,var_b"b'5",
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
                     itb([(bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'28",
                                       bop(And,mop(Not,var_b"b'27"),
                                           bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,mop(Not,var_b"b'21"),
                                                           mop(Not,var_b"b'20"))))))))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.LR_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),bop(And,var_b"b'28",var_b"b'27"))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.SC_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'28"),var_b"b'27"))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.AMOSWAP_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.AMOADD_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,var_b"b'29",
                                   bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.AMOXOR_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,var_b"b'29",
                                   bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.AMOAND_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                           call
                             ("instruction.AMO",@{typ instruction},
                              call
                                ("AMO.AMOOR_D",@{typ AMO},
                                 tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory}))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (var_b"b'31",
               ite(bop(And,mop(Not,var_b"b'28"),
                       bop(And,mop(Not,var_b"b'27"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,var_b"b'13",
                                   bop(And,mop(Not,var_b"b'6"),
                                       bop(And,var_b"b'5",
                                           bop(And,mop(Not,var_b"b'4"),
                                               bop(And,var_b"b'3",
                                                   bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))))),
                   itb([(bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'29")),
                         call
                           ("instruction.AMO",@{typ instruction},
                            call
                              ("AMO.AMOMIN_W",@{typ AMO},
                               tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'30"),var_b"b'29"),
                         call
                           ("instruction.AMO",@{typ instruction},
                            call
                              ("AMO.AMOMAX_W",@{typ AMO},
                               tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'30",mop(Not,var_b"b'29")),
                         call
                           ("instruction.AMO",@{typ instruction},
                            call
                              ("AMO.AMOMINU_W",@{typ AMO},
                               tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'30",var_b"b'29"),
                         call
                           ("instruction.AMO",@{typ instruction},
                            call
                              ("AMO.AMOMAXU_W",@{typ AMO},
                               tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'14"),
                   bop(And,var_b"b'13",
                       bop(And,mop(Not,var_b"b'6"),
                           bop(And,var_b"b'5",
                               bop(And,mop(Not,var_b"b'4"),
                                   bop(And,var_b"b'3",
                                       bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
               itb([(bop(And,mop(Not,var_b"b'30"),
                         bop(And,mop(Not,var_b"b'29"),
                             bop(And,var_b"b'28",
                                 bop(And,mop(Not,var_b"b'27"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))))))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.LR_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),
                         bop(And,mop(Not,var_b"b'29"),bop(And,var_b"b'28",var_b"b'27"))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.SC_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),
                         bop(And,mop(Not,var_b"b'29"),bop(And,mop(Not,var_b"b'28"),var_b"b'27"))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.AMOSWAP_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),
                         bop(And,mop(Not,var_b"b'29"),
                             bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.AMOADD_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),
                         bop(And,var_b"b'29",bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.AMOXOR_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'30",
                         bop(And,var_b"b'29",bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.AMOAND_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'30",
                         bop(And,mop(Not,var_b"b'29"),
                             bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")))),
                     call
                       ("instruction.AMO",@{typ instruction},
                        call
                          ("AMO.AMOOR_W",@{typ AMO},
                           tp[mop(Cast w1,ll[var_b"b'26"]),mop(Cast w1,ll[var_b"b'25"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_OP",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'14",
               itb([(var_b"b'12",
                     ite(bop(And,mop(Not,var_b"b'31"),
                             bop(And,mop(Not,var_b"b'29"),
                                 bop(And,mop(Not,var_b"b'28"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'26"),
                                             bop(And,mop(Not,var_b"b'6"),
                                                 bop(And,var_b"b'5",
                                                     bop(And,var_b"b'4",
                                                         bop(And,mop(Not,var_b"b'3"),
                                                             bop(And,mop(Not,var_b"b'2"),
                                                                 bop(And,var_b"b'1",var_b"b'0"))))))))))),
                         itb([(bop(And,mop(Not,var_b"b'30"),
                                   bop(And,mop(Not,var_b"b'25"),mop(Not,var_b"b'13"))),
                               call
                                 ("instruction.Shift",@{typ instruction},
                                  call
                                    ("Shift.SRL",@{typ Shift},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'30",
                                   bop(And,mop(Not,var_b"b'25"),mop(Not,var_b"b'13"))),
                               call
                                 ("instruction.Shift",@{typ instruction},
                                  call
                                    ("Shift.SRA",@{typ Shift},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'30"),
                                   bop(And,mop(Not,var_b"b'25"),var_b"b'13")),
                               call
                                 ("instruction.ArithR",@{typ instruction},
                                  call
                                    ("ArithR.AND",@{typ ArithR},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'30"),
                                   bop(And,var_b"b'25",mop(Not,var_b"b'13"))),
                               call
                                 ("instruction.MulDiv",@{typ instruction},
                                  call
                                    ("MulDiv.DIVU",@{typ MulDiv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'25",var_b"b'13")),
                               call
                                 ("instruction.MulDiv",@{typ instruction},
                                  call
                                    ("MulDiv.REMU",@{typ MulDiv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory}))],
                             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'29"),
                                 bop(And,mop(Not,var_b"b'28"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'26"),
                                             bop(And,mop(Not,var_b"b'6"),
                                                 bop(And,var_b"b'5",
                                                     bop(And,var_b"b'4",
                                                         bop(And,mop(Not,var_b"b'3"),
                                                             bop(And,mop(Not,var_b"b'2"),
                                                                 bop(And,var_b"b'1",var_b"b'0")))))))))))),
                     itb([(bop(And,mop(Not,var_b"b'25"),mop(Not,var_b"b'13")),
                           call
                             ("instruction.ArithR",@{typ instruction},
                              call
                                ("ArithR.XOR",@{typ ArithR},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'25"),var_b"b'13"),
                           call
                             ("instruction.ArithR",@{typ instruction},
                              call
                                ("ArithR.OR",@{typ ArithR},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'25",mop(Not,var_b"b'13")),
                           call
                             ("instruction.MulDiv",@{typ instruction},
                              call
                                ("MulDiv.DIV",@{typ MulDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'25",var_b"b'13"),
                           call
                             ("instruction.MulDiv",@{typ instruction},
                              call
                                ("MulDiv.REM",@{typ MulDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"])],@{theory}),@{theory}))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (var_b"b'25",
               ite(bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'6"),
                                               bop(And,var_b"b'5",
                                                   bop(And,var_b"b'4",
                                                       bop(And,mop(Not,var_b"b'3"),
                                                           bop(And,mop(Not,var_b"b'2"),
                                                               bop(And,var_b"b'1",var_b"b'0")))))))))))),
                   itb([(bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.MUL",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'13"),var_b"b'12"),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.MULH",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'13",mop(Not,var_b"b'12")),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.MULHSU",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'13",var_b"b'12"),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.MULHU",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'31"),
                   bop(And,mop(Not,var_b"b'29"),
                       bop(And,mop(Not,var_b"b'28"),
                           bop(And,mop(Not,var_b"b'27"),
                               bop(And,mop(Not,var_b"b'26"),
                                   bop(And,mop(Not,var_b"b'6"),
                                       bop(And,var_b"b'5",
                                           bop(And,var_b"b'4",
                                               bop(And,mop(Not,var_b"b'3"),
                                                   bop(And,mop(Not,var_b"b'2"),
                                                       bop(And,var_b"b'1",var_b"b'0"))))))))))),
               itb([(bop(And,mop(Not,var_b"b'30"),bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.ADD",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'30",bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.SUB",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                     call
                       ("instruction.Shift",@{typ instruction},
                        call
                          ("Shift.SLL",@{typ Shift},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.SLT",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'13",var_b"b'12")),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.SLTU",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_OP_32",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'25",
               ite(bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'6"),
                                               bop(And,var_b"b'5",
                                                   bop(And,var_b"b'4",
                                                       bop(And,var_b"b'3",
                                                           bop(And,mop(Not,var_b"b'2"),
                                                               bop(And,var_b"b'1",var_b"b'0")))))))))))),
                   itb([(bop(And,mop(Not,var_b"b'14"),
                             bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.MULW",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.DIVW",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.DIVUW",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'14",bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.REMW",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'14",bop(And,var_b"b'13",var_b"b'12")),
                         call
                           ("instruction.MulDiv",@{typ instruction},
                            call
                              ("MulDiv.REMUW",@{typ MulDiv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'31"),
                   bop(And,mop(Not,var_b"b'29"),
                       bop(And,mop(Not,var_b"b'28"),
                           bop(And,mop(Not,var_b"b'27"),
                               bop(And,mop(Not,var_b"b'26"),
                                   bop(And,mop(Not,var_b"b'13"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               itb([(bop(And,mop(Not,var_b"b'30"),bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12"))),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.ADDW",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'30",bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12"))),
                     call
                       ("instruction.ArithR",@{typ instruction},
                        call
                          ("ArithR.SUBW",@{typ ArithR},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),bop(And,mop(Not,var_b"b'14"),var_b"b'12")),
                     call
                       ("instruction.Shift",@{typ instruction},
                        call
                          ("Shift.SLLW",@{typ Shift},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'14",var_b"b'12")),
                     call
                       ("instruction.Shift",@{typ instruction},
                        call
                          ("Shift.SRLW",@{typ Shift},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'30",bop(And,var_b"b'14",var_b"b'12")),
                     call
                       ("instruction.Shift",@{typ instruction},
                        call
                          ("Shift.SRAW",@{typ Shift},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                           @{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_MADD",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'26"),
                 bop(And,var_b"b'6",
                     bop(And,mop(Not,var_b"b'5"),
                         bop(And,mop(Not,var_b"b'4"),
                             bop(And,mop(Not,var_b"b'3"),
                                 bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(mop(Not,var_b"b'25"),
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FMADD_S",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory})),
                  (var_b"b'25",
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FMADD_D",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_MSUB",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'26"),
                 bop(And,var_b"b'6",
                     bop(And,mop(Not,var_b"b'5"),
                         bop(And,mop(Not,var_b"b'4"),
                             bop(And,mop(Not,var_b"b'3"),
                                 bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(mop(Not,var_b"b'25"),
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FMSUB_S",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory})),
                  (var_b"b'25",
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FMSUB_D",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_NMSUB",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'26"),
                 bop(And,var_b"b'6",
                     bop(And,mop(Not,var_b"b'5"),
                         bop(And,mop(Not,var_b"b'4"),
                             bop(And,var_b"b'3",
                                 bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(mop(Not,var_b"b'25"),
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FNMSUB_S",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory})),
                  (var_b"b'25",
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FNMSUB_D",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_NMADD",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,mop(Not,var_b"b'26"),
                 bop(And,var_b"b'6",
                     bop(And,mop(Not,var_b"b'5"),
                         bop(And,mop(Not,var_b"b'4"),
                             bop(And,var_b"b'3",bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0"))))))),
             itb([(mop(Not,var_b"b'25"),
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FNMADD_S",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory})),
                  (var_b"b'25",
                   call
                     ("instruction.FArith",@{typ instruction},
                      call
                        ("FArith.FNMADD_D",@{typ FArith},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27"]),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_OP_FP",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'25",
               itb([(var_b"b'30",
                     itb([(var_b"b'28",
                           ite(bop(And,mop(Not,var_b"b'26"),
                                   bop(And,mop(Not,var_b"b'24"),
                                       bop(And,mop(Not,var_b"b'23"),
                                           bop(And,mop(Not,var_b"b'22"),
                                               bop(And,var_b"b'6",
                                                   bop(And,mop(Not,var_b"b'5"),
                                                       bop(And,var_b"b'4",
                                                           bop(And,mop(Not,var_b"b'3"),
                                                               bop(And,mop(Not,var_b"b'2"),
                                                                   bop(And,var_b"b'1",var_b"b'0")))))))))),
                               itb([(bop(And,mop(Not,var_b"b'31"),
                                         bop(And,mop(Not,var_b"b'29"),
                                             bop(And,var_b"b'27",
                                                 bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                                     call
                                       ("instruction.FArith",@{typ instruction},
                                        call
                                          ("FArith.FSQRT_D",@{typ FArith},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"]),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                                           @{theory}),@{theory})),
                                    (bop(And,var_b"b'31",
                                         bop(And,mop(Not,var_b"b'29"),
                                             bop(And,mop(Not,var_b"b'27"),
                                                 bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                                     call
                                       ("instruction.FConv",@{typ instruction},
                                        call
                                          ("FConv.FCVT_D_W",@{typ FConv},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"]),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                                           @{theory}),@{theory})),
                                    (bop(And,var_b"b'31",
                                         bop(And,mop(Not,var_b"b'29"),
                                             bop(And,mop(Not,var_b"b'27"),
                                                 bop(And,mop(Not,var_b"b'21"),var_b"b'20")))),
                                     call
                                       ("instruction.FConv",@{typ instruction},
                                        call
                                          ("FConv.FCVT_D_WU",@{typ FConv},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"]),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                                           @{theory}),@{theory})),
                                    (bop(And,var_b"b'31",
                                         bop(And,mop(Not,var_b"b'29"),
                                             bop(And,mop(Not,var_b"b'27"),
                                                 bop(And,var_b"b'21",mop(Not,var_b"b'20"))))),
                                     call
                                       ("instruction.FConv",@{typ instruction},
                                        call
                                          ("FConv.FCVT_D_L",@{typ FConv},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"]),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                                           @{theory}),@{theory})),
                                    (bop(And,var_b"b'31",
                                         bop(And,mop(Not,var_b"b'29"),
                                             bop(And,mop(Not,var_b"b'27"),
                                                 bop(And,var_b"b'21",var_b"b'20")))),
                                     call
                                       ("instruction.FConv",@{typ instruction},
                                        call
                                          ("FConv.FCVT_D_LU",@{typ FConv},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"]),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                                           @{theory}),@{theory})),
                                    (bop(And,var_b"b'31",
                                         bop(And,var_b"b'29",
                                             bop(And,mop(Not,var_b"b'27"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'14"),
                                                             bop(And,mop(Not,var_b"b'13"),
                                                                 mop(Not,var_b"b'12")))))))),
                                     call
                                       ("instruction.FConv",@{typ instruction},
                                        call
                                          ("FConv.FMV_D_X",@{typ FConv},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                     var_b"b'7"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15"])],@{theory}),@{theory}))],
                                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                               Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                          (bop(And,mop(Not,var_b"b'27"),
                               bop(And,mop(Not,var_b"b'26"),
                                   bop(And,mop(Not,var_b"b'24"),
                                       bop(And,mop(Not,var_b"b'23"),
                                           bop(And,mop(Not,var_b"b'22"),
                                               bop(And,var_b"b'6",
                                                   bop(And,mop(Not,var_b"b'5"),
                                                       bop(And,var_b"b'4",
                                                           bop(And,mop(Not,var_b"b'3"),
                                                               bop(And,mop(Not,var_b"b'2"),
                                                                   bop(And,var_b"b'1",var_b"b'0"))))))))))),
                           itb([(bop(And,var_b"b'31",
                                     bop(And,mop(Not,var_b"b'29"),
                                         bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCVT_W_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"]),
                                          mop(Cast (Word_Lib.mk_wordT 3),
                                              ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                    @{theory})),
                                (bop(And,var_b"b'31",
                                     bop(And,mop(Not,var_b"b'29"),
                                         bop(And,mop(Not,var_b"b'21"),var_b"b'20"))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCVT_WU_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"]),
                                          mop(Cast (Word_Lib.mk_wordT 3),
                                              ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                    @{theory})),
                                (bop(And,var_b"b'31",
                                     bop(And,var_b"b'29",
                                         bop(And,mop(Not,var_b"b'21"),
                                             bop(And,mop(Not,var_b"b'20"),
                                                 bop(And,mop(Not,var_b"b'14"),
                                                     bop(And,mop(Not,var_b"b'13"),var_b"b'12")))))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCLASS_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"])],@{theory}),@{theory})),
                                (bop(And,var_b"b'31",
                                     bop(And,mop(Not,var_b"b'29"),
                                         bop(And,var_b"b'21",mop(Not,var_b"b'20")))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCVT_L_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"]),
                                          mop(Cast (Word_Lib.mk_wordT 3),
                                              ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                    @{theory})),
                                (bop(And,var_b"b'31",
                                     bop(And,mop(Not,var_b"b'29"),bop(And,var_b"b'21",var_b"b'20"))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCVT_LU_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"]),
                                          mop(Cast (Word_Lib.mk_wordT 3),
                                              ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                    @{theory})),
                                (bop(And,var_b"b'31",
                                     bop(And,var_b"b'29",
                                         bop(And,mop(Not,var_b"b'21"),
                                             bop(And,mop(Not,var_b"b'20"),
                                                 bop(And,mop(Not,var_b"b'14"),
                                                     bop(And,mop(Not,var_b"b'13"),
                                                         mop(Not,var_b"b'12"))))))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FMV_X_D",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"])],@{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'29"),
                                         bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))),
                                 call
                                   ("instruction.FConv",@{typ instruction},
                                    call
                                      ("FConv.FCVT_D_S",@{typ FConv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                                 var_b"b'15"]),
                                          mop(Cast (Word_Lib.mk_wordT 3),
                                              ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                    @{theory}))],
                               Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (var_b"b'29",
                     ite(bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'26"),
                                 bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'6",
                                         bop(And,mop(Not,var_b"b'5"),
                                             bop(And,var_b"b'4",
                                                 bop(And,mop(Not,var_b"b'3"),
                                                     bop(And,mop(Not,var_b"b'2"),
                                                         bop(And,var_b"b'1",var_b"b'0"))))))))),
                         itb([(bop(And,mop(Not,var_b"b'31"),
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FMIN_D",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'31"),
                                   bop(And,var_b"b'27",bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FMAX_D",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,var_b"b'13",mop(Not,var_b"b'12")))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FEQ_D",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FLT_D",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FLE_D",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'31"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FSGNJ_D",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'31"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FSGNJN_D",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'31"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,var_b"b'13",mop(Not,var_b"b'12")))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FSGNJX_D",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                               var_b"b'20"])],@{theory}),@{theory}))],
                             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'26"),
                             bop(And,var_b"b'6",
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",var_b"b'0")))))))),
                     itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                           call
                             ("instruction.FArith",@{typ instruction},
                              call
                                ("FArith.FADD_D",@{typ FArith},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                           call
                             ("instruction.FArith",@{typ instruction},
                              call
                                ("FArith.FSUB_D",@{typ FArith},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                           call
                             ("instruction.FArith",@{typ instruction},
                              call
                                ("FArith.FMUL_D",@{typ FArith},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,var_b"b'28",var_b"b'27"),
                           call
                             ("instruction.FArith",@{typ instruction},
                              call
                                ("FArith.FDIV_D",@{typ FArith},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                           var_b"b'20"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory}))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (var_b"b'30",
               itb([(var_b"b'28",
                     ite(bop(And,mop(Not,var_b"b'26"),
                             bop(And,mop(Not,var_b"b'24"),
                                 bop(And,mop(Not,var_b"b'23"),
                                     bop(And,mop(Not,var_b"b'22"),
                                         bop(And,var_b"b'6",
                                             bop(And,mop(Not,var_b"b'5"),
                                                 bop(And,var_b"b'4",
                                                     bop(And,mop(Not,var_b"b'3"),
                                                         bop(And,mop(Not,var_b"b'2"),
                                                             bop(And,var_b"b'1",var_b"b'0")))))))))),
                         itb([(bop(And,mop(Not,var_b"b'31"),
                                   bop(And,mop(Not,var_b"b'29"),
                                       bop(And,var_b"b'27",
                                           bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                               call
                                 ("instruction.FArith",@{typ instruction},
                                  call
                                    ("FArith.FSQRT_S",@{typ FArith},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                  @{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'29"),
                                       bop(And,mop(Not,var_b"b'27"),
                                           bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FCVT_S_W",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                  @{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'29"),
                                       bop(And,mop(Not,var_b"b'27"),
                                           bop(And,mop(Not,var_b"b'21"),var_b"b'20")))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FCVT_S_WU",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                  @{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,var_b"b'29",
                                       bop(And,mop(Not,var_b"b'27"),
                                           bop(And,mop(Not,var_b"b'21"),
                                               bop(And,mop(Not,var_b"b'20"),
                                                   bop(And,mop(Not,var_b"b'14"),
                                                       bop(And,mop(Not,var_b"b'13"),
                                                           mop(Not,var_b"b'12")))))))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FMV_S_X",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"])],@{theory}),@{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'29"),
                                       bop(And,mop(Not,var_b"b'27"),
                                           bop(And,var_b"b'21",mop(Not,var_b"b'20"))))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FCVT_S_L",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                  @{theory})),
                              (bop(And,var_b"b'31",
                                   bop(And,mop(Not,var_b"b'29"),
                                       bop(And,mop(Not,var_b"b'27"),bop(And,var_b"b'21",var_b"b'20")))),
                               call
                                 ("instruction.FConv",@{typ instruction},
                                  call
                                    ("FConv.FCVT_S_LU",@{typ FConv},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                                  @{theory}))],
                             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'27"),
                         bop(And,mop(Not,var_b"b'26"),
                             bop(And,mop(Not,var_b"b'24"),
                                 bop(And,mop(Not,var_b"b'23"),
                                     bop(And,mop(Not,var_b"b'22"),
                                         bop(And,var_b"b'6",
                                             bop(And,mop(Not,var_b"b'5"),
                                                 bop(And,var_b"b'4",
                                                     bop(And,mop(Not,var_b"b'3"),
                                                         bop(And,mop(Not,var_b"b'2"),
                                                             bop(And,var_b"b'1",var_b"b'0"))))))))))),
                     itb([(bop(And,var_b"b'31",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCVT_W_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,var_b"b'31",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'21"),var_b"b'20"))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCVT_WU_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,var_b"b'31",
                               bop(And,var_b"b'29",
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))))))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FMV_X_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",
                               bop(And,var_b"b'29",
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),var_b"b'12")))))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCLASS_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'21",mop(Not,var_b"b'20")))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCVT_L_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,var_b"b'31",
                               bop(And,mop(Not,var_b"b'29"),bop(And,var_b"b'21",var_b"b'20"))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCVT_LU_S",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,mop(Not,var_b"b'21"),var_b"b'20"))),
                           call
                             ("instruction.FConv",@{typ instruction},
                              call
                                ("FConv.FCVT_S_D",@{typ FConv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                           var_b"b'15"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"])],@{theory}),
                              @{theory}))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (var_b"b'29",
               ite(bop(And,mop(Not,var_b"b'28"),
                       bop(And,mop(Not,var_b"b'26"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,var_b"b'6",
                                   bop(And,mop(Not,var_b"b'5"),
                                       bop(And,var_b"b'4",
                                           bop(And,mop(Not,var_b"b'3"),
                                               bop(And,mop(Not,var_b"b'2"),
                                                   bop(And,var_b"b'1",var_b"b'0"))))))))),
                   itb([(bop(And,mop(Not,var_b"b'31"),
                             bop(And,var_b"b'27",bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                         call
                           ("instruction.FArith",@{typ instruction},
                            call
                              ("FArith.FMIN_S",@{typ FArith},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,var_b"b'27",bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                         call
                           ("instruction.FArith",@{typ instruction},
                            call
                              ("FArith.FMAX_S",@{typ FArith},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'31",
                             bop(And,mop(Not,var_b"b'27"),bop(And,var_b"b'13",mop(Not,var_b"b'12")))),
                         call
                           ("instruction.FArith",@{typ instruction},
                            call
                              ("FArith.FEQ_S",@{typ FArith},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'31",
                             bop(And,mop(Not,var_b"b'27"),bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                         call
                           ("instruction.FArith",@{typ instruction},
                            call
                              ("FArith.FLT_S",@{typ FArith},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,var_b"b'31",
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                         call
                           ("instruction.FArith",@{typ instruction},
                            call
                              ("FArith.FLE_S",@{typ FArith},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12")))),
                         call
                           ("instruction.FConv",@{typ instruction},
                            call
                              ("FConv.FSGNJ_S",@{typ FConv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,mop(Not,var_b"b'27"),bop(And,mop(Not,var_b"b'13"),var_b"b'12"))),
                         call
                           ("instruction.FConv",@{typ instruction},
                            call
                              ("FConv.FSGNJN_S",@{typ FConv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory})),
                        (bop(And,mop(Not,var_b"b'31"),
                             bop(And,mop(Not,var_b"b'27"),bop(And,var_b"b'13",mop(Not,var_b"b'12")))),
                         call
                           ("instruction.FConv",@{typ instruction},
                            call
                              ("FConv.FSGNJX_S",@{typ FConv},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                               @{theory}),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'31"),
                   bop(And,mop(Not,var_b"b'26"),
                       bop(And,var_b"b'6",
                           bop(And,mop(Not,var_b"b'5"),
                               bop(And,var_b"b'4",
                                   bop(And,mop(Not,var_b"b'3"),
                                       bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))))),
               itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                     call
                       ("instruction.FArith",@{typ instruction},
                        call
                          ("FArith.FADD_S",@{typ FArith},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("instruction.FArith",@{typ instruction},
                        call
                          ("FArith.FSUB_S",@{typ FArith},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.FArith",@{typ instruction},
                        call
                          ("FArith.FMUL_S",@{typ FArith},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'28",var_b"b'27"),
                     call
                       ("instruction.FArith",@{typ instruction},
                        call
                          ("FArith.FDIV_S",@{typ FArith},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'14",var_b"b'13",var_b"b'12"])],
                           @{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_BRANCH",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,var_b"b'6",
                 bop(And,var_b"b'5",
                     bop(And,mop(Not,var_b"b'4"),
                         bop(And,mop(Not,var_b"b'3"),
                             bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))),
             itb([(bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BEQ",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BNE",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BLT",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BGE",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BLTU",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,var_b"b'13",var_b"b'12")),
                   call
                     ("instruction.Branch",@{typ instruction},
                      call
                        ("Branch.BGEU",@{typ Branch},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"]),
                            call
                              ("asImm12",(Word_Lib.mk_wordT 12),
                               tp[mop(Cast w1,ll[var_b"b'31"]),mop(Cast w1,ll[var_b"b'7"]),
                                  mop(Cast (Word_Lib.mk_wordT 6),
                                      ll[var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                         var_b"b'26",var_b"b'25"]),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"])],
                               @{theory})],@{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("decode_SYSTEM",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         ite(bop(And,var_b"b'6",
                 bop(And,var_b"b'5",
                     bop(And,var_b"b'4",
                         bop(And,mop(Not,var_b"b'3"),
                             bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0")))))),
             itb([(bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRW",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRS",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'14"),bop(And,var_b"b'13",var_b"b'12")),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRC",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'13"),var_b"b'12")),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRWI",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,var_b"b'13",mop(Not,var_b"b'12"))),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRSI",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,var_b"b'14",bop(And,var_b"b'13",var_b"b'12")),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.CSRRCI",@{typ System},
                         tp[mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                            mop(Cast (Word_Lib.mk_wordT 12),
                                ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                   var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                   var_b"b'21",var_b"b'20"])],@{theory}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,mop(Not,var_b"b'21"),
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "ECALL"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,mop(Not,var_b"b'21"),
                                                               bop(And,var_b"b'20",
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "EBREAK"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,var_b"b'21",
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "URET"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,var_b"b'21",
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "SRET"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,var_b"b'29",
                               bop(And,mop(Not,var_b"b'28"),
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,var_b"b'21",
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "HRET"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,var_b"b'29",
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,mop(Not,var_b"b'22"),
                                                           bop(And,var_b"b'21",
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "MRET"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,var_b"b'22",
                                                           bop(And,mop(Not,var_b"b'21"),
                                                               bop(And,var_b"b'20",
                                                                   bop(And,mop(Not,var_b"b'19"),
                                                                       bop(And,mop(Not,var_b"b'18"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'17"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'16"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'15"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'14"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'13"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'12"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'11"),
                                                                                                       bop(And,
                                                                                                           mop(Not,
                                                                                                               var_b"b'10"),
                                                                                                           bop(And,
                                                                                                               mop(Not,
                                                                                                                   var_b"b'9"),
                                                                                                               bop(And,
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'8"),
                                                                                                                   mop(Not,
                                                                                                                       var_b"b'7"))))))))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      Term.Const(@{const_name "WFI"},@{typ System}),@{theory})),
                  (bop(And,mop(Not,var_b"b'31"),
                       bop(And,mop(Not,var_b"b'30"),
                           bop(And,mop(Not,var_b"b'29"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'26"),
                                           bop(And,mop(Not,var_b"b'25"),
                                               bop(And,mop(Not,var_b"b'24"),
                                                   bop(And,mop(Not,var_b"b'23"),
                                                       bop(And,var_b"b'22",
                                                           bop(And,mop(Not,var_b"b'21"),
                                                               bop(And,mop(Not,var_b"b'20"),
                                                                   bop(And,mop(Not,var_b"b'14"),
                                                                       bop(And,mop(Not,var_b"b'13"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'12"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'11"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'10"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'9"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'8"),
                                                                                               mop(Not,
                                                                                                   var_b"b'7")))))))))))))))))))),
                   call
                     ("instruction.System",@{typ instruction},
                      call
                        ("System.SFENCE_VM",@{typ System},
                         mop(Cast (Word_Lib.mk_wordT 5),
                             ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15"]),
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Decode",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'5",
               itb([(var_b"b'2",
                     ite(bop(And,var_b"b'1",var_b"b'0"),
                         itb([(bop(And,mop(Not,var_b"b'14"),
                                   bop(And,mop(Not,var_b"b'13"),
                                       bop(And,mop(Not,var_b"b'12"),
                                           bop(And,var_b"b'6",
                                               bop(And,mop(Not,var_b"b'4"),mop(Not,var_b"b'3")))))),
                               call
                                 ("instruction.Branch",@{typ instruction},
                                  call
                                    ("Branch.JALR",@{typ Branch},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15"]),
                                        mop(Cast (Word_Lib.mk_wordT 12),
                                            ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                               var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",
                                               var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20"])],
                                     @{theory}),@{theory})),
                              (bop(And,var_b"b'6",bop(And,mop(Not,var_b"b'4"),var_b"b'3")),
                               call
                                 ("instruction.Branch",@{typ instruction},
                                  call
                                    ("Branch.JAL",@{typ Branch},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        call
                                          ("asImm20",(Word_Lib.mk_wordT 20),
                                           tp[mop(Cast w1,ll[var_b"b'31"]),
                                              mop(Cast w8,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                     var_b"b'16",var_b"b'15",var_b"b'14",
                                                     var_b"b'13",var_b"b'12"]),
                                              mop(Cast w1,ll[var_b"b'20"]),
                                              mop(Cast (Word_Lib.mk_wordT 10),
                                                  ll[var_b"b'30",var_b"b'29",var_b"b'28",
                                                     var_b"b'27",var_b"b'26",var_b"b'25",
                                                     var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                                           @{theory})],@{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'4",mop(Not,var_b"b'3"))),
                               call
                                 ("instruction.ArithI",@{typ instruction},
                                  call
                                    ("ArithI.LUI",@{typ ArithI},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 20),
                                            ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",
                                               var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",
                                               var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                                               var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"])],
                                     @{theory}),@{theory})),
                              (bop(And,mop(Not,var_b"b'6"),
                                   bop(And,mop(Not,var_b"b'4"),mop(Not,var_b"b'3"))),
                               call("decode_STORE_FP",@{typ instruction},var_w("w",32),@{theory})),
                              (bop(And,mop(Not,var_b"b'6"),bop(And,mop(Not,var_b"b'4"),var_b"b'3")),
                               call("decode_AMO",@{typ instruction},var_w("w",32),@{theory}))],
                             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
                    (bop(And,var_b"b'1",var_b"b'0"),
                     itb([(bop(And,mop(Not,var_b"b'6"),
                               bop(And,mop(Not,var_b"b'4"),mop(Not,var_b"b'3"))),
                           call("decode_STORE",@{typ instruction},var_w("w",32),@{theory})),
                          (bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'4",mop(Not,var_b"b'3"))),
                           call("decode_OP",@{typ instruction},var_w("w",32),@{theory})),
                          (bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'4",var_b"b'3")),
                           call("decode_OP_32",@{typ instruction},var_w("w",32),@{theory})),
                          (bop(And,var_b"b'6",bop(And,mop(Not,var_b"b'4"),mop(Not,var_b"b'3"))),
                           call("decode_BRANCH",@{typ instruction},var_w("w",32),@{theory})),
                          (bop(And,var_b"b'6",bop(And,var_b"b'4",mop(Not,var_b"b'3"))),
                           call("decode_SYSTEM",@{typ instruction},var_w("w",32),@{theory}))],
                         Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (var_b"b'6",
               ite(bop(And,var_b"b'1",var_b"b'0"),
                   itb([(bop(And,mop(Not,var_b"b'4"),
                             bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'2"))),
                         call("decode_MADD",@{typ instruction},var_w("w",32),@{theory})),
                        (bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'3"),var_b"b'2")),
                         call("decode_MSUB",@{typ instruction},var_w("w",32),@{theory})),
                        (bop(And,mop(Not,var_b"b'4"),bop(And,var_b"b'3",mop(Not,var_b"b'2"))),
                         call("decode_NMSUB",@{typ instruction},var_w("w",32),@{theory})),
                        (bop(And,mop(Not,var_b"b'4"),bop(And,var_b"b'3",var_b"b'2")),
                         call("decode_NMADD",@{typ instruction},var_w("w",32),@{theory})),
                        (bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'2"))),
                         call("decode_OP_FP",@{typ instruction},var_w("w",32),@{theory}))],
                       Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})),
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}))),
              (bop(And,var_b"b'1",var_b"b'0"),
               itb([(bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'3"),var_b"b'2")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.AUIPC",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7"]),
                              mop(Cast (Word_Lib.mk_wordT 20),
                                  ll[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",
                                     var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                     var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                     var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'2"))),
                     call("decode_LOAD",@{typ instruction},var_w("w",32),@{theory})),
                    (bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'3"),var_b"b'2")),
                     call("decode_LOAD_FP",@{typ instruction},var_w("w",32),@{theory})),
                    (bop(And,mop(Not,var_b"b'4"),bop(And,var_b"b'3",var_b"b'2")),
                     call("decode_MISC_MEM",@{typ instruction},var_w("w",32),@{theory})),
                    (bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'2"))),
                     call("decode_OP_IMM",@{typ instruction},var_w("w",32),@{theory})),
                    (bop(And,var_b"b'4",bop(And,var_b"b'3",mop(Not,var_b"b'2"))),
                     call("decode_OP_IMM_32",@{typ instruction},var_w("w",32),@{theory}))],
                   Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))],
             Term.Const(@{const_name "UnknownInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("imm",
   close
     (var("i",@{typ "'N::len word"}),
      cc[ls"0x",mop(Cast(@{typ string}),var("i",@{typ "'N::len word"}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("instr",close(var_s"o",mop(PadRight,tp[lsc #" ",ln 12,var_s"o"])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("amotype",
   close
     (tp[var_w("aq",1),var_w("rl",1)],
      itb([(bop(And,eq(var_w("aq",1),lw(0,1)),eq(var_w("rl",1),lw(0,1))),ls""),
           (bop(And,eq(var_w("aq",1),lw(1,1)),eq(var_w("rl",1),lw(0,1))),ls".aq"),
           (bop(And,eq(var_w("aq",1),lw(0,1)),eq(var_w("rl",1),lw(1,1))),ls".rl"),
           (bop(And,eq(var_w("aq",1),lw(1,1)),eq(var_w("rl",1),lw(1,1))),ls".sc")],lx(@{typ string}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pRtype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs2",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pARtype",
   close
     (tp[var_s"o",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      call
        ("pRtype",@{typ string},
         tp[cc[var_s"o",call("amotype",@{typ string},tp[var_w("aq",1),var_w("rl",1)],@{theory})],
            var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pLRtype",
   close
     (tp[var_s"o",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
      cc[call
           ("instr",@{typ string},
            cc[var_s"o",call("amotype",@{typ string},tp[var_w("aq",1),var_w("rl",1)],@{theory})],
            @{theory}),ls" ",call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pItype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pCSRtype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("csrName",@{typ string},var_w("csr",12),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pCSRItype",
   close
     (tp[var_s"o",var_w("rd",5),var("i",@{typ "'N::len word"}),var_w("csr",12)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory}),ls", ",
         call("csrName",@{typ string},var_w("csr",12),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pStype",
   close
     (tp[var_s"o",var_w("rs1",5),var_w("rs2",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rs2",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pSBtype",
   close
     (tp[var_s"o",var_w("rs1",5),var_w("rs2",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs2",5),@{theory}),ls", ",
         call("imm",@{typ string},bop(Lsl,var("i",@{typ "'N::len word"}),ln 1),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pUtype",
   close
     (tp[var_s"o",var_w("rd",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pUJtype",
   close
     (tp[var_s"o",var_w("rd",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("imm",@{typ string},bop(Lsl,var("i",@{typ "'N::len word"}),ln 1),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("pN0type",close(var_s"o",call("instr",@{typ string},var_s"o",@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pN1type",
   close
     (tp[var_s"o",var_w("r",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("r",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pFRtype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs2",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pFR1type",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pFR3type",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs2",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs3",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pFItype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs1",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pFStype",
   close
     (tp[var_s"o",var_w("rs1",5),var_w("rs2",5),var("i",@{typ "'N::len word"})],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rs2",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pCFItype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("fpreg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("reg",@{typ string},var_w("rs",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("pCIFtype",
   close
     (tp[var_s"o",var_w("rd",5),var_w("rs",5)],
      cc[call("instr",@{typ string},var_s"o",@{theory}),ls" ",
         call("reg",@{typ string},var_w("rd",5),@{theory}),ls", ",
         call("fpreg",@{typ string},var_w("rs",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("instructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BEQ",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BEQ",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BNE",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BNE",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BLT",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BLT",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BGE",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BGE",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BLTU",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BLTU",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BGEU",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pSBtype",@{typ string},tp[ls"BGEU",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.JALR",@{typ Branch},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"JALR",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call("Branch.JAL",@{typ Branch},tp[var_w("rd",5),var_w("imm",20)],@{theory}),@{theory}),
           call("pUJtype",@{typ string},tp[ls"JAL",var_w("rd",5),var_w("imm",20)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call("ArithI.LUI",@{typ ArithI},tp[var_w("rd",5),var_w("imm",20)],@{theory}),@{theory}),
           call("pUtype",@{typ string},tp[ls"LUI",var_w("rd",5),var_w("imm",20)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call("ArithI.AUIPC",@{typ ArithI},tp[var_w("rd",5),var_w("imm",20)],@{theory}),
              @{theory}),
           call("pUtype",@{typ string},tp[ls"AUIPC",var_w("rd",5),var_w("imm",20)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ADDI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"ADDI",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"SLLI",var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.SLTI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"SLTI",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.SLTIU",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"SLTIU",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.XORI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"XORI",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"SRLI",var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"SRAI",var_w("rd",5),var_w("rs1",5),var_w("imm",6)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ORI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"ORI",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ANDI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"ANDI",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.ADD",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"ADD",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SUB",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SUB",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLL",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SLL",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SLT",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SLT",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SLTU",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SLTU",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.XOR",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"XOR",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRL",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SRL",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRA",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SRA",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.OR",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"OR",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.AND",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"AND",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ADDIW",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"ADDIW",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"SLLIW",var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"SRLIW",var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("pItype",@{typ string},tp[ls"SRAIW",var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.ADDW",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"ADDW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SUBW",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SUBW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SLLW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SRLW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("pRtype",@{typ string},tp[ls"SRAW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MUL",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"MUL",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULH",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"MULH",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULHSU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"MULHSU",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULHU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"MULHU",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIV",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"DIV",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"DIVU",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REM",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"REM",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"REMU",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"MULW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"DIVW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVUW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"DIVUW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"REMW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMUW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pRtype",@{typ string},tp[ls"REMUW",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LB",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LB",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LH",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LH",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LW",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LW",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LD",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LD",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LBU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LBU",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LHU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LHU",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LWU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pItype",@{typ string},tp[ls"LWU",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SB",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pStype",@{typ string},tp[ls"SB",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SH",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pStype",@{typ string},tp[ls"SH",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SW",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pStype",@{typ string},tp[ls"SW",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SD",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("pStype",@{typ string},tp[ls"SD",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.FENCE",@{typ instruction},
              tp[var_w("rd",5),var_w("rs1",5),var_w("pred",4),var_w("succ",4)],@{theory}),
           call("pN0type",@{typ string},ls"FENCE",@{theory})),
          (call
             ("instruction.FENCE_I",@{typ instruction},
              tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
           call("pN0type",@{typ string},ls"FENCE.I",@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FADD.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSUB.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMUL_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMUL.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FDIV_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FDIV.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSQRT_S",@{typ FArith},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pFR1type",@{typ string},tp[ls"FSQRT.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMIN_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMIN.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMAX_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMAX.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FEQ_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FEQ.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLT_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FLT.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLE_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FLE.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FMADD.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FMSUB.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FNMADD.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FNMSUB.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FADD.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSUB.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMUL_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMUL.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FDIV_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FDIV.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSQRT_D",@{typ FArith},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pFR1type",@{typ string},tp[ls"FSQRT.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMIN_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMIN.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMAX_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FMAX.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FEQ_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FEQ.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLT_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FLT.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLE_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FLE.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FMADD.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FMSUB.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FNMADD.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("pFR3type",@{typ string},
              tp[ls"FNMSUB.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJ_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJ.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJN_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJN.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJX_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJX.S",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_W_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.W.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_WU_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.WU.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_X_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FMV.X.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FCLASS_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),
              @{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCLASS.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_W",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.S.W",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_WU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.S.WU",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_S_X",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FMV.S.X",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJ_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJ.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJN_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJN.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJX_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pFRtype",@{typ string},tp[ls"FSGNJX.D",var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_W_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.W.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_WU_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.WU.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FCLASS_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),
              @{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCLASS.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_W",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.D.W",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_WU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.D.WU",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_L_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.L.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_LU_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.LU.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_L",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.S.L",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_LU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.S.LU",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_L_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.L.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_LU_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FCVT.LU.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_X_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call("pCIFtype",@{typ string},tp[ls"FMV.X.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_L",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.D.L",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_LU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.D.LU",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_D_X",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FMV.D.X",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.D.S",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call("pCFItype",@{typ string},tp[ls"FCVT.S.D",var_w("rd",5),var_w("rs",5)],@{theory})),
          (call
             ("instruction.FPLoad",@{typ instruction},
              call
                ("FPLoad.FLW",@{typ FPLoad},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pFItype",@{typ string},tp[ls"FLW",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.FPLoad",@{typ instruction},
              call
                ("FPLoad.FLD",@{typ FPLoad},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pFItype",@{typ string},tp[ls"FLD",var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.FPStore",@{typ instruction},
              call
                ("FPStore.FSW",@{typ FPStore},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pFStype",@{typ string},tp[ls"FSW",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.FPStore",@{typ instruction},
              call
                ("FPStore.FSD",@{typ FPStore},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("pFStype",@{typ string},tp[ls"FSD",var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
              @{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.LR_W",@{typ AMO},tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
                 @{theory}),@{theory}),
           call
             ("pLRtype",@{typ string},
              tp[ls"LR.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.LR_D",@{typ AMO},tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
                 @{theory}),@{theory}),
           call
             ("pLRtype",@{typ string},
              tp[ls"LR.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.SC_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"SC.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.SC_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"SC.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOSWAP_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOSWAP.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOADD_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOADD.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOXOR_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOXOR.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOAND_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOAND.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOOR_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOOR.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMIN_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMIN.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAX_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMAX.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMINU_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMINU.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAXU_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMAXU.W",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOSWAP_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOSWAP.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOADD_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOADD.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOXOR_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOXOR.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOAND_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOAND.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOOR_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOOR.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
              @{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMIN_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMIN.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAX_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMAX.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMINU_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMINU.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAXU_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("pARtype",@{typ string},
              tp[ls"AMOMAXU.D",var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),
                 var_w("rs2",5)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "ECALL"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"ECALL",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "EBREAK"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"EBREAK",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "URET"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"URET",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "SRET"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"SRET",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "HRET"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"HRET",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "MRET"},@{typ System}),@{theory}),
           call("pN0type",@{typ string},ls"MRET",@{theory})),
          (call
             ("instruction.System",@{typ instruction},Term.Const(@{const_name "WFI"},@{typ System}),
              @{theory}),call("pN0type",@{typ string},ls"WFI",@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRW",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRtype",@{typ string},tp[ls"CSRRW",var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRS",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRtype",@{typ string},tp[ls"CSRRS",var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRC",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRtype",@{typ string},tp[ls"CSRRC",var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRWI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRItype",@{typ string},tp[ls"CSRRWI",var_w("rd",5),var_w("imm",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRSI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRItype",@{typ string},tp[ls"CSRRSI",var_w("rd",5),var_w("imm",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRCI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("pCSRItype",@{typ string},tp[ls"CSRRCI",var_w("rd",5),var_w("imm",5),var_w("csr",12)],
              @{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call("System.SFENCE_VM",@{typ System},var_w("rs1",5),@{theory}),@{theory}),
           call("pN1type",@{typ string},tp[ls"SFENCE.VM",var_w("rs1",5)],@{theory})),
          (Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}),
           call("pN0type",@{typ string},ls"UNKNOWN",@{theory})),
          (call
             ("instruction.Internal",@{typ instruction},
              call("Internal.FETCH_MISALIGNED",@{typ Internal},var_a w64,@{theory}),@{theory}),
           call("pN0type",@{typ string},ls"FETCH_MISALIGNED",@{theory})),
          (call
             ("instruction.Internal",@{typ instruction},
              call("Internal.FETCH_FAULT",@{typ Internal},var_a w64,@{theory}),@{theory}),
           call("pN0type",@{typ string},ls"FETCH_FAULT",@{theory}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Rtype",
   close
     (tp[var_w("o",7),var_w("f3",3),var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("f7",7)],
      cc[var_w("f7",7),var_w("rs2",5),var_w("rs1",5),var_w("f3",3),var_w("rd",5),var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("R4type",
   close
     (tp[var_w("o",7),var_w("f3",3),var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),
         var_w("f2",2)],
      cc[var_w("rs3",5),var_w("f2",2),var_w("rs2",5),var_w("rs1",5),var_w("f3",3),var_w("rd",5),
         var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Itype",
   close
     (tp[var_w("o",7),var_w("f3",3),var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
      cc[var_w("imm",12),var_w("rs1",5),var_w("f3",3),var_w("rd",5),var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Stype",
   close
     (tp[var_w("o",7),var_w("f3",3),var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
      cc[ex(var_w("imm",12),ln 11,ln 5,(Word_Lib.mk_wordT 7)),var_w("rs2",5),var_w("rs1",5),
         var_w("f3",3),ex(var_w("imm",12),ln 4,ln 0,(Word_Lib.mk_wordT 5)),var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SBtype",
   close
     (tp[var_w("o",7),var_w("f3",3),var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
      cc[mop(Cast w1,bop(Bit,var_w("imm",12),ln 11)),
         ex(var_w("imm",12),ln 9,ln 4,(Word_Lib.mk_wordT 6)),var_w("rs2",5),var_w("rs1",5),
         var_w("f3",3),ex(var_w("imm",12),ln 3,ln 0,w4),mop(Cast w1,bop(Bit,var_w("imm",12),ln 10)),
         var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Utype",
   close
     (tp[var_w("o",7),var_w("rd",5),var_w("imm",20)],cc[var_w("imm",20),var_w("rd",5),var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("UJtype",
   close
     (tp[var_w("o",7),var_w("rd",5),var_w("imm",20)],
      cc[mop(Cast w1,bop(Bit,var_w("imm",20),ln 19)),
         ex(var_w("imm",20),ln 9,ln 0,(Word_Lib.mk_wordT 10)),
         mop(Cast w1,bop(Bit,var_w("imm",20),ln 10)),ex(var_w("imm",20),ln 18,ln 11,w8),
         var_w("rd",5),var_w("o",7)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("opc",close(var_w("code",8),cc[ex(var_w("code",8),ln 4,ln 0,(Word_Lib.mk_wordT 5)),lw(3,2)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("amofunc",
   close
     (tp[var_w("code",5),var_w("aq",1),var_w("rl",1)],
      cc[var_w("code",5),var_w("aq",1),var_w("rl",1)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Encode",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BEQ",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(0,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BNE",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(1,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BLT",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(4,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BGE",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(5,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BLTU",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(6,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.BGEU",@{typ Branch},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("SBtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(24,8),@{theory}),lw(7,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call
                ("Branch.JALR",@{typ Branch},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(25,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Branch",@{typ instruction},
              call("Branch.JAL",@{typ Branch},tp[var_w("rd",5),var_w("imm",20)],@{theory}),@{theory}),
           call
             ("UJtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(27,8),@{theory}),var_w("rd",5),var_w("imm",20)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call("ArithI.LUI",@{typ ArithI},tp[var_w("rd",5),var_w("imm",20)],@{theory}),@{theory}),
           call
             ("Utype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(13,8),@{theory}),var_w("rd",5),var_w("imm",20)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call("ArithI.AUIPC",@{typ ArithI},tp[var_w("rd",5),var_w("imm",20)],@{theory}),
              @{theory}),
           call
             ("Utype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(5,8),@{theory}),var_w("rd",5),var_w("imm",20)],
              @{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ADDI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(0,6),var_w("imm",6)]],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.SLTI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.SLTIU",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.XORI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(4,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(0,6),var_w("imm",6)]],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAI",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",6)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(16,6),var_w("imm",6)]],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ORI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ANDI",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(4,8),@{theory}),lw(7,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.ADD",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SUB",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(32,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLL",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SLT",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SLTU",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.XOR",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(4,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRL",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRA",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(32,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.OR",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.AND",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(7,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithI",@{typ instruction},
              call
                ("ArithI.ADDIW",@{typ ArithI},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(6,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(6,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(0,7),var_w("imm",5)]],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(6,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(0,7),var_w("imm",5)]],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAIW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",5)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(6,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(32,7),var_w("imm",5)]],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.ADDW",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.ArithR",@{typ instruction},
              call
                ("ArithR.SUBW",@{typ ArithR},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(32,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SLLW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRLW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.Shift",@{typ instruction},
              call
                ("Shift.SRAW",@{typ Shift},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(32,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MUL",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULH",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULHSU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULHU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIV",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(4,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REM",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMU",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(12,8),@{theory}),lw(7,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.MULW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(4,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.DIVUW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.MulDiv",@{typ instruction},
              call
                ("MulDiv.REMUW",@{typ MulDiv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(14,8),@{theory}),lw(7,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LB",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LH",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LW",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call("Load.LD",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LBU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(4,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LHU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Load",@{typ instruction},
              call
                ("Load.LWU",@{typ Load},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(0,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SB",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(8,8),@{theory}),lw(0,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SH",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(8,8),@{theory}),lw(1,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SW",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(8,8),@{theory}),lw(2,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.Store",@{typ instruction},
              call
                ("Store.SD",@{typ Store},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],@{theory}),
              @{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(8,8),@{theory}),lw(3,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FENCE",@{typ instruction},
              tp[var_w("rd",5),var_w("rs1",5),var_w("pred",4),var_w("succ",4)],@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(3,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),cc[lw(0,4),var_w("pred",4),var_w("succ",4)]],@{theory})),
          (call
             ("instruction.FENCE_I",@{typ instruction},
              tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(3,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(0,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(4,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMUL_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(8,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FDIV_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(12,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSQRT_S",@{typ FArith},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(44,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMIN_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(20,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMAX_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(20,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FEQ_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(80,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLT_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(80,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLE_S",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(80,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(1,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(5,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMUL_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(9,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FDIV_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("frm",3)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(13,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FSQRT_D",@{typ FArith},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(45,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMIN_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(21,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMAX_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(21,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FEQ_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(81,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLT_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(81,7)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FLE_D",@{typ FArith},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(81,7)],@{theory})),
          (call
             ("instruction.FPLoad",@{typ instruction},
              call
                ("FPLoad.FLW",@{typ FPLoad},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(1,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FPLoad",@{typ instruction},
              call
                ("FPLoad.FLD",@{typ FPLoad},tp[var_w("rd",5),var_w("rs1",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(1,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FPStore",@{typ instruction},
              call
                ("FPStore.FSW",@{typ FPStore},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(9,8),@{theory}),lw(2,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FPStore",@{typ instruction},
              call
                ("FPStore.FSD",@{typ FPStore},tp[var_w("rs1",5),var_w("rs2",5),var_w("imm",12)],
                 @{theory}),@{theory}),
           call
             ("Stype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(9,8),@{theory}),lw(3,3),var_w("rs1",5),
                 var_w("rs2",5),var_w("imm",12)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(16,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(0,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(17,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(0,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMSUB_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(18,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(0,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMADD_S",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(19,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(0,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(16,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(1,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FMSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(17,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(1,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMSUB_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(18,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(1,2)],@{theory})),
          (call
             ("instruction.FArith",@{typ instruction},
              call
                ("FArith.FNMADD_D",@{typ FArith},
                 tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("R4type",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(19,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),var_w("rs3",5),lw(1,2)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJ_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(16,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJN_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(16,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJX_S",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(16,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_W_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(96,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_WU_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(1,5),lw(96,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_X_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(112,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FCLASS_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(112,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_W",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(104,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_WU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(1,5),lw(104,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_S_X",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(120,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJ_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(17,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJN_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(17,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FSGNJX_D",@{typ FConv},tp[var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),lw(17,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_W_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(97,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_WU_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(1,5),lw(97,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FCLASS_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),
              @{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(113,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_W",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(105,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_WU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(1,5),lw(105,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(1,5),lw(32,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(33,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_L_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(2,5),lw(96,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_LU_S",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(3,5),lw(96,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_L",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(2,5),lw(104,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_S_LU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(3,5),lw(104,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_L_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(2,5),lw(97,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_LU_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(3,5),lw(97,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_X_D",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(113,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_L",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(2,5),lw(105,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call
                ("FConv.FCVT_D_LU",@{typ FConv},tp[var_w("rd",5),var_w("rs",5),var_w("frm",3)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),var_w("frm",3),var_w("rd",5),
                 var_w("rs",5),lw(3,5),lw(105,7)],@{theory})),
          (call
             ("instruction.FConv",@{typ instruction},
              call("FConv.FMV_D_X",@{typ FConv},tp[var_w("rd",5),var_w("rs",5)],@{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(20,8),@{theory}),lw(0,3),var_w("rd",5),
                 var_w("rs",5),lw(0,5),lw(121,7)],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.LR_W",@{typ AMO},tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),lw(0,5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(2,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.LR_D",@{typ AMO},tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),lw(0,5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(2,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.SC_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(3,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.SC_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(2,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOSWAP_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(1,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOADD_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(0,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOXOR_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(4,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOAND_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(12,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOOR_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(8,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMIN_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(16,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAX_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(20,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMINU_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(24,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAXU_W",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(28,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOSWAP_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(1,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOADD_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(0,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOXOR_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(4,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOAND_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(12,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOOR_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(8,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMIN_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(16,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAX_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(20,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMINU_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(24,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.AMO",@{typ instruction},
              call
                ("AMO.AMOMAXU_D",@{typ AMO},
                 tp[var_w("aq",1),var_w("rl",1),var_w("rd",5),var_w("rs1",5),var_w("rs2",5)],
                 @{theory}),@{theory}),
           call
             ("Rtype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(11,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("rs2",5),
                 call
                   ("amofunc",(Word_Lib.mk_wordT 7),tp[lw(28,5),var_w("aq",1),var_w("rl",1)],
                    @{theory})],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "ECALL"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(0,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "EBREAK"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(1,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "URET"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(2,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "SRET"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(258,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "HRET"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(514,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              Term.Const(@{const_name "MRET"},@{typ System}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(770,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},Term.Const(@{const_name "WFI"},@{typ System}),
              @{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),lw(0,5),
                 lw(261,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call("System.SFENCE_VM",@{typ System},var_w("rs1",5),@{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(0,3),lw(0,5),
                 var_w("rs1",5),lw(260,12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRW",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(1,3),var_w("rd",5),
                 var_w("rs1",5),var_w("csr",12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRS",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(2,3),var_w("rd",5),
                 var_w("rs1",5),var_w("csr",12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRC",@{typ System},tp[var_w("rd",5),var_w("rs1",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(3,3),var_w("rd",5),
                 var_w("rs1",5),var_w("csr",12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRWI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(5,3),var_w("rd",5),
                 var_w("imm",5),var_w("csr",12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRSI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(6,3),var_w("rd",5),
                 var_w("imm",5),var_w("csr",12)],@{theory})),
          (call
             ("instruction.System",@{typ instruction},
              call
                ("System.CSRRCI",@{typ System},tp[var_w("rd",5),var_w("imm",5),var_w("csr",12)],
                 @{theory}),@{theory}),
           call
             ("Itype",w32,
              tp[call("opc",(Word_Lib.mk_wordT 7),lw(28,8),@{theory}),lw(7,3),var_w("rd",5),
                 var_w("imm",5),var_w("csr",12)],@{theory})),
          (Term.Const(@{const_name "UnknownInstruction"},@{typ instruction}),lw(0,32)),
          (call
             ("instruction.Internal",@{typ instruction},
              call("Internal.FETCH_MISALIGNED",@{typ Internal},var_a w64,@{theory}),@{theory}),
           lw(0,32)),
          (call
             ("instruction.Internal",@{typ instruction},
              call("Internal.FETCH_FAULT",@{typ Internal},var_a w64,@{theory}),@{theory}),lw(0,32))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("log_instruction",
   close
     (tp[var_w("w",32),var("inst",@{typ instruction})],
      close
        (var("state",qTy),
         cc[ls"instr ",mop(Cast(@{typ string}),call("state.procID",w8,var("state",qTy),@{theory})),
            ls" ",
            mop(Cast(@{typ string}),
                mop(Cast HOLogic.natT,
                    apply
                      (call
                         ("state.c_instret",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                          @{theory}),call("state.procID",w8,var("state",qTy),@{theory})))),ls" 0x",
            call
              ("hex64",@{typ string},
               apply(const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("state",qTy)),
               @{theory}),ls" : ",call("hex32",@{typ string},var_w("w",32),@{theory}),ls"   ",
            call("instructionToString",@{typ string},var("inst",@{typ instruction}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("exitCode",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         mop(Cast HOLogic.natT,
             apply
               (const("ExitCode",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("CYCLES_PER_TIMER_TICK",ln 200)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("tickClock",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                apply
                  (call
                     ("state.c_cycles",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                      @{theory}),call("state.procID",w8,var("state",qTy),@{theory})),lw(1,64)),
            rupd
              ("state.clock",
               tp[rupd
                    ("state.c_cycles",
                     tp[var("state",qTy),
                        fupd
                          (call
                             ("state.c_cycles",@{typ "8 word \<Rightarrow> 64 word"},
                              var("state",qTy),@{theory}),
                           call("state.procID",w8,var("state",qTy),@{theory}),var_w("v",64))],
                     @{theory}),
                  bop(Div,var_w("v",64),
                      mop(Cast w64,const("CYCLES_PER_TIMER_TICK",HOLogic.natT,@{theory})))],
               @{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("incrInstret",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         rupd
           ("state.c_instret",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_instret",@{typ "8 word \<Rightarrow> 64 word"},var("state",qTy),
                     @{theory}),call("state.procID",w8,var("state",qTy),@{theory}),
                  bop(Add,
                      apply
                        (call
                           ("state.c_instret",@{typ "8 word \<Rightarrow> 64 word"},
                            var("state",qTy),@{theory}),
                         call("state.procID",w8,var("state",qTy),@{theory})),lw(1,64)))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("checkTimers",close(var_a HOLogic.unitT,lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Next",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ FetchResult}),var("s",qTy)],
         apply
           (call("Fetch",@{typ "state \<Rightarrow> (FetchResult \<times> state)"},lu,@{theory}),
            var("state",qTy)),
         let'
           (tp[var("v",@{typ "instrResult option"}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call("tickClock",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  cs(var("v",@{typ FetchResult}),
                     [(call("FetchResult.F_Result",@{typ FetchResult},var_w("w",32),@{theory}),
                       let'
                         (var("inst",@{typ instruction}),
                          call("Decode",@{typ instruction},var_w("w",32),@{theory}),
                          apply
                            (call
                               ("Run",@{typ "state \<Rightarrow> state"},
                                var("inst",@{typ instruction}),@{theory}),
                             apply
                               (call
                                  ("mark_log",@{typ "state \<Rightarrow> state"},
                                   tp[const("LOG_INSN",HOLogic.natT,@{theory}),
                                      apply
                                        (call
                                           ("log_instruction",@{typ "state \<Rightarrow> string"},
                                            tp[var_w("w",32),var("inst",@{typ instruction})],
                                            @{theory}),var("s",qTy))],@{theory}),var("s",qTy))))),
                      (call
                         ("FetchResult.F_Error",@{typ FetchResult},var("inst",@{typ instruction}),
                          @{theory}),
                       apply
                         (call
                            ("Run",@{typ "state \<Rightarrow> state"},
                             var("inst",@{typ instruction}),@{theory}),
                          apply
                            (call
                               ("mark_log",@{typ "state \<Rightarrow> state"},
                                tp[const("LOG_INSN",HOLogic.natT,@{theory}),
                                   apply
                                     (call
                                        ("log_instruction",@{typ "state \<Rightarrow> string"},
                                         tp[lw(0,32),var("inst",@{typ instruction})],@{theory}),
                                      var("s",qTy))],@{theory}),var("s",qTy))))],@{context})),
               tp[apply
                    (const("NextFetch",@{typ "state \<Rightarrow> (instrResult option)"},@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (tp[var("v",
                      @{typ
                      "(instrResult option) \<times> (InterruptType \<times> Privilege) option"}),
                  var("s",qTy)],
               let'
                 (tp[var("v0",@{typ "(InterruptType \<times> Privilege) option"}),var("s",qTy)],
                  apply
                    (call
                       ("curInterrupt",
                        @{typ
                        "state \<Rightarrow>
                         (((InterruptType \<times> Privilege) option) \<times> state)"},lu,@{theory}),
                     var("s",qTy)),
                  tp[tp[var("v",@{typ "instrResult option"}),
                        var("v0",@{typ "(InterruptType \<times> Privilege) option"})],var("s",qTy)]),
               cs(var("v",
                      @{typ
                      "(instrResult option) \<times> (InterruptType \<times> Privilege) option"}),
                  [(tp[var_a(@{typ "instrResult option"}),
                       mop(Some,tp[var("i",@{typ InterruptType}),var("delegate",@{typ Privilege})])],
                    apply
                      (call
                         ("excHandler",@{typ "state \<Rightarrow> state"},
                          tp[lt,call("interruptIndex",w4,var("i",@{typ InterruptType}),@{theory}),
                             apply
                               (const
                                  ("curPrivilege",@{typ "state \<Rightarrow> Privilege"},@{theory}),
                                var("s",qTy)),var("delegate",@{typ Privilege}),
                             apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s",qTy)),lo w64],@{theory}),var("s",qTy))),
                   (tp[mop(Some,
                           call
                             ("instrResult.Trap",@{typ instrResult},
                              var("e",@{typ SynchronousException}),@{theory})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (var("s",qTy),
                       apply
                         (call
                            ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                             lo @{typ instrResult},@{theory}),var("s",qTy)),
                       let'
                         (tp[var_w("v",4),var("s",qTy)],
                          cs(call
                               ("SynchronousException.trap",@{typ ExceptionType},
                                var("e",@{typ SynchronousException}),@{theory}),
                             [(lc("E_Env_Call","ExceptionType",@{theory}),
                               tp[cs(apply
                                       (const
                                          ("curPrivilege",@{typ "state \<Rightarrow> Privilege"},
                                           @{theory}),var("s",qTy)),
                                     [(lc("User","Privilege",@{theory}),lw(8,4)),
                                      (lc("Supervisor","Privilege",@{theory}),lw(9,4)),
                                      (lc("Hypervisor","Privilege",@{theory}),lw(10,4)),
                                      (lc("Machine","Privilege",@{theory}),lw(11,4))],@{context}),
                                  var("s",qTy)]),
                              (var_a @{typ ExceptionType},
                               tp[call
                                    ("excCode",w4,
                                     call
                                       ("SynchronousException.trap",@{typ ExceptionType},
                                        var("e",@{typ SynchronousException}),@{theory}),@{theory}),
                                  var("s",qTy)])],@{context}),
                          let'
                            (tp[var("v0",@{typ Privilege}),var("s",qTy)],
                             apply
                               (call
                                  ("excHandlerDelegate",
                                   @{typ "state \<Rightarrow> (Privilege \<times> state)"},
                                   tp[lc("Machine","Privilege",@{theory}),
                                      mop(Cast HOLogic.natT,var_w("v",4))],@{theory}),var("s",qTy)),
                             apply
                               (call
                                  ("excHandler",@{typ "state \<Rightarrow> state"},
                                   tp[lf,var_w("v",4),
                                      apply
                                        (const
                                           ("curPrivilege",@{typ "state \<Rightarrow> Privilege"},
                                            @{theory}),var("s",qTy)),var("v0",@{typ Privilege}),
                                      apply
                                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                         var("s",qTy)),
                                      call
                                        ("SynchronousException.badaddr",@{typ "64 word option"},
                                         var("e",@{typ SynchronousException}),@{theory})],@{theory}),
                                var("s",qTy)))))),
                   (tp[mop(Some,Term.Const(@{const_name "Uret"},@{typ instrResult})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                                lo @{typ instrResult},@{theory}),var("s",qTy)),
                          tp[apply
                               (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ UserCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'curPrivilege",@{typ "state \<Rightarrow> state"},
                                   lc("User","Privilege",@{theory}),@{theory}),
                                apply
                                  (call
                                     ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                      rupd
                                        ("MachineCSR.mstatus",
                                         tp[var("v",@{typ MachineCSR}),
                                            call
                                              ("uret",@{typ mstatus},
                                               call
                                                 ("MachineCSR.mstatus",@{typ mstatus},
                                                  apply
                                                    (const
                                                       ("MCSR",
                                                        @{typ "state \<Rightarrow> MachineCSR"},
                                                        @{theory}),var("s",qTy)),@{theory}),
                                               @{theory})],@{theory}),@{theory}),var("s",qTy))),
                             tp[apply
                                  (const("UCSR",@{typ "state \<Rightarrow> UserCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          apply
                            (call
                               ("write'PC",@{typ "state \<Rightarrow> state"},
                                call("UserCSR.uepc",w64,var("v",@{typ UserCSR}),@{theory}),@{theory}),
                             var("s",qTy))))),
                   (tp[mop(Some,Term.Const(@{const_name "Sret"},@{typ instrResult})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                                lo @{typ instrResult},@{theory}),var("s",qTy)),
                          tp[apply
                               (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("MachineCSR.mstatus",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("sret",@{typ mstatus},
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (const
                                                    ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                     @{theory}),var("s",qTy)),@{theory}),@{theory})],
                                      @{theory}),@{theory}),var("s",qTy)),
                             tp[apply
                                  (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ SupervisorCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'curPrivilege",@{typ "state \<Rightarrow> state"},
                                      ite(call
                                            ("mstatus.M_SPP",HOLogic.boolT,
                                             call
                                               ("MachineCSR.mstatus",@{typ mstatus},
                                                var("v",@{typ MachineCSR}),@{theory}),@{theory}),
                                          lc("Supervisor","Privilege",@{theory}),
                                          lc("User","Privilege",@{theory})),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const
                                        ("SCSR",@{typ "state \<Rightarrow> SupervisorCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call
                                     ("SupervisorCSR.sepc",w64,var("v",@{typ SupervisorCSR}),
                                      @{theory}),@{theory}),var("s",qTy)))))),
                   (tp[mop(Some,Term.Const(@{const_name "Hret"},@{typ instrResult})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                                lo @{typ instrResult},@{theory}),var("s",qTy)),
                          tp[apply
                               (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             let'
                               (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                                let'
                                  (tp[var("v",@{typ "MachineCSR \<times> mstatus"}),var("s",qTy)],
                                   let'
                                     (tp[var("v0",@{typ mstatus}),var("s",qTy)],
                                      apply
                                        (call
                                           ("hret",
                                            @{typ "state \<Rightarrow> (mstatus \<times> state)"},
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (const
                                                    ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                     @{theory}),var("s",qTy)),@{theory}),@{theory}),
                                         var("s",qTy)),
                                      tp[tp[var("v",@{typ MachineCSR}),var("v0",@{typ mstatus})],
                                         var("s",qTy)]),
                                   tp[rupd
                                        ("MachineCSR.mstatus",
                                         var("v",@{typ "MachineCSR \<times> mstatus"}),@{theory}),
                                      var("s",qTy)]),
                                apply
                                  (call
                                     ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                      var("v",@{typ MachineCSR}),@{theory}),var("s",qTy))),
                             tp[apply
                                  (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ HypervisorCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                let'
                                  (tp[var("v",@{typ Privilege}),var("s",qTy)],
                                   cs(call
                                        ("privilege",@{typ Privilege},
                                         call
                                           ("mstatus.M_HPP",(Word_Lib.mk_wordT 2),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               var("v",@{typ MachineCSR}),@{theory}),@{theory}),
                                         @{theory}),
                                      [(lc("User","Privilege",@{theory}),
                                        tp[lc("User","Privilege",@{theory}),var("s",qTy)]),
                                       (lc("Supervisor","Privilege",@{theory}),
                                        tp[lc("Supervisor","Privilege",@{theory}),var("s",qTy)]),
                                       (lc("Hypervisor","Privilege",@{theory}),
                                        tp[lc("Hypervisor","Privilege",@{theory}),var("s",qTy)]),
                                       (lc("Machine","Privilege",@{theory}),
                                        apply
                                          (call
                                             ("raise'exception",
                                              @{typ
                                              "state \<Rightarrow> (Privilege \<times> state)"},
                                              call
                                                ("exception.INTERNAL_ERROR",@{typ exception},
                                                 ls"hret to machine mode",@{theory}),@{theory}),
                                           var("s",qTy)))],@{context}),
                                   apply
                                     (call
                                        ("write'curPrivilege",@{typ "state \<Rightarrow> state"},
                                         var("v",@{typ Privilege}),@{theory}),var("s",qTy))),
                                tp[apply
                                     (const
                                        ("HCSR",@{typ "state \<Rightarrow> HypervisorCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call
                                     ("HypervisorCSR.hepc",w64,var("v",@{typ HypervisorCSR}),
                                      @{theory}),@{theory}),var("s",qTy)))))),
                   (tp[mop(Some,Term.Const(@{const_name "Mret"},@{typ instrResult})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                                lo @{typ instrResult},@{theory}),var("s",qTy)),
                          tp[apply
                               (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       let'
                         (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("MachineCSR.mstatus",
                                      tp[var("v",@{typ MachineCSR}),
                                         call
                                           ("mret",@{typ mstatus},
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               apply
                                                 (const
                                                    ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                                     @{theory}),var("s",qTy)),@{theory}),@{theory})],
                                      @{theory}),@{theory}),var("s",qTy)),
                             tp[apply
                                  (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          let'
                            (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'curPrivilege",@{typ "state \<Rightarrow> state"},
                                      call
                                        ("privilege",@{typ Privilege},
                                         call
                                           ("mstatus.M_MPP",(Word_Lib.mk_wordT 2),
                                            call
                                              ("MachineCSR.mstatus",@{typ mstatus},
                                               var("v",@{typ MachineCSR}),@{theory}),@{theory}),
                                         @{theory}),@{theory}),var("s",qTy)),
                                tp[apply
                                     (const
                                        ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},
                                   call("MachineCSR.mepc",w64,var("v",@{typ MachineCSR}),@{theory}),
                                   @{theory}),var("s",qTy)))))),
                   (tp[mop(Some,
                           call("instrResult.BranchTo",@{typ instrResult},var_w("pc",64),@{theory})),
                       lo(@{typ "InterruptType \<times> Privilege"})],
                    apply
                      (call("write'PC",@{typ "state \<Rightarrow> state"},var_w("pc",64),@{theory}),
                       apply
                         (call
                            ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                             lo @{typ instrResult},@{theory}),
                          apply
                            (call("incrInstret",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                             var("s",qTy))))),
                   (tp[lo @{typ instrResult},lo(@{typ "InterruptType \<times> Privilege"})],
                    let'
                      (tp[var_w("v",64),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call("incrInstret",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                             var("s",qTy)),
                          tp[apply
                               (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       apply
                         (call
                            ("write'PC",@{typ "state \<Rightarrow> state"},
                             bop(Add,var_w("v",64),lw(4,64)),@{theory}),var("s",qTy))))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("initIdent",
   close
     (var("arch",@{typ Architecture}),
      close
        (var("state",qTy),
         let'
           (var("v",@{typ MachineCSR}),
            apply(const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("state",qTy)),
            let'
              (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'MCSR",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("MachineCSR.misa",
                           tp[var("v",@{typ MachineCSR}),
                              rupd
                                ("misa.ArchBase",
                                 tp[call
                                      ("MachineCSR.misa",@{typ misa},var("v",@{typ MachineCSR}),
                                       @{theory}),
                                    call
                                      ("archBase",(Word_Lib.mk_wordT 2),
                                       var("arch",@{typ Architecture}),@{theory})],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)),
                  tp[apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'MCSR",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("MachineCSR.misa",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("misa.U",
                                    tp[call
                                         ("MachineCSR.misa",@{typ misa},var("v",@{typ MachineCSR}),
                                          @{theory}),lt],@{theory})],@{theory}),@{theory}),
                        var("s",qTy)),
                     tp[apply
                          (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  let'
                    (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'MCSR",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("MachineCSR.misa",
                                 tp[var("v",@{typ MachineCSR}),
                                    rupd
                                      ("misa.S",
                                       tp[call
                                            ("MachineCSR.misa",@{typ misa},
                                             var("v",@{typ MachineCSR}),@{theory}),lt],@{theory})],
                                 @{theory}),@{theory}),var("s",qTy)),
                        tp[apply
                             (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                              var("s0",qTy)),var("s0",qTy)]),
                     let'
                       (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("MachineCSR.misa",
                                    tp[var("v",@{typ MachineCSR}),
                                       rupd
                                         ("misa.M",
                                          tp[call
                                               ("MachineCSR.misa",@{typ misa},
                                                var("v",@{typ MachineCSR}),@{theory}),lt],@{theory})],
                                    @{theory}),@{theory}),var("s",qTy)),
                           tp[apply
                                (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("MachineCSR.misa",
                                       tp[var("v",@{typ MachineCSR}),
                                          rupd
                                            ("misa.I",
                                             tp[call
                                                  ("MachineCSR.misa",@{typ misa},
                                                   var("v",@{typ MachineCSR}),@{theory}),lt],
                                             @{theory})],@{theory}),@{theory}),var("s",qTy)),
                              tp[apply
                                   (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("MachineCSR.mvendorid",
                                          tp[var("v",@{typ MachineCSR}),
                                             const("MVENDORID",w64,@{theory})],@{theory}),@{theory}),
                                    var("s",qTy)),
                                 tp[apply
                                      (const
                                         ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              let'
                                (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                                 let'
                                   (var("s0",qTy),
                                    apply
                                      (call
                                         ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("MachineCSR.marchid",
                                             tp[var("v",@{typ MachineCSR}),
                                                const("MARCHID",w64,@{theory})],@{theory}),@{theory}),
                                       var("s",qTy)),
                                    tp[apply
                                         (const
                                            ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},
                                             @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                 apply
                                   (call
                                      ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("MachineCSR.mimpid",
                                          tp[var("v",@{typ MachineCSR}),
                                             const("MIMPID",w64,@{theory})],@{theory}),@{theory}),
                                    var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("initMachine",
   close
     (var_w("hartid",8),
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'curPrivilege",@{typ "state \<Rightarrow> state"},
                     lc("Machine","Privilege",@{theory}),@{theory}),var("state",qTy)),
               tp[apply
                    (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),var("s",qTy)),
                  var("s",qTy)]),
            let'
              (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  apply
                    (call
                       ("write'MCSR",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("MachineCSR.mstatus",
                           tp[var("v",@{typ MachineCSR}),
                              call
                                ("write'reg'mstatus",@{typ mstatus},
                                 tp[call
                                      ("MachineCSR.mstatus",@{typ mstatus},
                                       var("v",@{typ MachineCSR}),@{theory}),lw(0,64)],@{theory})],
                           @{theory}),@{theory}),var("s",qTy)),
                  tp[apply
                       (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'MCSR",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("MachineCSR.mstatus",
                              tp[var("v",@{typ MachineCSR}),
                                 rupd
                                   ("mstatus.M_VM",
                                    tp[call
                                         ("MachineCSR.mstatus",@{typ mstatus},
                                          var("v",@{typ MachineCSR}),@{theory}),
                                       call
                                         ("vmMode",(Word_Lib.mk_wordT 5),
                                          lc("Mbare","VM_Mode",@{theory}),@{theory})],@{theory})],
                              @{theory}),@{theory}),var("s",qTy)),
                     tp[apply
                          (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  let'
                    (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'MCSR",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("MachineCSR.mstatus",
                                 tp[var("v",@{typ MachineCSR}),
                                    rupd
                                      ("mstatus.M_FS",
                                       tp[call
                                            ("MachineCSR.mstatus",@{typ mstatus},
                                             var("v",@{typ MachineCSR}),@{theory}),
                                          call
                                            ("ext_status",(Word_Lib.mk_wordT 2),
                                             lc("Initial","ExtStatus",@{theory}),@{theory})],
                                       @{theory})],@{theory}),@{theory}),var("s",qTy)),
                        tp[apply
                             (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                              var("s0",qTy)),var("s0",qTy)]),
                     let'
                       (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("MachineCSR.mstatus",
                                    tp[var("v",@{typ MachineCSR}),
                                       rupd
                                         ("mstatus.M_XS",
                                          tp[call
                                               ("MachineCSR.mstatus",@{typ mstatus},
                                                var("v",@{typ MachineCSR}),@{theory}),
                                             call
                                               ("ext_status",(Word_Lib.mk_wordT 2),
                                                lc("Off","ExtStatus",@{theory}),@{theory})],
                                          @{theory})],@{theory}),@{theory}),var("s",qTy)),
                           tp[apply
                                (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("MachineCSR.mstatus",
                                       tp[var("v",@{typ MachineCSR}),
                                          rupd
                                            ("mstatus.M_SD",
                                             tp[call
                                                  ("MachineCSR.mstatus",@{typ mstatus},
                                                   var("v",@{typ MachineCSR}),@{theory}),lf],
                                             @{theory})],@{theory}),@{theory}),var("s",qTy)),
                              tp[apply
                                   (const("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ MachineCSR}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("MachineCSR.mhartid",
                                          tp[var("v",@{typ MachineCSR}),
                                             mop(Cast w64,var_w("hartid",8))],@{theory}),@{theory}),
                                    var("s",qTy)),
                                 tp[apply
                                      (const
                                         ("MCSR",@{typ "state \<Rightarrow> MachineCSR"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              apply
                                (call
                                   ("write'MCSR",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("MachineCSR.mtvec",
                                       tp[var("v",@{typ MachineCSR}),mop(Cast w64,lw(256,16))],
                                       @{theory}),@{theory}),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("initRegs",
   close
     (var_n"pc",
      close
        (var("state",qTy),
         rupd
           ("state.done",
            tp[apply
                 (call
                    ("write'PC",@{typ "state \<Rightarrow> state"},mop(Cast w64,var_n"pc"),@{theory}),
                  apply
                    (call
                       ("write'NextFetch",@{typ "state \<Rightarrow> state"},
                        mop(Some,
                            call
                              ("instrResult.BranchTo",@{typ instrResult},mop(Cast w64,var_n"pc"),
                               @{theory})),@{theory}),
                     mop(Snd,
                         apply
                           (forloop
                              (tp[ln 0,ln 31,
                                  close
                                    (var_n"i",
                                     close
                                       (var("state",qTy),
                                        tp[lu,
                                           apply
                                             (call
                                                ("write'fpr",@{typ "state \<Rightarrow> state"},
                                                 tp[lw(0,64),
                                                    mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                 @{theory}),var("state",qTy))]))]),
                            mop(Snd,
                                apply
                                  (forloop
                                     (tp[ln 0,ln 31,
                                         close
                                           (var_n"i",
                                            close
                                              (var("state",qTy),
                                               tp[lu,
                                                  apply
                                                    (call
                                                       ("write'gpr",
                                                        @{typ "state \<Rightarrow> state"},
                                                        tp[lw(0,64),
                                                           mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                        @{theory}),var("state",qTy))]))]),
                                   var("state",qTy))))))),lf],@{theory}))))
end
\<close>
termination excHandlerDelegate by lexicographic_order
termination intHandlerDelegate by lexicographic_order
termination searchDispatchableIntr by lexicographic_order
termination walk32 by lexicographic_order
termination walk39 by lexicographic_order
end