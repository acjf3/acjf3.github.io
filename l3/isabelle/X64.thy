(* X64.thy - generated by L3 - 27/10/2017 *)
theory X64
imports "$ISABELLE_HOME/src/HOL/Word/Word" "L3_Lib"
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "L3.ML"

datatype Zreg = RAX | RCX | RDX | RBX | RSP | RBP | RSI | RDI | zR8 | zR9 | zR10 | zR11 | zR12 |
  zR13 | zR14 | zR15

datatype Zeflags = Z_CF | Z_PF | Z_AF | Z_ZF | Z_SF | Z_OF

datatype Zsize = Z16 | Z32 | Z64 | Z8 bool

datatype Zbase = ZnoBase | ZregBase Zreg | ZripBase

datatype Zrm = Zm "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word" | Zr Zreg

datatype Zdest_src =
    Zr_rm "Zreg \<times> Zrm"
  | Zrm_i "Zrm \<times> 64 word"
  | Zrm_r "Zrm \<times> Zreg"

datatype Zimm_rm = Zimm "64 word" | Zrm Zrm

datatype Zmonop_name = Zdec | Zinc | Znot | Zneg

datatype Zbinop_name = Zadd | Zor | Zadc | Zsbb | Zand | Zsub | Zxor | Zcmp | Zrol | Zror | Zrcl |
  Zrcr | Zshl | Zshr | Ztest | Zsar

datatype Zbit_test_name = Zbt | Zbts | Zbtr | Zbtc

datatype Zcond = Z_O | Z_NO | Z_B | Z_NB | Z_E | Z_NE | Z_NA | Z_A | Z_S | Z_NS | Z_P | Z_NP | Z_L |
  Z_NL | Z_NG | Z_G | Z_ALWAYS

datatype Zea =
    Zea_i "Zsize \<times> 64 word"
  | Zea_m "Zsize \<times> 64 word"
  | Zea_r "Zsize \<times> Zreg"

datatype instruction =
    Zbinop "Zbinop_name \<times> Zsize \<times> Zdest_src"
  | Zbit_test "Zbit_test_name \<times> Zsize \<times> Zdest_src"
  | Zcall Zimm_rm
  | Zclc
  | Zcmc
  | Zcmpxchg "Zsize \<times> Zrm \<times> Zreg"
  | Zdiv "Zsize \<times> Zrm"
  | Zidiv "Zsize \<times> Zrm"
  | Zimul "Zsize \<times> Zrm"
  | Zimul2 "Zsize \<times> Zreg \<times> Zrm"
  | Zimul3 "Zsize \<times> Zreg \<times> Zrm \<times> 64 word"
  | Zjcc "Zcond \<times> 64 word"
  | Zjmp Zrm
  | Zlea "Zsize \<times> Zdest_src"
  | Zleave
  | Zloop "Zcond \<times> 64 word"
  | Zmonop "Zmonop_name \<times> Zsize \<times> Zrm"
  | Zmov "Zcond \<times> Zsize \<times> Zdest_src"
  | Zmovsx "Zsize \<times> Zdest_src \<times> Zsize"
  | Zmovzx "Zsize \<times> Zdest_src \<times> Zsize"
  | Zmul "Zsize \<times> Zrm"
  | Znop nat
  | Zpop Zrm
  | Zpush Zimm_rm
  | Zret "64 word"
  | Zset "Zcond \<times> bool \<times> Zrm"
  | Zstc
  | Zxadd "Zsize \<times> Zrm \<times> Zreg"
  | Zxchg "Zsize \<times> Zrm \<times> Zreg"

datatype Zinst =
    Zdec_fail string
  | Zfull_inst "(8 word list) \<times> instruction \<times> (8 word list) option"

record REX = B :: bool R :: bool W :: bool X :: bool

datatype exception =
    BadFlagAccess string
  | FAILURE string
  | INTERRUPT_EXCEPTION "8 word"
  | NoException

record state =
  EFLAGS :: "Zeflags \<Rightarrow> (bool option)"
  MEM :: "64 word \<Rightarrow> 8 word"
  REG :: "Zreg \<Rightarrow> 64 word"
  RIP :: "64 word"
  exception :: exception

fun nat_to_Zreg :: "nat \<Rightarrow> Zreg" where
  "nat_to_Zreg x =
   (if x = 0 then X64.RAX
    else if x = 1 then X64.RCX
    else if x = 2 then X64.RDX
    else if x = 3 then X64.RBX
    else if x = 4 then X64.RSP
    else if x = 5 then X64.RBP
    else if x = 6 then X64.RSI
    else if x = 7 then X64.RDI
    else if x = 8 then X64.zR8
    else if x = 9 then X64.zR9
    else if x = 10 then X64.zR10
    else if x = 11 then X64.zR11
    else if x = 12 then X64.zR12
    else if x = 13 then X64.zR13
    else if x = 14 then X64.zR14
    else if x = 15 then X64.zR15
    else HOL.undefined)"

fun nat_to_Zeflags :: "nat \<Rightarrow> Zeflags" where
  "nat_to_Zeflags x =
   (if x = 0 then X64.Z_CF
    else if x = 1 then X64.Z_PF
    else if x = 2 then X64.Z_AF
    else if x = 3 then X64.Z_ZF
    else if x = 4 then X64.Z_SF
    else if x = 5 then X64.Z_OF
    else HOL.undefined)"

fun nat_to_Zmonop_name :: "nat \<Rightarrow> Zmonop_name" where
  "nat_to_Zmonop_name x =
   (if x = 0 then X64.Zdec
    else if x = 1 then X64.Zinc
    else if x = 2 then X64.Znot
    else if x = 3 then X64.Zneg
    else HOL.undefined)"

fun nat_to_Zbinop_name :: "nat \<Rightarrow> Zbinop_name" where
  "nat_to_Zbinop_name x =
   (if x = 0 then X64.Zadd
    else if x = 1 then X64.Zor
    else if x = 2 then X64.Zadc
    else if x = 3 then X64.Zsbb
    else if x = 4 then X64.Zand
    else if x = 5 then X64.Zsub
    else if x = 6 then X64.Zxor
    else if x = 7 then X64.Zcmp
    else if x = 8 then X64.Zrol
    else if x = 9 then X64.Zror
    else if x = 10 then X64.Zrcl
    else if x = 11 then X64.Zrcr
    else if x = 12 then X64.Zshl
    else if x = 13 then X64.Zshr
    else if x = 14 then X64.Ztest
    else if x = 15 then X64.Zsar
    else HOL.undefined)"

fun nat_to_Zbit_test_name :: "nat \<Rightarrow> Zbit_test_name" where
  "nat_to_Zbit_test_name x =
   (if x = 0 then X64.Zbt
    else if x = 1 then X64.Zbts
    else if x = 2 then X64.Zbtr
    else if x = 3 then X64.Zbtc
    else HOL.undefined)"

fun nat_to_Zcond :: "nat \<Rightarrow> Zcond" where
  "nat_to_Zcond x =
   (if x = 0 then X64.Z_O
    else if x = 1 then X64.Z_NO
    else if x = 2 then X64.Z_B
    else if x = 3 then X64.Z_NB
    else if x = 4 then X64.Z_E
    else if x = 5 then X64.Z_NE
    else if x = 6 then X64.Z_NA
    else if x = 7 then X64.Z_A
    else if x = 8 then X64.Z_S
    else if x = 9 then X64.Z_NS
    else if x = 10 then X64.Z_P
    else if x = 11 then X64.Z_NP
    else if x = 12 then X64.Z_L
    else if x = 13 then X64.Z_NL
    else if x = 14 then X64.Z_NG
    else if x = 15 then X64.Z_G
    else if x = 16 then X64.Z_ALWAYS
    else HOL.undefined)"

fun Zreg_to_nat :: "Zreg \<Rightarrow> nat" where
  "Zreg_to_nat x =
   (case x of
       X64.RAX => 0
     | X64.RCX => 1
     | X64.RDX => 2
     | X64.RBX => 3
     | X64.RSP => 4
     | X64.RBP => 5
     | X64.RSI => 6
     | X64.RDI => 7
     | X64.zR8 => 8
     | X64.zR9 => 9
     | X64.zR10 => 10
     | X64.zR11 => 11
     | X64.zR12 => 12
     | X64.zR13 => 13
     | X64.zR14 => 14
     | X64.zR15 => 15)"

fun Zeflags_to_nat :: "Zeflags \<Rightarrow> nat" where
  "Zeflags_to_nat x =
   (case x of
       X64.Z_CF => 0 | X64.Z_PF => 1 | X64.Z_AF => 2 | X64.Z_ZF => 3 | X64.Z_SF => 4 | X64.Z_OF => 5)"

fun Zmonop_name_to_nat :: "Zmonop_name \<Rightarrow> nat" where
  "Zmonop_name_to_nat x =
   (case x of
       X64.Zdec => 0 | X64.Zinc => 1 | X64.Znot => 2 | X64.Zneg => 3)"

fun Zbinop_name_to_nat :: "Zbinop_name \<Rightarrow> nat" where
  "Zbinop_name_to_nat x =
   (case x of
       X64.Zadd => 0
     | X64.Zor => 1
     | X64.Zadc => 2
     | X64.Zsbb => 3
     | X64.Zand => 4
     | X64.Zsub => 5
     | X64.Zxor => 6
     | X64.Zcmp => 7
     | X64.Zrol => 8
     | X64.Zror => 9
     | X64.Zrcl => 10
     | X64.Zrcr => 11
     | X64.Zshl => 12
     | X64.Zshr => 13
     | X64.Ztest => 14
     | X64.Zsar => 15)"

fun Zbit_test_name_to_nat :: "Zbit_test_name \<Rightarrow> nat" where
  "Zbit_test_name_to_nat x =
   (case x of
       X64.Zbt => 0 | X64.Zbts => 1 | X64.Zbtr => 2 | X64.Zbtc => 3)"

fun Zcond_to_nat :: "Zcond \<Rightarrow> nat" where
  "Zcond_to_nat x =
   (case x of
       X64.Z_O => 0
     | X64.Z_NO => 1
     | X64.Z_B => 2
     | X64.Z_NB => 3
     | X64.Z_E => 4
     | X64.Z_NE => 5
     | X64.Z_NA => 6
     | X64.Z_A => 7
     | X64.Z_S => 8
     | X64.Z_NS => 9
     | X64.Z_P => 10
     | X64.Z_NP => 11
     | X64.Z_L => 12
     | X64.Z_NL => 13
     | X64.Z_NG => 14
     | X64.Z_G => 15
     | X64.Z_ALWAYS => 16)"

fun Zreg_to_string :: "Zreg \<Rightarrow> string" where
  "Zreg_to_string x =
   (case x of
       X64.RAX => ''RAX''
     | X64.RCX => ''RCX''
     | X64.RDX => ''RDX''
     | X64.RBX => ''RBX''
     | X64.RSP => ''RSP''
     | X64.RBP => ''RBP''
     | X64.RSI => ''RSI''
     | X64.RDI => ''RDI''
     | X64.zR8 => ''zR8''
     | X64.zR9 => ''zR9''
     | X64.zR10 => ''zR10''
     | X64.zR11 => ''zR11''
     | X64.zR12 => ''zR12''
     | X64.zR13 => ''zR13''
     | X64.zR14 => ''zR14''
     | X64.zR15 => ''zR15'')"

fun Zeflags_to_string :: "Zeflags \<Rightarrow> string" where
  "Zeflags_to_string x =
   (case x of
       X64.Z_CF => ''Z_CF''
     | X64.Z_PF => ''Z_PF''
     | X64.Z_AF => ''Z_AF''
     | X64.Z_ZF => ''Z_ZF''
     | X64.Z_SF => ''Z_SF''
     | X64.Z_OF => ''Z_OF'')"

fun Zmonop_name_to_string :: "Zmonop_name \<Rightarrow> string" where
  "Zmonop_name_to_string x =
   (case x of
       X64.Zdec => ''Zdec'' | X64.Zinc => ''Zinc'' | X64.Znot => ''Znot'' | X64.Zneg => ''Zneg'')"

fun Zbinop_name_to_string :: "Zbinop_name \<Rightarrow> string" where
  "Zbinop_name_to_string x =
   (case x of
       X64.Zadd => ''Zadd''
     | X64.Zor => ''Zor''
     | X64.Zadc => ''Zadc''
     | X64.Zsbb => ''Zsbb''
     | X64.Zand => ''Zand''
     | X64.Zsub => ''Zsub''
     | X64.Zxor => ''Zxor''
     | X64.Zcmp => ''Zcmp''
     | X64.Zrol => ''Zrol''
     | X64.Zror => ''Zror''
     | X64.Zrcl => ''Zrcl''
     | X64.Zrcr => ''Zrcr''
     | X64.Zshl => ''Zshl''
     | X64.Zshr => ''Zshr''
     | X64.Ztest => ''Ztest''
     | X64.Zsar => ''Zsar'')"

fun Zbit_test_name_to_string :: "Zbit_test_name \<Rightarrow> string" where
  "Zbit_test_name_to_string x =
   (case x of
       X64.Zbt => ''Zbt'' | X64.Zbts => ''Zbts'' | X64.Zbtr => ''Zbtr'' | X64.Zbtc => ''Zbtc'')"

fun Zcond_to_string :: "Zcond \<Rightarrow> string" where
  "Zcond_to_string x =
   (case x of
       X64.Z_O => ''Z_O''
     | X64.Z_NO => ''Z_NO''
     | X64.Z_B => ''Z_B''
     | X64.Z_NB => ''Z_NB''
     | X64.Z_E => ''Z_E''
     | X64.Z_NE => ''Z_NE''
     | X64.Z_NA => ''Z_NA''
     | X64.Z_A => ''Z_A''
     | X64.Z_S => ''Z_S''
     | X64.Z_NS => ''Z_NS''
     | X64.Z_P => ''Z_P''
     | X64.Z_NP => ''Z_NP''
     | X64.Z_L => ''Z_L''
     | X64.Z_NL => ''Z_NL''
     | X64.Z_NG => ''Z_NG''
     | X64.Z_G => ''Z_G''
     | X64.Z_ALWAYS => ''Z_ALWAYS'')"

fun string_to_Zreg :: "string \<Rightarrow> Zreg" where
  "string_to_Zreg x =
   (if x = ''RAX'' then X64.RAX
    else if x = ''RCX'' then X64.RCX
    else if x = ''RDX'' then X64.RDX
    else if x = ''RBX'' then X64.RBX
    else if x = ''RSP'' then X64.RSP
    else if x = ''RBP'' then X64.RBP
    else if x = ''RSI'' then X64.RSI
    else if x = ''RDI'' then X64.RDI
    else if x = ''zR8'' then X64.zR8
    else if x = ''zR9'' then X64.zR9
    else if x = ''zR10'' then X64.zR10
    else if x = ''zR11'' then X64.zR11
    else if x = ''zR12'' then X64.zR12
    else if x = ''zR13'' then X64.zR13
    else if x = ''zR14'' then X64.zR14
    else if x = ''zR15'' then X64.zR15
    else HOL.undefined)"

fun string_to_Zeflags :: "string \<Rightarrow> Zeflags" where
  "string_to_Zeflags x =
   (if x = ''Z_CF'' then X64.Z_CF
    else if x = ''Z_PF'' then X64.Z_PF
    else if x = ''Z_AF'' then X64.Z_AF
    else if x = ''Z_ZF'' then X64.Z_ZF
    else if x = ''Z_SF'' then X64.Z_SF
    else if x = ''Z_OF'' then X64.Z_OF
    else HOL.undefined)"

fun string_to_Zmonop_name :: "string \<Rightarrow> Zmonop_name" where
  "string_to_Zmonop_name x =
   (if x = ''Zdec'' then X64.Zdec
    else if x = ''Zinc'' then X64.Zinc
    else if x = ''Znot'' then X64.Znot
    else if x = ''Zneg'' then X64.Zneg
    else HOL.undefined)"

fun string_to_Zbinop_name :: "string \<Rightarrow> Zbinop_name" where
  "string_to_Zbinop_name x =
   (if x = ''Zadd'' then X64.Zadd
    else if x = ''Zor'' then X64.Zor
    else if x = ''Zadc'' then X64.Zadc
    else if x = ''Zsbb'' then X64.Zsbb
    else if x = ''Zand'' then X64.Zand
    else if x = ''Zsub'' then X64.Zsub
    else if x = ''Zxor'' then X64.Zxor
    else if x = ''Zcmp'' then X64.Zcmp
    else if x = ''Zrol'' then X64.Zrol
    else if x = ''Zror'' then X64.Zror
    else if x = ''Zrcl'' then X64.Zrcl
    else if x = ''Zrcr'' then X64.Zrcr
    else if x = ''Zshl'' then X64.Zshl
    else if x = ''Zshr'' then X64.Zshr
    else if x = ''Ztest'' then X64.Ztest
    else if x = ''Zsar'' then X64.Zsar
    else HOL.undefined)"

fun string_to_Zbit_test_name :: "string \<Rightarrow> Zbit_test_name" where
  "string_to_Zbit_test_name x =
   (if x = ''Zbt'' then X64.Zbt
    else if x = ''Zbts'' then X64.Zbts
    else if x = ''Zbtr'' then X64.Zbtr
    else if x = ''Zbtc'' then X64.Zbtc
    else HOL.undefined)"

fun string_to_Zcond :: "string \<Rightarrow> Zcond" where
  "string_to_Zcond x =
   (if x = ''Z_O'' then X64.Z_O
    else if x = ''Z_NO'' then X64.Z_NO
    else if x = ''Z_B'' then X64.Z_B
    else if x = ''Z_NB'' then X64.Z_NB
    else if x = ''Z_E'' then X64.Z_E
    else if x = ''Z_NE'' then X64.Z_NE
    else if x = ''Z_NA'' then X64.Z_NA
    else if x = ''Z_A'' then X64.Z_A
    else if x = ''Z_S'' then X64.Z_S
    else if x = ''Z_NS'' then X64.Z_NS
    else if x = ''Z_P'' then X64.Z_P
    else if x = ''Z_NP'' then X64.Z_NP
    else if x = ''Z_L'' then X64.Z_L
    else if x = ''Z_NL'' then X64.Z_NL
    else if x = ''Z_NG'' then X64.Z_NG
    else if x = ''Z_G'' then X64.Z_G
    else if x = ''Z_ALWAYS'' then X64.Z_ALWAYS
    else HOL.undefined)"

fun boolify'3 :: "3 word \<Rightarrow> (bool \<times> bool \<times> bool)" where
  "boolify'3 w =
   (case to_bl w of
     [b0,b1,b2] \<Rightarrow>
     (b0,b1,b2))"

fun boolify'8 :: "8 word \<Rightarrow>
  (bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'8 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7))"

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("raise'exception",
   close
     (var("e",@{typ exception}),
      close
        (var("state",qTy),
         tp[lx(@{typ 'a}),
            ite(eq(call("state.exception",@{typ exception},var("state",qTy),@{theory}),
                   Term.Const(@{const_name "NoException"},@{typ exception})),
                rupd("state.exception",tp[var("state",qTy),var("e",@{typ exception})],@{theory}),
                var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DE_exception",
   close
     (var("state",qTy),
      mop(Snd,
          apply
            (call
               ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                call("exception.INTERRUPT_EXCEPTION",@{typ exception},lw(0,8),@{theory}),@{theory}),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UD_exception",
   close
     (var("state",qTy),
      mop(Snd,
          apply
            (call
               ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                call("exception.INTERRUPT_EXCEPTION",@{typ exception},lw(6,8),@{theory}),@{theory}),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem8",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         apply
           (call("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),@{theory}),
            var_w("addr",64)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'mem8",
   close
     (tp[var_w("b",8),var_w("addr",64)],
      close
        (var("state",qTy),
         rupd
           ("state.MEM",
            tp[var("state",qTy),
               fupd
                 (call("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),@{theory}),
                  var_w("addr",64),var_w("b",8))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem16",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         cc[apply
              (call
                 ("mem8",@{typ "state \<Rightarrow> 8 word"},bop(Add,var_w("addr",64),lw(1,64)),
                  @{theory}),var("state",qTy)),
            apply
              (call("mem8",@{typ "state \<Rightarrow> 8 word"},var_w("addr",64),@{theory}),
               var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'mem16",
   close
     (tp[var_w("w",16),var_w("addr",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'mem8",@{typ "state \<Rightarrow> state"},
               tp[ex(var_w("w",16),ln 15,ln 8,w8),bop(Add,var_w("addr",64),lw(1,64))],@{theory}),
            apply
              (call
                 ("write'mem8",@{typ "state \<Rightarrow> state"},
                  tp[ex(var_w("w",16),ln 7,ln 0,w8),var_w("addr",64)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem32",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         cc[apply
              (call
                 ("mem16",@{typ "state \<Rightarrow> 16 word"},bop(Add,var_w("addr",64),lw(2,64)),
                  @{theory}),var("state",qTy)),
            apply
              (call("mem16",@{typ "state \<Rightarrow> 16 word"},var_w("addr",64),@{theory}),
               var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'mem32",
   close
     (tp[var_w("w",32),var_w("addr",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'mem16",@{typ "state \<Rightarrow> state"},
               tp[ex(var_w("w",32),ln 31,ln 16,w16),bop(Add,var_w("addr",64),lw(2,64))],@{theory}),
            apply
              (call
                 ("write'mem16",@{typ "state \<Rightarrow> state"},
                  tp[ex(var_w("w",32),ln 15,ln 0,w16),var_w("addr",64)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem64",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         cc[apply
              (call
                 ("mem32",@{typ "state \<Rightarrow> 32 word"},bop(Add,var_w("addr",64),lw(4,64)),
                  @{theory}),var("state",qTy)),
            apply
              (call("mem32",@{typ "state \<Rightarrow> 32 word"},var_w("addr",64),@{theory}),
               var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'mem64",
   close
     (tp[var_w("w",64),var_w("addr",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'mem32",@{typ "state \<Rightarrow> state"},
               tp[ex(var_w("w",64),ln 63,ln 32,w32),bop(Add,var_w("addr",64),lw(4,64))],@{theory}),
            apply
              (call
                 ("write'mem32",@{typ "state \<Rightarrow> state"},
                  tp[ex(var_w("w",64),ln 31,ln 0,w32),var_w("addr",64)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Eflag",
   close
     (var("flag",@{typ Zeflags}),
      close
        (var("state",qTy),
         cs(apply
              (call
                 ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},var("state",qTy),
                  @{theory}),var("flag",@{typ Zeflags})),
            [(mop(Some,var_b"b"),tp[var_b"b",var("state",qTy)]),
             (lo HOLogic.boolT,
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                    call
                      ("exception.BadFlagAccess",@{typ exception},
                       mop(Cast(@{typ string}),var("flag",@{typ Zeflags})),@{theory}),@{theory}),
                 var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'Eflag",
   close
     (tp[var_b"b",var("flag",@{typ Zeflags})],
      close
        (var("state",qTy),
         rupd
           ("state.EFLAGS",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},var("state",qTy),
                     @{theory}),var("flag",@{typ Zeflags}),mop(Some,var_b"b"))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FlagUnspecified",
   close
     (var("flag",@{typ Zeflags}),
      close
        (var("state",qTy),
         rupd
           ("state.EFLAGS",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},var("state",qTy),
                     @{theory}),var("flag",@{typ Zeflags}),lo HOLogic.boolT)],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_CF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_CF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_PF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'PF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_PF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("AF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_AF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'AF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_AF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ZF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_ZF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'ZF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_ZF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_SF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'SF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_SF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("OF",
   close
     (var("state",qTy),
      apply
        (call
           ("Eflag",@{typ "state \<Rightarrow> (bool \<times> state)"},
            lc("Z_OF","Zeflags",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'OF",
   close
     (var_b"b",
      close
        (var("state",qTy),
         apply
           (call
              ("write'Eflag",@{typ "state \<Rightarrow> state"},
               tp[var_b"b",lc("Z_OF","Zeflags",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_index",
   close
     (var("index",@{typ "(2 word \<times> Zreg) option"}),
      close
        (var("state",qTy),
         cs(var("index",@{typ "(2 word \<times> Zreg) option"}),
            [(lo(@{typ "2 word \<times> Zreg"}),lw(0,64)),
             (mop(Some,tp[var_w("scale",2),var("idx",@{typ Zreg})]),
              bop(Mul,bop(Lsl,lw(1,64),mop(Cast HOLogic.natT,var_w("scale",2))),
                  apply
                    (call
                       ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                     var("idx",@{typ Zreg}))))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_base",
   close
     (var("base",@{typ Zbase}),
      close
        (var("state",qTy),
         cs(var("base",@{typ Zbase}),
            [(Term.Const(@{const_name "ZnoBase"},@{typ Zbase}),lw(0,64)),
             (Term.Const(@{const_name "ZripBase"},@{typ Zbase}),
              call("state.RIP",w64,var("state",qTy),@{theory})),
             (call("Zbase.ZregBase",@{typ Zbase},var("b",@{typ Zreg}),@{theory}),
              apply
                (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                 var("b",@{typ Zreg})))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem_addr",
   close
     (var("m",@{typ "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
      close
        (var("state",qTy),
         let'
           (tp[var("index",@{typ "(2 word \<times> Zreg) option"}),var("base",@{typ Zbase}),
               var_w("displacement",64)],
            var("m",@{typ "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
            bop(Add,
                bop(Add,
                    apply
                      (call
                         ("ea_index",@{typ "state \<Rightarrow> 64 word"},
                          var("index",@{typ "(2 word \<times> Zreg) option"}),@{theory}),
                       var("state",qTy)),
                    apply
                      (call
                         ("ea_base",@{typ "state \<Rightarrow> 64 word"},var("base",@{typ Zbase}),
                          @{theory}),var("state",qTy))),var_w("displacement",64))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_Zrm",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         cs(var("rm",@{typ Zrm}),
            [(call("Zrm.Zr",@{typ Zrm},var("r",@{typ Zreg}),@{theory}),
              call
                ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory})),
             (call
                ("Zrm.Zm",@{typ Zrm},
                 var("m",@{typ "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
                 @{theory}),
              call
                ("Zea.Zea_m",@{typ Zea},
                 tp[var("size",@{typ Zsize}),
                    apply
                      (call
                         ("mem_addr",@{typ "state \<Rightarrow> 64 word"},
                          var("m",
                              @{typ
                              "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
                          @{theory}),var("state",qTy))],@{theory}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_Zdest",
   close
     (tp[var("size",@{typ Zsize}),var("ds",@{typ Zdest_src})],
      close
        (var("state",qTy),
         cs(var("ds",@{typ Zdest_src}),
            [(call("Zdest_src.Zrm_i",@{typ Zdest_src},tp[var("rm",@{typ Zrm}),var_a w64],@{theory}),
              apply
                (call
                   ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                    tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy))),
             (call
                ("Zdest_src.Zrm_r",@{typ Zdest_src},tp[var("rm",@{typ Zrm}),var_a @{typ Zreg}],
                 @{theory}),
              apply
                (call
                   ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                    tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy))),
             (call
                ("Zdest_src.Zr_rm",@{typ Zdest_src},tp[var("r",@{typ Zreg}),var_a @{typ Zrm}],
                 @{theory}),
              call
                ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_Zsrc",
   close
     (tp[var("size",@{typ Zsize}),var("ds",@{typ Zdest_src})],
      close
        (var("state",qTy),
         cs(var("ds",@{typ Zdest_src}),
            [(call("Zdest_src.Zrm_i",@{typ Zdest_src},tp[var_a @{typ Zrm},var_w("i",64)],@{theory}),
              call("Zea.Zea_i",@{typ Zea},tp[var("size",@{typ Zsize}),var_w("i",64)],@{theory})),
             (call
                ("Zdest_src.Zrm_r",@{typ Zdest_src},tp[var_a @{typ Zrm},var("r",@{typ Zreg})],
                 @{theory}),
              call
                ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory})),
             (call
                ("Zdest_src.Zr_rm",@{typ Zdest_src},tp[var_a @{typ Zreg},var("rm",@{typ Zrm})],
                 @{theory}),
              apply
                (call
                   ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                    tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ea_Zimm_rm",
   close
     (var("imm_rm",@{typ Zimm_rm}),
      close
        (var("state",qTy),
         cs(var("imm_rm",@{typ Zimm_rm}),
            [(call("Zimm_rm.Zrm",@{typ Zimm_rm},var("rm",@{typ Zrm}),@{theory}),
              apply
                (call
                   ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                    tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                 var("state",qTy))),
             (call("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),@{theory}),
              call
                ("Zea.Zea_i",@{typ Zea},
                 tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var_w("imm",64)],@{theory}))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("modSize",
   close
     (tp[var("size",@{typ Zsize}),var_w("imm",64)],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           bop(Mod,var_w("imm",64),lw(8,64))),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),bop(Mod,var_w("imm",64),lw(16,64))),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),bop(Mod,var_w("imm",64),lw(32,64))),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),bop(Mod,var_w("imm",64),lw(64,64)))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("restrictSize",
   close
     (tp[var("size",@{typ Zsize}),var_w("imm",64)],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           bop(BAnd,var_w("imm",64),lw(255,64))),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),bop(BAnd,var_w("imm",64),lw(65535,64))),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),bop(BAnd,var_w("imm",64),lw(4294967295,64))),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),var_w("imm",64))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("EA",
   close
     (var("ea",@{typ Zea}),
      close
        (var("state",qTy),
         cs(var("ea",@{typ Zea}),
            [(call("Zea.Zea_i",@{typ Zea},var("i",@{typ "Zsize \<times> 64 word"}),@{theory}),
              call("restrictSize",w64,var("i",@{typ "Zsize \<times> 64 word"}),@{theory})),
             (call
                ("Zea.Zea_r",@{typ Zea},
                 tp[call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory}),var("r",@{typ Zreg})],
                 @{theory}),
              bop(BAnd,
                  ite(bop(Or,var_b"have_rex",
                          mop(Not,
                              bop(In,var("r",@{typ Zreg}),
                                  sl[lc("RSP","Zreg",@{theory}),lc("RBP","Zreg",@{theory}),
                                     lc("RSI","Zreg",@{theory}),lc("RDI","Zreg",@{theory})]))),
                      apply
                        (call
                           ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                            @{theory}),var("r",@{typ Zreg})),
                      bop(Lsr,
                          apply
                            (call
                               ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                                @{theory}),
                             mop(Cast @{typ Zreg},
                                 bop(Sub,mop(Cast HOLogic.natT,var("r",@{typ Zreg})),ln 4))),ln 8)),
                  lw(255,64))),
             (call("Zea.Zea_r",@{typ Zea},tp[var("s",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
              call
                ("restrictSize",w64,
                 tp[var("s",@{typ Zsize}),
                    apply
                      (call
                         ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                       var("r",@{typ Zreg}))],@{theory})),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var_w("a",64)],
                 @{theory}),
              mop(Cast w64,
                  apply
                    (call("mem8",@{typ "state \<Rightarrow> 8 word"},var_w("a",64),@{theory}),
                     var("state",qTy)))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),var_w("a",64)],@{theory}),
              mop(Cast w64,
                  apply
                    (call("mem16",@{typ "state \<Rightarrow> 16 word"},var_w("a",64),@{theory}),
                     var("state",qTy)))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),var_w("a",64)],@{theory}),
              mop(Cast w64,
                  apply
                    (call("mem32",@{typ "state \<Rightarrow> 32 word"},var_w("a",64),@{theory}),
                     var("state",qTy)))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var_w("a",64)],@{theory}),
              apply
                (call("mem64",@{typ "state \<Rightarrow> 64 word"},var_w("a",64),@{theory}),
                 var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'EA",
   close
     (tp[var_w("w",64),var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         cs(var("ea",@{typ Zea}),
            [(call("Zea.Zea_i",@{typ Zea},var("i",@{typ "Zsize \<times> 64 word"}),@{theory}),
              mop(Snd,
                  apply
                    (call
                       ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                        call("exception.FAILURE",@{typ exception},ls"write to constant",@{theory}),
                        @{theory}),var("state",qTy)))),
             (call
                ("Zea.Zea_r",@{typ Zea},
                 tp[call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory}),var("r",@{typ Zreg})],
                 @{theory}),
              ite(bop(Or,var_b"have_rex",
                      mop(Not,
                          bop(In,var("r",@{typ Zreg}),
                              sl[lc("RSP","Zreg",@{theory}),lc("RBP","Zreg",@{theory}),
                                 lc("RSI","Zreg",@{theory}),lc("RDI","Zreg",@{theory})]))),
                  rupd
                    ("state.REG",
                     tp[var("state",qTy),
                        fupd
                          (call
                             ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                              @{theory}),var("r",@{typ Zreg}),
                           bfi(ln 7,ln 0,ex(var_w("w",64),ln 7,ln 0,w8),
                               apply
                                 (call
                                    ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var("r",@{typ Zreg}))))],@{theory}),
                  let'
                    (var("x",@{typ Zreg}),
                     mop(Cast @{typ Zreg},bop(Sub,mop(Cast HOLogic.natT,var("r",@{typ Zreg})),ln 4)),
                     rupd
                       ("state.REG",
                        tp[var("state",qTy),
                           fupd
                             (call
                                ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                                 @{theory}),var("x",@{typ Zreg}),
                              bfi(ln 15,ln 8,ex(var_w("w",64),ln 7,ln 0,w8),
                                  apply
                                    (call
                                       ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},
                                        var("state",qTy),@{theory}),var("x",@{typ Zreg}))))],
                        @{theory})))),
             (call
                ("Zea.Zea_r",@{typ Zea},
                 tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
              rupd
                ("state.REG",
                 tp[var("state",qTy),
                    fupd
                      (call
                         ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                       var("r",@{typ Zreg}),
                       bfi(ln 15,ln 0,ex(var_w("w",64),ln 15,ln 0,w16),
                           apply
                             (call
                                ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                                 @{theory}),var("r",@{typ Zreg}))))],@{theory})),
             (call
                ("Zea.Zea_r",@{typ Zea},
                 tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
              rupd
                ("state.REG",
                 tp[var("state",qTy),
                    fupd
                      (call
                         ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                       var("r",@{typ Zreg}),mop(Cast w64,ex(var_w("w",64),ln 31,ln 0,w32)))],
                 @{theory})),
             (call
                ("Zea.Zea_r",@{typ Zea},
                 tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
              rupd
                ("state.REG",
                 tp[var("state",qTy),
                    fupd
                      (call
                         ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                       var("r",@{typ Zreg}),var_w("w",64))],@{theory})),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var_w("a",64)],
                 @{theory}),
              apply
                (call
                   ("write'mem8",@{typ "state \<Rightarrow> state"},
                    tp[ex(var_w("w",64),ln 7,ln 0,w8),var_w("a",64)],@{theory}),var("state",qTy))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),var_w("a",64)],@{theory}),
              apply
                (call
                   ("write'mem16",@{typ "state \<Rightarrow> state"},
                    tp[ex(var_w("w",64),ln 15,ln 0,w16),var_w("a",64)],@{theory}),var("state",qTy))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),var_w("a",64)],@{theory}),
              apply
                (call
                   ("write'mem32",@{typ "state \<Rightarrow> state"},
                    tp[ex(var_w("w",64),ln 31,ln 0,w32),var_w("a",64)],@{theory}),var("state",qTy))),
             (call
                ("Zea.Zea_m",@{typ Zea},
                 tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var_w("a",64)],@{theory}),
              apply
                (call
                   ("write'mem64",@{typ "state \<Rightarrow> state"},
                    tp[var_w("w",64),var_w("a",64)],@{theory}),var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("read_dest_src_ea",
   close
     (var("sd",@{typ "Zsize \<times> Zdest_src"}),
      close
        (var("state",qTy),
         let'
           (var("v",@{typ Zea}),
            apply
              (call
                 ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                  var("sd",@{typ "Zsize \<times> Zdest_src"}),@{theory}),var("state",qTy)),
            tp[var("v",@{typ Zea}),
               apply
                 (call("EA",@{typ "state \<Rightarrow> 64 word"},var("v",@{typ Zea}),@{theory}),
                  var("state",qTy)),
               apply
                 (call
                    ("EA",@{typ "state \<Rightarrow> 64 word"},
                     apply
                       (call
                          ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                           var("sd",@{typ "Zsize \<times> Zdest_src"}),@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("call_dest_from_ea",
   close
     (var("ea",@{typ Zea}),
      close
        (var("state",qTy),
         cs(var("ea",@{typ Zea}),
            [(call("Zea.Zea_i",@{typ Zea},tp[var_a @{typ Zsize},var_w("i",64)],@{theory}),
              bop(Add,call("state.RIP",w64,var("state",qTy),@{theory}),var_w("i",64))),
             (call("Zea.Zea_r",@{typ Zea},tp[var_a @{typ Zsize},var("r",@{typ Zreg})],@{theory}),
              apply
                (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                 var("r",@{typ Zreg}))),
             (call("Zea.Zea_m",@{typ Zea},tp[var_a @{typ Zsize},var_w("a",64)],@{theory}),
              apply
                (call("mem64",@{typ "state \<Rightarrow> 64 word"},var_w("a",64),@{theory}),
                 var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("get_ea_address",
   close
     (var("ea",@{typ Zea}),
      cs(var("ea",@{typ Zea}),
         [(call("Zea.Zea_i",@{typ Zea},tp[var_a @{typ Zsize},var_w("i",64)],@{theory}),lw(0,64)),
          (call("Zea.Zea_r",@{typ Zea},tp[var_a @{typ Zsize},var("r",@{typ Zreg})],@{theory}),
           lw(0,64)),
          (call("Zea.Zea_m",@{typ Zea},tp[var_a @{typ Zsize},var_w("a",64)],@{theory}),var_w("a",64))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("jump_to_ea",
   close
     (var("ea",@{typ Zea}),
      close
        (var("state",qTy),
         rupd
           ("state.RIP",
            tp[var("state",qTy),
               apply
                 (call
                    ("call_dest_from_ea",@{typ "state \<Rightarrow> 64 word"},var("ea",@{typ Zea}),
                     @{theory}),var("state",qTy))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ByteParity",
   close
     (var_w("b",8),
      eq(bop(Mod,
             bop(Add,
                 bop(Add,
                     bop(Add,
                         bop(Add,
                             bop(Add,
                                 bop(Add,
                                     bop(Add,mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 7)),
                                         mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 6))),
                                     mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 5))),
                                 mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 4))),
                             mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 3))),
                         mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 2))),
                     mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 1))),
                 mop(Cast HOLogic.natT,bop(Bit,var_w("b",8),ln 0))),ln 2),ln 0)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Zsize_width",
   close
     (var("size",@{typ Zsize}),
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),ln 8),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),ln 16),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),ln 32),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),ln 64)],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("word_size_msb",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64)],
      bop(Bit,var_w("w",64),
          bop(Sub,call("Zsize_width",HOLogic.natT,var("size",@{typ Zsize}),@{theory}),ln 1))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_PF",
   close
     (var_w("w",64),
      close
        (var("state",qTy),
         apply
           (call
              ("write'PF",@{typ "state \<Rightarrow> state"},
               call("ByteParity",HOLogic.boolT,ex(var_w("w",64),ln 7,ln 0,w8),@{theory}),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_SF",
   close
     (var("s_w",@{typ "Zsize \<times> 64 word"}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'SF",@{typ "state \<Rightarrow> state"},
               call
                 ("word_size_msb",HOLogic.boolT,var("s_w",@{typ "Zsize \<times> 64 word"}),@{theory}),
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_ZF",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'ZF",@{typ "state \<Rightarrow> state"},
               cs(var("size",@{typ Zsize}),
                  [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                    eq(mop(Cast w8,var_w("w",64)),lw(0,8))),
                   (Term.Const(@{const_name "Z16"},@{typ Zsize}),
                    eq(mop(Cast w16,var_w("w",64)),lw(0,16))),
                   (Term.Const(@{const_name "Z32"},@{typ Zsize}),
                    eq(mop(Cast w32,var_w("w",64)),lw(0,32))),
                   (Term.Const(@{const_name "Z64"},@{typ Zsize}),eq(var_w("w",64),lw(0,64)))],
                  @{context}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_arith_eflags_except_CF_OF",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("FlagUnspecified",@{typ "state \<Rightarrow> state"},lc("Z_AF","Zeflags",@{theory}),
               @{theory}),
            apply
              (call
                 ("write_ZF",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var_w("w",64)],@{theory}),
               apply
                 (call
                    ("write_SF",@{typ "state \<Rightarrow> state"},
                     tp[var("size",@{typ Zsize}),var_w("w",64)],@{theory}),
                  apply
                    (call("write_PF",@{typ "state \<Rightarrow> state"},var_w("w",64),@{theory}),
                     var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_arith_eflags",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64),var_b"c",var_b"x"],
      close
        (var("state",qTy),
         apply
           (call
              ("write_arith_eflags_except_CF_OF",@{typ "state \<Rightarrow> state"},
               tp[var("size",@{typ Zsize}),var_w("w",64)],@{theory}),
            apply
              (call("write'OF",@{typ "state \<Rightarrow> state"},var_b"x",@{theory}),
               apply
                 (call("write'CF",@{typ "state \<Rightarrow> state"},var_b"c",@{theory}),
                  var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_logical_eflags",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64)],
      close
        (var("state",qTy),
         apply
           (call
              ("write_arith_eflags",@{typ "state \<Rightarrow> state"},
               tp[var("size",@{typ Zsize}),var_w("w",64),lf,lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("erase_eflags",
   close
     (var("state",qTy),
      rupd("state.EFLAGS",tp[var("state",qTy),mop(K1 @{typ Zeflags},lo HOLogic.boolT)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("value_width",
   close
     (var("s",@{typ Zsize}),
      bop(Exp,ln 2,call("Zsize_width",HOLogic.natT,var("s",@{typ Zsize}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("word_signed_overflow_add",
   close
     (tp[var("size",@{typ Zsize}),var_w("a",64),var_w("b",64)],
      bop(And,
          eq(call
               ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("a",64)],@{theory}),
             call
               ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("b",64)],@{theory})),
          mop(Not,
              eq(call
                   ("word_size_msb",HOLogic.boolT,
                    tp[var("size",@{typ Zsize}),bop(Add,var_w("a",64),var_w("b",64))],@{theory}),
                 call
                   ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("a",64)],
                    @{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("word_signed_overflow_sub",
   close
     (tp[var("size",@{typ Zsize}),var_w("a",64),var_w("b",64)],
      bop(And,
          mop(Not,
              eq(call
                   ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("a",64)],
                    @{theory}),
                 call
                   ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("b",64)],
                    @{theory}))),
          mop(Not,
              eq(call
                   ("word_size_msb",HOLogic.boolT,
                    tp[var("size",@{typ Zsize}),bop(Sub,var_w("a",64),var_w("b",64))],@{theory}),
                 call
                   ("word_size_msb",HOLogic.boolT,tp[var("size",@{typ Zsize}),var_w("a",64)],
                    @{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("add_with_carry_out",
   close
     (tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],
      tp[bop(Add,var_w("x",64),var_w("y",64)),
         bop(Le,call("value_width",HOLogic.natT,var("size",@{typ Zsize}),@{theory}),
             bop(Add,mop(Cast HOLogic.natT,var_w("x",64)),mop(Cast HOLogic.natT,var_w("y",64)))),
         call
           ("word_signed_overflow_add",HOLogic.boolT,
            tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("sub_with_borrow",
   close
     (tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],
      tp[bop(Sub,var_w("x",64),var_w("y",64)),bop(Ult,var_w("x",64),var_w("y",64)),
         call
           ("word_signed_overflow_sub",HOLogic.boolT,
            tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_arith_result",
   close
     (tp[var("size",@{typ Zsize}),var("r",@{typ "64 word \<times> bool \<times> bool"}),
         var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},
               tp[mop(Fst,var("r",@{typ "64 word \<times> bool \<times> bool"})),
                  var("ea",@{typ Zea})],@{theory}),
            apply
              (call
                 ("write_arith_eflags",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var("r",@{typ "64 word \<times> bool \<times> bool"})],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_arith_result_no_CF_OF",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64),var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},tp[var_w("w",64),var("ea",@{typ Zea})],
               @{theory}),
            apply
              (call
                 ("write_arith_eflags_except_CF_OF",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var_w("w",64)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_logical_result",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64),var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},tp[var_w("w",64),var("ea",@{typ Zea})],
               @{theory}),
            apply
              (call
                 ("write_logical_eflags",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var_w("w",64)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_result_erase_eflags",
   close
     (tp[var_w("w",64),var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},tp[var_w("w",64),var("ea",@{typ Zea})],
               @{theory}),
            apply
              (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignExtension",
   close
     (tp[var_w("w",64),var("size1",@{typ Zsize}),var("size2",@{typ Zsize})],
      close
        (var("state",qTy),
         let'
           (tp[var_w("r",64),var("s1",@{typ "64 word \<times> state"})],
            let'
              (var("s",@{typ "64 word \<times> state"}),
               cs(tp[var("size1",@{typ Zsize}),var("size2",@{typ Zsize})],
                  [(tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                       Term.Const(@{const_name "Z16"},@{typ Zsize})],
                    tp[bfi(ln 15,ln 0,mop(SE w16,ex(var_w("w",64),ln 7,ln 0,w8)),var_w("w",64)),
                       var("state",qTy)]),
                   (tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                       Term.Const(@{const_name "Z32"},@{typ Zsize})],
                    tp[bfi(ln 31,ln 0,mop(SE w32,ex(var_w("w",64),ln 7,ln 0,w8)),var_w("w",64)),
                       var("state",qTy)]),
                   (tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                       Term.Const(@{const_name "Z64"},@{typ Zsize})],
                    tp[mop(SE w64,ex(var_w("w",64),ln 7,ln 0,w8)),var("state",qTy)]),
                   (tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),
                       Term.Const(@{const_name "Z32"},@{typ Zsize})],
                    tp[bfi(ln 31,ln 0,mop(SE w32,ex(var_w("w",64),ln 15,ln 0,w16)),var_w("w",64)),
                       var("state",qTy)]),
                   (tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),
                       Term.Const(@{const_name "Z64"},@{typ Zsize})],
                    tp[mop(SE w64,ex(var_w("w",64),ln 15,ln 0,w16)),var("state",qTy)]),
                   (tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),
                       Term.Const(@{const_name "Z64"},@{typ Zsize})],
                    tp[mop(SE w64,ex(var_w("w",64),ln 31,ln 0,w32)),var("state",qTy)]),
                   (var_a(@{typ "Zsize \<times> Zsize"}),
                    tp[var_w("w",64),
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.FAILURE",@{typ exception},ls"SignExtension",@{theory}),
                                 @{theory}),var("state",qTy)))])],@{context}),
               tp[mop(Fst,var("s",@{typ "64 word \<times> state"})),
                  var("s",@{typ "64 word \<times> state"})]),
            tp[var_w("r",64),mop(Snd,var("s1",@{typ "64 word \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignExtension64",
   close
     (tp[var_w("w",64),var("size",@{typ Zsize})],
      close
        (var("state",qTy),
         ite(eq(var("size",@{typ Zsize}),Term.Const(@{const_name "Z64"},@{typ Zsize})),
             tp[var_w("w",64),var("state",qTy)],
             apply
               (call
                  ("SignExtension",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                   tp[var_w("w",64),var("size",@{typ Zsize}),
                      Term.Const(@{const_name "Z64"},@{typ Zsize})],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("maskShift",
   close
     (tp[var("size",@{typ Zsize}),var_w("w",64)],
      ite(eq(var("size",@{typ Zsize}),Term.Const(@{const_name "Z64"},@{typ Zsize})),
          mop(Cast HOLogic.natT,ex(var_w("w",64),ln 5,ln 0,(Word_Lib.mk_wordT 6))),
          mop(Cast HOLogic.natT,ex(var_w("w",64),ln 4,ln 0,(Word_Lib.mk_wordT 5))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ROL",
   close
     (tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           mop(Cast w64,
               bop(Rol,ex(var_w("x",64),ln 7,ln 0,w8),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),
           mop(Cast w64,
               bop(Rol,ex(var_w("x",64),ln 15,ln 0,w16),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),
           mop(Cast w64,
               bop(Rol,ex(var_w("x",64),ln 31,ln 0,w32),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),
           bop(Rol,var_w("x",64),
               mop(Cast HOLogic.natT,ex(var_w("y",64),ln 5,ln 0,(Word_Lib.mk_wordT 6)))))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ROR",
   close
     (tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           mop(Cast w64,
               bop(Ror,ex(var_w("x",64),ln 7,ln 0,w8),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),
           mop(Cast w64,
               bop(Ror,ex(var_w("x",64),ln 15,ln 0,w16),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),
           mop(Cast w64,
               bop(Ror,ex(var_w("x",64),ln 31,ln 0,w32),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),
           bop(Ror,var_w("x",64),
               mop(Cast HOLogic.natT,ex(var_w("y",64),ln 5,ln 0,(Word_Lib.mk_wordT 6)))))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SAR",
   close
     (tp[var("size",@{typ Zsize}),var_w("x",64),var_w("y",64)],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           mop(Cast w64,
               bop(Asr,ex(var_w("x",64),ln 7,ln 0,w8),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),
           mop(Cast w64,
               bop(Asr,ex(var_w("x",64),ln 15,ln 0,w16),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),
           mop(Cast w64,
               bop(Asr,ex(var_w("x",64),ln 31,ln 0,w32),
                   mop(Cast HOLogic.natT,ex(var_w("y",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)))))),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),
           bop(Asr,var_w("x",64),
               mop(Cast HOLogic.natT,ex(var_w("y",64),ln 5,ln 0,(Word_Lib.mk_wordT 6)))))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_binop",
   close
     (tp[var("s",@{typ Zsize}),var("bop",@{typ Zbinop_name}),var_w("x",64),var_w("y",64),
         var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         cs(var("bop",@{typ Zbinop_name}),
            [(lc("Zadd","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_arith_result",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),
                       call
                         ("add_with_carry_out",@{typ "64 word \<times> bool \<times> bool"},
                          tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory}),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zsub","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_arith_result",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),
                       call
                         ("sub_with_borrow",@{typ "64 word \<times> bool \<times> bool"},
                          tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory}),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zcmp","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_arith_eflags",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),
                       call
                         ("sub_with_borrow",@{typ "64 word \<times> bool \<times> bool"},
                          tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory})],
                    @{theory}),var("state",qTy))),
             (lc("Ztest","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_logical_eflags",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(BAnd,var_w("x",64),var_w("y",64))],@{theory}),
                 var("state",qTy))),
             (lc("Zand","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_logical_result",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(BAnd,var_w("x",64),var_w("y",64)),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zxor","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_logical_result",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(BXor,var_w("x",64),var_w("y",64)),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zor","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_logical_result",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(BOr,var_w("x",64),var_w("y",64)),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zrol","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_result_erase_eflags",@{typ "state \<Rightarrow> state"},
                    tp[call
                         ("ROL",w64,tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory}),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zror","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_result_erase_eflags",@{typ "state \<Rightarrow> state"},
                    tp[call
                         ("ROR",w64,tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory}),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zsar","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_result_erase_eflags",@{typ "state \<Rightarrow> state"},
                    tp[call
                         ("SAR",w64,tp[var("s",@{typ Zsize}),var_w("x",64),var_w("y",64)],@{theory}),
                       var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zshl","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_result_erase_eflags",@{typ "state \<Rightarrow> state"},
                    tp[bop(Lsl,var_w("x",64),
                           call
                             ("maskShift",HOLogic.natT,tp[var("s",@{typ Zsize}),var_w("y",64)],
                              @{theory})),var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zshr","Zbinop_name",@{theory}),
              apply
                (call
                   ("write_result_erase_eflags",@{typ "state \<Rightarrow> state"},
                    tp[bop(Lsr,var_w("x",64),
                           call
                             ("maskShift",HOLogic.natT,tp[var("s",@{typ Zsize}),var_w("y",64)],
                              @{theory})),var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zadc","Zbinop_name",@{theory}),
              let'
                (tp[var_b"v",var("s0",qTy)],
                 apply
                   (const("CF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),
                 apply
                   (call
                      ("write_arith_result_no_CF_OF",@{typ "state \<Rightarrow> state"},
                       tp[var("s",@{typ Zsize}),
                          bop(Add,bop(Add,var_w("x",64),var_w("y",64)),mop(Cast w64,var_b"v")),
                          var("ea",@{typ Zea})],@{theory}),
                    apply
                      (call
                         ("FlagUnspecified",@{typ "state \<Rightarrow> state"},
                          lc("Z_OF","Zeflags",@{theory}),@{theory}),
                       apply
                         (call
                            ("write'CF",@{typ "state \<Rightarrow> state"},
                             bop(Le,
                                 call("value_width",HOLogic.natT,var("s",@{typ Zsize}),@{theory}),
                                 bop(Add,
                                     bop(Add,mop(Cast HOLogic.natT,var_w("x",64)),
                                         mop(Cast HOLogic.natT,var_w("y",64))),
                                     mop(Cast HOLogic.natT,var_b"v"))),@{theory}),var("s0",qTy)))))),
             (lc("Zsbb","Zbinop_name",@{theory}),
              let'
                (tp[var_b"v",var("s0",qTy)],
                 apply
                   (const("CF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),
                 apply
                   (call
                      ("write_arith_result_no_CF_OF",@{typ "state \<Rightarrow> state"},
                       tp[var("s",@{typ Zsize}),
                          bop(Sub,var_w("x",64),bop(Add,var_w("y",64),mop(Cast w64,var_b"v"))),
                          var("ea",@{typ Zea})],@{theory}),
                    apply
                      (call
                         ("FlagUnspecified",@{typ "state \<Rightarrow> state"},
                          lc("Z_OF","Zeflags",@{theory}),@{theory}),
                       apply
                         (call
                            ("write'CF",@{typ "state \<Rightarrow> state"},
                             bop(Lt,mop(Cast HOLogic.natT,var_w("x",64)),
                                 bop(Add,mop(Cast HOLogic.natT,var_w("y",64)),
                                     mop(Cast HOLogic.natT,var_b"v"))),@{theory}),var("s0",qTy)))))),
             (var_a @{typ Zbinop_name},
              mop(Snd,
                  apply
                    (call
                       ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                        call
                          ("exception.FAILURE",@{typ exception},
                           cc[ls"Binary op not implemented: ",
                              mop(Cast(@{typ string}),var("bop",@{typ Zbinop_name}))],@{theory}),
                        @{theory}),var("state",qTy))))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write_monop",
   close
     (tp[var("s",@{typ Zsize}),var("mop",@{typ Zmonop_name}),var_w("x",64),var("ea",@{typ Zea})],
      close
        (var("state",qTy),
         cs(var("mop",@{typ Zmonop_name}),
            [(lc("Znot","Zmonop_name",@{theory}),
              apply
                (call
                   ("write'EA",@{typ "state \<Rightarrow> state"},
                    tp[mop(BNot,var_w("x",64)),var("ea",@{typ Zea})],@{theory}),var("state",qTy))),
             (lc("Zdec","Zmonop_name",@{theory}),
              apply
                (call
                   ("write_arith_result_no_CF_OF",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(Sub,var_w("x",64),lw(1,64)),var("ea",@{typ Zea})],
                    @{theory}),var("state",qTy))),
             (lc("Zinc","Zmonop_name",@{theory}),
              apply
                (call
                   ("write_arith_result_no_CF_OF",@{typ "state \<Rightarrow> state"},
                    tp[var("s",@{typ Zsize}),bop(Add,var_w("x",64),lw(1,64)),var("ea",@{typ Zea})],
                    @{theory}),var("state",qTy))),
             (lc("Zneg","Zmonop_name",@{theory}),
              apply
                (call
                   ("FlagUnspecified",@{typ "state \<Rightarrow> state"},
                    lc("Z_CF","Zeflags",@{theory}),@{theory}),
                 apply
                   (call
                      ("write_arith_result_no_CF_OF",@{typ "state \<Rightarrow> state"},
                       tp[var("s",@{typ Zsize}),mop(Neg,var_w("x",64)),var("ea",@{typ Zea})],
                       @{theory}),var("state",qTy))))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("bit_test",
   close
     (tp[var("bt",@{typ Zbit_test_name}),var("base",@{typ Zea}),var_n"offset"],
      close
        (var("state",qTy),
         let'
           (var_b"v",
            bop(Bit,
                apply
                  (call("EA",@{typ "state \<Rightarrow> 64 word"},var("base",@{typ Zea}),@{theory}),
                   var("state",qTy)),var_n"offset"),
            let'
              (var("s",qTy),
               apply
                 (call("write'CF",@{typ "state \<Rightarrow> state"},var_b"v",@{theory}),
                  var("state",qTy)),
               cs(var("bt",@{typ Zbit_test_name}),
                  [(lc("Zbt","Zbit_test_name",@{theory}),var("s",qTy)),
                   (lc("Zbtc","Zbit_test_name",@{theory}),
                    apply
                      (call
                         ("write'EA",@{typ "state \<Rightarrow> state"},
                          tp[bfi(var_n"offset",var_n"offset",mop(Cast w1,mop(Not,var_b"v")),
                                 apply
                                   (call
                                      ("EA",@{typ "state \<Rightarrow> 64 word"},
                                       var("base",@{typ Zea}),@{theory}),var("s",qTy))),
                             var("base",@{typ Zea})],@{theory}),var("s",qTy))),
                   (lc("Zbtr","Zbit_test_name",@{theory}),
                    apply
                      (call
                         ("write'EA",@{typ "state \<Rightarrow> state"},
                          tp[bfi(var_n"offset",var_n"offset",mop(Cast w1,lf),
                                 apply
                                   (call
                                      ("EA",@{typ "state \<Rightarrow> 64 word"},
                                       var("base",@{typ Zea}),@{theory}),var("s",qTy))),
                             var("base",@{typ Zea})],@{theory}),var("s",qTy))),
                   (lc("Zbts","Zbit_test_name",@{theory}),
                    apply
                      (call
                         ("write'EA",@{typ "state \<Rightarrow> state"},
                          tp[bfi(var_n"offset",var_n"offset",mop(Cast w1,lt),
                                 apply
                                   (call
                                      ("EA",@{typ "state \<Rightarrow> 64 word"},
                                       var("base",@{typ Zea}),@{theory}),var("s",qTy))),
                             var("base",@{typ Zea})],@{theory}),var("s",qTy)))],@{context}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("read_cond",
   close
     (var("c",@{typ Zcond}),
      close
        (var("state",qTy),
         cs(var("c",@{typ Zcond}),
            [(lc("Z_A","Zcond",@{theory}),
              cs(tp[apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_CF","Zeflags",@{theory})),
                    apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_ZF","Zeflags",@{theory}))],
                 [(tp[mop(Some,lf),mop(Some,lf)],tp[lt,var("state",qTy)]),
                  (tp[mop(Some,lt),var_a(@{typ "bool option"})],tp[lf,var("state",qTy)]),
                  (tp[var_a(@{typ "bool option"}),mop(Some,lt)],tp[lf,var("state",qTy)]),
                  (var_a(@{typ "(bool option) \<times> bool option"}),
                   apply
                     (call
                        ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                         call
                           ("exception.BadFlagAccess",@{typ exception},
                            cc[ls"read_cond: ",mop(Cast(@{typ string}),var("c",@{typ Zcond}))],
                            @{theory}),@{theory}),var("state",qTy)))],@{context})),
             (lc("Z_NB","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("CF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
             (lc("Z_B","Zcond",@{theory}),
              apply
                (const("CF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                 var("state",qTy))),
             (lc("Z_NA","Zcond",@{theory}),
              cs(tp[apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_CF","Zeflags",@{theory})),
                    apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_ZF","Zeflags",@{theory}))],
                 [(tp[mop(Some,lt),var_a(@{typ "bool option"})],tp[lt,var("state",qTy)]),
                  (tp[var_a(@{typ "bool option"}),mop(Some,lt)],tp[lt,var("state",qTy)]),
                  (tp[mop(Some,lf),mop(Some,lf)],tp[lf,var("state",qTy)]),
                  (var_a(@{typ "(bool option) \<times> bool option"}),
                   apply
                     (call
                        ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                         call
                           ("exception.BadFlagAccess",@{typ exception},
                            cc[ls"read_cond: ",mop(Cast(@{typ string}),var("c",@{typ Zcond}))],
                            @{theory}),@{theory}),var("state",qTy)))],@{context})),
             (lc("Z_E","Zcond",@{theory}),
              apply
                (const("ZF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                 var("state",qTy))),
             (lc("Z_G","Zcond",@{theory}),
              cs(tp[apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_SF","Zeflags",@{theory})),
                    apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_OF","Zeflags",@{theory}))],
                 [(tp[mop(Some,var_b"a"),mop(Some,var_b"b")],
                   ite(eq(var_b"a",var_b"b"),
                       let'
                         (tp[var_b"v",var("s",qTy)],
                          apply
                            (const
                               ("ZF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                             var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)]),
                       tp[lf,var("state",qTy)])),
                  (var_a(@{typ "(bool option) \<times> bool option"}),
                   cs(apply
                        (call
                           ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                            var("state",qTy),@{theory}),lc("Z_ZF","Zeflags",@{theory})),
                      [(mop(Some,lt),tp[lf,var("state",qTy)]),
                       (var_a(@{typ "bool option"}),
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                              call
                                ("exception.BadFlagAccess",@{typ exception},
                                 cc[ls"read_cond: ",mop(Cast(@{typ string}),var("c",@{typ Zcond}))],
                                 @{theory}),@{theory}),var("state",qTy)))],@{context}))],@{context})),
             (lc("Z_NL","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("SF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),
                 let'
                   (tp[var_b"v0",var("s",qTy)],
                    apply
                      (const("OF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                       var("s",qTy)),tp[eq(var_b"v",var_b"v0"),var("s",qTy)]))),
             (lc("Z_L","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("SF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),
                 let'
                   (tp[var_b"v",var("s",qTy)],
                    let'
                      (tp[var_b"v0",var("s",qTy)],
                       apply
                         (const("OF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                          var("s",qTy)),tp[eq(var_b"v",var_b"v0"),var("s",qTy)]),
                    tp[mop(Not,var_b"v"),var("s",qTy)]))),
             (lc("Z_NG","Zcond",@{theory}),
              cs(tp[apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_SF","Zeflags",@{theory})),
                    apply
                      (call
                         ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                          var("state",qTy),@{theory}),lc("Z_OF","Zeflags",@{theory}))],
                 [(tp[mop(Some,var_b"a"),mop(Some,var_b"b")],
                   ite(mop(Not,eq(var_b"a",var_b"b")),tp[lt,var("state",qTy)],
                       apply
                         (const("ZF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                          var("state",qTy)))),
                  (var_a(@{typ "(bool option) \<times> bool option"}),
                   cs(apply
                        (call
                           ("state.EFLAGS",@{typ "Zeflags \<Rightarrow> (bool option)"},
                            var("state",qTy),@{theory}),lc("Z_ZF","Zeflags",@{theory})),
                      [(mop(Some,lt),tp[lt,var("state",qTy)]),
                       (var_a(@{typ "bool option"}),
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (bool \<times> state)"},
                              call
                                ("exception.BadFlagAccess",@{typ exception},
                                 cc[ls"read_cond: ",mop(Cast(@{typ string}),var("c",@{typ Zcond}))],
                                 @{theory}),@{theory}),var("state",qTy)))],@{context}))],@{context})),
             (lc("Z_NE","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("ZF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
             (lc("Z_NO","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("OF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
             (lc("Z_NP","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("PF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
             (lc("Z_NS","Zcond",@{theory}),
              let'
                (tp[var_b"v",var("s",qTy)],
                 apply
                   (const("SF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                    var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
             (lc("Z_O","Zcond",@{theory}),
              apply
                (const("OF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                 var("state",qTy))),
             (lc("Z_P","Zcond",@{theory}),
              apply
                (const("PF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                 var("state",qTy))),
             (lc("Z_S","Zcond",@{theory}),
              apply
                (const("SF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
                 var("state",qTy))),(lc("Z_ALWAYS","Zcond",@{theory}),tp[lt,var("state",qTy)])],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_pop_aux",
   close
     (var("state",qTy),
      let'
        (var_w("v",64),
         apply
           (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
            lc("RSP","Zreg",@{theory})),
         tp[apply
              (call("mem64",@{typ "state \<Rightarrow> 64 word"},var_w("v",64),@{theory}),
               var("state",qTy)),
            rupd
              ("state.REG",
               tp[var("state",qTy),
                  fupd
                    (call
                       ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                     lc("RSP","Zreg",@{theory}),bop(Add,var_w("v",64),lw(8,64)))],@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_pop",
   close
     (var("rm",@{typ Zrm}),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v0",64),var("s",qTy)],
            apply
              (const("x64_pop_aux",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write'EA",@{typ "state \<Rightarrow> state"},
                  tp[var_w("v0",64),
                     apply
                       (call
                          ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                           tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var("rm",@{typ Zrm})],
                           @{theory}),var("state",qTy))],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_pop_rip",
   close
     (var("state",qTy),
      let'
        (tp[var_w("v",64),var("s",qTy)],
         apply
           (const("x64_pop_aux",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
            var("state",qTy)),rupd("state.RIP",tp[var("s",qTy),var_w("v",64)],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_push_aux",
   close
     (var_w("w",64),
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Sub,
                apply
                  (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                   lc("RSP","Zreg",@{theory})),lw(8,64)),
            apply
              (call
                 ("write'mem64",@{typ "state \<Rightarrow> state"},tp[var_w("w",64),var_w("v",64)],
                  @{theory}),
               rupd
                 ("state.REG",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),lc("RSP","Zreg",@{theory}),var_w("v",64))],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_push",
   close
     (var("imm_rm",@{typ Zimm_rm}),
      close
        (var("state",qTy),
         apply
           (call
              ("x64_push_aux",@{typ "state \<Rightarrow> state"},
               apply
                 (call
                    ("EA",@{typ "state \<Rightarrow> 64 word"},
                     apply
                       (call
                          ("ea_Zimm_rm",@{typ "state \<Rightarrow> Zea"},
                           var("imm_rm",@{typ Zimm_rm}),@{theory}),var("state",qTy)),@{theory}),
                  var("state",qTy)),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_push_rip",
   close
     (var("state",qTy),
      apply
        (call
           ("x64_push_aux",@{typ "state \<Rightarrow> state"},
            call("state.RIP",w64,var("state",qTy),@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_drop",
   close
     (var_w("imm",64),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(mop(Not,eq(ex(var_w("imm",64),ln 7,ln 0,w8),lw(0,8))),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.FAILURE",@{typ exception},ls"x64_drop",@{theory}),
                          @{theory}),var("state",qTy))),var("state",qTy)),
            rupd
              ("state.REG",
               tp[var("s",qTy),
                  fupd
                    (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("s",qTy),@{theory}),
                     lc("RSP","Zreg",@{theory}),
                     bop(Add,
                         apply
                           (call
                              ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("s",qTy),
                               @{theory}),lc("RSP","Zreg",@{theory})),var_w("imm",64)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zbinop",
   close
     (tp[var("bop",@{typ Zbinop_name}),var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
      close
        (var("state",qTy),
         let'
           (tp[var("ea",@{typ Zea}),var_w("val_dst",64),var_w("val_src",64)],
            apply
              (call
                 ("read_dest_src_ea",
                  @{typ "state \<Rightarrow> (Zea \<times> 64 word \<times> 64 word)"},
                  tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write_binop",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var("bop",@{typ Zbinop_name}),var_w("val_dst",64),
                     var_w("val_src",64),var("ea",@{typ Zea})],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zbit_test",
   close
     (tp[var("bt",@{typ Zbit_test_name}),var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("EA",@{typ "state \<Rightarrow> 64 word"},
                  apply
                    (call
                       ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                        tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
                     var("state",qTy)),@{theory}),var("state",qTy)),
            cs(var("dst_src",@{typ Zdest_src}),
               [(call
                   ("Zdest_src.Zr_rm",@{typ Zdest_src},var_a(@{typ "Zreg \<times> Zrm"}),@{theory}),
                 apply
                   (const("UD_exception",@{typ "state \<Rightarrow> state"},@{theory}),
                    var("state",qTy))),
                (call
                   ("Zdest_src.Zrm_r",@{typ Zdest_src},
                    tp[call("Zrm.Zr",@{typ Zrm},var_a @{typ Zreg},@{theory}),var_a @{typ Zreg}],
                    @{theory}),
                 apply
                   (call
                      ("bit_test",@{typ "state \<Rightarrow> state"},
                       tp[var("bt",@{typ Zbit_test_name}),
                          apply
                            (call
                               ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                                tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                                @{theory}),var("state",qTy)),
                          mop(Cast HOLogic.natT,
                              call
                                ("modSize",w64,tp[var("size",@{typ Zsize}),var_w("v",64)],@{theory}))],
                       @{theory}),var("state",qTy))),
                (call
                   ("Zdest_src.Zrm_i",@{typ Zdest_src},
                    tp[call("Zrm.Zr",@{typ Zrm},var_a @{typ Zreg},@{theory}),var_a w64],@{theory}),
                 apply
                   (call
                      ("bit_test",@{typ "state \<Rightarrow> state"},
                       tp[var("bt",@{typ Zbit_test_name}),
                          apply
                            (call
                               ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                                tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                                @{theory}),var("state",qTy)),
                          mop(Cast HOLogic.natT,
                              call
                                ("modSize",w64,tp[var("size",@{typ Zsize}),var_w("v",64)],@{theory}))],
                       @{theory}),var("state",qTy))),
                (call
                   ("Zdest_src.Zrm_i",@{typ Zdest_src},
                    tp[call
                         ("Zrm.Zm",@{typ Zrm},
                          tp[var("si",@{typ "(2 word \<times> Zreg) option"}),
                             var("base",@{typ Zbase}),var_w("disp",64)],@{theory}),var_a w64],
                    @{theory}),
                 let'
                   (var_w("offset",64),
                    call("modSize",w64,tp[var("size",@{typ Zsize}),var_w("v",64)],@{theory}),
                    apply
                      (call
                         ("bit_test",@{typ "state \<Rightarrow> state"},
                          tp[var("bt",@{typ Zbit_test_name}),
                             apply
                               (call
                                  ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                   tp[call("Zsize.Z8",@{typ Zsize},lf,@{theory}),
                                      call
                                        ("Zrm.Zm",@{typ Zrm},
                                         tp[var("si",@{typ "(2 word \<times> Zreg) option"}),
                                            var("base",@{typ Zbase}),
                                            bop(Add,var_w("disp",64),
                                                bop(SDiv,var_w("offset",64),lw(8,64)))],@{theory})],
                                   @{theory}),var("state",qTy)),
                             mop(Cast HOLogic.natT,bop(SMod,var_w("offset",64),lw(8,64)))],@{theory}),
                       var("state",qTy)))),
                (call
                   ("Zdest_src.Zrm_r",@{typ Zdest_src},
                    tp[call
                         ("Zrm.Zm",@{typ Zrm},
                          tp[var("si",@{typ "(2 word \<times> Zreg) option"}),
                             var("base",@{typ Zbase}),var_w("disp",64)],@{theory}),var_a @{typ Zreg}],
                    @{theory}),
                 let'
                   (tp[var_w("v",64),var("s",qTy)],
                    apply
                      (call
                         ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                          tp[var_w("v",64),var("size",@{typ Zsize})],@{theory}),var("state",qTy)),
                    apply
                      (call
                         ("bit_test",@{typ "state \<Rightarrow> state"},
                          tp[var("bt",@{typ Zbit_test_name}),
                             apply
                               (call
                                  ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                   tp[call("Zsize.Z8",@{typ Zsize},lf,@{theory}),
                                      call
                                        ("Zrm.Zm",@{typ Zrm},
                                         tp[var("si",@{typ "(2 word \<times> Zreg) option"}),
                                            var("base",@{typ Zbase}),
                                            bop(Add,var_w("disp",64),
                                                bop(SDiv,var_w("v",64),lw(8,64)))],@{theory})],
                                   @{theory}),var("s",qTy)),
                             mop(Cast HOLogic.natT,bop(SMod,var_w("v",64),lw(8,64)))],@{theory}),
                       var("s",qTy))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zcall",
   close
     (var("imm_rm",@{typ Zimm_rm}),
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ Zea}),var("s",qTy)],
            let'
              (var("s",qTy),
               apply
                 (const("x64_push_rip",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy)),
               tp[apply
                    (call
                       ("ea_Zimm_rm",@{typ "state \<Rightarrow> Zea"},var("imm_rm",@{typ Zimm_rm}),
                        @{theory}),var("s",qTy)),var("s",qTy)]),
            apply
              (call("jump_to_ea",@{typ "state \<Rightarrow> state"},var("v",@{typ Zea}),@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zcmpxchg",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm}),var("r",@{typ Zreg})],
      close
        (var("state",qTy),
         let'
           (var("ea_src",@{typ Zea}),
            call("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
            let'
              (var("v",@{typ Zea}),
               apply
                 (call
                    ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                     tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy)),
               let'
                 (var_w("v0",64),
                  apply
                    (call("EA",@{typ "state \<Rightarrow> 64 word"},var("v",@{typ Zea}),@{theory}),
                     var("state",qTy)),
                  let'
                    (var_w("v1",64),
                     apply
                       (call
                          ("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_src",@{typ Zea}),
                           @{theory}),var("state",qTy)),
                     let'
                       (var("s",qTy),
                        apply
                          (call
                             ("write_binop",@{typ "state \<Rightarrow> state"},
                              tp[var("size",@{typ Zsize}),lc("Zcmp","Zbinop_name",@{theory}),
                                 var_w("v1",64),var_w("v0",64),var("ea_src",@{typ Zea})],@{theory}),
                           var("state",qTy)),
                        ite(eq(var_w("v1",64),var_w("v0",64)),
                            apply
                              (call
                                 ("write'EA",@{typ "state \<Rightarrow> state"},
                                  tp[apply
                                       (call
                                          ("EA",@{typ "state \<Rightarrow> 64 word"},
                                           var("ea_src",@{typ Zea}),@{theory}),var("s",qTy)),
                                     var("v",@{typ Zea})],@{theory}),var("s",qTy)),
                            apply
                              (call
                                 ("write'EA",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v0",64),
                                     call
                                       ("Zea.Zea_r",@{typ Zea},
                                        tp[var("size",@{typ Zsize}),lc("RAX","Zreg",@{theory})],
                                        @{theory})],@{theory}),var("s",qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zdiv",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var_n"w",call("value_width",HOLogic.natT,var("size",@{typ Zsize}),@{theory}),
            let'
              (var("ea_eax",@{typ Zea}),
               call
                 ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RAX","Zreg",@{theory})],
                  @{theory}),
               let'
                 (var("ea_edx",@{typ Zea}),
                  call
                    ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RDX","Zreg",@{theory})],
                     @{theory}),
                  let'
                    (var_n"v0",
                     bop(Add,
                         bop(Mul,
                             mop(Cast HOLogic.natT,
                                 apply
                                   (call
                                      ("EA",@{typ "state \<Rightarrow> 64 word"},
                                       var("ea_edx",@{typ Zea}),@{theory}),var("state",qTy))),
                             var_n"w"),
                         mop(Cast HOLogic.natT,
                             apply
                               (call
                                  ("EA",@{typ "state \<Rightarrow> 64 word"},
                                   var("ea_eax",@{typ Zea}),@{theory}),var("state",qTy)))),
                     let'
                       (var_n"v1",
                        mop(Cast HOLogic.natT,
                            apply
                              (call
                                 ("EA",@{typ "state \<Rightarrow> 64 word"},
                                  apply
                                    (call
                                       ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                        tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                                     var("state",qTy)),@{theory}),var("state",qTy))),
                        let'
                          (var_n"q",bop(Div,var_n"v0",var_n"v1"),
                           apply
                             (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                              apply
                                (call
                                   ("write'EA",@{typ "state \<Rightarrow> state"},
                                    tp[mop(Cast w64,bop(Mod,var_n"v0",var_n"v1")),
                                       var("ea_edx",@{typ Zea})],@{theory}),
                                 apply
                                   (call
                                      ("write'EA",@{typ "state \<Rightarrow> state"},
                                       tp[mop(Cast w64,var_n"q"),var("ea_eax",@{typ Zea})],@{theory}),
                                    ite(bop(Or,eq(var_n"v1",ln 0),bop(Le,var_n"w",var_n"q")),
                                        apply
                                          (const
                                             ("DE_exception",@{typ "state \<Rightarrow> state"},
                                              @{theory}),var("state",qTy)),var("state",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zidiv",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var_i"w",
            mop(Cast HOLogic.intT,
                call("value_width",HOLogic.natT,var("size",@{typ Zsize}),@{theory})),
            let'
              (var("ea_eax",@{typ Zea}),
               call
                 ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RAX","Zreg",@{theory})],
                  @{theory}),
               let'
                 (var("ea_edx",@{typ Zea}),
                  call
                    ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RDX","Zreg",@{theory})],
                     @{theory}),
                  let'
                    (tp[var_i"v0",var("s",qTy)],
                     let'
                       (tp[var_i"v",var("s",qTy)],
                        let'
                          (tp[var_i"v",var("s",qTy)],
                           let'
                             (tp[var_w("v",64),var("s",qTy)],
                              apply
                                (call
                                   ("SignExtension64",
                                    @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                    tp[apply
                                         (call
                                            ("EA",@{typ "state \<Rightarrow> 64 word"},
                                             var("ea_edx",@{typ Zea}),@{theory}),var("state",qTy)),
                                       var("size",@{typ Zsize})],@{theory}),var("state",qTy)),
                              tp[mop(Cast HOLogic.intT,var_w("v",64)),var("s",qTy)]),
                           tp[bop(Mul,var_i"v",var_i"w"),var("s",qTy)]),
                        tp[bop(Add,var_i"v",
                               mop(Cast HOLogic.intT,
                                   mop(Cast HOLogic.natT,
                                       apply
                                         (call
                                            ("EA",@{typ "state \<Rightarrow> 64 word"},
                                             var("ea_eax",@{typ Zea}),@{theory}),var("s",qTy))))),
                           var("s",qTy)]),
                     let'
                       (tp[var_i"v1",var("s",qTy)],
                        let'
                          (tp[var_w("v",64),var("s",qTy)],
                           apply
                             (call
                                ("SignExtension64",
                                 @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                 tp[apply
                                      (call
                                         ("EA",@{typ "state \<Rightarrow> 64 word"},
                                          apply
                                            (call
                                               ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                                tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
                                                @{theory}),var("state",qTy)),@{theory}),var("s",qTy)),
                                    var("size",@{typ Zsize})],@{theory}),var("s",qTy)),
                           tp[mop(Cast HOLogic.intT,var_w("v",64)),var("s",qTy)]),
                        let'
                          (var_i"q",bop(Quot,var_i"v0",var_i"v1"),
                           apply
                             (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                              apply
                                (call
                                   ("write'EA",@{typ "state \<Rightarrow> state"},
                                    tp[mop(Cast w64,bop(Rem,var_i"v0",var_i"v1")),
                                       var("ea_edx",@{typ Zea})],@{theory}),
                                 apply
                                   (call
                                      ("write'EA",@{typ "state \<Rightarrow> state"},
                                       tp[mop(Cast w64,var_i"q"),var("ea_eax",@{typ Zea})],@{theory}),
                                    ite(bop(Or,eq(var_i"v1",li 0),
                                            bop(Or,bop(Lt,var_i"q",mop(Neg,bop(Div,var_i"w",li 2))),
                                                bop(Le,bop(Div,var_i"w",li 2),var_i"q"))),
                                        apply
                                          (const
                                             ("DE_exception",@{typ "state \<Rightarrow> state"},
                                              @{theory}),var("s",qTy)),var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zjcc",
   close
     (tp[var("cond",@{typ Zcond}),var_w("imm",64)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("read_cond",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var("cond",@{typ Zcond}),@{theory}),var("state",qTy)),
            ite(var_b"v",
                rupd
                  ("state.RIP",
                   tp[var("s",qTy),
                      bop(Add,call("state.RIP",w64,var("s",qTy),@{theory}),var_w("imm",64))],
                   @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zjmp",
   close
     (var("rm",@{typ Zrm}),
      close
        (var("state",qTy),
         rupd
           ("state.RIP",
            tp[var("state",qTy),
               apply
                 (call
                    ("EA",@{typ "state \<Rightarrow> 64 word"},
                     apply
                       (call
                          ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                           tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var("rm",@{typ Zrm})],
                           @{theory}),var("state",qTy)),@{theory}),var("state",qTy))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zlea",
   close
     (tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},
               tp[call
                    ("get_ea_address",w64,
                     apply
                       (call
                          ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                           tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
                        var("state",qTy)),@{theory}),
                  apply
                    (call
                       ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                        tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
                     var("state",qTy))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zleave",
   close
     (var("state",qTy),
      apply
        (call
           ("x64_pop",@{typ "state \<Rightarrow> state"},
            call("Zrm.Zr",@{typ Zrm},lc("RBP","Zreg",@{theory}),@{theory}),@{theory}),
         rupd
           ("state.REG",
            tp[var("state",qTy),
               fupd
                 (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                  lc("RSP","Zreg",@{theory}),
                  apply
                    (call
                       ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                     lc("RBP","Zreg",@{theory})))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zloop",
   close
     (tp[var("cond",@{typ Zcond}),var_w("imm",64)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Sub,
                apply
                  (call("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                   lc("RCX","Zreg",@{theory})),lw(1,64)),
            let'
              (var("s",qTy),
               rupd
                 ("state.REG",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.REG",@{typ "Zreg \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),lc("RCX","Zreg",@{theory}),var_w("v",64))],@{theory}),
               let'
                 (tp[var_b"v",var("s",qTy)],
                  ite(mop(Not,eq(var_w("v",64),lw(0,64))),
                      apply
                        (call
                           ("read_cond",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            var("cond",@{typ Zcond}),@{theory}),var("s",qTy)),tp[lf,var("s",qTy)]),
                  ite(var_b"v",
                      rupd
                        ("state.RIP",
                         tp[var("s",qTy),
                            bop(Add,call("state.RIP",w64,var("s",qTy),@{theory}),var_w("imm",64))],
                         @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zmonop",
   close
     (tp[var("mop",@{typ Zmonop_name}),var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var("v",@{typ Zea}),
            apply
              (call
                 ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                  tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy)),
            apply
              (call
                 ("write_monop",@{typ "state \<Rightarrow> state"},
                  tp[var("size",@{typ Zsize}),var("mop",@{typ Zmonop_name}),
                     apply
                       (call
                          ("EA",@{typ "state \<Rightarrow> 64 word"},var("v",@{typ Zea}),@{theory}),
                        var("state",qTy)),var("v",@{typ Zea})],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zmov",
   close
     (tp[var("cond",@{typ Zcond}),var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("read_cond",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var("cond",@{typ Zcond}),@{theory}),var("state",qTy)),
            ite(var_b"v",
                apply
                  (call
                     ("write'EA",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("EA",@{typ "state \<Rightarrow> 64 word"},
                               apply
                                 (call
                                    ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                                     tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                                     @{theory}),var("s",qTy)),@{theory}),var("s",qTy)),
                         apply
                           (call
                              ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                               tp[var("size",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                               @{theory}),var("s",qTy))],@{theory}),var("s",qTy)),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zmovsx",
   close
     (tp[var("size1",@{typ Zsize}),var("dst_src",@{typ Zdest_src}),var("size2",@{typ Zsize})],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "64 word \<times> Zea"}),var("s",qTy)],
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("SignExtension",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[apply
                          (call
                             ("EA",@{typ "state \<Rightarrow> 64 word"},
                              apply
                                (call
                                   ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                                    tp[var("size1",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                                    @{theory}),var("state",qTy)),@{theory}),var("state",qTy)),
                        var("size1",@{typ Zsize}),var("size2",@{typ Zsize})],@{theory}),
                  var("state",qTy)),
               tp[tp[var_w("v0",64),
                     apply
                       (call
                          ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                           tp[var("size2",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
                        var("state",qTy))],var("s",qTy)]),
            apply
              (call
                 ("write'EA",@{typ "state \<Rightarrow> state"},
                  var("v",@{typ "64 word \<times> Zea"}),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zmovzx",
   close
     (tp[var("size1",@{typ Zsize}),var("dst_src",@{typ Zdest_src}),var("size2",@{typ Zsize})],
      close
        (var("state",qTy),
         apply
           (call
              ("write'EA",@{typ "state \<Rightarrow> state"},
               tp[apply
                    (call
                       ("EA",@{typ "state \<Rightarrow> 64 word"},
                        apply
                          (call
                             ("ea_Zsrc",@{typ "state \<Rightarrow> Zea"},
                              tp[var("size1",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],
                              @{theory}),var("state",qTy)),@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("ea_Zdest",@{typ "state \<Rightarrow> Zea"},
                        tp[var("size2",@{typ Zsize}),var("dst_src",@{typ Zdest_src})],@{theory}),
                     var("state",qTy))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zmul",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var("ea_eax",@{typ Zea}),
            call
              ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RAX","Zreg",@{theory})],
               @{theory}),
            let'
              (var_w("v",64),
               apply
                 (call("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_eax",@{typ Zea}),@{theory}),
                  var("state",qTy)),
               let'
                 (var_w("v0",64),
                  apply
                    (call
                       ("EA",@{typ "state \<Rightarrow> 64 word"},
                        apply
                          (call
                             ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                              tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                           var("state",qTy)),@{theory}),var("state",qTy)),
                  apply
                    (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                     cs(var("size",@{typ Zsize}),
                        [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                          apply
                            (call
                               ("write'EA",@{typ "state \<Rightarrow> state"},
                                tp[bop(Mul,var_w("v",64),var_w("v0",64)),
                                   call
                                     ("Zea.Zea_r",@{typ Zea},
                                      tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),
                                         lc("RAX","Zreg",@{theory})],@{theory})],@{theory}),
                             var("state",qTy))),
                         (var_a @{typ Zsize},
                          apply
                            (call
                               ("write'EA",@{typ "state \<Rightarrow> state"},
                                tp[mop(Cast w64,
                                       bop(Div,
                                           bop(Mul,mop(Cast HOLogic.natT,var_w("v",64)),
                                               mop(Cast HOLogic.natT,var_w("v0",64))),
                                           call
                                             ("value_width",HOLogic.natT,var("size",@{typ Zsize}),
                                              @{theory}))),
                                   call
                                     ("Zea.Zea_r",@{typ Zea},
                                      tp[var("size",@{typ Zsize}),lc("RDX","Zreg",@{theory})],
                                      @{theory})],@{theory}),
                             apply
                               (call
                                  ("write'EA",@{typ "state \<Rightarrow> state"},
                                   tp[bop(Mul,var_w("v",64),var_w("v0",64)),var("ea_eax",@{typ Zea})],
                                   @{theory}),var("state",qTy))))],@{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zimul",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var("ea_eax",@{typ Zea}),
            call
              ("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),lc("RAX","Zreg",@{theory})],
               @{theory}),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               apply
                 (call
                    ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[apply
                          (call
                             ("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_eax",@{typ Zea}),
                              @{theory}),var("state",qTy)),var("size",@{typ Zsize})],@{theory}),
                  var("state",qTy)),
               let'
                 (tp[var_w("v0",64),var("s",qTy)],
                  apply
                    (call
                       ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[apply
                             (call
                                ("EA",@{typ "state \<Rightarrow> 64 word"},
                                 apply
                                   (call
                                      ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                       tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                                    var("s",qTy)),@{theory}),var("s",qTy)),var("size",@{typ Zsize})],
                        @{theory}),var("s",qTy)),
                  let'
                    (var_i"product",
                     bop(Mul,mop(Cast HOLogic.intT,var_w("v",64)),
                         mop(Cast HOLogic.intT,var_w("v0",64))),
                     let'
                       (var_w("product64",64),mop(Cast w64,var_i"product"),
                        let'
                          (var("s",qTy),
                           apply
                             (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                              var("s",qTy)),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              ite(eq(var("size",@{typ Zsize}),
                                     Term.Const(@{const_name "Z64"},@{typ Zsize})),
                                  tp[eq(mop(Cast HOLogic.intT,var_w("product64",64)),var_i"product"),
                                     var("s",qTy)],
                                  let'
                                    (tp[var_w("v",64),var("s",qTy)],
                                     apply
                                       (call
                                          ("SignExtension64",
                                           @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                           tp[var_w("product64",64),var("size",@{typ Zsize})],
                                           @{theory}),var("s",qTy)),
                                     tp[eq(var_w("v",64),var_w("product64",64)),var("s",qTy)])),
                              let'
                                (var_b"v",mop(Not,var_b"v"),
                                 let'
                                   (var("s",qTy),
                                    apply
                                      (call
                                         ("write'OF",@{typ "state \<Rightarrow> state"},var_b"v",
                                          @{theory}),
                                       apply
                                         (call
                                            ("write'CF",@{typ "state \<Rightarrow> state"},var_b"v",
                                             @{theory}),var("s",qTy))),
                                    cs(var("size",@{typ Zsize}),
                                       [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                                         apply
                                           (call
                                              ("write'EA",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("product64",64),
                                                  call
                                                    ("Zea.Zea_r",@{typ Zea},
                                                     tp[Term.Const(@{const_name "Z16"},@{typ Zsize}),
                                                        lc("RAX","Zreg",@{theory})],@{theory})],
                                               @{theory}),var("s",qTy))),
                                        (var_a @{typ Zsize},
                                         apply
                                           (call
                                              ("write'EA",@{typ "state \<Rightarrow> state"},
                                               tp[mop(Cast w64,
                                                      bop(Div,var_i"product",
                                                          mop(Cast HOLogic.intT,
                                                              call
                                                                ("value_width",HOLogic.natT,
                                                                 var("size",@{typ Zsize}),@{theory})))),
                                                  call
                                                    ("Zea.Zea_r",@{typ Zea},
                                                     tp[var("size",@{typ Zsize}),
                                                        lc("RDX","Zreg",@{theory})],@{theory})],
                                               @{theory}),
                                            apply
                                              (call
                                                 ("write'EA",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("product64",64),var("ea_eax",@{typ Zea})],
                                                  @{theory}),var("s",qTy))))],@{context})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zimul2",
   close
     (tp[var("size",@{typ Zsize}),var("r",@{typ Zreg}),var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (var("ea_dst",@{typ Zea}),
            call("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               apply
                 (call
                    ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[apply
                          (call
                             ("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_dst",@{typ Zea}),
                              @{theory}),var("state",qTy)),var("size",@{typ Zsize})],@{theory}),
                  var("state",qTy)),
               let'
                 (tp[var_w("v0",64),var("s",qTy)],
                  apply
                    (call
                       ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[apply
                             (call
                                ("EA",@{typ "state \<Rightarrow> 64 word"},
                                 apply
                                   (call
                                      ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                       tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                                    var("s",qTy)),@{theory}),var("s",qTy)),var("size",@{typ Zsize})],
                        @{theory}),var("s",qTy)),
                  let'
                    (var_i"product",
                     bop(Mul,mop(Cast HOLogic.intT,var_w("v",64)),
                         mop(Cast HOLogic.intT,var_w("v0",64))),
                     let'
                       (var_w("product64",64),mop(Cast w64,var_i"product"),
                        let'
                          (var("s",qTy),
                           apply
                             (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                              var("s",qTy)),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              ite(eq(var("size",@{typ Zsize}),
                                     Term.Const(@{const_name "Z64"},@{typ Zsize})),
                                  tp[eq(mop(Cast HOLogic.intT,var_w("product64",64)),var_i"product"),
                                     var("s",qTy)],
                                  let'
                                    (tp[var_w("v",64),var("s",qTy)],
                                     apply
                                       (call
                                          ("SignExtension64",
                                           @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                           tp[var_w("product64",64),var("size",@{typ Zsize})],
                                           @{theory}),var("s",qTy)),
                                     tp[eq(var_w("v",64),var_w("product64",64)),var("s",qTy)])),
                              let'
                                (var_b"v",mop(Not,var_b"v"),
                                 apply
                                   (call
                                      ("write'EA",@{typ "state \<Rightarrow> state"},
                                       tp[var_w("product64",64),var("ea_dst",@{typ Zea})],@{theory}),
                                    apply
                                      (call
                                         ("write'OF",@{typ "state \<Rightarrow> state"},var_b"v",
                                          @{theory}),
                                       apply
                                         (call
                                            ("write'CF",@{typ "state \<Rightarrow> state"},var_b"v",
                                             @{theory}),var("s",qTy)))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zimul3",
   close
     (tp[var("size",@{typ Zsize}),var("r",@{typ Zreg}),var("rm",@{typ Zrm}),var_w("imm",64)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (call
                 ("SignExtension64",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                  tp[apply
                       (call
                          ("EA",@{typ "state \<Rightarrow> 64 word"},
                           apply
                             (call
                                ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                                 tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),
                              var("state",qTy)),@{theory}),var("state",qTy)),
                     var("size",@{typ Zsize})],@{theory}),var("state",qTy)),
            let'
              (var_i"product",
               bop(Mul,mop(Cast HOLogic.intT,var_w("v",64)),mop(Cast HOLogic.intT,var_w("imm",64))),
               let'
                 (var_w("product64",64),mop(Cast w64,var_i"product"),
                  let'
                    (var("s",qTy),
                     apply
                       (const("erase_eflags",@{typ "state \<Rightarrow> state"},@{theory}),
                        var("s",qTy)),
                     let'
                       (tp[var_b"v",var("s",qTy)],
                        ite(eq(var("size",@{typ Zsize}),Term.Const(@{const_name "Z64"},@{typ Zsize})),
                            tp[eq(mop(Cast HOLogic.intT,var_w("product64",64)),var_i"product"),
                               var("s",qTy)],
                            let'
                              (tp[var_w("v",64),var("s",qTy)],
                               apply
                                 (call
                                    ("SignExtension64",
                                     @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                     tp[var_w("product64",64),var("size",@{typ Zsize})],@{theory}),
                                  var("s",qTy)),
                               tp[eq(var_w("v",64),var_w("product64",64)),var("s",qTy)])),
                        let'
                          (var_b"v",mop(Not,var_b"v"),
                           apply
                             (call
                                ("write'EA",@{typ "state \<Rightarrow> state"},
                                 tp[var_w("product64",64),
                                    call
                                      ("Zea.Zea_r",@{typ Zea},
                                       tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory})],
                                 @{theory}),
                              apply
                                (call
                                   ("write'OF",@{typ "state \<Rightarrow> state"},var_b"v",@{theory}),
                                 apply
                                   (call
                                      ("write'CF",@{typ "state \<Rightarrow> state"},var_b"v",
                                       @{theory}),var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'Znop",close(var_n"n",lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zpop",
   close
     (var("rm",@{typ Zrm}),
      close
        (var("state",qTy),
         apply
           (call("x64_pop",@{typ "state \<Rightarrow> state"},var("rm",@{typ Zrm}),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zpush",
   close
     (var("imm_rm",@{typ Zimm_rm}),
      close
        (var("state",qTy),
         apply
           (call
              ("x64_push",@{typ "state \<Rightarrow> state"},var("imm_rm",@{typ Zimm_rm}),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zret",
   close
     (var_w("imm",64),
      close
        (var("state",qTy),
         apply
           (call("x64_drop",@{typ "state \<Rightarrow> state"},var_w("imm",64),@{theory}),
            apply
              (const("x64_pop_rip",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zset",
   close
     (tp[var("cond",@{typ Zcond}),var_b"have_rex",var("rm",@{typ Zrm})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v0",var("s",qTy)],
            apply
              (call
                 ("read_cond",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var("cond",@{typ Zcond}),@{theory}),var("state",qTy)),
            apply
              (call
                 ("write'EA",@{typ "state \<Rightarrow> state"},
                  tp[mop(Cast w64,var_b"v0"),
                     apply
                       (call
                          ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                           tp[call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory}),
                              var("rm",@{typ Zrm})],@{theory}),var("state",qTy))],@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zxadd",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm}),var("r",@{typ Zreg})],
      close
        (var("state",qTy),
         let'
           (var("ea_src",@{typ Zea}),
            call("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
            let'
              (var("v",@{typ Zea}),
               apply
                 (call
                    ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                     tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy)),
               let'
                 (var_w("v1",64),
                  apply
                    (call("EA",@{typ "state \<Rightarrow> 64 word"},var("v",@{typ Zea}),@{theory}),
                     var("state",qTy)),
                  apply
                    (call
                       ("write_binop",@{typ "state \<Rightarrow> state"},
                        tp[var("size",@{typ Zsize}),lc("Zadd","Zbinop_name",@{theory}),
                           apply
                             (call
                                ("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_src",@{typ Zea}),
                                 @{theory}),var("state",qTy)),var_w("v1",64),var("v",@{typ Zea})],
                        @{theory}),
                     apply
                       (call
                          ("write'EA",@{typ "state \<Rightarrow> state"},
                           tp[var_w("v1",64),var("ea_src",@{typ Zea})],@{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zxchg",
   close
     (tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm}),var("r",@{typ Zreg})],
      close
        (var("state",qTy),
         let'
           (var("ea_src",@{typ Zea}),
            call("Zea.Zea_r",@{typ Zea},tp[var("size",@{typ Zsize}),var("r",@{typ Zreg})],@{theory}),
            let'
              (var("v",@{typ Zea}),
               apply
                 (call
                    ("ea_Zrm",@{typ "state \<Rightarrow> Zea"},
                     tp[var("size",@{typ Zsize}),var("rm",@{typ Zrm})],@{theory}),var("state",qTy)),
               apply
                 (call
                    ("write'EA",@{typ "state \<Rightarrow> state"},
                     tp[apply
                          (call
                             ("EA",@{typ "state \<Rightarrow> 64 word"},var("ea_src",@{typ Zea}),
                              @{theory}),var("state",qTy)),var("v",@{typ Zea})],@{theory}),
                  apply
                    (call
                       ("write'EA",@{typ "state \<Rightarrow> state"},
                        tp[apply
                             (call
                                ("EA",@{typ "state \<Rightarrow> 64 word"},var("v",@{typ Zea}),
                                 @{theory}),var("state",qTy)),var("ea_src",@{typ Zea})],@{theory}),
                     var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zcmc",
   close
     (var("state",qTy),
      let'
        (tp[var_b"v",var("s",qTy)],
         apply
           (const("CF",@{typ "state \<Rightarrow> (bool \<times> state)"},@{theory}),
            var("state",qTy)),
         apply
           (call("write'CF",@{typ "state \<Rightarrow> state"},mop(Not,var_b"v"),@{theory}),
            var("s",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zclc",
   close
     (var("state",qTy),
      apply(call("write'CF",@{typ "state \<Rightarrow> state"},lf,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Zstc",
   close
     (var("state",qTy),
      apply(call("write'CF",@{typ "state \<Rightarrow> state"},lt,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Run",
   close
     (var("v0",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("v0",@{typ instruction}),
            [(Term.Const(@{const_name "Zclc"},@{typ instruction}),
              apply(const("dfn'Zclc",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Zcmc"},@{typ instruction}),
              apply(const("dfn'Zcmc",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Zleave"},@{typ instruction}),
              apply
                (const("dfn'Zleave",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Zstc"},@{typ instruction}),
              apply(const("dfn'Zstc",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (call
                ("instruction.Zbinop",@{typ instruction},
                 var("v1",@{typ "Zbinop_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
              apply
                (call
                   ("dfn'Zbinop",@{typ "state \<Rightarrow> state"},
                    var("v1",@{typ "Zbinop_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zbit_test",@{typ instruction},
                 var("v2",@{typ "Zbit_test_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
              apply
                (call
                   ("dfn'Zbit_test",@{typ "state \<Rightarrow> state"},
                    var("v2",@{typ "Zbit_test_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
                 var("state",qTy))),
             (call("instruction.Zcall",@{typ instruction},var("v3",@{typ Zimm_rm}),@{theory}),
              apply
                (call
                   ("dfn'Zcall",@{typ "state \<Rightarrow> state"},var("v3",@{typ Zimm_rm}),
                    @{theory}),var("state",qTy))),
             (call
                ("instruction.Zcmpxchg",@{typ instruction},
                 var("v4",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
              apply
                (call
                   ("dfn'Zcmpxchg",@{typ "state \<Rightarrow> state"},
                    var("v4",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zdiv",@{typ instruction},var("v5",@{typ "Zsize \<times> Zrm"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zdiv",@{typ "state \<Rightarrow> state"},
                    var("v5",@{typ "Zsize \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zidiv",@{typ instruction},var("v6",@{typ "Zsize \<times> Zrm"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zidiv",@{typ "state \<Rightarrow> state"},
                    var("v6",@{typ "Zsize \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zimul",@{typ instruction},var("v7",@{typ "Zsize \<times> Zrm"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zimul",@{typ "state \<Rightarrow> state"},
                    var("v7",@{typ "Zsize \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zimul2",@{typ instruction},
                 var("v8",@{typ "Zsize \<times> Zreg \<times> Zrm"}),@{theory}),
              apply
                (call
                   ("dfn'Zimul2",@{typ "state \<Rightarrow> state"},
                    var("v8",@{typ "Zsize \<times> Zreg \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zimul3",@{typ instruction},
                 var("v9",@{typ "Zsize \<times> Zreg \<times> Zrm \<times> 64 word"}),@{theory}),
              apply
                (call
                   ("dfn'Zimul3",@{typ "state \<Rightarrow> state"},
                    var("v9",@{typ "Zsize \<times> Zreg \<times> Zrm \<times> 64 word"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zjcc",@{typ instruction},var("v10",@{typ "Zcond \<times> 64 word"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zjcc",@{typ "state \<Rightarrow> state"},
                    var("v10",@{typ "Zcond \<times> 64 word"}),@{theory}),var("state",qTy))),
             (call("instruction.Zjmp",@{typ instruction},var("v11",@{typ Zrm}),@{theory}),
              apply
                (call("dfn'Zjmp",@{typ "state \<Rightarrow> state"},var("v11",@{typ Zrm}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zlea",@{typ instruction},var("v12",@{typ "Zsize \<times> Zdest_src"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zlea",@{typ "state \<Rightarrow> state"},
                    var("v12",@{typ "Zsize \<times> Zdest_src"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zloop",@{typ instruction},var("v13",@{typ "Zcond \<times> 64 word"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zloop",@{typ "state \<Rightarrow> state"},
                    var("v13",@{typ "Zcond \<times> 64 word"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zmonop",@{typ instruction},
                 var("v14",@{typ "Zmonop_name \<times> Zsize \<times> Zrm"}),@{theory}),
              apply
                (call
                   ("dfn'Zmonop",@{typ "state \<Rightarrow> state"},
                    var("v14",@{typ "Zmonop_name \<times> Zsize \<times> Zrm"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zmov",@{typ instruction},
                 var("v15",@{typ "Zcond \<times> Zsize \<times> Zdest_src"}),@{theory}),
              apply
                (call
                   ("dfn'Zmov",@{typ "state \<Rightarrow> state"},
                    var("v15",@{typ "Zcond \<times> Zsize \<times> Zdest_src"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zmovsx",@{typ instruction},
                 var("v16",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
              apply
                (call
                   ("dfn'Zmovsx",@{typ "state \<Rightarrow> state"},
                    var("v16",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zmovzx",@{typ instruction},
                 var("v17",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
              apply
                (call
                   ("dfn'Zmovzx",@{typ "state \<Rightarrow> state"},
                    var("v17",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zmul",@{typ instruction},var("v18",@{typ "Zsize \<times> Zrm"}),
                 @{theory}),
              apply
                (call
                   ("dfn'Zmul",@{typ "state \<Rightarrow> state"},
                    var("v18",@{typ "Zsize \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call("instruction.Znop",@{typ instruction},var_n"v19",@{theory}),var("state",qTy)),
             (call("instruction.Zpop",@{typ instruction},var("v20",@{typ Zrm}),@{theory}),
              apply
                (call("dfn'Zpop",@{typ "state \<Rightarrow> state"},var("v20",@{typ Zrm}),@{theory}),
                 var("state",qTy))),
             (call("instruction.Zpush",@{typ instruction},var("v21",@{typ Zimm_rm}),@{theory}),
              apply
                (call
                   ("dfn'Zpush",@{typ "state \<Rightarrow> state"},var("v21",@{typ Zimm_rm}),
                    @{theory}),var("state",qTy))),
             (call("instruction.Zret",@{typ instruction},var_w("v22",64),@{theory}),
              apply
                (call("dfn'Zret",@{typ "state \<Rightarrow> state"},var_w("v22",64),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Zset",@{typ instruction},
                 var("v23",@{typ "Zcond \<times> bool \<times> Zrm"}),@{theory}),
              apply
                (call
                   ("dfn'Zset",@{typ "state \<Rightarrow> state"},
                    var("v23",@{typ "Zcond \<times> bool \<times> Zrm"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zxadd",@{typ instruction},
                 var("v24",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
              apply
                (call
                   ("dfn'Zxadd",@{typ "state \<Rightarrow> state"},
                    var("v24",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Zxchg",@{typ instruction},
                 var("v25",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
              apply
                (call
                   ("dfn'Zxchg",@{typ "state \<Rightarrow> state"},
                    var("v25",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),var("state",qTy)))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("oimmediate8",
   close
     (var("strm",@{typ "(8 word list) option"}),
      cs(var("strm",@{typ "(8 word list) option"}),
         [(mop(Some,llc([var_w("b",8)],var("t",@{typ "8 word list"}))),
           tp[mop(SE w64,var_w("b",8)),mop(Some,var("t",@{typ "8 word list"}))]),
          (var_a(@{typ "(8 word list) option"}),tp[lx w64,lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("immediate8",
   close
     (var("strm",@{typ "8 word list"}),
      call
        ("oimmediate8",@{typ "64 word \<times> (8 word list) option"},
         mop(Some,var("strm",@{typ "8 word list"})),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("immediate16",
   close
     (var("strm",@{typ "8 word list"}),
      cs(var("strm",@{typ "8 word list"}),
         [(llc([var_w("b1",8),var_w("b2",8)],var("t",@{typ "8 word list"})),
           tp[mop(SE w64,cc[var_w("b2",8),var_w("b1",8)]),mop(Some,var("t",@{typ "8 word list"}))]),
          (var_a(@{typ "8 word list"}),tp[lx w64,lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("immediate32",
   close
     (var("strm",@{typ "8 word list"}),
      cs(var("strm",@{typ "8 word list"}),
         [(llc([var_w("b1",8),var_w("b2",8),var_w("b3",8),var_w("b4",8)],
               var("t",@{typ "8 word list"})),
           tp[mop(SE w64,cc[var_w("b4",8),var_w("b3",8),var_w("b2",8),var_w("b1",8)]),
              mop(Some,var("t",@{typ "8 word list"}))]),
          (var_a(@{typ "8 word list"}),tp[lx w64,lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("immediate64",
   close
     (var("strm",@{typ "8 word list"}),
      cs(var("strm",@{typ "8 word list"}),
         [(llc([var_w("b1",8),var_w("b2",8),var_w("b3",8),var_w("b4",8),var_w("b5",8),var_w("b6",8),
                var_w("b7",8),var_w("b8",8)],var("t",@{typ "8 word list"})),
           tp[cc[var_w("b8",8),var_w("b7",8),var_w("b6",8),var_w("b5",8),var_w("b4",8),
                 var_w("b3",8),var_w("b2",8),var_w("b1",8)],mop(Some,var("t",@{typ "8 word list"}))]),
          (var_a(@{typ "8 word list"}),tp[lx w64,lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("immediate",
   close
     (tp[var("size",@{typ Zsize}),var("strm",@{typ "8 word list"})],
      cs(var("size",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
           call
             ("immediate8",@{typ "64 word \<times> (8 word list) option"},
              var("strm",@{typ "8 word list"}),@{theory})),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),
           call
             ("immediate16",@{typ "64 word \<times> (8 word list) option"},
              var("strm",@{typ "8 word list"}),@{theory})),
          (var_a @{typ Zsize},
           call
             ("immediate32",@{typ "64 word \<times> (8 word list) option"},
              var("strm",@{typ "8 word list"}),@{theory}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("oimmediate",
   close
     (tp[var("size",@{typ Zsize}),var("strm",@{typ "(8 word list) option"})],
      cs(var("strm",@{typ "(8 word list) option"}),
         [(mop(Some,var("s",@{typ "8 word list"})),
           call
             ("immediate",@{typ "64 word \<times> (8 word list) option"},
              tp[var("size",@{typ Zsize}),var("s",@{typ "8 word list"})],@{theory})),
          (lo(@{typ "8 word list"}),tp[lx w64,lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("full_immediate",
   close
     (tp[var("size",@{typ Zsize}),var("strm",@{typ "8 word list"})],
      ite(eq(var("size",@{typ Zsize}),Term.Const(@{const_name "Z64"},@{typ Zsize})),
          call
            ("immediate64",@{typ "64 word \<times> (8 word list) option"},
             var("strm",@{typ "8 word list"}),@{theory}),
          call
            ("immediate",@{typ "64 word \<times> (8 word list) option"},
             tp[var("size",@{typ Zsize}),var("strm",@{typ "8 word list"})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'REX",
   close
     (var_w("x",4),
      record
        ("REX",
         [bop(Bit,var_w("x",4),ln 0),bop(Bit,var_w("x",4),ln 2),bop(Bit,var_w("x",4),ln 3),
          bop(Bit,var_w("x",4),ln 1)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'REX",
   close
     (var("x",@{typ REX}),
      cc[mop(Cast w1,call("REX.W",HOLogic.boolT,var("x",@{typ REX}),@{theory})),
         mop(Cast w1,call("REX.R",HOLogic.boolT,var("x",@{typ REX}),@{theory})),
         mop(Cast w1,call("REX.X",HOLogic.boolT,var("x",@{typ REX}),@{theory})),
         mop(Cast w1,call("REX.B",HOLogic.boolT,var("x",@{typ REX}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'REX",
   close(tp[var_a w4,var("x",@{typ REX})],call("reg'REX",w4,var("x",@{typ REX}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'REX",
   close(tp[var_a @{typ REX},var_w("x",4)],call("rec'REX",@{typ REX},var_w("x",4),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RexReg",
   close(tp[var_b"b",var_w("r",3)],mop(Cast @{typ Zreg},cc[mop(Cast w1,var_b"b"),var_w("r",3)])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readDisplacement",
   close
     (tp[var_w("Mod",2),var("strm",@{typ "8 word list"})],
      itb([(eq(var_w("Mod",2),lw(1,2)),
            call
              ("immediate8",@{typ "64 word \<times> (8 word list) option"},
               var("strm",@{typ "8 word list"}),@{theory})),
           (eq(var_w("Mod",2),lw(2,2)),
            call
              ("immediate32",@{typ "64 word \<times> (8 word list) option"},
               var("strm",@{typ "8 word list"}),@{theory}))],
          tp[lw(0,64),mop(Some,var("strm",@{typ "8 word list"}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readSibDisplacement",
   close
     (tp[var_w("Mod",2),var("strm",@{typ "8 word list"})],
      ite(eq(var_w("Mod",2),lw(1,2)),
          call
            ("immediate8",@{typ "64 word \<times> (8 word list) option"},
             var("strm",@{typ "8 word list"}),@{theory}),
          call
            ("immediate32",@{typ "64 word \<times> (8 word list) option"},
             var("strm",@{typ "8 word list"}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readSIB",
   close
     (tp[var("REX",@{typ REX}),var_w("Mod",2),var("strm",@{typ "8 word list"})],
      cs(var("strm",@{typ "8 word list"}),
         [(llc([var_w("v#0",8)],var("v#1",@{typ "8 word list"})),
           cs(tp[call
                   ("boolify'8",
                    @{typ
                    "bool \<times>
                     bool \<times>
                     bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                    var_w("v#0",8),@{theory}),var("v#1",@{typ "8 word list"})],
              [(tp[tp[var_b"SS'1",var_b"SS'0",var_b"Index'2",var_b"Index'1",var_b"Index'0",
                      var_b"Base'2",var_b"Base'1",var_b"Base'0"],var("strm1",@{typ "8 word list"})],
                let'
                  (var("base",@{typ Zreg}),
                   call
                     ("RexReg",@{typ Zreg},
                      tp[call("REX.B",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                         mop(Cast (Word_Lib.mk_wordT 3),
                             ll[var_b"Base'2",var_b"Base'1",var_b"Base'0"])],@{theory}),
                   let'
                     (var("index",@{typ Zreg}),
                      call
                        ("RexReg",@{typ Zreg},
                         tp[call("REX.X",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                            mop(Cast (Word_Lib.mk_wordT 3),
                                ll[var_b"Index'2",var_b"Index'1",var_b"Index'0"])],@{theory}),
                      let'
                        (var("scaled_index",@{typ "(2 word \<times> Zreg) option"}),
                         ite(eq(var("index",@{typ Zreg}),lc("RSP","Zreg",@{theory})),
                             lo(@{typ "2 word \<times> Zreg"}),
                             mop(Some,
                                 tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"SS'1",var_b"SS'0"]),
                                    var("index",@{typ Zreg})])),
                         ite(eq(var("base",@{typ Zreg}),lc("RBP","Zreg",@{theory})),
                             let'
                               (tp[var_w("displacement",64),
                                   var("strm2",@{typ "(8 word list) option"})],
                                call
                                  ("readSibDisplacement",
                                   @{typ "64 word \<times> (8 word list) option"},
                                   tp[var_w("Mod",2),var("strm1",@{typ "8 word list"})],@{theory}),
                                tp[call
                                     ("Zrm.Zm",@{typ Zrm},
                                      tp[var("scaled_index",@{typ "(2 word \<times> Zreg) option"}),
                                         ite(eq(var_w("Mod",2),lw(0,2)),
                                             Term.Const(@{const_name "ZnoBase"},@{typ Zbase}),
                                             call
                                               ("Zbase.ZregBase",@{typ Zbase},
                                                var("base",@{typ Zreg}),@{theory})),
                                         var_w("displacement",64)],@{theory}),
                                   var("strm2",@{typ "(8 word list) option"})]),
                             let'
                               (tp[var_w("displacement",64),
                                   var("strm2",@{typ "(8 word list) option"})],
                                call
                                  ("readDisplacement",
                                   @{typ "64 word \<times> (8 word list) option"},
                                   tp[var_w("Mod",2),var("strm1",@{typ "8 word list"})],@{theory}),
                                tp[call
                                     ("Zrm.Zm",@{typ Zrm},
                                      tp[var("scaled_index",@{typ "(2 word \<times> Zreg) option"}),
                                         call
                                           ("Zbase.ZregBase",@{typ Zbase},var("base",@{typ Zreg}),
                                            @{theory}),var_w("displacement",64)],@{theory}),
                                   var("strm2",@{typ "(8 word list) option"})]))))))],@{context})),
          (var_a(@{typ "8 word list"}),tp[lx @{typ Zrm},lo(@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readModRM",
   close
     (tp[var("REX",@{typ REX}),var("strm",@{typ "8 word list"})],
      cs(var("strm",@{typ "8 word list"}),
         [(llc([var_w("v#0",8)],var("v#1",@{typ "8 word list"})),
           cs(tp[call
                   ("boolify'8",
                    @{typ
                    "bool \<times>
                     bool \<times>
                     bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                    var_w("v#0",8),@{theory}),var("v#1",@{typ "8 word list"})],
              [(tp[tp[lf,lf,var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0",lt,lf,lt],
                   var("strm1",@{typ "8 word list"})],
                let'
                  (tp[var_w("displacement",64),var("strm2",@{typ "(8 word list) option"})],
                   call
                     ("immediate32",@{typ "64 word \<times> (8 word list) option"},
                      var("strm1",@{typ "8 word list"}),@{theory}),
                   tp[call
                        ("RexReg",@{typ Zreg},
                         tp[call("REX.R",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                            mop(Cast (Word_Lib.mk_wordT 3),
                                ll[var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0"])],@{theory}),
                      call
                        ("Zrm.Zm",@{typ Zrm},
                         tp[lo(@{typ "2 word \<times> Zreg"}),
                            Term.Const(@{const_name "ZripBase"},@{typ Zbase}),
                            var_w("displacement",64)],@{theory}),
                      var("strm2",@{typ "(8 word list) option"})])),
               (tp[tp[lt,lt,var_b"REG'2",var_b"REG'1",var_b"REG'0",var_b"RM'2",var_b"RM'1",
                      var_b"RM'0"],var("strm1",@{typ "8 word list"})],
                tp[call
                     ("RexReg",@{typ Zreg},
                      tp[call("REX.R",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                         mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"REG'2",var_b"REG'1",var_b"REG'0"])],
                      @{theory}),
                   call
                     ("Zrm.Zr",@{typ Zrm},
                      call
                        ("RexReg",@{typ Zreg},
                         tp[call("REX.B",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"RM'2",var_b"RM'1",var_b"RM'0"])],
                         @{theory}),@{theory}),mop(Some,var("strm1",@{typ "8 word list"}))]),
               (tp[tp[var_b"Mod'1",var_b"Mod'0",var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0",lt,
                      lf,lf],var("strm1",@{typ "8 word list"})],
                let'
                  (tp[var("sib",@{typ Zrm}),var("strm2",@{typ "(8 word list) option"})],
                   call
                     ("readSIB",@{typ "Zrm \<times> (8 word list) option"},
                      tp[var("REX",@{typ REX}),
                         mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"Mod'1",var_b"Mod'0"]),
                         var("strm1",@{typ "8 word list"})],@{theory}),
                   tp[call
                        ("RexReg",@{typ Zreg},
                         tp[call("REX.R",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                            mop(Cast (Word_Lib.mk_wordT 3),
                                ll[var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0"])],@{theory}),
                      var("sib",@{typ Zrm}),var("strm2",@{typ "(8 word list) option"})])),
               (tp[tp[var_b"Mod'1",var_b"Mod'0",var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0",
                      var_b"RM'2",var_b"RM'1",var_b"RM'0"],var("strm1",@{typ "8 word list"})],
                let'
                  (tp[var_w("displacement",64),var("strm2",@{typ "(8 word list) option"})],
                   call
                     ("readDisplacement",@{typ "64 word \<times> (8 word list) option"},
                      tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"Mod'1",var_b"Mod'0"]),
                         var("strm1",@{typ "8 word list"})],@{theory}),
                   tp[call
                        ("RexReg",@{typ Zreg},
                         tp[call("REX.R",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                            mop(Cast (Word_Lib.mk_wordT 3),
                                ll[var_b"RegOpc'2",var_b"RegOpc'1",var_b"RegOpc'0"])],@{theory}),
                      call
                        ("Zrm.Zm",@{typ Zrm},
                         tp[lo(@{typ "2 word \<times> Zreg"}),
                            call
                              ("Zbase.ZregBase",@{typ Zbase},
                               call
                                 ("RexReg",@{typ Zreg},
                                  tp[call("REX.B",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                                     mop(Cast (Word_Lib.mk_wordT 3),
                                         ll[var_b"RM'2",var_b"RM'1",var_b"RM'0"])],@{theory}),
                               @{theory}),var_w("displacement",64)],@{theory}),
                      var("strm2",@{typ "(8 word list) option"})]))],@{context})),
          (var_a(@{typ "8 word list"}),tp[lx @{typ Zreg},lx @{typ Zrm},lo(@{typ "8 word list"})])],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readOpcodeModRM",
   close
     (tp[var("REX",@{typ REX}),var("strm",@{typ "8 word list"})],
      let'
        (tp[var("opcode",@{typ Zreg}),var("rm",@{typ Zrm}),
            var("strm1",@{typ "(8 word list) option"})],
         call
           ("readModRM",@{typ "Zreg \<times> Zrm \<times> (8 word list) option"},
            tp[var("REX",@{typ REX}),var("strm",@{typ "8 word list"})],@{theory}),
         tp[mop(Cast (Word_Lib.mk_wordT 3),
                bop(Mod,mop(Cast HOLogic.natT,var("opcode",@{typ Zreg})),ln 8)),
            var("rm",@{typ Zrm}),var("strm1",@{typ "(8 word list) option"})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("prefixGroup",
   close
     (var_w("b",8),
      itb([(eq(var_w("b",8),lw(240,8)),ln 1),(eq(var_w("b",8),lw(242,8)),ln 1),
           (eq(var_w("b",8),lw(243,8)),ln 1),(eq(var_w("b",8),lw(38,8)),ln 2),
           (eq(var_w("b",8),lw(46,8)),ln 2),(eq(var_w("b",8),lw(54,8)),ln 2),
           (eq(var_w("b",8),lw(62,8)),ln 2),(eq(var_w("b",8),lw(100,8)),ln 2),
           (eq(var_w("b",8),lw(101,8)),ln 2),(eq(var_w("b",8),lw(102,8)),ln 3),
           (eq(var_w("b",8),lw(103,8)),ln 4),(eq(ex(var_w("b",8),ln 7,ln 4,w4),lw(4,4)),ln 5)],ln 0)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = function
  ("readPrefix",
   tp[var("s",@{typ "nat set"}),var("p",@{typ "8 word list"}),var("strm",@{typ "8 word list"})],
   cs(var("strm",@{typ "8 word list"}),
      [(llc([var_w("h",8)],var("strm1",@{typ "8 word list"})),
        let'
          (var_n"group",call("prefixGroup",HOLogic.natT,var_w("h",8),@{theory}),
           itb([(eq(var_n"group",ln 0),
                 mop(Some,
                     tp[var("p",@{typ "8 word list"}),lf,
                        call("rec'REX",@{typ REX},lw(0,4),@{theory}),
                        var("strm",@{typ "8 word list"})])),
                (eq(var_n"group",ln 5),
                 mop(Some,
                     tp[var("p",@{typ "8 word list"}),lt,
                        call("rec'REX",@{typ REX},ex(var_w("h",8),ln 3,ln 0,w4),@{theory}),
                        var("strm1",@{typ "8 word list"})])),
                (bop(In,var_n"group",var("s",@{typ "nat set"})),
                 lo(@{typ "(8 word list) \<times> bool \<times> REX \<times> 8 word list"}))],
               apply
                 (var("readPrefix",
                      @{typ
                      "((nat set) \<times> (8 word list) \<times> 8 word list) \<Rightarrow>
                       (((8 word list) \<times> bool \<times> REX \<times> 8 word list) option)"}),
                  tp[bop(Insert,var_n"group",var("s",@{typ "nat set"})),
                     llc([var_w("h",8)],var("p",@{typ "8 word list"})),
                     var("strm1",@{typ "8 word list"})])))),
       (lnl w8,
        mop(Some,tp[var("p",@{typ "8 word list"}),lf,lx @{typ REX},var("strm",@{typ "8 word list"})]))],
      @{context}))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readPrefixes",
   close
     (var("strm",@{typ "8 word list"}),
      call
        ("readPrefix",
         @{typ "((8 word list) \<times> bool \<times> REX \<times> 8 word list) option"},
         tp[le HOLogic.natT,lnl w8,var("strm",@{typ "8 word list"})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("OpSize",
   close
     (tp[var_b"have_rex",var_b"w",var_w("v",1),var_b"override"],
      itb([(eq(var_w("v",1),lw(0,1)),call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory})),
           (var_b"w",Term.Const(@{const_name "Z64"},@{typ Zsize})),
           (var_b"override",Term.Const(@{const_name "Z16"},@{typ Zsize}))],
          Term.Const(@{const_name "Z32"},@{typ Zsize}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isZm",
   close
     (var("rm",@{typ Zrm}),
      cs(var("rm",@{typ Zrm}),
         [(call
             ("Zrm.Zm",@{typ Zrm},
              var_a(@{typ "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
              @{theory}),lt),(var_a @{typ Zrm},lf)],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("x64_decode",
   close
     (var("strm",@{typ "8 word list"}),
      cs(call
           ("readPrefixes",
            @{typ "((8 word list) \<times> bool \<times> REX \<times> 8 word list) option"},
            var("strm",@{typ "8 word list"}),@{theory}),
         [(lo(@{typ "(8 word list) \<times> bool \<times> REX \<times> 8 word list"}),
           call("Zinst.Zdec_fail",@{typ Zinst},ls"Bad prefix",@{theory})),
          (mop(Some,
               tp[var("p",@{typ "8 word list"}),var_b"have_rex",var("REX",@{typ REX}),
                  var("strm1",@{typ "8 word list"})]),
           let'
             (var("prefixes",@{typ "8 word set"}),mop(SofL,var("p",@{typ "8 word list"})),
              let'
                (var_b"op_size_override",bop(In,lw(102,8),var("prefixes",@{typ "8 word set"})),
                 itb([(bop(And,call("REX.W",HOLogic.boolT,var("REX",@{typ REX}),@{theory}),
                           var_b"op_size_override"),
                       call
                         ("Zinst.Zdec_fail",@{typ Zinst},ls"REX.W together with override prefix",
                          @{theory})),
                      (bop(In,lw(103,8),var("prefixes",@{typ "8 word set"})),
                       call
                         ("Zinst.Zdec_fail",@{typ Zinst},ls"address override prefix not supported",
                          @{theory}))],
                     cs(var("strm1",@{typ "8 word list"}),
                        [(llc([var_w("v#0",8)],var("v#1",@{typ "8 word list"})),
                          let'
                            (tp[tp[var_b"v#0",var_b"v#1",var_b"v#2",var_b"v#3",var_b"v#4",
                                   var_b"v#5",var_b"v#6",var_b"v#7"],var("v#8",@{typ "8 word list"})],
                             tp[call
                                  ("boolify'8",
                                   @{typ
                                   "bool \<times>
                                    bool \<times>
                                    bool \<times>
                                    bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                                   var_w("v#0",8),@{theory}),var("v#1",@{typ "8 word list"})],
                             cs(var("v#8",@{typ "8 word list"}),
                                [(llc([var_w("v#9",8)],var("v#10",@{typ "8 word list"})),
                                  cs(tp[tp[var_w("v#9",8),var("v#10",@{typ "8 word list"})],
                                        var_b"v#0",var_b"v#1",var_b"v#2",var_b"v#3",var_b"v#4",
                                        var_b"v#5",var_b"v#6",var_b"v#7"],
                                     [(tp[tp[var_w("v#49",8),var("v#50",@{typ "8 word list"})],lf,
                                          lt,lt,lf,lf,lf,lt,lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#49",8)],
                                                    var("v#50",@{typ "8 word list"}))],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zmovsx",@{typ instruction},
                                                   tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),
                                                      call
                                                        ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                         tp[var("reg",@{typ Zreg}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      Term.Const(@{const_name "Z64"},@{typ Zsize})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#81",8),var("v#82",@{typ "8 word list"})],lt,
                                          lt,lf,lf,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),
                                                   llc([var_w("v#81",8)],
                                                       var("v#82",@{typ "8 word list"}))],@{theory}),
                                             let'
                                               (tp[var_w("imm",64),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                call
                                                  ("oimmediate",
                                                   @{typ "64 word \<times> (8 word list) option"},
                                                   tp[var("size",@{typ Zsize}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}),
                                                ite(eq(var_w("opcode",3),lw(0,3)),
                                                    call
                                                      ("Zinst.Zfull_inst",@{typ Zinst},
                                                       tp[var("p",@{typ "8 word list"}),
                                                          call
                                                            ("instruction.Zmov",@{typ instruction},
                                                             tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                                var("size",@{typ Zsize}),
                                                                call
                                                                  ("Zdest_src.Zrm_i",
                                                                   @{typ Zdest_src},
                                                                   tp[var("rm",@{typ Zrm}),
                                                                      var_w("imm",64)],@{theory})],
                                                             @{theory}),
                                                          var("strm4",@{typ "(8 word list) option"})],
                                                       @{theory}),
                                                    call
                                                      ("Zinst.Zdec_fail",@{typ Zinst},
                                                       ls"Unsupported opcode: Group 11",@{theory})))))),
                                      (tp[tp[var_w("v#65",8),var("v#66",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lt,lf,var_b"x'0",var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#65",8)],
                                                    var("v#66",@{typ "8 word list"}))],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zmov",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      ite(eq(mop(Cast w1,ll[var_b"x'0"]),lw(0,1)),
                                                          call
                                                            ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                             tp[var("rm",@{typ Zrm}),
                                                                var("reg",@{typ Zreg})],@{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory}))],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#97",8),var("v#98",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),
                                                   llc([var_w("v#97",8)],
                                                       var("v#98",@{typ "8 word list"}))],@{theory}),
                                             itb([(eq(var_w("opcode",3),lw(0,3)),
                                                   let'
                                                     (tp[var_w("imm",64),
                                                         var("strm4",@{typ "(8 word list) option"})],
                                                      call
                                                        ("oimmediate",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         tp[var("size",@{typ Zsize}),
                                                            var("strm3",
                                                                @{typ "(8 word list) option"})],
                                                         @{theory}),
                                                      call
                                                        ("Zinst.Zfull_inst",@{typ Zinst},
                                                         tp[var("p",@{typ "8 word list"}),
                                                            call
                                                              ("instruction.Zbinop",
                                                               @{typ instruction},
                                                               tp[lc("Ztest","Zbinop_name",@{theory}),
                                                                  var("size",@{typ Zsize}),
                                                                  call
                                                                    ("Zdest_src.Zrm_i",
                                                                     @{typ Zdest_src},
                                                                     tp[var("rm",@{typ Zrm}),
                                                                        var_w("imm",64)],@{theory})],
                                                               @{theory}),
                                                            var("strm4",
                                                                @{typ "(8 word list) option"})],
                                                         @{theory}))),
                                                  (eq(var_w("opcode",3),lw(2,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Znot","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(3,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zneg","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(4,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmul",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(5,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zimul",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(6,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zdiv",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(7,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zidiv",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))],
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: Unary Group 3",@{theory}))))),
                                      (tp[tp[var_w("v#57",8),var("v#58",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lf,lf,lf,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),
                                                   llc([var_w("v#57",8)],
                                                       var("v#58",@{typ "8 word list"}))],@{theory}),
                                             let'
                                               (tp[var_w("imm",64),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                call
                                                  ("oimmediate",
                                                   @{typ "64 word \<times> (8 word list) option"},
                                                   tp[var("size",@{typ Zsize}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zbinop",@{typ instruction},
                                                         tp[mop(Cast @{typ Zbinop_name},
                                                                var_w("opcode",3)),
                                                            var("size",@{typ Zsize}),
                                                            call
                                                              ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                               tp[var("rm",@{typ Zrm}),
                                                                  var_w("imm",64)],@{theory})],
                                                         @{theory}),
                                                      var("strm4",@{typ "(8 word list) option"})],
                                                   @{theory}))))),
                                      (tp[tp[var_w("v#89",8),var("v#90",@{typ "8 word list"})],lt,
                                          lt,lt,lf,lf,lf,lt,lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},
                                             llc([var_w("v#89",8)],var("v#90",@{typ "8 word list"})),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zloop",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#73",8),var("v#74",@{typ "8 word list"})],lt,
                                          lf,lt,lf,lt,lf,lf,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[lt,
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),
                                                   llc([var_w("v#73",8)],
                                                       var("v#74",@{typ "8 word list"}))],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[lc("Ztest","Zbinop_name",@{theory}),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  lc("RAX","Zreg",@{theory}),
                                                                  @{theory}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[tp[var_w("v#105",8),var("v#106",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lt,lt,lt,lt],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),lw(1,1),var_b"op_size_override"],
                                             @{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),
                                                   llc([var_w("v#105",8)],
                                                       var("v#106",@{typ "8 word list"}))],@{theory}),
                                             itb([(eq(var_w("opcode",3),lw(0,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zinc","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(1,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zdec","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(2,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zcall",@{typ instruction},
                                                            call
                                                              ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                               var("rm",@{typ Zrm}),@{theory}),
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(4,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zjmp",@{typ instruction},
                                                            var("rm",@{typ Zrm}),@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(6,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zpush",@{typ instruction},
                                                            call
                                                              ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                               var("rm",@{typ Zrm}),@{theory}),
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))],
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: INC/DEC Group 5",
                                                    @{theory}))))),
                                      (tp[tp[var_w("v#53",8),var("v#54",@{typ "8 word list"})],lf,
                                          lt,lt,lf,lt,lf,var_b"b'0",lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#53",8)],
                                                    var("v#54",@{typ "8 word list"}))],@{theory}),
                                          cs(var("strm3",@{typ "(8 word list) option"}),
                                             [(lo(@{typ "8 word list"}),
                                               call
                                                 ("Zinst.Zdec_fail",@{typ Zinst},
                                                  ls"not enough bytes",@{theory})),
                                              (mop(Some,var("s",@{typ "8 word list"})),
                                               let'
                                                 (tp[var_w("imm",64),
                                                     var("strm4",@{typ "(8 word list) option"})],
                                                  ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(1,1)),
                                                      call
                                                        ("immediate8",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         var("s",@{typ "8 word list"}),@{theory}),
                                                      call
                                                        ("immediate32",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         var("s",@{typ "8 word list"}),@{theory})),
                                                  call
                                                    ("Zinst.Zfull_inst",@{typ Zinst},
                                                     tp[var("p",@{typ "8 word list"}),
                                                        call
                                                          ("instruction.Zimul3",@{typ instruction},
                                                           tp[call
                                                                ("OpSize",@{typ Zsize},
                                                                 tp[var_b"have_rex",
                                                                    call
                                                                      ("REX.W",HOLogic.boolT,
                                                                       var("REX",@{typ REX}),
                                                                       @{theory}),lw(1,1),
                                                                    var_b"op_size_override"],
                                                                 @{theory}),var("reg",@{typ Zreg}),
                                                              var("rm",@{typ Zrm}),var_w("imm",64)],
                                                           @{theory}),
                                                        var("strm4",@{typ "(8 word list) option"})],
                                                     @{theory})))],@{context}))),
                                      (tp[tp[var_w("v#85",8),var("v#86",@{typ "8 word list"})],lt,
                                          lt,lf,lt,lf,lf,var_b"b'0",var_b"v'0"],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#85",8)],
                                                    var("v#86",@{typ "8 word list"}))],@{theory}),
                                          ite(eq(var_w("opcode",3),lw(6,3)),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: Shift Group 2",@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zbinop",@{typ instruction},
                                                       tp[mop(Cast @{typ Zbinop_name},
                                                              bop(Add,
                                                                  mop(Cast HOLogic.natT,
                                                                      var_w("opcode",3)),ln 8)),
                                                          call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[var_b"have_rex",
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                mop(Cast w1,ll[var_b"v'0"]),
                                                                var_b"op_size_override"],@{theory}),
                                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                              call
                                                                ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                                 tp[var("rm",@{typ Zrm}),lw(1,64)],
                                                                 @{theory}),
                                                              call
                                                                ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                                 tp[var("rm",@{typ Zrm}),
                                                                    lc("RCX","Zreg",@{theory})],
                                                                 @{theory}))],@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory})))),
                                      (tp[tp[var_w("v#69",8),var("v#70",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lt,lt,lt,lt],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#69",8)],
                                                    var("v#70",@{typ "8 word list"}))],@{theory}),
                                          ite(eq(var_w("opcode",3),lw(0,3)),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zpop",@{typ instruction},
                                                       var("rm",@{typ Zrm}),@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory}),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: Group 1a",@{theory})))),
                                      (tp[tp[var_w("v#101",8),var("v#102",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lt,lf,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zstc"},@{typ instruction}),
                                             mop(Some,
                                                 llc([var_w("v#101",8)],
                                                     var("v#102",@{typ "8 word list"})))],@{theory})),
                                      (tp[tp[var_w("v#61",8),var("v#62",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lf,lt,lf,var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#61",8)],
                                                    var("v#62",@{typ "8 word list"}))],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zbinop",@{typ instruction},
                                                   tp[lc("Ztest","Zbinop_name",@{theory}),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      call
                                                        ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                         tp[var("rm",@{typ Zrm}),
                                                            var("reg",@{typ Zreg})],@{theory})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#93",8),var("v#94",@{typ "8 word list"})],lt,
                                          lt,lt,lf,lt,lf,var_b"b'0",lt],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                              call
                                                ("immediate32",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 llc([var_w("v#93",8)],
                                                     var("v#94",@{typ "8 word list"})),@{theory}),
                                              call
                                                ("immediate8",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 llc([var_w("v#93",8)],
                                                     var("v#94",@{typ "8 word list"})),@{theory})),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zjcc",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#77",8),var("v#78",@{typ "8 word list"})],lt,
                                          lt,lf,lf,lf,lf,lf,var_b"v'0"],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#77",8)],
                                                    var("v#78",@{typ "8 word list"}))],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm4",@{typ "(8 word list) option"})],
                                             call
                                               ("oimmediate8",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                var("strm3",@{typ "(8 word list) option"}),@{theory}),
                                             ite(eq(var_w("opcode",3),lw(6,3)),
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: Shift Group 2",@{theory}),
                                                 call
                                                   ("Zinst.Zfull_inst",@{typ Zinst},
                                                    tp[var("p",@{typ "8 word list"}),
                                                       call
                                                         ("instruction.Zbinop",@{typ instruction},
                                                          tp[mop(Cast @{typ Zbinop_name},
                                                                 bop(Add,
                                                                     mop(Cast HOLogic.natT,
                                                                         var_w("opcode",3)),ln 8)),
                                                             call
                                                               ("OpSize",@{typ Zsize},
                                                                tp[var_b"have_rex",
                                                                   call
                                                                     ("REX.W",HOLogic.boolT,
                                                                      var("REX",@{typ REX}),
                                                                      @{theory}),
                                                                   mop(Cast w1,ll[var_b"v'0"]),
                                                                   var_b"op_size_override"],
                                                                @{theory}),
                                                             call
                                                               ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                                tp[var("rm",@{typ Zrm}),
                                                                   var_w("imm",64)],@{theory})],
                                                          @{theory}),
                                                       var("strm4",@{typ "(8 word list) option"})],
                                                    @{theory}))))),
                                      (tp[tp[var_w("v#45",8),var("v#46",@{typ "8 word list"})],lf,
                                          lf,var_b"opc'2",var_b"opc'1",var_b"opc'0",lt,lf,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),
                                                   llc([var_w("v#45",8)],
                                                       var("v#46",@{typ "8 word list"}))],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[mop(Cast @{typ Zbinop_name},
                                                             mop(Cast (Word_Lib.mk_wordT 3),
                                                                 ll[var_b"opc'2",var_b"opc'1",
                                                                    var_b"opc'0"])),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  lc("RAX","Zreg",@{theory}),
                                                                  @{theory}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[tp[var_w("opc",8),var("strm2",@{typ "8 word list"})],lf,
                                          lf,lf,lf,lt,lt,lt,lt],
                                       let'
                                         (tp[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                             var_b"b'2",var_b"b'1",var_b"b'0"],
                                          call
                                            ("boolify'8",
                                             @{typ
                                             "bool \<times>
                                              bool \<times>
                                              bool \<times>
                                              bool \<times>
                                              bool \<times> bool \<times> bool \<times> bool"},
                                             var_w("opc",8),@{theory}),
                                          itb([(var_b"b'5",
                                                ite(bop(And,var_b"b'7",mop(Not,var_b"b'6")),
                                                    itb([(bop(And,mop(Not,var_b"b'2"),
                                                              bop(And,var_b"b'1",var_b"b'0")),
                                                          let'
                                                            (tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm}),
                                                                var("strm3",
                                                                    @{typ "(8 word list) option"})],
                                                             call
                                                               ("readModRM",
                                                                @{typ
                                                                "Zreg \<times>
                                                                 Zrm \<times> (8 word list) option"},
                                                                tp[var("REX",@{typ REX}),
                                                                   var("strm2",@{typ "8 word list"})],
                                                                @{theory}),
                                                             call
                                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                                tp[var("p",@{typ "8 word list"}),
                                                                   call
                                                                     ("instruction.Zbit_test",
                                                                      @{typ instruction},
                                                                      tp[mop(Cast
                                                                               @{typ Zbit_test_name},
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 2),
                                                                                 ll[var_b"b'4",
                                                                                    var_b"b'3"])),
                                                                         call
                                                                           ("OpSize",@{typ Zsize},
                                                                            tp[var_b"have_rex",
                                                                               call
                                                                                 ("REX.W",
                                                                                  HOLogic.boolT,
                                                                                  var("REX",
                                                                                      @{typ REX}),
                                                                                  @{theory}),
                                                                               lw(1,1),
                                                                               var_b"op_size_override"],
                                                                            @{theory}),
                                                                         call
                                                                           ("Zdest_src.Zrm_r",
                                                                            @{typ Zdest_src},
                                                                            tp[var("rm",@{typ Zrm}),
                                                                               var("reg",@{typ Zreg})],
                                                                            @{theory})],@{theory}),
                                                                   var("strm3",
                                                                       @{typ "(8 word list) option"})],
                                                                @{theory}))),
                                                         (bop(And,var_b"b'4",
                                                              bop(And,var_b"b'3",
                                                                  bop(And,mop(Not,var_b"b'2"),
                                                                      bop(And,var_b"b'1",
                                                                          mop(Not,var_b"b'0"))))),
                                                          let'
                                                            (tp[var_w("opcode",3),
                                                                var("rm",@{typ Zrm}),
                                                                var("strm3",
                                                                    @{typ "(8 word list) option"})],
                                                             call
                                                               ("readOpcodeModRM",
                                                                @{typ
                                                                "3 word \<times>
                                                                 Zrm \<times> (8 word list) option"},
                                                                tp[var("REX",@{typ REX}),
                                                                   var("strm2",@{typ "8 word list"})],
                                                                @{theory}),
                                                             let'
                                                               (tp[var_w("imm",64),
                                                                   var("strm4",
                                                                       @{typ "(8 word list) option"})],
                                                                call
                                                                  ("oimmediate8",
                                                                   @{typ
                                                                   "64 word \<times>
                                                                    (8 word list) option"},
                                                                   var("strm3",
                                                                       @{typ "(8 word list) option"}),
                                                                   @{theory}),
                                                                cs(call
                                                                     ("boolify'3",
                                                                      @{typ
                                                                      "bool \<times>
                                                                       bool \<times> bool"},
                                                                      var_w("opcode",3),@{theory}),
                                                                   [(tp[lt,var_b"x'1",var_b"x'0"],
                                                                     call
                                                                       ("Zinst.Zfull_inst",
                                                                        @{typ Zinst},
                                                                        tp[var("p",
                                                                               @{typ "8 word list"}),
                                                                           call
                                                                             ("instruction.Zbit_test",
                                                                              @{typ instruction},
                                                                              tp[mop(Cast
                                                                                       @{typ Zbit_test_name},
                                                                                     mop(Cast
                                                                                           (Word_Lib.mk_wordT 2),
                                                                                         ll[var_b"x'1",
                                                                                            var_b"x'0"])),
                                                                                 call
                                                                                   ("OpSize",
                                                                                    @{typ Zsize},
                                                                                    tp[var_b"have_rex",
                                                                                       call
                                                                                         ("REX.W",
                                                                                          HOLogic.boolT,
                                                                                          var("REX",
                                                                                              @{typ REX}),
                                                                                          @{theory}),
                                                                                       lw(1,1),
                                                                                       var_b"op_size_override"],
                                                                                    @{theory}),
                                                                                 call
                                                                                   ("Zdest_src.Zrm_i",
                                                                                    @{typ Zdest_src},
                                                                                    tp[var("rm",
                                                                                           @{typ Zrm}),
                                                                                       var_w("imm",64)],
                                                                                    @{theory})],
                                                                              @{theory}),
                                                                           var("strm4",
                                                                               @{typ
                                                                               "(8 word list) option"})],
                                                                        @{theory})),
                                                                    (tp[var_a HOLogic.boolT,
                                                                        var_a HOLogic.boolT,
                                                                        var_a HOLogic.boolT],
                                                                     call
                                                                       ("Zinst.Zdec_fail",
                                                                        @{typ Zinst},
                                                                        ls
                                                                         "Unsupported opcode: Group 8",
                                                                        @{theory}))],@{context})))),
                                                         (bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'3",
                                                                  bop(And,var_b"b'2",
                                                                      bop(And,var_b"b'1",var_b"b'0")))),
                                                          let'
                                                            (tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm}),
                                                                var("strm3",
                                                                    @{typ "(8 word list) option"})],
                                                             call
                                                               ("readModRM",
                                                                @{typ
                                                                "Zreg \<times>
                                                                 Zrm \<times> (8 word list) option"},
                                                                tp[var("REX",@{typ REX}),
                                                                   var("strm2",@{typ "8 word list"})],
                                                                @{theory}),
                                                             call
                                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                                tp[var("p",@{typ "8 word list"}),
                                                                   call
                                                                     ("instruction.Zimul2",
                                                                      @{typ instruction},
                                                                      tp[call
                                                                           ("OpSize",@{typ Zsize},
                                                                            tp[var_b"have_rex",
                                                                               call
                                                                                 ("REX.W",
                                                                                  HOLogic.boolT,
                                                                                  var("REX",
                                                                                      @{typ REX}),
                                                                                  @{theory}),
                                                                               lw(1,1),
                                                                               var_b"op_size_override"],
                                                                            @{theory}),
                                                                         var("reg",@{typ Zreg}),
                                                                         var("rm",@{typ Zrm})],
                                                                      @{theory}),
                                                                   var("strm3",
                                                                       @{typ "(8 word list) option"})],
                                                                @{theory}))),
                                                         (bop(And,var_b"b'4",
                                                              bop(And,mop(Not,var_b"b'3"),
                                                                  bop(And,mop(Not,var_b"b'2"),
                                                                      mop(Not,var_b"b'1")))),
                                                          let'
                                                            (tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm}),
                                                                var("strm3",
                                                                    @{typ "(8 word list) option"})],
                                                             call
                                                               ("readModRM",
                                                                @{typ
                                                                "Zreg \<times>
                                                                 Zrm \<times> (8 word list) option"},
                                                                tp[var("REX",@{typ REX}),
                                                                   var("strm2",@{typ "8 word list"})],
                                                                @{theory}),
                                                             call
                                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                                tp[var("p",@{typ "8 word list"}),
                                                                   call
                                                                     ("instruction.Zcmpxchg",
                                                                      @{typ instruction},
                                                                      tp[call
                                                                           ("OpSize",@{typ Zsize},
                                                                            tp[var_b"have_rex",
                                                                               call
                                                                                 ("REX.W",
                                                                                  HOLogic.boolT,
                                                                                  var("REX",
                                                                                      @{typ REX}),
                                                                                  @{theory}),
                                                                               mop(Cast w1,
                                                                                   ll[var_b"b'0"]),
                                                                               var_b"op_size_override"],
                                                                            @{theory}),
                                                                         var("rm",@{typ Zrm}),
                                                                         var("reg",@{typ Zreg})],
                                                                      @{theory}),
                                                                   var("strm3",
                                                                       @{typ "(8 word list) option"})],
                                                                @{theory}))),
                                                         (bop(And,var_b"b'4",
                                                              bop(And,var_b"b'2",var_b"b'1")),
                                                          let'
                                                            (tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm}),
                                                                var("strm3",
                                                                    @{typ "(8 word list) option"})],
                                                             call
                                                               ("readModRM",
                                                                @{typ
                                                                "Zreg \<times>
                                                                 Zrm \<times> (8 word list) option"},
                                                                tp[var("REX",@{typ REX}),
                                                                   var("strm2",@{typ "8 word list"})],
                                                                @{theory}),
                                                             let'
                                                               (tp[var("arg0",@{typ Zsize}),
                                                                   var("arg1",@{typ Zdest_src}),
                                                                   var("arg2",@{typ Zsize})],
                                                                tp[ite(eq(mop(Cast w1,ll[var_b"b'0"]),
                                                                          lw(1,1)),
                                                                       Term.Const
                                                                         (@{const_name "Z16"},
                                                                          @{typ Zsize}),
                                                                       call
                                                                         ("Zsize.Z8",@{typ Zsize},
                                                                          var_b"have_rex",@{theory})),
                                                                   call
                                                                     ("Zdest_src.Zr_rm",
                                                                      @{typ Zdest_src},
                                                                      tp[var("reg",@{typ Zreg}),
                                                                         var("rm",@{typ Zrm})],
                                                                      @{theory}),
                                                                   call
                                                                     ("OpSize",@{typ Zsize},
                                                                      tp[var_b"have_rex",
                                                                         call
                                                                           ("REX.W",HOLogic.boolT,
                                                                            var("REX",@{typ REX}),
                                                                            @{theory}),lw(1,1),
                                                                         var_b"op_size_override"],
                                                                      @{theory})],
                                                                call
                                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                                   tp[var("p",@{typ "8 word list"}),
                                                                      ite(eq(mop(Cast w1,
                                                                                 ll[var_b"b'3"]),
                                                                             lw(1,1)),
                                                                          call
                                                                            ("instruction.Zmovsx",
                                                                             @{typ instruction},
                                                                             tp[var("arg0",
                                                                                    @{typ Zsize}),
                                                                                var("arg1",
                                                                                    @{typ Zdest_src}),
                                                                                var("arg2",
                                                                                    @{typ Zsize})],
                                                                             @{theory}),
                                                                          call
                                                                            ("instruction.Zmovzx",
                                                                             @{typ instruction},
                                                                             tp[var("arg0",
                                                                                    @{typ Zsize}),
                                                                                var("arg1",
                                                                                    @{typ Zdest_src}),
                                                                                var("arg2",
                                                                                    @{typ Zsize})],
                                                                             @{theory})),
                                                                      var("strm3",
                                                                          @{typ
                                                                          "(8 word list) option"})],
                                                                   @{theory}))))],
                                                        call
                                                          ("Zinst.Zdec_fail",@{typ Zinst},
                                                           cc[ls"Unsupported opcode: 0F ",
                                                              mop(Cast(@{typ string}),var_w("opc",8))],
                                                           @{theory})),
                                                    call
                                                      ("Zinst.Zdec_fail",@{typ Zinst},
                                                       cc[ls"Unsupported opcode: 0F ",
                                                          mop(Cast(@{typ string}),var_w("opc",8))],
                                                       @{theory}))),
                                               (bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,var_b"b'4",
                                                            bop(And,var_b"b'3",
                                                                bop(And,var_b"b'2",
                                                                    bop(And,var_b"b'1",var_b"b'0")))))),
                                                let'
                                                  (tp[var_a (Word_Lib.mk_wordT 3),var_a @{typ Zrm},
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   call
                                                     ("readOpcodeModRM",
                                                      @{typ
                                                      "3 word \<times>
                                                       Zrm \<times> (8 word list) option"},
                                                      tp[var("REX",@{typ REX}),
                                                         var("strm2",@{typ "8 word list"})],
                                                      @{theory}),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Znop",@{typ instruction},
                                                            mop(Length,
                                                                var("strm",@{typ "8 word list"})),
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))),
                                               (bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,var_b"b'6",mop(Not,var_b"b'4"))),
                                                let'
                                                  (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   call
                                                     ("readModRM",
                                                      @{typ
                                                      "Zreg \<times>
                                                       Zrm \<times> (8 word list) option"},
                                                      tp[var("REX",@{typ REX}),
                                                         var("strm2",@{typ "8 word list"})],
                                                      @{theory}),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmov",@{typ instruction},
                                                            tp[mop(Cast @{typ Zcond},
                                                                   mop(Cast w4,
                                                                       ll[var_b"b'3",var_b"b'2",
                                                                          var_b"b'1",var_b"b'0"])),
                                                               call
                                                                 ("OpSize",@{typ Zsize},
                                                                  tp[lt,
                                                                     call
                                                                       ("REX.W",HOLogic.boolT,
                                                                        var("REX",@{typ REX}),
                                                                        @{theory}),lw(1,1),
                                                                     var_b"op_size_override"],
                                                                  @{theory}),
                                                               call
                                                                 ("Zdest_src.Zr_rm",
                                                                  @{typ Zdest_src},
                                                                  tp[var("reg",@{typ Zreg}),
                                                                     var("rm",@{typ Zrm})],@{theory})],
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))),
                                               (bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),mop(Not,var_b"b'4"))),
                                                let'
                                                  (tp[var_w("imm",64),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   call
                                                     ("immediate32",
                                                      @{typ "64 word \<times> (8 word list) option"},
                                                      var("strm2",@{typ "8 word list"}),@{theory}),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zjcc",@{typ instruction},
                                                            tp[mop(Cast @{typ Zcond},
                                                                   mop(Cast w4,
                                                                       ll[var_b"b'3",var_b"b'2",
                                                                          var_b"b'1",var_b"b'0"])),
                                                               var_w("imm",64)],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))),
                                               (bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),var_b"b'4")),
                                                let'
                                                  (tp[var_a @{typ Zreg},var("rm",@{typ Zrm}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   call
                                                     ("readModRM",
                                                      @{typ
                                                      "Zreg \<times>
                                                       Zrm \<times> (8 word list) option"},
                                                      tp[var("REX",@{typ REX}),
                                                         var("strm2",@{typ "8 word list"})],
                                                      @{theory}),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zset",@{typ instruction},
                                                            tp[mop(Cast @{typ Zcond},
                                                                   mop(Cast w4,
                                                                       ll[var_b"b'3",var_b"b'2",
                                                                          var_b"b'1",var_b"b'0"])),
                                                               var_b"have_rex",var("rm",@{typ Zrm})],
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))),
                                               (bop(And,var_b"b'7",
                                                    bop(And,var_b"b'6",
                                                        bop(And,mop(Not,var_b"b'4"),
                                                            bop(And,mop(Not,var_b"b'3"),
                                                                bop(And,mop(Not,var_b"b'2"),
                                                                    mop(Not,var_b"b'1")))))),
                                                let'
                                                  (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   call
                                                     ("readModRM",
                                                      @{typ
                                                      "Zreg \<times>
                                                       Zrm \<times> (8 word list) option"},
                                                      tp[var("REX",@{typ REX}),
                                                         var("strm2",@{typ "8 word list"})],
                                                      @{theory}),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zxadd",@{typ instruction},
                                                            tp[call
                                                                 ("OpSize",@{typ Zsize},
                                                                  tp[var_b"have_rex",
                                                                     call
                                                                       ("REX.W",HOLogic.boolT,
                                                                        var("REX",@{typ REX}),
                                                                        @{theory}),
                                                                     mop(Cast w1,ll[var_b"b'0"]),
                                                                     var_b"op_size_override"],
                                                                  @{theory}),var("rm",@{typ Zrm}),
                                                               var("reg",@{typ Zreg})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})))],
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 cc[ls"Unsupported opcode: 0F ",
                                                    mop(Cast(@{typ string}),var_w("opc",8))],
                                                 @{theory})))),
                                      (tp[tp[var_w("v#51",8),var("v#52",@{typ "8 word list"})],lf,
                                          lt,lt,lf,lt,lf,var_b"b'0",lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(1,1)),
                                              call
                                                ("immediate8",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 llc([var_w("v#51",8)],
                                                     var("v#52",@{typ "8 word list"})),@{theory}),
                                              call
                                                ("immediate32",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 llc([var_w("v#51",8)],
                                                     var("v#52",@{typ "8 word list"})),@{theory})),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zpush",@{typ instruction},
                                                   call
                                                     ("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),
                                                      @{theory}),@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#83",8),var("v#84",@{typ "8 word list"})],lt,
                                          lt,lf,lf,lt,lf,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zleave"},@{typ instruction}),
                                             mop(Some,
                                                 llc([var_w("v#83",8)],
                                                     var("v#84",@{typ "8 word list"})))],@{theory})),
                                      (tp[tp[var_w("v#67",8),var("v#68",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lt,lt,lf,lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#67",8)],
                                                    var("v#68",@{typ "8 word list"}))],@{theory}),
                                          ite(call
                                                ("isZm",HOLogic.boolT,var("rm",@{typ Zrm}),@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zlea",@{typ instruction},
                                                       tp[call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[lt,
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                lw(1,1),var_b"op_size_override"],
                                                             @{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory})],
                                                       @{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory}),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"LEA with register argument",@{theory})))),
                                      (tp[tp[var_w("v#99",8),var("v#100",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lt,lf,lf,lf],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zclc"},@{typ instruction}),
                                             mop(Some,
                                                 llc([var_w("v#99",8)],
                                                     var("v#100",@{typ "8 word list"})))],@{theory})),
                                      (tp[tp[var_w("v#59",8),var("v#60",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lf,lf,lt,lt],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#59",8)],
                                                    var("v#60",@{typ "8 word list"}))],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm4",@{typ "(8 word list) option"})],
                                             call
                                               ("oimmediate8",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                var("strm3",@{typ "(8 word list) option"}),@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[mop(Cast @{typ Zbinop_name},
                                                             var_w("opcode",3)),
                                                         call
                                                           ("OpSize",@{typ Zsize},
                                                            tp[lf,
                                                               call
                                                                 ("REX.W",HOLogic.boolT,
                                                                  var("REX",@{typ REX}),@{theory}),
                                                               lw(1,1),var_b"op_size_override"],
                                                            @{theory}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[var("rm",@{typ Zrm}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[tp[var_w("v#91",8),var("v#92",@{typ "8 word list"})],lt,
                                          lt,lt,lf,lt,lf,lf,lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate32",
                                             @{typ "64 word \<times> (8 word list) option"},
                                             llc([var_w("v#91",8)],var("v#92",@{typ "8 word list"})),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zcall",@{typ instruction},
                                                   call
                                                     ("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),
                                                      @{theory}),@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#75",8),var("v#76",@{typ "8 word list"})],lt,
                                          lf,lt,lt,var_b"v'0",var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("full_immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),
                                                   llc([var_w("v#75",8)],
                                                       var("v#76",@{typ "8 word list"}))],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zmov",@{typ instruction},
                                                      tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  call
                                                                    ("RexReg",@{typ Zreg},
                                                                     tp[call
                                                                          ("REX.B",HOLogic.boolT,
                                                                           var("REX",@{typ REX}),
                                                                           @{theory}),
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 3),
                                                                            ll[var_b"r'2",
                                                                               var_b"r'1",var_b"r'0"])],
                                                                     @{theory}),@{theory}),
                                                               var_w("imm",64)],@{theory})],
                                                      @{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[tp[var_w("v#43",8),var("v#44",@{typ "8 word list"})],lf,
                                          lf,var_b"opc'2",var_b"opc'1",var_b"opc'0",lf,var_b"x'0",
                                          var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#43",8)],
                                                    var("v#44",@{typ "8 word list"}))],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zbinop",@{typ instruction},
                                                   tp[mop(Cast @{typ Zbinop_name},
                                                          mop(Cast (Word_Lib.mk_wordT 3),
                                                              ll[var_b"opc'2",var_b"opc'1",
                                                                 var_b"opc'0"])),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      ite(eq(mop(Cast w1,ll[var_b"x'0"]),lw(0,1)),
                                                          call
                                                            ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                             tp[var("rm",@{typ Zrm}),
                                                                var("reg",@{typ Zreg})],@{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory}))],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v",8),
                                             llc([var_w("opc",8)],var("v0",@{typ "8 word list"}))],
                                          lf,lf,lf,lf,lt,lt,lt,lt],
                                       itb([(eq(var_w("v",8),lw(56,8)),
                                             call
                                               ("Zinst.Zdec_fail",@{typ Zinst},
                                                cc[ls"Unsupported opcode: 0F 38 ",
                                                   mop(Cast(@{typ string}),var_w("opc",8))],
                                                @{theory})),
                                            (eq(var_w("v",8),lw(58,8)),
                                             call
                                               ("Zinst.Zdec_fail",@{typ Zinst},
                                                cc[ls"Unsupported opcode: 0F 3A ",
                                                   mop(Cast(@{typ string}),var_w("opc",8))],
                                                @{theory}))],
                                           let'
                                             (tp[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
                                              call
                                                ("boolify'8",
                                                 @{typ
                                                 "bool \<times>
                                                  bool \<times>
                                                  bool \<times>
                                                  bool \<times>
                                                  bool \<times> bool \<times> bool \<times> bool"},
                                                 var_w("v",8),@{theory}),
                                              itb([(var_b"b'5",
                                                    ite(bop(And,var_b"b'7",mop(Not,var_b"b'6")),
                                                        itb([(bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,var_b"b'1",var_b"b'0")),
                                                              let'
                                                                (tp[var("reg",@{typ Zreg}),
                                                                    var("rm",@{typ Zrm}),
                                                                    var("strm3",
                                                                        @{typ
                                                                        "(8 word list) option"})],
                                                                 call
                                                                   ("readModRM",
                                                                    @{typ
                                                                    "Zreg \<times>
                                                                     Zrm \<times>
                                                                     (8 word list) option"},
                                                                    tp[var("REX",@{typ REX}),
                                                                       llc([var_w("opc",8)],
                                                                           var("v0",
                                                                               @{typ "8 word list"}))],
                                                                    @{theory}),
                                                                 call
                                                                   ("Zinst.Zfull_inst",@{typ Zinst},
                                                                    tp[var("p",@{typ "8 word list"}),
                                                                       call
                                                                         ("instruction.Zbit_test",
                                                                          @{typ instruction},
                                                                          tp[mop(Cast
                                                                                   @{typ Zbit_test_name},
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 2),
                                                                                     ll[var_b"b'4",
                                                                                        var_b"b'3"])),
                                                                             call
                                                                               ("OpSize",
                                                                                @{typ Zsize},
                                                                                tp[var_b"have_rex",
                                                                                   call
                                                                                     ("REX.W",
                                                                                      HOLogic.boolT,
                                                                                      var("REX",
                                                                                          @{typ REX}),
                                                                                      @{theory}),
                                                                                   lw(1,1),
                                                                                   var_b"op_size_override"],
                                                                                @{theory}),
                                                                             call
                                                                               ("Zdest_src.Zrm_r",
                                                                                @{typ Zdest_src},
                                                                                tp[var("rm",
                                                                                       @{typ Zrm}),
                                                                                   var("reg",
                                                                                       @{typ Zreg})],
                                                                                @{theory})],
                                                                          @{theory}),
                                                                       var("strm3",
                                                                           @{typ
                                                                           "(8 word list) option"})],
                                                                    @{theory}))),
                                                             (bop(And,var_b"b'4",
                                                                  bop(And,var_b"b'3",
                                                                      bop(And,mop(Not,var_b"b'2"),
                                                                          bop(And,var_b"b'1",
                                                                              mop(Not,var_b"b'0"))))),
                                                              let'
                                                                (tp[var_w("opcode",3),
                                                                    var("rm",@{typ Zrm}),
                                                                    var("strm3",
                                                                        @{typ
                                                                        "(8 word list) option"})],
                                                                 call
                                                                   ("readOpcodeModRM",
                                                                    @{typ
                                                                    "3 word \<times>
                                                                     Zrm \<times>
                                                                     (8 word list) option"},
                                                                    tp[var("REX",@{typ REX}),
                                                                       llc([var_w("opc",8)],
                                                                           var("v0",
                                                                               @{typ "8 word list"}))],
                                                                    @{theory}),
                                                                 let'
                                                                   (tp[var_w("imm",64),
                                                                       var("strm4",
                                                                           @{typ
                                                                           "(8 word list) option"})],
                                                                    call
                                                                      ("oimmediate8",
                                                                       @{typ
                                                                       "64 word \<times>
                                                                        (8 word list) option"},
                                                                       var("strm3",
                                                                           @{typ
                                                                           "(8 word list) option"}),
                                                                       @{theory}),
                                                                    cs(call
                                                                         ("boolify'3",
                                                                          @{typ
                                                                          "bool \<times>
                                                                           bool \<times> bool"},
                                                                          var_w("opcode",3),
                                                                          @{theory}),
                                                                       [(tp[lt,var_b"x'1",var_b"x'0"],
                                                                         call
                                                                           ("Zinst.Zfull_inst",
                                                                            @{typ Zinst},
                                                                            tp[var("p",
                                                                                   @{typ
                                                                                   "8 word list"}),
                                                                               call
                                                                                 ("instruction.Zbit_test",
                                                                                  @{typ instruction},
                                                                                  tp[mop(Cast
                                                                                           @{typ Zbit_test_name},
                                                                                         mop(Cast
                                                                                               (Word_Lib.mk_wordT 2),
                                                                                             ll[var_b"x'1",
                                                                                                var_b"x'0"])),
                                                                                     call
                                                                                       ("OpSize",
                                                                                        @{typ Zsize},
                                                                                        tp[var_b"have_rex",
                                                                                           call
                                                                                             ("REX.W",
                                                                                              HOLogic.boolT,
                                                                                              var("REX",
                                                                                                  @{typ REX}),
                                                                                              @{theory}),
                                                                                           lw(1,1),
                                                                                           var_b"op_size_override"],
                                                                                        @{theory}),
                                                                                     call
                                                                                       ("Zdest_src.Zrm_i",
                                                                                        @{typ Zdest_src},
                                                                                        tp[var("rm",
                                                                                               @{typ Zrm}),
                                                                                           var_w("imm",64)],
                                                                                        @{theory})],
                                                                                  @{theory}),
                                                                               var("strm4",
                                                                                   @{typ
                                                                                   "(8 word list)
                                                                                       option"})],
                                                                            @{theory})),
                                                                        (tp[var_a HOLogic.boolT,
                                                                            var_a HOLogic.boolT,
                                                                            var_a HOLogic.boolT],
                                                                         call
                                                                           ("Zinst.Zdec_fail",
                                                                            @{typ Zinst},
                                                                            ls
                                                                             "Unsupported opcode: Group 8",
                                                                            @{theory}))],@{context})))),
                                                             (bop(And,mop(Not,var_b"b'4"),
                                                                  bop(And,var_b"b'3",
                                                                      bop(And,var_b"b'2",
                                                                          bop(And,var_b"b'1",
                                                                              var_b"b'0")))),
                                                              let'
                                                                (tp[var("reg",@{typ Zreg}),
                                                                    var("rm",@{typ Zrm}),
                                                                    var("strm3",
                                                                        @{typ
                                                                        "(8 word list) option"})],
                                                                 call
                                                                   ("readModRM",
                                                                    @{typ
                                                                    "Zreg \<times>
                                                                     Zrm \<times>
                                                                     (8 word list) option"},
                                                                    tp[var("REX",@{typ REX}),
                                                                       llc([var_w("opc",8)],
                                                                           var("v0",
                                                                               @{typ "8 word list"}))],
                                                                    @{theory}),
                                                                 call
                                                                   ("Zinst.Zfull_inst",@{typ Zinst},
                                                                    tp[var("p",@{typ "8 word list"}),
                                                                       call
                                                                         ("instruction.Zimul2",
                                                                          @{typ instruction},
                                                                          tp[call
                                                                               ("OpSize",
                                                                                @{typ Zsize},
                                                                                tp[var_b"have_rex",
                                                                                   call
                                                                                     ("REX.W",
                                                                                      HOLogic.boolT,
                                                                                      var("REX",
                                                                                          @{typ REX}),
                                                                                      @{theory}),
                                                                                   lw(1,1),
                                                                                   var_b"op_size_override"],
                                                                                @{theory}),
                                                                             var("reg",@{typ Zreg}),
                                                                             var("rm",@{typ Zrm})],
                                                                          @{theory}),
                                                                       var("strm3",
                                                                           @{typ
                                                                           "(8 word list) option"})],
                                                                    @{theory}))),
                                                             (bop(And,var_b"b'4",
                                                                  bop(And,mop(Not,var_b"b'3"),
                                                                      bop(And,mop(Not,var_b"b'2"),
                                                                          mop(Not,var_b"b'1")))),
                                                              let'
                                                                (tp[var("reg",@{typ Zreg}),
                                                                    var("rm",@{typ Zrm}),
                                                                    var("strm3",
                                                                        @{typ
                                                                        "(8 word list) option"})],
                                                                 call
                                                                   ("readModRM",
                                                                    @{typ
                                                                    "Zreg \<times>
                                                                     Zrm \<times>
                                                                     (8 word list) option"},
                                                                    tp[var("REX",@{typ REX}),
                                                                       llc([var_w("opc",8)],
                                                                           var("v0",
                                                                               @{typ "8 word list"}))],
                                                                    @{theory}),
                                                                 call
                                                                   ("Zinst.Zfull_inst",@{typ Zinst},
                                                                    tp[var("p",@{typ "8 word list"}),
                                                                       call
                                                                         ("instruction.Zcmpxchg",
                                                                          @{typ instruction},
                                                                          tp[call
                                                                               ("OpSize",
                                                                                @{typ Zsize},
                                                                                tp[var_b"have_rex",
                                                                                   call
                                                                                     ("REX.W",
                                                                                      HOLogic.boolT,
                                                                                      var("REX",
                                                                                          @{typ REX}),
                                                                                      @{theory}),
                                                                                   mop(Cast w1,
                                                                                       ll[var_b"b'0"]),
                                                                                   var_b"op_size_override"],
                                                                                @{theory}),
                                                                             var("rm",@{typ Zrm}),
                                                                             var("reg",@{typ Zreg})],
                                                                          @{theory}),
                                                                       var("strm3",
                                                                           @{typ
                                                                           "(8 word list) option"})],
                                                                    @{theory}))),
                                                             (bop(And,var_b"b'4",
                                                                  bop(And,var_b"b'2",var_b"b'1")),
                                                              let'
                                                                (tp[var("reg",@{typ Zreg}),
                                                                    var("rm",@{typ Zrm}),
                                                                    var("strm3",
                                                                        @{typ
                                                                        "(8 word list) option"})],
                                                                 call
                                                                   ("readModRM",
                                                                    @{typ
                                                                    "Zreg \<times>
                                                                     Zrm \<times>
                                                                     (8 word list) option"},
                                                                    tp[var("REX",@{typ REX}),
                                                                       llc([var_w("opc",8)],
                                                                           var("v0",
                                                                               @{typ "8 word list"}))],
                                                                    @{theory}),
                                                                 let'
                                                                   (tp[var("arg0",@{typ Zsize}),
                                                                       var("arg1",@{typ Zdest_src}),
                                                                       var("arg2",@{typ Zsize})],
                                                                    tp[ite(eq(mop(Cast w1,
                                                                                  ll[var_b"b'0"]),
                                                                              lw(1,1)),
                                                                           Term.Const
                                                                             (@{const_name "Z16"},
                                                                              @{typ Zsize}),
                                                                           call
                                                                             ("Zsize.Z8",
                                                                              @{typ Zsize},
                                                                              var_b"have_rex",
                                                                              @{theory})),
                                                                       call
                                                                         ("Zdest_src.Zr_rm",
                                                                          @{typ Zdest_src},
                                                                          tp[var("reg",@{typ Zreg}),
                                                                             var("rm",@{typ Zrm})],
                                                                          @{theory}),
                                                                       call
                                                                         ("OpSize",@{typ Zsize},
                                                                          tp[var_b"have_rex",
                                                                             call
                                                                               ("REX.W",
                                                                                HOLogic.boolT,
                                                                                var("REX",@{typ REX}),
                                                                                @{theory}),lw(1,1),
                                                                             var_b"op_size_override"],
                                                                          @{theory})],
                                                                    call
                                                                      ("Zinst.Zfull_inst",
                                                                       @{typ Zinst},
                                                                       tp[var("p",
                                                                              @{typ "8 word list"}),
                                                                          ite(eq(mop(Cast w1,
                                                                                     ll[var_b"b'3"]),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Zmovsx",
                                                                                 @{typ instruction},
                                                                                 tp[var("arg0",
                                                                                        @{typ Zsize}),
                                                                                    var("arg1",
                                                                                        @{typ Zdest_src}),
                                                                                    var("arg2",
                                                                                        @{typ Zsize})],
                                                                                 @{theory}),
                                                                              call
                                                                                ("instruction.Zmovzx",
                                                                                 @{typ instruction},
                                                                                 tp[var("arg0",
                                                                                        @{typ Zsize}),
                                                                                    var("arg1",
                                                                                        @{typ Zdest_src}),
                                                                                    var("arg2",
                                                                                        @{typ Zsize})],
                                                                                 @{theory})),
                                                                          var("strm3",
                                                                              @{typ
                                                                              "(8 word list) option"})],
                                                                       @{theory}))))],
                                                            call
                                                              ("Zinst.Zdec_fail",@{typ Zinst},
                                                               cc[ls"Unsupported opcode: 0F ",
                                                                  mop(Cast(@{typ string}),
                                                                      var_w("v",8))],@{theory})),
                                                        call
                                                          ("Zinst.Zdec_fail",@{typ Zinst},
                                                           cc[ls"Unsupported opcode: 0F ",
                                                              mop(Cast(@{typ string}),var_w("v",8))],
                                                           @{theory}))),
                                                   (bop(And,mop(Not,var_b"b'7"),
                                                        bop(And,mop(Not,var_b"b'6"),
                                                            bop(And,var_b"b'4",
                                                                bop(And,var_b"b'3",
                                                                    bop(And,var_b"b'2",
                                                                        bop(And,var_b"b'1",
                                                                            var_b"b'0")))))),
                                                    let'
                                                      (tp[var_a (Word_Lib.mk_wordT 3),
                                                          var_a @{typ Zrm},
                                                          var("strm3",@{typ "(8 word list) option"})],
                                                       call
                                                         ("readOpcodeModRM",
                                                          @{typ
                                                          "3 word \<times>
                                                           Zrm \<times> (8 word list) option"},
                                                          tp[var("REX",@{typ REX}),
                                                             llc([var_w("opc",8)],
                                                                 var("v0",@{typ "8 word list"}))],
                                                          @{theory}),
                                                       call
                                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                                          tp[var("p",@{typ "8 word list"}),
                                                             call
                                                               ("instruction.Znop",
                                                                @{typ instruction},
                                                                mop(Length,
                                                                    var("strm",@{typ "8 word list"})),
                                                                @{theory}),
                                                             var("strm3",
                                                                 @{typ "(8 word list) option"})],
                                                          @{theory}))),
                                                   (bop(And,mop(Not,var_b"b'7"),
                                                        bop(And,var_b"b'6",mop(Not,var_b"b'4"))),
                                                    let'
                                                      (tp[var("reg",@{typ Zreg}),
                                                          var("rm",@{typ Zrm}),
                                                          var("strm3",@{typ "(8 word list) option"})],
                                                       call
                                                         ("readModRM",
                                                          @{typ
                                                          "Zreg \<times>
                                                           Zrm \<times> (8 word list) option"},
                                                          tp[var("REX",@{typ REX}),
                                                             llc([var_w("opc",8)],
                                                                 var("v0",@{typ "8 word list"}))],
                                                          @{theory}),
                                                       call
                                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                                          tp[var("p",@{typ "8 word list"}),
                                                             call
                                                               ("instruction.Zmov",
                                                                @{typ instruction},
                                                                tp[mop(Cast @{typ Zcond},
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"])),
                                                                   call
                                                                     ("OpSize",@{typ Zsize},
                                                                      tp[lt,
                                                                         call
                                                                           ("REX.W",HOLogic.boolT,
                                                                            var("REX",@{typ REX}),
                                                                            @{theory}),lw(1,1),
                                                                         var_b"op_size_override"],
                                                                      @{theory}),
                                                                   call
                                                                     ("Zdest_src.Zr_rm",
                                                                      @{typ Zdest_src},
                                                                      tp[var("reg",@{typ Zreg}),
                                                                         var("rm",@{typ Zrm})],
                                                                      @{theory})],@{theory}),
                                                             var("strm3",
                                                                 @{typ "(8 word list) option"})],
                                                          @{theory}))),
                                                   (bop(And,var_b"b'7",
                                                        bop(And,mop(Not,var_b"b'6"),
                                                            mop(Not,var_b"b'4"))),
                                                    let'
                                                      (tp[var_w("imm",64),
                                                          var("strm3",@{typ "(8 word list) option"})],
                                                       call
                                                         ("immediate32",
                                                          @{typ
                                                          "64 word \<times> (8 word list) option"},
                                                          llc([var_w("opc",8)],
                                                              var("v0",@{typ "8 word list"})),
                                                          @{theory}),
                                                       call
                                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                                          tp[var("p",@{typ "8 word list"}),
                                                             call
                                                               ("instruction.Zjcc",
                                                                @{typ instruction},
                                                                tp[mop(Cast @{typ Zcond},
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"])),
                                                                   var_w("imm",64)],@{theory}),
                                                             var("strm3",
                                                                 @{typ "(8 word list) option"})],
                                                          @{theory}))),
                                                   (bop(And,var_b"b'7",
                                                        bop(And,mop(Not,var_b"b'6"),var_b"b'4")),
                                                    let'
                                                      (tp[var_a @{typ Zreg},var("rm",@{typ Zrm}),
                                                          var("strm3",@{typ "(8 word list) option"})],
                                                       call
                                                         ("readModRM",
                                                          @{typ
                                                          "Zreg \<times>
                                                           Zrm \<times> (8 word list) option"},
                                                          tp[var("REX",@{typ REX}),
                                                             llc([var_w("opc",8)],
                                                                 var("v0",@{typ "8 word list"}))],
                                                          @{theory}),
                                                       call
                                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                                          tp[var("p",@{typ "8 word list"}),
                                                             call
                                                               ("instruction.Zset",
                                                                @{typ instruction},
                                                                tp[mop(Cast @{typ Zcond},
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"])),
                                                                   var_b"have_rex",
                                                                   var("rm",@{typ Zrm})],@{theory}),
                                                             var("strm3",
                                                                 @{typ "(8 word list) option"})],
                                                          @{theory}))),
                                                   (bop(And,var_b"b'7",
                                                        bop(And,var_b"b'6",
                                                            bop(And,mop(Not,var_b"b'4"),
                                                                bop(And,mop(Not,var_b"b'3"),
                                                                    bop(And,mop(Not,var_b"b'2"),
                                                                        mop(Not,var_b"b'1")))))),
                                                    let'
                                                      (tp[var("reg",@{typ Zreg}),
                                                          var("rm",@{typ Zrm}),
                                                          var("strm3",@{typ "(8 word list) option"})],
                                                       call
                                                         ("readModRM",
                                                          @{typ
                                                          "Zreg \<times>
                                                           Zrm \<times> (8 word list) option"},
                                                          tp[var("REX",@{typ REX}),
                                                             llc([var_w("opc",8)],
                                                                 var("v0",@{typ "8 word list"}))],
                                                          @{theory}),
                                                       call
                                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                                          tp[var("p",@{typ "8 word list"}),
                                                             call
                                                               ("instruction.Zxadd",
                                                                @{typ instruction},
                                                                tp[call
                                                                     ("OpSize",@{typ Zsize},
                                                                      tp[var_b"have_rex",
                                                                         call
                                                                           ("REX.W",HOLogic.boolT,
                                                                            var("REX",@{typ REX}),
                                                                            @{theory}),
                                                                         mop(Cast w1,ll[var_b"b'0"]),
                                                                         var_b"op_size_override"],
                                                                      @{theory}),
                                                                   var("rm",@{typ Zrm}),
                                                                   var("reg",@{typ Zreg})],@{theory}),
                                                             var("strm3",
                                                                 @{typ "(8 word list) option"})],
                                                          @{theory})))],
                                                  call
                                                    ("Zinst.Zdec_fail",@{typ Zinst},
                                                     cc[ls"Unsupported opcode: 0F ",
                                                        mop(Cast(@{typ string}),var_w("v",8))],
                                                     @{theory}))))),
                                      (tp[tp[var_w("v#55",8),var("v#56",@{typ "8 word list"})],lf,
                                          lt,lt,lt,var_b"c'3",var_b"c'2",var_b"c'1",var_b"c'0"],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},
                                             llc([var_w("v#55",8)],var("v#56",@{typ "8 word list"})),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zjcc",@{typ instruction},
                                                   tp[mop(Cast @{typ Zcond},
                                                          mop(Cast w4,
                                                              ll[var_b"c'3",var_b"c'2",var_b"c'1",
                                                                 var_b"c'0"])),var_w("imm",64)],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#87",8),var("v#88",@{typ "8 word list"})],lt,
                                          lt,lt,lf,lf,lf,lf,var_b"b'0"],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},
                                             llc([var_w("v#87",8)],var("v#88",@{typ "8 word list"})),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zloop",@{typ instruction},
                                                   tp[ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                          lc("Z_NE","Zcond",@{theory}),
                                                          lc("Z_E","Zcond",@{theory})),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#71",8),var("v#72",@{typ "8 word list"})],lt,
                                          lf,lf,lt,lf,var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("reg",@{typ Zreg}),
                                          call
                                            ("RexReg",@{typ Zreg},
                                             tp[call
                                                  ("REX.B",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),
                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                    ll[var_b"r'2",var_b"r'1",var_b"r'0"])],@{theory}),
                                          ite(eq(var("reg",@{typ Zreg}),lc("RAX","Zreg",@{theory})),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Znop",@{typ instruction},
                                                       mop(Length,var("strm",@{typ "8 word list"})),
                                                       @{theory}),
                                                    mop(Some,
                                                        llc([var_w("v#71",8)],
                                                            var("v#72",@{typ "8 word list"})))],
                                                 @{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zxchg",@{typ instruction},
                                                       tp[call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[lt,
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                lw(1,1),var_b"op_size_override"],
                                                             @{theory}),
                                                          call
                                                            ("Zrm.Zr",@{typ Zrm},
                                                             lc("RAX","Zreg",@{theory}),@{theory}),
                                                          var("reg",@{typ Zreg})],@{theory}),
                                                    mop(Some,
                                                        llc([var_w("v#71",8)],
                                                            var("v#72",@{typ "8 word list"})))],
                                                 @{theory})))),
                                      (tp[tp[var_w("v#103",8),var("v#104",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lt,lt,lt,lf],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#103",8)],
                                                    var("v#104",@{typ "8 word list"}))],@{theory}),
                                          itb([(eq(var_w("opcode",3),lw(0,3)),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zmonop",@{typ instruction},
                                                         tp[lc("Zinc","Zmonop_name",@{theory}),
                                                            call
                                                              ("Zsize.Z8",@{typ Zsize},
                                                               var_b"have_rex",@{theory}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory})),
                                               (eq(var_w("opcode",3),lw(1,3)),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zmonop",@{typ instruction},
                                                         tp[lc("Zdec","Zmonop_name",@{theory}),
                                                            call
                                                              ("Zsize.Z8",@{typ Zsize},
                                                               var_b"have_rex",@{theory}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}))],
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: INC/DEC Group 4",@{theory})))),
                                      (tp[tp[var_w("v#63",8),var("v#64",@{typ "8 word list"})],lt,
                                          lf,lf,lf,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),
                                                llc([var_w("v#63",8)],
                                                    var("v#64",@{typ "8 word list"}))],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zxchg",@{typ instruction},
                                                   tp[call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      var("rm",@{typ Zrm}),var("reg",@{typ Zreg})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[tp[var_w("v#95",8),var("v#96",@{typ "8 word list"})],lt,
                                          lt,lt,lt,lf,lt,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zcmc"},@{typ instruction}),
                                             mop(Some,
                                                 llc([var_w("v#95",8)],
                                                     var("v#96",@{typ "8 word list"})))],@{theory})),
                                      (tp[tp[var_w("v#79",8),var("v#80",@{typ "8 word list"})],lt,
                                          lt,lf,lf,lf,lf,lt,var_b"v'0"],
                                       ite(eq(mop(Cast w1,ll[var_b"v'0"]),lw(0,1)),
                                           let'
                                             (tp[var_w("imm",64),
                                                 var("strm3",@{typ "(8 word list) option"})],
                                              call
                                                ("immediate16",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 llc([var_w("v#79",8)],
                                                     var("v#80",@{typ "8 word list"})),@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zret",@{typ instruction},
                                                       var_w("imm",64),@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory})),
                                           call
                                             ("Zinst.Zfull_inst",@{typ Zinst},
                                              tp[var("p",@{typ "8 word list"}),
                                                 call
                                                   ("instruction.Zret",@{typ instruction},lw(0,64),
                                                    @{theory}),
                                                 mop(Some,
                                                     llc([var_w("v#79",8)],
                                                         var("v#80",@{typ "8 word list"})))],
                                              @{theory}))),
                                      (tp[tp[var_w("v#47",8),var("v#48",@{typ "8 word list"})],lf,
                                          lt,lf,lt,var_b"b'0",var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("reg",@{typ Zrm}),
                                          call
                                            ("Zrm.Zr",@{typ Zrm},
                                             mop(Cast @{typ Zreg},
                                                 cc[mop(Cast w1,
                                                        call
                                                          ("REX.B",HOLogic.boolT,
                                                           var("REX",@{typ REX}),@{theory})),
                                                    mop(Cast (Word_Lib.mk_wordT 3),
                                                        ll[var_b"r'2",var_b"r'1",var_b"r'0"])]),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                    call
                                                      ("instruction.Zpush",@{typ instruction},
                                                       call
                                                         ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                          var("reg",@{typ Zrm}),@{theory}),@{theory}),
                                                    call
                                                      ("instruction.Zpop",@{typ instruction},
                                                       var("reg",@{typ Zrm}),@{theory})),
                                                mop(Some,
                                                    llc([var_w("v#47",8)],
                                                        var("v#48",@{typ "8 word list"})))],
                                             @{theory}))),
                                      (tp[tp[var_w("v",8),var("v0",@{typ "8 word list"})],
                                          var_b"opc'7",var_b"opc'6",var_b"opc'5",var_b"opc'4",
                                          var_b"opc'3",var_b"opc'2",var_b"opc'1",var_b"opc'0"],
                                       call
                                         ("Zinst.Zdec_fail",@{typ Zinst},
                                          cc[ls"Unsupported opcode: ",
                                             mop(Cast(@{typ string}),
                                                 mop(Cast w8,
                                                     ll[var_b"opc'7",var_b"opc'6",var_b"opc'5",
                                                        var_b"opc'4",var_b"opc'3",var_b"opc'2",
                                                        var_b"opc'1",var_b"opc'0"]))],@{theory}))],
                                     @{context})),
                                 (lnl w8,
                                  cs(tp[var_b"v#0",var_b"v#1",var_b"v#2",var_b"v#3",var_b"v#4",
                                        var_b"v#5",var_b"v#6",var_b"v#7"],
                                     [(tp[lf,lf,var_b"opc'2",var_b"opc'1",var_b"opc'0",lf,
                                          var_b"x'0",var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zbinop",@{typ instruction},
                                                   tp[mop(Cast @{typ Zbinop_name},
                                                          mop(Cast (Word_Lib.mk_wordT 3),
                                                              ll[var_b"opc'2",var_b"opc'1",
                                                                 var_b"opc'0"])),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      ite(eq(mop(Cast w1,ll[var_b"x'0"]),lw(0,1)),
                                                          call
                                                            ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                             tp[var("rm",@{typ Zrm}),
                                                                var("reg",@{typ Zreg})],@{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory}))],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lf,lf,var_b"opc'2",var_b"opc'1",var_b"opc'0",lt,lf,
                                          var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),lnl w8],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[mop(Cast @{typ Zbinop_name},
                                                             mop(Cast (Word_Lib.mk_wordT 3),
                                                                 ll[var_b"opc'2",var_b"opc'1",
                                                                    var_b"opc'0"])),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  lc("RAX","Zreg",@{theory}),
                                                                  @{theory}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[lf,lt,lf,lt,var_b"b'0",var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("reg",@{typ Zrm}),
                                          call
                                            ("Zrm.Zr",@{typ Zrm},
                                             mop(Cast @{typ Zreg},
                                                 cc[mop(Cast w1,
                                                        call
                                                          ("REX.B",HOLogic.boolT,
                                                           var("REX",@{typ REX}),@{theory})),
                                                    mop(Cast (Word_Lib.mk_wordT 3),
                                                        ll[var_b"r'2",var_b"r'1",var_b"r'0"])]),
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                    call
                                                      ("instruction.Zpush",@{typ instruction},
                                                       call
                                                         ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                          var("reg",@{typ Zrm}),@{theory}),@{theory}),
                                                    call
                                                      ("instruction.Zpop",@{typ instruction},
                                                       var("reg",@{typ Zrm}),@{theory})),
                                                mop(Some,lnl w8)],@{theory}))),
                                      (tp[lf,lt,lt,lf,lf,lf,lt,lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zmovsx",@{typ instruction},
                                                   tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),
                                                      call
                                                        ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                         tp[var("reg",@{typ Zreg}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      Term.Const(@{const_name "Z64"},@{typ Zsize})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lf,lt,lt,lf,lt,lf,var_b"b'0",lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(1,1)),
                                              call
                                                ("immediate8",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 lnl w8,@{theory}),
                                              call
                                                ("immediate32",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 lnl w8,@{theory})),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zpush",@{typ instruction},
                                                   call
                                                     ("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),
                                                      @{theory}),@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lf,lt,lt,lf,lt,lf,var_b"b'0",lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          cs(var("strm3",@{typ "(8 word list) option"}),
                                             [(lo(@{typ "8 word list"}),
                                               call
                                                 ("Zinst.Zdec_fail",@{typ Zinst},
                                                  ls"not enough bytes",@{theory})),
                                              (mop(Some,var("s",@{typ "8 word list"})),
                                               let'
                                                 (tp[var_w("imm",64),
                                                     var("strm4",@{typ "(8 word list) option"})],
                                                  ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(1,1)),
                                                      call
                                                        ("immediate8",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         var("s",@{typ "8 word list"}),@{theory}),
                                                      call
                                                        ("immediate32",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         var("s",@{typ "8 word list"}),@{theory})),
                                                  call
                                                    ("Zinst.Zfull_inst",@{typ Zinst},
                                                     tp[var("p",@{typ "8 word list"}),
                                                        call
                                                          ("instruction.Zimul3",@{typ instruction},
                                                           tp[call
                                                                ("OpSize",@{typ Zsize},
                                                                 tp[var_b"have_rex",
                                                                    call
                                                                      ("REX.W",HOLogic.boolT,
                                                                       var("REX",@{typ REX}),
                                                                       @{theory}),lw(1,1),
                                                                    var_b"op_size_override"],
                                                                 @{theory}),var("reg",@{typ Zreg}),
                                                              var("rm",@{typ Zrm}),var_w("imm",64)],
                                                           @{theory}),
                                                        var("strm4",@{typ "(8 word list) option"})],
                                                     @{theory})))],@{context}))),
                                      (tp[lf,lt,lt,lt,var_b"c'3",var_b"c'2",var_b"c'1",var_b"c'0"],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},lnl w8,
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zjcc",@{typ instruction},
                                                   tp[mop(Cast @{typ Zcond},
                                                          mop(Cast w4,
                                                              ll[var_b"c'3",var_b"c'2",var_b"c'1",
                                                                 var_b"c'0"])),var_w("imm",64)],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lf,lf,lf,lf,lf,lf,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                             let'
                                               (tp[var_w("imm",64),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                call
                                                  ("oimmediate",
                                                   @{typ "64 word \<times> (8 word list) option"},
                                                   tp[var("size",@{typ Zsize}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zbinop",@{typ instruction},
                                                         tp[mop(Cast @{typ Zbinop_name},
                                                                var_w("opcode",3)),
                                                            var("size",@{typ Zsize}),
                                                            call
                                                              ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                               tp[var("rm",@{typ Zrm}),
                                                                  var_w("imm",64)],@{theory})],
                                                         @{theory}),
                                                      var("strm4",@{typ "(8 word list) option"})],
                                                   @{theory}))))),
                                      (tp[lt,lf,lf,lf,lf,lf,lt,lt],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm4",@{typ "(8 word list) option"})],
                                             call
                                               ("oimmediate8",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                var("strm3",@{typ "(8 word list) option"}),@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[mop(Cast @{typ Zbinop_name},
                                                             var_w("opcode",3)),
                                                         call
                                                           ("OpSize",@{typ Zsize},
                                                            tp[lf,
                                                               call
                                                                 ("REX.W",HOLogic.boolT,
                                                                  var("REX",@{typ REX}),@{theory}),
                                                               lw(1,1),var_b"op_size_override"],
                                                            @{theory}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[var("rm",@{typ Zrm}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[lt,lf,lf,lf,lf,lt,lf,var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zbinop",@{typ instruction},
                                                   tp[lc("Ztest","Zbinop_name",@{theory}),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      call
                                                        ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                         tp[var("rm",@{typ Zrm}),
                                                            var("reg",@{typ Zreg})],@{theory})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lf,lf,lf,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zxchg",@{typ instruction},
                                                   tp[call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      var("rm",@{typ Zrm}),var("reg",@{typ Zreg})],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lf,lf,lf,lt,lf,var_b"x'0",var_b"v'0"],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zmov",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      call
                                                        ("OpSize",@{typ Zsize},
                                                         tp[var_b"have_rex",
                                                            call
                                                              ("REX.W",HOLogic.boolT,
                                                               var("REX",@{typ REX}),@{theory}),
                                                            mop(Cast w1,ll[var_b"v'0"]),
                                                            var_b"op_size_override"],@{theory}),
                                                      ite(eq(mop(Cast w1,ll[var_b"x'0"]),lw(0,1)),
                                                          call
                                                            ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                             tp[var("rm",@{typ Zrm}),
                                                                var("reg",@{typ Zreg})],@{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory}))],
                                                   @{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lf,lf,lf,lt,lt,lf,lt],
                                       let'
                                         (tp[var("reg",@{typ Zreg}),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readModRM",
                                             @{typ
                                             "Zreg \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          ite(call
                                                ("isZm",HOLogic.boolT,var("rm",@{typ Zrm}),@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zlea",@{typ instruction},
                                                       tp[call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[lt,
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                lw(1,1),var_b"op_size_override"],
                                                             @{theory}),
                                                          call
                                                            ("Zdest_src.Zr_rm",@{typ Zdest_src},
                                                             tp[var("reg",@{typ Zreg}),
                                                                var("rm",@{typ Zrm})],@{theory})],
                                                       @{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory}),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"LEA with register argument",@{theory})))),
                                      (tp[lt,lf,lf,lf,lt,lt,lt,lt],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          ite(eq(var_w("opcode",3),lw(0,3)),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zpop",@{typ instruction},
                                                       var("rm",@{typ Zrm}),@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory}),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: Group 1a",@{theory})))),
                                      (tp[lt,lf,lf,lt,lf,var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("reg",@{typ Zreg}),
                                          call
                                            ("RexReg",@{typ Zreg},
                                             tp[call
                                                  ("REX.B",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),
                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                    ll[var_b"r'2",var_b"r'1",var_b"r'0"])],@{theory}),
                                          ite(eq(var("reg",@{typ Zreg}),lc("RAX","Zreg",@{theory})),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Znop",@{typ instruction},
                                                       mop(Length,var("strm",@{typ "8 word list"})),
                                                       @{theory}),mop(Some,lnl w8)],@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zxchg",@{typ instruction},
                                                       tp[call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[lt,
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                lw(1,1),var_b"op_size_override"],
                                                             @{theory}),
                                                          call
                                                            ("Zrm.Zr",@{typ Zrm},
                                                             lc("RAX","Zreg",@{theory}),@{theory}),
                                                          var("reg",@{typ Zreg})],@{theory}),
                                                    mop(Some,lnl w8)],@{theory})))),
                                      (tp[lt,lf,lt,lf,lt,lf,lf,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[lt,
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),lnl w8],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zbinop",@{typ instruction},
                                                      tp[lc("Ztest","Zbinop_name",@{theory}),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  lc("RAX","Zreg",@{theory}),
                                                                  @{theory}),var_w("imm",64)],
                                                            @{theory})],@{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[lt,lf,lt,lt,var_b"v'0",var_b"r'2",var_b"r'1",var_b"r'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("full_immediate",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                tp[var("size",@{typ Zsize}),lnl w8],@{theory}),
                                             call
                                               ("Zinst.Zfull_inst",@{typ Zinst},
                                                tp[var("p",@{typ "8 word list"}),
                                                   call
                                                     ("instruction.Zmov",@{typ instruction},
                                                      tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                         var("size",@{typ Zsize}),
                                                         call
                                                           ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                            tp[call
                                                                 ("Zrm.Zr",@{typ Zrm},
                                                                  call
                                                                    ("RexReg",@{typ Zreg},
                                                                     tp[call
                                                                          ("REX.B",HOLogic.boolT,
                                                                           var("REX",@{typ REX}),
                                                                           @{theory}),
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 3),
                                                                            ll[var_b"r'2",
                                                                               var_b"r'1",var_b"r'0"])],
                                                                     @{theory}),@{theory}),
                                                               var_w("imm",64)],@{theory})],
                                                      @{theory}),
                                                   var("strm3",@{typ "(8 word list) option"})],
                                                @{theory})))),
                                      (tp[lt,lt,lf,lf,lf,lf,lf,var_b"v'0"],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          let'
                                            (tp[var_w("imm",64),
                                                var("strm4",@{typ "(8 word list) option"})],
                                             call
                                               ("oimmediate8",
                                                @{typ "64 word \<times> (8 word list) option"},
                                                var("strm3",@{typ "(8 word list) option"}),@{theory}),
                                             ite(eq(var_w("opcode",3),lw(6,3)),
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: Shift Group 2",@{theory}),
                                                 call
                                                   ("Zinst.Zfull_inst",@{typ Zinst},
                                                    tp[var("p",@{typ "8 word list"}),
                                                       call
                                                         ("instruction.Zbinop",@{typ instruction},
                                                          tp[mop(Cast @{typ Zbinop_name},
                                                                 bop(Add,
                                                                     mop(Cast HOLogic.natT,
                                                                         var_w("opcode",3)),ln 8)),
                                                             call
                                                               ("OpSize",@{typ Zsize},
                                                                tp[var_b"have_rex",
                                                                   call
                                                                     ("REX.W",HOLogic.boolT,
                                                                      var("REX",@{typ REX}),
                                                                      @{theory}),
                                                                   mop(Cast w1,ll[var_b"v'0"]),
                                                                   var_b"op_size_override"],
                                                                @{theory}),
                                                             call
                                                               ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                                tp[var("rm",@{typ Zrm}),
                                                                   var_w("imm",64)],@{theory})],
                                                          @{theory}),
                                                       var("strm4",@{typ "(8 word list) option"})],
                                                    @{theory}))))),
                                      (tp[lt,lt,lf,lf,lf,lf,lt,var_b"v'0"],
                                       ite(eq(mop(Cast w1,ll[var_b"v'0"]),lw(0,1)),
                                           let'
                                             (tp[var_w("imm",64),
                                                 var("strm3",@{typ "(8 word list) option"})],
                                              call
                                                ("immediate16",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 lnl w8,@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zret",@{typ instruction},
                                                       var_w("imm",64),@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory})),
                                           call
                                             ("Zinst.Zfull_inst",@{typ Zinst},
                                              tp[var("p",@{typ "8 word list"}),
                                                 call
                                                   ("instruction.Zret",@{typ instruction},lw(0,64),
                                                    @{theory}),mop(Some,lnl w8)],@{theory}))),
                                      (tp[lt,lt,lf,lf,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                             let'
                                               (tp[var_w("imm",64),
                                                   var("strm4",@{typ "(8 word list) option"})],
                                                call
                                                  ("oimmediate",
                                                   @{typ "64 word \<times> (8 word list) option"},
                                                   tp[var("size",@{typ Zsize}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}),
                                                ite(eq(var_w("opcode",3),lw(0,3)),
                                                    call
                                                      ("Zinst.Zfull_inst",@{typ Zinst},
                                                       tp[var("p",@{typ "8 word list"}),
                                                          call
                                                            ("instruction.Zmov",@{typ instruction},
                                                             tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                                var("size",@{typ Zsize}),
                                                                call
                                                                  ("Zdest_src.Zrm_i",
                                                                   @{typ Zdest_src},
                                                                   tp[var("rm",@{typ Zrm}),
                                                                      var_w("imm",64)],@{theory})],
                                                             @{theory}),
                                                          var("strm4",@{typ "(8 word list) option"})],
                                                       @{theory}),
                                                    call
                                                      ("Zinst.Zdec_fail",@{typ Zinst},
                                                       ls"Unsupported opcode: Group 11",@{theory})))))),
                                      (tp[lt,lt,lf,lf,lt,lf,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zleave"},@{typ instruction}),
                                             mop(Some,lnl w8)],@{theory})),
                                      (tp[lt,lt,lf,lt,lf,lf,var_b"b'0",var_b"v'0"],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          ite(eq(var_w("opcode",3),lw(6,3)),
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: Shift Group 2",@{theory}),
                                              call
                                                ("Zinst.Zfull_inst",@{typ Zinst},
                                                 tp[var("p",@{typ "8 word list"}),
                                                    call
                                                      ("instruction.Zbinop",@{typ instruction},
                                                       tp[mop(Cast @{typ Zbinop_name},
                                                              bop(Add,
                                                                  mop(Cast HOLogic.natT,
                                                                      var_w("opcode",3)),ln 8)),
                                                          call
                                                            ("OpSize",@{typ Zsize},
                                                             tp[var_b"have_rex",
                                                                call
                                                                  ("REX.W",HOLogic.boolT,
                                                                   var("REX",@{typ REX}),@{theory}),
                                                                mop(Cast w1,ll[var_b"v'0"]),
                                                                var_b"op_size_override"],@{theory}),
                                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                              call
                                                                ("Zdest_src.Zrm_i",@{typ Zdest_src},
                                                                 tp[var("rm",@{typ Zrm}),lw(1,64)],
                                                                 @{theory}),
                                                              call
                                                                ("Zdest_src.Zrm_r",@{typ Zdest_src},
                                                                 tp[var("rm",@{typ Zrm}),
                                                                    lc("RCX","Zreg",@{theory})],
                                                                 @{theory}))],@{theory}),
                                                    var("strm3",@{typ "(8 word list) option"})],
                                                 @{theory})))),
                                      (tp[lt,lt,lt,lf,lf,lf,lf,var_b"b'0"],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},lnl w8,
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zloop",@{typ instruction},
                                                   tp[ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                                          lc("Z_NE","Zcond",@{theory}),
                                                          lc("Z_E","Zcond",@{theory})),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lt,lt,lf,lf,lf,lt,lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate8",
                                             @{typ "64 word \<times> (8 word list) option"},lnl w8,
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zloop",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lt,lt,lf,lt,lf,lf,lf],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("immediate32",
                                             @{typ "64 word \<times> (8 word list) option"},lnl w8,
                                             @{theory}),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zcall",@{typ instruction},
                                                   call
                                                     ("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),
                                                      @{theory}),@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lt,lt,lf,lt,lf,var_b"b'0",lt],
                                       let'
                                         (tp[var_w("imm",64),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          ite(eq(mop(Cast w1,ll[var_b"b'0"]),lw(0,1)),
                                              call
                                                ("immediate32",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 lnl w8,@{theory}),
                                              call
                                                ("immediate8",
                                                 @{typ "64 word \<times> (8 word list) option"},
                                                 lnl w8,@{theory})),
                                          call
                                            ("Zinst.Zfull_inst",@{typ Zinst},
                                             tp[var("p",@{typ "8 word list"}),
                                                call
                                                  ("instruction.Zjcc",@{typ instruction},
                                                   tp[lc("Z_ALWAYS","Zcond",@{theory}),
                                                      var_w("imm",64)],@{theory}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             @{theory}))),
                                      (tp[lt,lt,lt,lt,lf,lt,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zcmc"},@{typ instruction}),
                                             mop(Some,lnl w8)],@{theory})),
                                      (tp[lt,lt,lt,lt,lf,lt,lt,var_b"v'0"],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),mop(Cast w1,ll[var_b"v'0"]),
                                                var_b"op_size_override"],@{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                             itb([(eq(var_w("opcode",3),lw(0,3)),
                                                   let'
                                                     (tp[var_w("imm",64),
                                                         var("strm4",@{typ "(8 word list) option"})],
                                                      call
                                                        ("oimmediate",
                                                         @{typ
                                                         "64 word \<times> (8 word list) option"},
                                                         tp[var("size",@{typ Zsize}),
                                                            var("strm3",
                                                                @{typ "(8 word list) option"})],
                                                         @{theory}),
                                                      call
                                                        ("Zinst.Zfull_inst",@{typ Zinst},
                                                         tp[var("p",@{typ "8 word list"}),
                                                            call
                                                              ("instruction.Zbinop",
                                                               @{typ instruction},
                                                               tp[lc("Ztest","Zbinop_name",@{theory}),
                                                                  var("size",@{typ Zsize}),
                                                                  call
                                                                    ("Zdest_src.Zrm_i",
                                                                     @{typ Zdest_src},
                                                                     tp[var("rm",@{typ Zrm}),
                                                                        var_w("imm",64)],@{theory})],
                                                               @{theory}),
                                                            var("strm4",
                                                                @{typ "(8 word list) option"})],
                                                         @{theory}))),
                                                  (eq(var_w("opcode",3),lw(2,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Znot","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(3,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zneg","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(4,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmul",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(5,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zimul",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(6,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zdiv",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(7,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zidiv",@{typ instruction},
                                                            tp[var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))],
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: Unary Group 3",@{theory}))))),
                                      (tp[lt,lt,lt,lt,lt,lf,lf,lf],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zclc"},@{typ instruction}),
                                             mop(Some,lnl w8)],@{theory})),
                                      (tp[lt,lt,lt,lt,lt,lf,lf,lt],
                                       call
                                         ("Zinst.Zfull_inst",@{typ Zinst},
                                          tp[var("p",@{typ "8 word list"}),
                                             Term.Const(@{const_name "Zstc"},@{typ instruction}),
                                             mop(Some,lnl w8)],@{theory})),
                                      (tp[lt,lt,lt,lt,lt,lt,lt,lf],
                                       let'
                                         (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                             var("strm3",@{typ "(8 word list) option"})],
                                          call
                                            ("readOpcodeModRM",
                                             @{typ
                                             "3 word \<times> Zrm \<times> (8 word list) option"},
                                             tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                          itb([(eq(var_w("opcode",3),lw(0,3)),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zmonop",@{typ instruction},
                                                         tp[lc("Zinc","Zmonop_name",@{theory}),
                                                            call
                                                              ("Zsize.Z8",@{typ Zsize},
                                                               var_b"have_rex",@{theory}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory})),
                                               (eq(var_w("opcode",3),lw(1,3)),
                                                call
                                                  ("Zinst.Zfull_inst",@{typ Zinst},
                                                   tp[var("p",@{typ "8 word list"}),
                                                      call
                                                        ("instruction.Zmonop",@{typ instruction},
                                                         tp[lc("Zdec","Zmonop_name",@{theory}),
                                                            call
                                                              ("Zsize.Z8",@{typ Zsize},
                                                               var_b"have_rex",@{theory}),
                                                            var("rm",@{typ Zrm})],@{theory}),
                                                      var("strm3",@{typ "(8 word list) option"})],
                                                   @{theory}))],
                                              call
                                                ("Zinst.Zdec_fail",@{typ Zinst},
                                                 ls"Unsupported opcode: INC/DEC Group 4",@{theory})))),
                                      (tp[lt,lt,lt,lt,lt,lt,lt,lt],
                                       let'
                                         (var("size",@{typ Zsize}),
                                          call
                                            ("OpSize",@{typ Zsize},
                                             tp[var_b"have_rex",
                                                call
                                                  ("REX.W",HOLogic.boolT,var("REX",@{typ REX}),
                                                   @{theory}),lw(1,1),var_b"op_size_override"],
                                             @{theory}),
                                          let'
                                            (tp[var_w("opcode",3),var("rm",@{typ Zrm}),
                                                var("strm3",@{typ "(8 word list) option"})],
                                             call
                                               ("readOpcodeModRM",
                                                @{typ
                                                "3 word \<times> Zrm \<times> (8 word list) option"},
                                                tp[var("REX",@{typ REX}),lnl w8],@{theory}),
                                             itb([(eq(var_w("opcode",3),lw(0,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zinc","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(1,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zmonop",@{typ instruction},
                                                            tp[lc("Zdec","Zmonop_name",@{theory}),
                                                               var("size",@{typ Zsize}),
                                                               var("rm",@{typ Zrm})],@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(2,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zcall",@{typ instruction},
                                                            call
                                                              ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                               var("rm",@{typ Zrm}),@{theory}),
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(4,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zjmp",@{typ instruction},
                                                            var("rm",@{typ Zrm}),@{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory})),
                                                  (eq(var_w("opcode",3),lw(6,3)),
                                                   call
                                                     ("Zinst.Zfull_inst",@{typ Zinst},
                                                      tp[var("p",@{typ "8 word list"}),
                                                         call
                                                           ("instruction.Zpush",@{typ instruction},
                                                            call
                                                              ("Zimm_rm.Zrm",@{typ Zimm_rm},
                                                               var("rm",@{typ Zrm}),@{theory}),
                                                            @{theory}),
                                                         var("strm3",@{typ "(8 word list) option"})],
                                                      @{theory}))],
                                                 call
                                                   ("Zinst.Zdec_fail",@{typ Zinst},
                                                    ls"Unsupported opcode: INC/DEC Group 5",
                                                    @{theory}))))),
                                      (tp[var_b"opc'7",var_b"opc'6",var_b"opc'5",var_b"opc'4",
                                          var_b"opc'3",var_b"opc'2",var_b"opc'1",var_b"opc'0"],
                                       call
                                         ("Zinst.Zdec_fail",@{typ Zinst},
                                          cc[ls"Unsupported opcode: ",
                                             mop(Cast(@{typ string}),
                                                 mop(Cast w8,
                                                     ll[var_b"opc'7",var_b"opc'6",var_b"opc'5",
                                                        var_b"opc'4",var_b"opc'3",var_b"opc'2",
                                                        var_b"opc'1",var_b"opc'0"]))],@{theory}))],
                                     @{context}))],@{context}))),
                         (lnl w8,call("Zinst.Zdec_fail",@{typ Zinst},ls"No opcode",@{theory}))],
                        @{context})))))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_fetch",
   close
     (var("state",qTy),
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 19,ln 0,
                       close
                         (var_n"i",
                          close
                            (var("state",@{typ "(8 word list) \<times> state"}),
                             tp[lu,
                                llc([apply
                                       (call
                                          ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                           mop(Snd,
                                               var("state",@{typ "(8 word list) \<times> state"})),
                                           @{theory}),
                                        bop(Add,
                                            call
                                              ("state.RIP",w64,
                                               mop(Snd,
                                                   var("state",@{typ "(8 word list) \<times> state"})),
                                               @{theory}),mop(Cast w64,var_n"i")))],
                                    mop(Fst,var("state",@{typ "(8 word list) \<times> state"}))),
                                mop(Snd,var("state",@{typ "(8 word list) \<times> state"}))]))]),
                 tp[lnl w8,var("state",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("x64_next",
   close
     (var("state",qTy),
      cs(call
           ("x64_decode",@{typ Zinst},
            apply
              (const("x64_fetch",@{typ "state \<Rightarrow> (8 word list)"},@{theory}),
               var("state",qTy)),@{theory}),
         [(call
             ("Zinst.Zfull_inst",@{typ Zinst},
              tp[var_a(@{typ "8 word list"}),var("i",@{typ instruction}),
                 mop(Some,var("strm1",@{typ "8 word list"}))],@{theory}),
           apply
             (call("Run",@{typ "state \<Rightarrow> state"},var("i",@{typ instruction}),@{theory}),
              rupd
                ("state.RIP",
                 tp[var("state",qTy),
                    bop(Add,call("state.RIP",w64,var("state",qTy),@{theory}),
                        mop(Cast w64,bop(Sub,ln 20,mop(Length,var("strm1",@{typ "8 word list"})))))],
                 @{theory}))),
          (call
             ("Zinst.Zfull_inst",@{typ Zinst},
              tp[var_a(@{typ "8 word list"}),var_a @{typ instruction},lo(@{typ "8 word list"})],
              @{theory}),
           mop(Snd,
               apply
                 (call
                    ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                     call("exception.FAILURE",@{typ exception},ls"not enough bytes",@{theory}),
                     @{theory}),var("state",qTy)))),
          (call("Zinst.Zdec_fail",@{typ Zinst},var_s"s0",@{theory}),
           mop(Snd,
               apply
                 (call
                    ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                     call("exception.FAILURE",@{typ exception},var_s"s0",@{theory}),@{theory}),
                  var("state",qTy))))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm8",
   close
     (var_w("imm",64),
      ite(bop(And,bop(Le,lw(18446744073709551488,64),var_w("imm",64)),
              bop(Le,var_w("imm",64),lw(127,64))),ll[ex(var_w("imm",64),ln 7,ln 0,w8)],lnl w8)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm16",
   close
     (var_w("imm",64),
      ite(bop(And,bop(Le,lw(18446744073709518848,64),var_w("imm",64)),
              bop(Le,var_w("imm",64),lw(32767,64))),
          ll[ex(var_w("imm",64),ln 7,ln 0,w8),ex(var_w("imm",64),ln 15,ln 8,w8)],lnl w8)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm32",
   close
     (var_w("imm",64),
      ite(bop(And,bop(Le,lw(18446744071562067968,64),var_w("imm",64)),
              bop(Le,var_w("imm",64),lw(2147483647,64))),
          ll[ex(var_w("imm",64),ln 7,ln 0,w8),ex(var_w("imm",64),ln 15,ln 8,w8),
             ex(var_w("imm",64),ln 23,ln 16,w8),ex(var_w("imm",64),ln 31,ln 24,w8)],lnl w8)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm64",
   close
     (var_w("imm",64),
      ll[ex(var_w("imm",64),ln 7,ln 0,w8),ex(var_w("imm",64),ln 15,ln 8,w8),
         ex(var_w("imm",64),ln 23,ln 16,w8),ex(var_w("imm",64),ln 31,ln 24,w8),
         ex(var_w("imm",64),ln 39,ln 32,w8),ex(var_w("imm",64),ln 47,ln 40,w8),
         ex(var_w("imm",64),ln 55,ln 48,w8),ex(var_w("imm",64),ln 63,ln 56,w8)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm",
   close
     (var_w("imm",64),
      cs(call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
         [(lnl w8,
           cs(call("e_imm16",@{typ "8 word list"},var_w("imm",64),@{theory}),
              [(lnl w8,
                cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
                   [(lnl w8,call("e_imm64",@{typ "8 word list"},var_w("imm",64),@{theory})),
                    (var("l",@{typ "8 word list"}),var("l",@{typ "8 word list"}))],@{context})),
               (var("l",@{typ "8 word list"}),var("l",@{typ "8 word list"}))],@{context})),
          (var("l",@{typ "8 word list"}),var("l",@{typ "8 word list"}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_imm_8_32",
   close
     (var_w("imm",64),
      cs(call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
         [(lnl w8,
           cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
              [(lnl w8,tp[ln 8,lnl w8]),
               (var("l",@{typ "8 word list"}),tp[ln 4,var("l",@{typ "8 word list"})])],@{context})),
          (var("l",@{typ "8 word list"}),tp[ln 1,var("l",@{typ "8 word list"})])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_ModRM",
   close
     (tp[var_w("r",4),var("rm",@{typ Zrm})],
      cs(var("rm",@{typ Zrm}),
         [(call
             ("Zrm.Zm",@{typ Zrm},
              tp[lo(@{typ "2 word \<times> Zreg"}),
                 Term.Const(@{const_name "ZripBase"},@{typ Zbase}),var_w("displacement",64)],
              @{theory}),
           mop(Some,
               tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),lw(0,2)],
                  llc([cc[lw(0,2),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(5,3)]],
                      call("e_imm32",@{typ "8 word list"},var_w("displacement",64),@{theory}))])),
          (call("Zrm.Zr",@{typ Zrm},var("rm",@{typ Zreg}),@{theory}),
           let'
             (var_w("rm",4),mop(Cast w4,var("rm",@{typ Zreg})),
              mop(Some,
                  tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),lw(0,1),ex(var_w("rm",4),ln 3,ln 3,w1)],
                     ll[cc[lw(3,2),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                           ex(var_w("rm",4),ln 2,ln 0,(Word_Lib.mk_wordT 3))]]]))),
          (call
             ("Zrm.Zm",@{typ Zrm},
              tp[lo(@{typ "2 word \<times> Zreg"}),Term.Const(@{const_name "ZnoBase"},@{typ Zbase}),
                 var_w("imm",64)],@{theory}),
           cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
              [(lnl w8,lo(@{typ "4 word \<times> 8 word list"})),
               (var("l",@{typ "8 word list"}),
                mop(Some,
                    tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),lw(0,2)],
                       cc[ll[cc[lw(0,2),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(4,3)],
                             lw(37,8)],var("l",@{typ "8 word list"})]]))],@{context})),
          (call
             ("Zrm.Zm",@{typ Zrm},
              tp[mop(Some,tp[var_w("ss",2),var("index",@{typ Zreg})]),
                 Term.Const(@{const_name "ZnoBase"},@{typ Zbase}),var_w("imm",64)],@{theory}),
           let'
             (var_w("i",4),mop(Cast w4,var("index",@{typ Zreg})),
              cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 [(lnl w8,lo(@{typ "4 word \<times> 8 word list"})),
                  (var("l",@{typ "8 word list"}),
                   mop(Some,
                       tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),ex(var_w("i",4),ln 3,ln 3,w1),
                             lw(0,1)],
                          cc[ll[cc[lw(0,2),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(4,3)],
                                cc[var_w("ss",2),ex(var_w("i",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   lw(5,3)]],var("l",@{typ "8 word list"})]]))],@{context}))),
          (call
             ("Zrm.Zm",@{typ Zrm},
              tp[mop(Some,tp[var_w("ss",2),var("index",@{typ Zreg})]),
                 call("Zbase.ZregBase",@{typ Zbase},var("base",@{typ Zreg}),@{theory}),
                 var_w("imm",64)],@{theory}),
           let'
             (var_w("b",4),mop(Cast w4,var("base",@{typ Zreg})),
              let'
                (var_w("i",4),mop(Cast w4,var("index",@{typ Zreg})),
                 let'
                   (var_w("b20",3),ex(var_w("b",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                    let'
                      (tp[var_n"s",var("l",@{typ "8 word list"})],
                       ite(bop(And,eq(var_w("imm",64),lw(0,64)),mop(Not,eq(var_w("b20",3),lw(5,3)))),
                           tp[ln 0,lnl w8],
                           call
                             ("e_imm_8_32",@{typ "nat \<times> 8 word list"},var_w("imm",64),
                              @{theory})),
                       ite(bop(In,var_n"s",sl[ln 0,ln 1,ln 4]),
                           mop(Some,
                               tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),
                                     ex(var_w("i",4),ln 3,ln 3,w1),ex(var_w("b",4),ln 3,ln 3,w1)],
                                  cc[ll[cc[itb([(eq(var_n"s",ln 0),lw(0,2)),
                                                (eq(var_n"s",ln 1),lw(1,2))],lw(2,2)),
                                           ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(4,3)],
                                        cc[var_w("ss",2),
                                           ex(var_w("i",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                           var_w("b20",3)]],var("l",@{typ "8 word list"})]]),
                           lo(@{typ "4 word \<times> 8 word list"}))))))),
          (call
             ("Zrm.Zm",@{typ Zrm},
              tp[lo(@{typ "2 word \<times> Zreg"}),
                 call("Zbase.ZregBase",@{typ Zbase},var("base",@{typ Zreg}),@{theory}),
                 var_w("imm",64)],@{theory}),
           let'
             (var_w("base",4),mop(Cast w4,var("base",@{typ Zreg})),
              let'
                (var_w("base20",3),ex(var_w("base",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                 let'
                   (tp[var_n"s",var("l",@{typ "8 word list"})],
                    ite(bop(And,eq(var_w("imm",64),lw(0,64)),mop(Not,eq(var_w("base20",3),lw(5,3)))),
                        tp[ln 0,lnl w8],
                        call
                          ("e_imm_8_32",@{typ "nat \<times> 8 word list"},var_w("imm",64),@{theory})),
                    ite(bop(In,var_n"s",sl[ln 0,ln 1,ln 4]),
                        mop(Some,
                            tp[cc[lw(0,1),ex(var_w("r",4),ln 3,ln 3,w1),lw(0,1),
                                  ex(var_w("base",4),ln 3,ln 3,w1)],
                               cc[llc([cc[itb([(eq(var_n"s",ln 0),lw(0,2)),
                                               (eq(var_n"s",ln 1),lw(1,2))],lw(2,2)),
                                          ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                          var_w("base20",3)]],
                                      ite(eq(var_w("base20",3),lw(4,3)),
                                          ll[cc[lw(4,5),var_w("base20",3)]],lnl w8)),
                                  var("l",@{typ "8 word list"})]]),
                        lo(@{typ "4 word \<times> 8 word list"})))))),
          (var_a @{typ Zrm},lo(@{typ "4 word \<times> 8 word list"}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rex_prefix",
   close(var_w("rex",4),ite(eq(var_w("rex",4),lw(0,4)),lnl w8,ll[cc[lw(4,4),var_w("rex",4)]])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_opsize",
   close
     (tp[var("sz",@{typ Zsize}),var_w("rex",4)],
      cs(var("sz",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory}),
           let'
             (var("p",@{typ "8 word list"}),
              call("rex_prefix",@{typ "8 word list"},var_w("rex",4),@{theory}),
              tp[ite(bop(And,var_b"have_rex",eq(var("p",@{typ "8 word list"}),lnl w8)),ll[lw(64,8)],
                     var("p",@{typ "8 word list"})),lw(0,8)])),
          (Term.Const(@{const_name "Z16"},@{typ Zsize}),
           tp[cc[ll[lw(102,8)],
                 call("rex_prefix",@{typ "8 word list"},bop(BAnd,var_w("rex",4),lw(7,4)),@{theory})],
              lw(1,8)]),
          (Term.Const(@{const_name "Z32"},@{typ Zsize}),
           tp[call("rex_prefix",@{typ "8 word list"},bop(BAnd,var_w("rex",4),lw(7,4)),@{theory}),
              lw(1,8)]),
          (Term.Const(@{const_name "Z64"},@{typ Zsize}),
           tp[call("rex_prefix",@{typ "8 word list"},bop(BOr,var_w("rex",4),lw(8,4)),@{theory}),
              lw(1,8)])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_opsize_imm",
   close
     (tp[var("sz",@{typ Zsize}),var_w("rex",4),var_w("imm",64),var_b"normal"],
      let'
        (tp[var("prefixes",@{typ "8 word list"}),var_w("v",8)],
         call
           ("e_opsize",@{typ "(8 word list) \<times> 8 word"},
            tp[var("sz",@{typ Zsize}),var_w("rex",4)],@{theory}),
         cs(ite(bop(And,eq(var("sz",@{typ Zsize}),Term.Const(@{const_name "Z64"},@{typ Zsize})),
                    var_b"normal"),Term.Const(@{const_name "Z32"},@{typ Zsize}),
                var("sz",@{typ Zsize})),
            [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
              cs(call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 [(lnl w8,lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})),
                  (var("l",@{typ "8 word list"}),
                   ite(eq(var_w("v",8),lw(0,8)),
                       mop(Some,
                           tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                              var("l",@{typ "8 word list"})]),
                       lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})))],@{context})),
             (Term.Const(@{const_name "Z16"},@{typ Zsize}),
              cs(call("e_imm16",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 [(lnl w8,lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})),
                  (var("l",@{typ "8 word list"}),
                   ite(eq(var_w("v",8),lw(1,8)),
                       mop(Some,
                           tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                              var("l",@{typ "8 word list"})]),
                       lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})))],@{context})),
             (Term.Const(@{const_name "Z32"},@{typ Zsize}),
              cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 [(lnl w8,lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})),
                  (var("l",@{typ "8 word list"}),
                   ite(eq(var_w("v",8),lw(1,8)),
                       mop(Some,
                           tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                              var("l",@{typ "8 word list"})]),
                       lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})))],@{context})),
             (Term.Const(@{const_name "Z64"},@{typ Zsize}),
              ite(eq(var_w("v",8),lw(1,8)),
                  mop(Some,
                      tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                         call("e_imm64",@{typ "8 word list"},var_w("imm",64),@{theory})]),
                  lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"})))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_opc",
   close
     (tp[var_w("opc1",8),var_w("opc2",3),var("rm",@{typ Zrm})],
      cs(call
           ("e_ModRM",@{typ "(4 word \<times> 8 word list) option"},
            tp[mop(Cast w4,var_w("opc2",3)),var("rm",@{typ Zrm})],@{theory}),
         [(lo(@{typ "4 word \<times> 8 word list"}),lnl w8),
          (mop(Some,tp[var_w("rex",4),var("strm",@{typ "8 word list"})]),
           cc[call("rex_prefix",@{typ "8 word list"},var_w("rex",4),@{theory}),
              llc([var_w("opc1",8)],var("strm",@{typ "8 word list"}))])],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_gen_rm_reg",
   close
     (tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("r",4),var("p",@{typ "8 word list"}),
         var_w("opc",8),var("mo",@{typ "8 word option"})],
      cs(call
           ("e_ModRM",@{typ "(4 word \<times> 8 word list) option"},
            tp[var_w("r",4),var("rm",@{typ Zrm})],@{theory}),
         [(lo(@{typ "4 word \<times> 8 word list"}),lnl w8),
          (mop(Some,tp[var_w("rex",4),var("strm",@{typ "8 word list"})]),
           let'
             (tp[var("prefixes",@{typ "8 word list"}),var_w("v",8)],
              call
                ("e_opsize",@{typ "(8 word list) \<times> 8 word"},
                 tp[var("sz",@{typ Zsize}),var_w("rex",4)],@{theory}),
              cc[var("prefixes",@{typ "8 word list"}),var("p",@{typ "8 word list"}),
                 ll[bop(BOr,var_w("opc",8),
                        cs(var("mo",@{typ "8 word option"}),
                           [(mop(Some,var_w("x",8)),var_w("x",8)),(lo w8,var_w("v",8))],@{context}))],
                 var("strm",@{typ "8 word list"})]))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_rm_reg",
   close
     (tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("r",4),var("p",@{typ "8 word list"}),
         var_w("opc",8)],
      call
        ("e_gen_rm_reg",@{typ "8 word list"},
         tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("r",4),var("p",@{typ "8 word list"}),
            var_w("opc",8),lo w8],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_rm_imm",
   close
     (tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),var_w("opc1",4),var_w("opc2",8)],
      cs(call
           ("e_ModRM",@{typ "(4 word \<times> 8 word list) option"},
            tp[var_w("opc1",4),var("rm",@{typ Zrm})],@{theory}),
         [(lo(@{typ "4 word \<times> 8 word list"}),lnl w8),
          (mop(Some,tp[var_w("rex",4),var("strm",@{typ "8 word list"})]),
           cs(call
                ("e_opsize_imm",
                 @{typ "((8 word list) \<times> 8 word \<times> 8 word list) option"},
                 tp[var("sz",@{typ Zsize}),var_w("rex",4),var_w("imm",64),lt],@{theory}),
              [(mop(Some,
                    tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                       var("l",@{typ "8 word list"})]),
                cc[var("prefixes",@{typ "8 word list"}),ll[bop(BOr,var_w("opc2",8),var_w("v",8))],
                   var("strm",@{typ "8 word list"}),var("l",@{typ "8 word list"})]),
               (lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"}),lnl w8)],@{context}))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_rm_imm8",
   close
     (tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),var_w("opc1",4),var_w("opc2",8)],
      cs(call
           ("e_ModRM",@{typ "(4 word \<times> 8 word list) option"},
            tp[var_w("opc1",4),var("rm",@{typ Zrm})],@{theory}),
         [(lo(@{typ "4 word \<times> 8 word list"}),lnl w8),
          (mop(Some,tp[var_w("rex",4),var("strm",@{typ "8 word list"})]),
           let'
             (tp[var("prefixes",@{typ "8 word list"}),var_w("v",8)],
              call
                ("e_opsize",@{typ "(8 word list) \<times> 8 word"},
                 tp[var("sz",@{typ Zsize}),var_w("rex",4)],@{theory}),
              cs(call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 [(lnl w8,lnl w8),
                  (var("l",@{typ "8 word list"}),
                   cc[var("prefixes",@{typ "8 word list"}),
                      ll[bop(BOr,var_w("opc2",8),var_w("v",8))],var("strm",@{typ "8 word list"}),
                      var("l",@{typ "8 word list"})])],@{context})))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_rm_imm8b",
   close
     (tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),var_w("opc1",4),
         var("opc2",@{typ "8 word list"})],
      cs(call
           ("e_ModRM",@{typ "(4 word \<times> 8 word list) option"},
            tp[var_w("opc1",4),var("rm",@{typ Zrm})],@{theory}),
         [(mop(Some,tp[var_w("rex",4),llc([var_w("s",8)],var("t",@{typ "8 word list"}))]),
           cs(call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
              [(lnl w8,lnl w8),
               (var("l",@{typ "8 word list"}),
                cc[mop(Fst,
                       call
                         ("e_opsize",@{typ "(8 word list) \<times> 8 word"},
                          tp[var("sz",@{typ Zsize}),var_w("rex",4)],@{theory})),
                   var("opc2",@{typ "8 word list"}),ll[bop(BOr,var_w("s",8),lw(32,8))],
                   var("t",@{typ "8 word list"}),var("l",@{typ "8 word list"})])],@{context})),
          (var_a(@{typ "(4 word \<times> 8 word list) option"}),lnl w8)],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_rax_imm",
   close
     (tp[var("sz",@{typ Zsize}),var_w("imm",64),var_w("opc",8)],
      cs(call
           ("e_opsize_imm",@{typ "((8 word list) \<times> 8 word \<times> 8 word list) option"},
            tp[var("sz",@{typ Zsize}),lw(0,4),var_w("imm",64),lt],@{theory}),
         [(mop(Some,
               tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),var("l",@{typ "8 word list"})]),
           cc[var("prefixes",@{typ "8 word list"}),ll[bop(BOr,var_w("opc",8),var_w("v",8))],
              var("l",@{typ "8 word list"})]),
          (lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"}),lnl w8)],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("e_jcc_rel32",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.Zjcc",@{typ instruction},tp[var("cond",@{typ Zcond}),var_w("imm",64)],
              @{theory}),
           cs(tp[call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
                 var("cond",@{typ Zcond})],
              [(tp[lnl w8,var_a @{typ Zcond}],lnl w8),
               (tp[var("l",@{typ "8 word list"}),lc("Z_ALWAYS","Zcond",@{theory})],
                llc([lw(233,8)],var("l",@{typ "8 word list"}))),
               (tp[var("l",@{typ "8 word list"}),var_a @{typ Zcond}],
                cc[ll[lw(15,8),cc[lw(8,4),mop(Cast w4,var("cond",@{typ Zcond}))]],
                   var("l",@{typ "8 word list"})])],@{context})),(var_a @{typ instruction},lnl w8)],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("not_byte",
   close
     (var("sz",@{typ Zsize}),
      cs(var("sz",@{typ Zsize}),
         [(call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),lf),(var_a @{typ Zsize},lt)],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("is_rax",
   close
     (var("rm",@{typ Zrm}),
      cs(var("rm",@{typ Zrm}),
         [(call("Zrm.Zr",@{typ Zrm},lc("RAX","Zreg",@{theory}),@{theory}),lt),(var_a @{typ Zrm},lf)],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("encode",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.Zbinop",@{typ instruction},
              var("v#0",@{typ "Zbinop_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
           cs(var("v#0",@{typ "Zbinop_name \<times> Zsize \<times> Zdest_src"}),
              [(tp[var("bop",@{typ Zbinop_name}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_i",@{typ Zdest_src},tp[var("rm",@{typ Zrm}),var_w("imm",64)],
                      @{theory})],
                ite(eq(var("bop",@{typ Zbinop_name}),lc("Ztest","Zbinop_name",@{theory})),
                    ite(call("is_rax",HOLogic.boolT,var("rm",@{typ Zrm}),@{theory}),
                        call
                          ("e_rax_imm",@{typ "8 word list"},
                           tp[var("sz",@{typ Zsize}),var_w("imm",64),lw(168,8)],@{theory}),
                        call
                          ("e_rm_imm",@{typ "8 word list"},
                           tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),lw(0,4),
                              lw(246,8)],@{theory})),
                    let'
                      (var_w("opc",4),mop(Cast w4,var("bop",@{typ Zbinop_name})),
                       itb([(bop(Bit,var_w("opc",4),ln 3),
                             ite(eq(var_w("imm",64),lw(1,64)),
                                 call
                                   ("e_rm_reg",@{typ "8 word list"},
                                    tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                                       bop(BAnd,var_w("opc",4),lw(7,4)),lnl w8,lw(208,8)],@{theory}),
                                 call
                                   ("e_rm_imm8",@{typ "8 word list"},
                                    tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),
                                       bop(BAnd,var_w("opc",4),lw(7,4)),lw(192,8)],@{theory}))),
                            (bop(And,
                                 call("not_byte",HOLogic.boolT,var("sz",@{typ Zsize}),@{theory}),
                                 mop(Not,
                                     eq(call
                                          ("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory}),
                                        lnl w8))),
                             call
                               ("e_rm_imm8",@{typ "8 word list"},
                                tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),
                                   var_w("opc",4),lw(131,8)],@{theory})),
                            (call("is_rax",HOLogic.boolT,var("rm",@{typ Zrm}),@{theory}),
                             call
                               ("e_rax_imm",@{typ "8 word list"},
                                tp[var("sz",@{typ Zsize}),var_w("imm",64),
                                   cc[lw(0,2),ex(var_w("opc",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                      lw(4,3)]],@{theory}))],
                           call
                             ("e_rm_imm",@{typ "8 word list"},
                              tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),
                                 var_w("opc",4),lw(128,8)],@{theory}))))),
               (tp[var("bop",@{typ Zbinop_name}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_r",@{typ Zdest_src},
                      tp[var("rm",@{typ Zrm}),var("r",@{typ Zreg})],@{theory})],
                ite(eq(var("bop",@{typ Zbinop_name}),lc("Ztest","Zbinop_name",@{theory})),
                    call
                      ("e_rm_reg",@{typ "8 word list"},
                       tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                          mop(Cast w4,var("r",@{typ Zreg})),lnl w8,lw(132,8)],@{theory}),
                    let'
                      (var_w("opc",4),mop(Cast w4,var("bop",@{typ Zbinop_name})),
                       ite(bop(Bit,var_w("opc",4),ln 3),
                           ite(eq(var("r",@{typ Zreg}),lc("RCX","Zreg",@{theory})),
                               call
                                 ("e_rm_reg",@{typ "8 word list"},
                                  tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                                     bop(BAnd,var_w("opc",4),lw(7,4)),lnl w8,lw(210,8)],@{theory}),
                               lnl w8),
                           call
                             ("e_rm_reg",@{typ "8 word list"},
                              tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                                 mop(Cast w4,var("r",@{typ Zreg})),lnl w8,
                                 cc[lw(0,2),ex(var_w("opc",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                    lw(0,3)]],@{theory}))))),
               (tp[var("bop",@{typ Zbinop_name}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory})],
                let'
                  (var_w("opc",4),mop(Cast w4,var("bop",@{typ Zbinop_name})),
                   ite(bop(Bit,var_w("opc",4),ln 3),lnl w8,
                       call
                         ("e_rm_reg",@{typ "8 word list"},
                          tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                             mop(Cast w4,var("r",@{typ Zreg})),lnl w8,
                             cc[lw(0,2),ex(var_w("opc",4),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(2,3)]],
                          @{theory}))))],@{context})),
          (call
             ("instruction.Zbit_test",@{typ instruction},
              var("v#1",@{typ "Zbit_test_name \<times> Zsize \<times> Zdest_src"}),@{theory}),
           cs(var("v#1",@{typ "Zbit_test_name \<times> Zsize \<times> Zdest_src"}),
              [(tp[var("bt",@{typ Zbit_test_name}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_r",@{typ Zdest_src},
                      tp[var("rm",@{typ Zrm}),var("r",@{typ Zreg})],@{theory})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      ll[lw(15,8)],
                      cc[lw(5,3),mop(Cast (Word_Lib.mk_wordT 2),var("bt",@{typ Zbit_test_name})),
                         lw(3,3)]],@{theory})),
               (tp[var("bt",@{typ Zbit_test_name}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_i",@{typ Zdest_src},tp[var("rm",@{typ Zrm}),var_w("i",64)],
                      @{theory})],
                call
                  ("e_rm_imm8b",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("i",64),
                      mop(Cast w4,var("bt",@{typ Zbit_test_name})),ll[lw(15,8),lw(186,8)]],@{theory})),
               (var_a(@{typ "Zbit_test_name \<times> Zsize \<times> Zdest_src"}),lnl w8)],@{context})),
          (call("instruction.Zcall",@{typ instruction},var("v#2",@{typ Zimm_rm}),@{theory}),
           cs(var("v#2",@{typ Zimm_rm}),
              [(call("Zimm_rm.Zrm",@{typ Zimm_rm},var("rm",@{typ Zrm}),@{theory}),
                call
                  ("e_opc",@{typ "8 word list"},tp[lw(255,8),lw(2,3),var("rm",@{typ Zrm})],@{theory})),
               (call("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),@{theory}),
                cs(call("e_imm32",@{typ "8 word list"},var_w("imm",64),@{theory}),
                   [(lnl w8,lnl w8),
                    (var("l",@{typ "8 word list"}),llc([lw(232,8)],var("l",@{typ "8 word list"})))],
                   @{context}))],@{context})),
          (Term.Const(@{const_name "Zcmc"},@{typ instruction}),ll[lw(245,8)]),
          (Term.Const(@{const_name "Zclc"},@{typ instruction}),ll[lw(248,8)]),
          (Term.Const(@{const_name "Zstc"},@{typ instruction}),ll[lw(249,8)]),
          (call
             ("instruction.Zcmpxchg",@{typ instruction},
              var("v#3",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
           cs(var("v#3",@{typ "Zsize \<times> Zrm \<times> Zreg"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var("r",@{typ Zreg})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      ll[lw(15,8)],lw(176,8)],@{theory}))],@{context})),
          (call
             ("instruction.Zdiv",@{typ instruction},var("v#4",@{typ "Zsize \<times> Zrm"}),@{theory}),
           cs(var("v#4",@{typ "Zsize \<times> Zrm"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(6,4),lnl w8,lw(246,8)],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zidiv",@{typ instruction},var("v#5",@{typ "Zsize \<times> Zrm"}),
              @{theory}),
           cs(var("v#5",@{typ "Zsize \<times> Zrm"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(7,4),lnl w8,lw(246,8)],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zjcc",@{typ instruction},var("v#6",@{typ "Zcond \<times> 64 word"}),
              @{theory}),
           cs(var("v#6",@{typ "Zcond \<times> 64 word"}),
              [(tp[var("cond",@{typ Zcond}),var_w("imm",64)],
                let'
                  (tp[var_n"s",var("l",@{typ "8 word list"})],
                   call("e_imm_8_32",@{typ "nat \<times> 8 word list"},var_w("imm",64),@{theory}),
                   itb([(eq(var("cond",@{typ Zcond}),lc("Z_ALWAYS","Zcond",@{theory})),
                         itb([(eq(var_n"s",ln 1),llc([lw(235,8)],var("l",@{typ "8 word list"}))),
                              (eq(var_n"s",ln 4),llc([lw(233,8)],var("l",@{typ "8 word list"})))],
                             lnl w8)),
                        (eq(var_n"s",ln 1),
                         llc([cc[lw(7,4),mop(Cast w4,var("cond",@{typ Zcond}))]],
                             var("l",@{typ "8 word list"}))),
                        (eq(var_n"s",ln 4),
                         cc[ll[lw(15,8),cc[lw(8,4),mop(Cast w4,var("cond",@{typ Zcond}))]],
                            var("l",@{typ "8 word list"})])],lnl w8)))],@{context})),
          (call("instruction.Zjmp",@{typ instruction},var("v#7",@{typ Zrm}),@{theory}),
           call("e_opc",@{typ "8 word list"},tp[lw(255,8),lw(4,3),var("v#7",@{typ Zrm})],@{theory})),
          (call
             ("instruction.Zlea",@{typ instruction},var("v#8",@{typ "Zsize \<times> Zdest_src"}),
              @{theory}),
           cs(var("v#8",@{typ "Zsize \<times> Zdest_src"}),
              [(tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                   var_a @{typ Zdest_src}],lnl w8),
               (tp[var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),
                         call
                           ("Zrm.Zm",@{typ Zrm},
                            var("m",
                                @{typ
                                "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
                            @{theory})],@{theory})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),
                      call
                        ("Zrm.Zm",@{typ Zrm},
                         var("m",
                             @{typ
                             "((2 word \<times> Zreg) option) \<times> Zbase \<times> 64 word"}),
                         @{theory}),mop(Cast w4,var("r",@{typ Zreg})),lnl w8,lw(141,8)],@{theory})),
               (var_a(@{typ "Zsize \<times> Zdest_src"}),lnl w8)],@{context})),
          (Term.Const(@{const_name "Zleave"},@{typ instruction}),ll[lw(201,8)]),
          (call
             ("instruction.Zloop",@{typ instruction},var("v#9",@{typ "Zcond \<times> 64 word"}),
              @{theory}),
           cs(var("v#9",@{typ "Zcond \<times> 64 word"}),
              [(tp[var("cond",@{typ Zcond}),var_w("imm",64)],
                cs(tp[var("cond",@{typ Zcond}),
                      call("e_imm8",@{typ "8 word list"},var_w("imm",64),@{theory})],
                   [(tp[var_a @{typ Zcond},lnl w8],lnl w8),
                    (tp[lc("Z_NE","Zcond",@{theory}),var("l",@{typ "8 word list"})],
                     llc([lw(224,8)],var("l",@{typ "8 word list"}))),
                    (tp[lc("Z_E","Zcond",@{theory}),var("l",@{typ "8 word list"})],
                     llc([lw(225,8)],var("l",@{typ "8 word list"}))),
                    (tp[lc("Z_ALWAYS","Zcond",@{theory}),var("l",@{typ "8 word list"})],
                     llc([lw(226,8)],var("l",@{typ "8 word list"}))),
                    (var_a(@{typ "Zcond \<times> 8 word list"}),lnl w8)],@{context}))],@{context})),
          (call
             ("instruction.Zmonop",@{typ instruction},
              var("v#10",@{typ "Zmonop_name \<times> Zsize \<times> Zrm"}),@{theory}),
           cs(var("v#10",@{typ "Zmonop_name \<times> Zsize \<times> Zrm"}),
              [(tp[lc("Zinc","Zmonop_name",@{theory}),
                   call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var("rm",@{typ Zrm})],
                call
                  ("e_opc",@{typ "8 word list"},tp[lw(254,8),lw(0,3),var("rm",@{typ Zrm})],@{theory})),
               (tp[lc("Zdec","Zmonop_name",@{theory}),
                   call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var("rm",@{typ Zrm})],
                call
                  ("e_opc",@{typ "8 word list"},tp[lw(254,8),lw(1,3),var("rm",@{typ Zrm})],@{theory})),
               (tp[lc("Zinc","Zmonop_name",@{theory}),var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(0,4),lnl w8,lw(255,8)],
                   @{theory})),
               (tp[lc("Zdec","Zmonop_name",@{theory}),var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(1,4),lnl w8,lw(255,8)],
                   @{theory})),
               (tp[lc("Znot","Zmonop_name",@{theory}),var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(2,4),lnl w8,lw(246,8)],
                   @{theory})),
               (tp[lc("Zneg","Zmonop_name",@{theory}),var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(3,4),lnl w8,lw(246,8)],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zmov",@{typ instruction},
              var("v#11",@{typ "Zcond \<times> Zsize \<times> Zdest_src"}),@{theory}),
           cs(var("v#11",@{typ "Zcond \<times> Zsize \<times> Zdest_src"}),
              [(tp[lc("Z_ALWAYS","Zcond",@{theory}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_r",@{typ Zdest_src},
                      tp[var("rm",@{typ Zrm}),var("r",@{typ Zreg})],@{theory})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      lnl w8,lw(136,8)],@{theory})),
               (tp[lc("Z_ALWAYS","Zcond",@{theory}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      lnl w8,lw(138,8)],@{theory})),
               (tp[lc("Z_ALWAYS","Zcond",@{theory}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_i",@{typ Zdest_src},
                      tp[call("Zrm.Zr",@{typ Zrm},var("reg",@{typ Zreg}),@{theory}),var_w("imm",64)],
                      @{theory})],
                let'
                  (var_w("r",4),mop(Cast w4,var("reg",@{typ Zreg})),
                   cs(call
                        ("e_opsize_imm",
                         @{typ "((8 word list) \<times> 8 word \<times> 8 word list) option"},
                         tp[var("sz",@{typ Zsize}),ite(bop(Bit,var_w("r",4),ln 3),lw(1,4),lw(0,4)),
                            var_w("imm",64),lf],@{theory}),
                      [(mop(Some,
                            tp[var("prefixes",@{typ "8 word list"}),var_w("v",8),
                               var("l",@{typ "8 word list"})]),
                        cc[var("prefixes",@{typ "8 word list"}),
                           ll[cc[lw(11,4),mop(Cast w1,var_w("v",8)),
                                 ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3))]],
                           var("l",@{typ "8 word list"})]),
                       (lo(@{typ "(8 word list) \<times> 8 word \<times> 8 word list"}),lnl w8)],
                      @{context}))),
               (tp[lc("Z_ALWAYS","Zcond",@{theory}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zrm_i",@{typ Zdest_src},tp[var("rm",@{typ Zrm}),var_w("imm",64)],
                      @{theory})],
                call
                  ("e_rm_imm",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var_w("imm",64),lw(0,4),lw(198,8)],
                   @{theory})),
               (tp[var("cond",@{typ Zcond}),
                   call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),
                   var_a @{typ Zdest_src}],lnl w8),
               (tp[var("cond",@{typ Zcond}),var("sz",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory})],
                call
                  ("e_gen_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      ll[lw(15,8)],lw(64,8),mop(Some,mop(Cast w8,var("cond",@{typ Zcond})))],
                   @{theory})),(var_a(@{typ "Zcond \<times> Zsize \<times> Zdest_src"}),lnl w8)],
              @{context})),
          (call
             ("instruction.Zmovsx",@{typ instruction},
              var("v#12",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
           cs(var("v#12",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),
              [(tp[Term.Const(@{const_name "Z32"},@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory}),
                   Term.Const(@{const_name "Z64"},@{typ Zsize})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[Term.Const(@{const_name "Z64"},@{typ Zsize}),var("rm",@{typ Zrm}),
                      mop(Cast w4,var("r",@{typ Zreg})),lnl w8,lw(99,8)],@{theory})),
               (tp[var("sz1",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory}),
                   var("sz2",@{typ Zsize})],
                ite(bop(Lt,call("Zsize_width",HOLogic.natT,var("sz1",@{typ Zsize}),@{theory}),
                        call("Zsize_width",HOLogic.natT,var("sz2",@{typ Zsize}),@{theory})),
                    call
                      ("e_gen_rm_reg",@{typ "8 word list"},
                       tp[var("sz2",@{typ Zsize}),var("rm",@{typ Zrm}),
                          mop(Cast w4,var("r",@{typ Zreg})),ll[lw(15,8)],lw(190,8),
                          mop(Some,
                              ite(eq(var("sz1",@{typ Zsize}),
                                     Term.Const(@{const_name "Z16"},@{typ Zsize})),lw(1,8),lw(0,8)))],
                       @{theory}),lnl w8)),
               (var_a(@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),lnl w8)],@{context})),
          (call
             ("instruction.Zmovzx",@{typ instruction},
              var("v#13",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),@{theory}),
           cs(var("v#13",@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),
              [(tp[var("sz1",@{typ Zsize}),
                   call
                     ("Zdest_src.Zr_rm",@{typ Zdest_src},
                      tp[var("r",@{typ Zreg}),var("rm",@{typ Zrm})],@{theory}),
                   var("sz2",@{typ Zsize})],
                ite(bop(And,
                        bop(Lt,call("Zsize_width",HOLogic.natT,var("sz1",@{typ Zsize}),@{theory}),
                            call("Zsize_width",HOLogic.natT,var("sz2",@{typ Zsize}),@{theory})),
                        mop(Not,
                            eq(var("sz1",@{typ Zsize}),Term.Const(@{const_name "Z32"},@{typ Zsize})))),
                    call
                      ("e_gen_rm_reg",@{typ "8 word list"},
                       tp[var("sz2",@{typ Zsize}),var("rm",@{typ Zrm}),
                          mop(Cast w4,var("r",@{typ Zreg})),ll[lw(15,8)],lw(182,8),
                          mop(Some,
                              ite(eq(var("sz1",@{typ Zsize}),
                                     Term.Const(@{const_name "Z16"},@{typ Zsize})),lw(1,8),lw(0,8)))],
                       @{theory}),lnl w8)),
               (var_a(@{typ "Zsize \<times> Zdest_src \<times> Zsize"}),lnl w8)],@{context})),
          (call
             ("instruction.Zmul",@{typ instruction},var("v#14",@{typ "Zsize \<times> Zrm"}),
              @{theory}),
           cs(var("v#14",@{typ "Zsize \<times> Zrm"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(4,4),lnl w8,lw(246,8)],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zimul",@{typ instruction},var("v#15",@{typ "Zsize \<times> Zrm"}),
              @{theory}),
           cs(var("v#15",@{typ "Zsize \<times> Zrm"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),lw(5,4),lnl w8,lw(246,8)],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zimul2",@{typ instruction},
              var("v#16",@{typ "Zsize \<times> Zreg \<times> Zrm"}),@{theory}),
           cs(var("v#16",@{typ "Zsize \<times> Zreg \<times> Zrm"}),
              [(tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var_a @{typ Zreg},
                   var_a @{typ Zrm}],lnl w8),
               (tp[var("sz",@{typ Zsize}),var("r",@{typ Zreg}),var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      ll[lw(15,8)],lw(175,8)],@{theory}))],@{context})),
          (call
             ("instruction.Zimul3",@{typ instruction},
              var("v#17",@{typ "Zsize \<times> Zreg \<times> Zrm \<times> 64 word"}),@{theory}),
           cs(var("v#17",@{typ "Zsize \<times> Zreg \<times> Zrm \<times> 64 word"}),
              [(tp[call("Zsize.Z8",@{typ Zsize},var_a HOLogic.boolT,@{theory}),var_a @{typ Zreg},
                   var_a(@{typ "Zrm \<times> 64 word"})],lnl w8),
               (tp[var("sz",@{typ Zsize}),var("r",@{typ Zreg}),var("rm",@{typ Zrm}),var_w("imm",64)],
                let'
                  (tp[var_n"s",var("l",@{typ "8 word list"})],
                   call("e_imm_8_32",@{typ "nat \<times> 8 word list"},var_w("imm",64),@{theory}),
                   itb([(eq(var_n"s",ln 1),
                         cc[call
                              ("e_rm_reg",@{typ "8 word list"},
                               tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                                  mop(Cast w4,var("r",@{typ Zreg})),lnl w8,lw(107,8)],@{theory}),
                            var("l",@{typ "8 word list"})]),
                        (eq(var_n"s",ln 4),
                         cc[call
                              ("e_rm_reg",@{typ "8 word list"},
                               tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                                  mop(Cast w4,var("r",@{typ Zreg})),lnl w8,lw(105,8)],@{theory}),
                            var("l",@{typ "8 word list"})])],lnl w8)))],@{context})),
          (call("instruction.Znop",@{typ instruction},var_n"v#18",@{theory}),
           itb([(eq(var_n"v#18",ln 1),ll[lw(144,8)]),(eq(var_n"v#18",ln 2),ll[lw(102,8),lw(144,8)]),
                (eq(var_n"v#18",ln 3),ll[lw(15,8),lw(31,8),lw(0,8)]),
                (eq(var_n"v#18",ln 4),ll[lw(15,8),lw(31,8),lw(64,8),lw(0,8)]),
                (eq(var_n"v#18",ln 5),ll[lw(15,8),lw(31,8),lw(68,8),lw(0,8),lw(0,8)]),
                (eq(var_n"v#18",ln 6),ll[lw(102,8),lw(15,8),lw(31,8),lw(68,8),lw(0,8),lw(0,8)]),
                (eq(var_n"v#18",ln 7),
                 ll[lw(15,8),lw(31,8),lw(128,8),lw(0,8),lw(0,8),lw(0,8),lw(0,8)]),
                (eq(var_n"v#18",ln 8),
                 ll[lw(15,8),lw(31,8),lw(132,8),lw(0,8),lw(0,8),lw(0,8),lw(0,8),lw(0,8)]),
                (eq(var_n"v#18",ln 9),
                 ll[lw(102,8),lw(15,8),lw(31,8),lw(132,8),lw(0,8),lw(0,8),lw(0,8),lw(0,8),lw(0,8)])],
               lnl w8)),
          (call("instruction.Zpop",@{typ instruction},var("v#19",@{typ Zrm}),@{theory}),
           cs(var("v#19",@{typ Zrm}),
              [(call("Zrm.Zr",@{typ Zrm},var("reg",@{typ Zreg}),@{theory}),
                let'
                  (var_w("r",4),mop(Cast w4,var("reg",@{typ Zreg})),
                   cc[ite(bop(Bit,var_w("r",4),ln 3),ll[lw(73,8)],lnl w8),
                      ll[cc[lw(11,5),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3))]]])),
               (var("rm",@{typ Zrm}),
                call
                  ("e_opc",@{typ "8 word list"},tp[lw(143,8),lw(0,3),var("rm",@{typ Zrm})],@{theory}))],
              @{context})),
          (call("instruction.Zpush",@{typ instruction},var("v#20",@{typ Zimm_rm}),@{theory}),
           cs(var("v#20",@{typ Zimm_rm}),
              [(call
                  ("Zimm_rm.Zrm",@{typ Zimm_rm},
                   call("Zrm.Zr",@{typ Zrm},var("reg",@{typ Zreg}),@{theory}),@{theory}),
                let'
                  (var_w("r",4),mop(Cast w4,var("reg",@{typ Zreg})),
                   cc[ite(bop(Bit,var_w("r",4),ln 3),ll[lw(73,8)],lnl w8),
                      ll[cc[lw(10,5),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3))]]])),
               (call("Zimm_rm.Zrm",@{typ Zimm_rm},var("rm",@{typ Zrm}),@{theory}),
                call
                  ("e_opc",@{typ "8 word list"},tp[lw(255,8),lw(6,3),var("rm",@{typ Zrm})],@{theory})),
               (call("Zimm_rm.Zimm",@{typ Zimm_rm},var_w("imm",64),@{theory}),
                let'
                  (tp[var_n"s",var("l",@{typ "8 word list"})],
                   call("e_imm_8_32",@{typ "nat \<times> 8 word list"},var_w("imm",64),@{theory}),
                   itb([(eq(var_n"s",ln 1),llc([lw(106,8)],var("l",@{typ "8 word list"}))),
                        (eq(var_n"s",ln 4),llc([lw(104,8)],var("l",@{typ "8 word list"})))],lnl w8)))],
              @{context})),
          (call("instruction.Zret",@{typ instruction},var_w("v#21",64),@{theory}),
           ite(eq(var_w("v#21",64),lw(0,64)),ll[lw(195,8)],
               cs(call("e_imm16",@{typ "8 word list"},var_w("v#21",64),@{theory}),
                  [(lnl w8,lnl w8),
                   (var("l",@{typ "8 word list"}),llc([lw(194,8)],var("l",@{typ "8 word list"})))],
                  @{context}))),
          (call
             ("instruction.Zset",@{typ instruction},
              var("v#22",@{typ "Zcond \<times> bool \<times> Zrm"}),@{theory}),
           cs(var("v#22",@{typ "Zcond \<times> bool \<times> Zrm"}),
              [(tp[lc("Z_ALWAYS","Zcond",@{theory}),var_b"have_rex",var("rm",@{typ Zrm})],lnl w8),
               (tp[var("cond",@{typ Zcond}),var_b"have_rex",var("rm",@{typ Zrm})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[call("Zsize.Z8",@{typ Zsize},var_b"have_rex",@{theory}),var("rm",@{typ Zrm}),
                      lw(0,4),ll[lw(15,8)],cc[lw(9,4),mop(Cast w4,var("cond",@{typ Zcond}))]],
                   @{theory}))],@{context})),
          (call
             ("instruction.Zxadd",@{typ instruction},
              var("v#23",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
           cs(var("v#23",@{typ "Zsize \<times> Zrm \<times> Zreg"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var("r",@{typ Zreg})],
                call
                  ("e_rm_reg",@{typ "8 word list"},
                   tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),mop(Cast w4,var("r",@{typ Zreg})),
                      ll[lw(15,8)],lw(192,8)],@{theory}))],@{context})),
          (call
             ("instruction.Zxchg",@{typ instruction},
              var("v#24",@{typ "Zsize \<times> Zrm \<times> Zreg"}),@{theory}),
           cs(var("v#24",@{typ "Zsize \<times> Zrm \<times> Zreg"}),
              [(tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),var("reg",@{typ Zreg})],
                ite(bop(And,call("not_byte",HOLogic.boolT,var("sz",@{typ Zsize}),@{theory}),
                        bop(Or,eq(var("reg",@{typ Zreg}),lc("RAX","Zreg",@{theory})),
                            call("is_rax",HOLogic.boolT,var("rm",@{typ Zrm}),@{theory}))),
                    let'
                      (var_w("r",4),mop(Cast w4,var("reg",@{typ Zreg})),
                       let'
                         (tp[var("prefixes",@{typ "8 word list"}),var_w("v",8)],
                          call
                            ("e_opsize",@{typ "(8 word list) \<times> 8 word"},
                             tp[var("sz",@{typ Zsize}),
                                ite(bop(Bit,var_w("r",4),ln 3),lw(1,4),lw(0,4))],@{theory}),
                          ite(eq(var_w("v",8),lw(1,8)),
                              cc[var("prefixes",@{typ "8 word list"}),
                                 ll[cc[lw(18,5),ex(var_w("r",4),ln 2,ln 0,(Word_Lib.mk_wordT 3))]]],
                              lnl w8))),
                    call
                      ("e_rm_reg",@{typ "8 word list"},
                       tp[var("sz",@{typ Zsize}),var("rm",@{typ Zrm}),
                          mop(Cast w4,var("reg",@{typ Zreg})),lnl w8,lw(134,8)],@{theory})))],
              @{context}))],@{context})))
end
\<close>
termination readPrefix by lexicographic_order
end