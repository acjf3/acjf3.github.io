(* ARM.thy - generated by L3 - 27/10/2017 *)
theory ARM
imports "$ISABELLE_HOME/src/HOL/Word/Word" "L3_Lib"
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "L3.ML"

datatype Architecture = ARMv4 | ARMv4T | ARMv5T | ARMv5TE | ARMv6 | ARMv6K | ARMv6T2 | ARMv7_A |
  ARMv7_R

datatype Extensions = Extension_ThumbEE | Extension_Security | Extension_Multiprocessing |
  Extension_Virtualization | Extension_AdvanvedSIMD

record PSR =
  A :: bool
  C :: bool
  E :: bool
  F :: bool
  GE :: "4 word"
  I :: bool
  IT :: "8 word"
  J :: bool
  M :: "5 word"
  N :: bool
  Q :: bool
  T :: bool
  V :: bool
  Z :: bool
  psr'rst :: "4 word"

record CP14 = TEEHBR :: "32 word"

record SCTLR =
  A :: bool
  B :: bool
  BR :: bool
  C :: bool
  DZ :: bool
  EE :: bool
  FI :: bool
  I :: bool
  IE :: bool
  M :: bool
  NMFI :: bool
  RR :: bool
  SW :: bool
  TE :: bool
  U :: bool
  V :: bool
  VE :: bool
  Z :: bool
  sctlr'rst :: "14 word"

record HSCTLR =
  A :: bool
  C :: bool
  CP15BEN :: bool
  EE :: bool
  FI :: bool
  I :: bool
  M :: bool
  TE :: bool
  WXN :: bool
  hsctlr'rst :: "23 word"

record HSR = EC :: "6 word" IL :: bool ISS :: "25 word"

record SCR =
  AW :: bool
  EA :: bool
  FIQ :: bool
  FW :: bool
  HCE :: bool
  IRQ :: bool
  NS :: bool
  SCD :: bool
  SIF :: bool
  nET :: bool
  scr'rst :: "22 word"

record NSACR =
  NSASEDIS :: bool
  NSD32DIS :: bool
  NSTRCDIS :: bool
  RFR :: bool
  cp :: "14 word"
  nsacr'rst :: "14 word"

record HCR =
  AMO :: bool
  BSU :: "2 word"
  DC :: bool
  FB :: bool
  FMO :: bool
  IMO :: bool
  PTW :: bool
  SWIO :: bool
  TAC :: bool
  TGE :: bool
  TID :: "4 word"
  TIDCP :: bool
  TPC :: bool
  TPU :: bool
  TSC :: bool
  TSW :: bool
  TTLB :: bool
  TVM :: bool
  TWE :: bool
  TWI :: bool
  VA :: bool
  VF :: bool
  VI :: bool
  VM :: bool
  hcr'rst :: "4 word"

record CP15 =
  HCR :: HCR
  HSCTLR :: HSCTLR
  HSR :: HSR
  MVBAR :: "32 word"
  NSACR :: NSACR
  SCR :: SCR
  SCTLR :: SCTLR
  VBAR :: "32 word"

datatype InstrSet = InstrSet_ARM | InstrSet_Thumb | InstrSet_Jazelle | InstrSet_ThumbEE

datatype Encoding = Encoding_Thumb | Encoding_Thumb2 | Encoding_ARM

datatype RName = RName_0usr | RName_1usr | RName_2usr | RName_3usr | RName_4usr | RName_5usr |
  RName_6usr | RName_7usr | RName_8usr | RName_8fiq | RName_9usr | RName_9fiq | RName_10usr |
  RName_10fiq | RName_11usr | RName_11fiq | RName_12usr | RName_12fiq | RName_SPusr | RName_SPfiq |
  RName_SPirq | RName_SPsvc | RName_SPabt | RName_SPund | RName_SPmon | RName_SPhyp | RName_LRusr |
  RName_LRfiq | RName_LRirq | RName_LRsvc | RName_LRabt | RName_LRund | RName_LRmon | RName_PC

datatype SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX

datatype VFPExtension = NoVFP | VFPv2 | VFPv3 | VFPv4

record FPSCR =
  AHP :: bool
  C :: bool
  DN :: bool
  DZC :: bool
  DZE :: bool
  FZ :: bool
  IDC :: bool
  IDE :: bool
  IOC :: bool
  IOE :: bool
  IXC :: bool
  IXE :: bool
  N :: bool
  OFC :: bool
  OFE :: bool
  QC :: bool
  RMode :: "2 word"
  UFC :: bool
  UFE :: bool
  V :: bool
  Z :: bool
  fpscr'rst :: "10 word"

record FP = FPSCR :: FPSCR REG :: "5 word \<Rightarrow> 64 word"

datatype VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL

datatype offset1 = immediate_form1 "32 word" | register_form1 "4 word \<times> SRType \<times> nat"

datatype offset2 = immediate_form2 "32 word" | register_form2 "4 word"

datatype Hint =
    Breakpoint "32 word"
  | DataMemoryBarrier "4 word"
  | DataSynchronizationBarrier "4 word"
  | Debug "4 word"
  | InstructionSynchronizationBarrier "4 word"
  | PreloadData "bool \<times> bool \<times> 4 word \<times> offset1"
  | PreloadDataLiteral "bool \<times> 32 word"
  | PreloadInstruction "bool \<times> 4 word \<times> offset1"
  | SendEvent
  | WaitForEvent
  | WaitForInterrupt
  | Yield

datatype System =
    ChangeProcessorState
        "bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> 5 word option"
  | EnterxLeavex bool
  | ExceptionReturn
  | HypervisorCall "16 word"
  | MoveToBankedOrSpecialRegister "bool \<times> 5 word \<times> 4 word"
  | MoveToRegisterFromBankedOrSpecial "bool \<times> 5 word \<times> 4 word"
  | MoveToRegisterFromSpecial "bool \<times> 4 word"
  | MoveToSpecialFromImmediate "bool \<times> 32 word \<times> 4 word"
  | MoveToSpecialFromRegister "bool \<times> 4 word \<times> 4 word"
  | ReturnFromException "bool \<times> bool \<times> bool \<times> 4 word"
  | SecureMonitorCall "4 word"
  | Setend bool
  | StoreReturnState "bool \<times> bool \<times> bool \<times> 5 word"
  | SupervisorCall "32 word"

datatype Store =
    StoreByte "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreDual
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"
  | StoreExclusive "4 word \<times> 4 word \<times> 4 word \<times> 32 word"
  | StoreExclusiveByte "4 word \<times> 4 word \<times> 4 word"
  | StoreExclusiveDoubleword "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | StoreExclusiveHalf "4 word \<times> 4 word \<times> 4 word"
  | StoreHalf "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreHalfUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | StoreMultiple "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"
  | StoreMultipleUserRegisters "bool \<times> bool \<times> 4 word \<times> 16 word"
  | StoreUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreWord "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"

datatype Load =
    LoadByte
        "bool \<times>
         bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadByteLiteral "bool \<times> bool \<times> 4 word \<times> 32 word"
  | LoadByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadDual
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadDualLiteral "bool \<times> 4 word \<times> 4 word \<times> 32 word"
  | LoadExclusive "4 word \<times> 4 word \<times> 32 word"
  | LoadExclusiveByte "4 word \<times> 4 word"
  | LoadExclusiveDoubleword "4 word \<times> 4 word \<times> 4 word"
  | LoadExclusiveHalf "4 word \<times> 4 word"
  | LoadHalf
      "bool \<times>
       bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadHalfLiteral "bool \<times> bool \<times> 4 word \<times> 32 word"
  | LoadHalfUnprivileged
      "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadLiteral "bool \<times> 4 word \<times> 32 word"
  | LoadMultiple "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"
  | LoadMultipleExceptionReturn "bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word"
  | LoadMultipleUserRegisters "bool \<times> bool \<times> 4 word \<times> 15 word"
  | LoadSignedByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadWord "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"

datatype Media =
    BitFieldClearOrInsert "4 word \<times> 4 word \<times> nat \<times> nat"
  | BitFieldExtract "bool \<times> 4 word \<times> 4 word \<times> nat \<times> nat"
  | ByteReverse "4 word \<times> 4 word"
  | ByteReversePackedHalfword "4 word \<times> 4 word"
  | ByteReverseSignedHalfword "4 word \<times> 4 word"
  | ExtendByte "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | ExtendByte16 "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | ExtendHalfword "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | PackHalfword "SRType \<times> nat \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | ReverseBits "4 word \<times> 4 word"
  | Saturate "SRType \<times> nat \<times> nat \<times> bool \<times> 4 word \<times> 4 word"
  | Saturate16 "nat \<times> bool \<times> 4 word \<times> 4 word"
  | SaturatingAddSubtract "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SelectBytes "4 word \<times> 4 word \<times> 4 word"

datatype SIMD =
    SignedAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedHalvingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedHalvingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedSaturatingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedSaturatingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedHalvingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedHalvingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSaturatingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSaturatingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSumAbsoluteDifferences "4 word \<times> 4 word \<times> 4 word \<times> 4 word"

datatype Multiply =
    Multiply32 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyAccumulate "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyAccumulateAccumulate "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyLong
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplySubtract "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply32Accumulate
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply32Result "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply64Accumulate
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16x32Multiply32Accumulate
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16x32Multiply32Result "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMostSignificantMultiply
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMostSignificantMultiplySubtract
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMultiplyDual
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMultiplyLongDual
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"

datatype Data =
    AddSub "bool \<times> 4 word \<times> 4 word \<times> 12 word"
  | ArithLogicImmediate "4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 12 word"
  | CountLeadingZeroes "4 word \<times> 4 word"
  | Move "bool \<times> bool \<times> 4 word \<times> 12 word"
  | MoveHalfword "bool \<times> 4 word \<times> 16 word"
  | Register
      "4 word \<times>
       bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"
  | RegisterShiftedRegister
      "4 word \<times>
       bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"
  | ShiftImmediate "bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"
  | ShiftRegister
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"
  | TestCompareImmediate "2 word \<times> 4 word \<times> 12 word"
  | TestCompareRegister "2 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"

datatype Branch =
    BranchExchange "4 word"
  | BranchLinkExchangeImmediate "InstrSet \<times> 32 word"
  | BranchLinkExchangeRegister "4 word"
  | BranchTarget "32 word"
  | CheckArray "4 word \<times> 4 word"
  | CompareBranch "bool \<times> 4 word \<times> 32 word"
  | HandlerBranchLink "bool \<times> 32 word"
  | HandlerBranchLinkParameter "32 word \<times> 32 word"
  | HandlerBranchParameter "32 word \<times> 32 word"
  | TableBranchByte "bool \<times> 4 word \<times> 4 word"

datatype VFP =
    vabs "bool \<times> 5 word \<times> 5 word"
  | vadd "bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vcmp "bool \<times> 5 word \<times> 5 word option"
  | vcvt_float "bool \<times> 5 word \<times> 5 word"
  | vcvt_from_integer "bool \<times> bool \<times> 5 word \<times> 5 word"
  | vcvt_to_integer "bool \<times> bool \<times> bool \<times> 5 word \<times> 5 word"
  | vdiv "bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vfma_vfms "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vfnma_vfnms "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vldm "bool \<times> bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"
  | vldr "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"
  | vmla_vmls "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vmov "bool \<times> 5 word \<times> 5 word"
  | vmov_double "bool \<times> 4 word \<times> 4 word \<times> 5 word"
  | vmov_imm "bool \<times> 5 word \<times> 64 word"
  | vmov_single "bool \<times> 4 word \<times> 5 word"
  | vmov_two_singles "bool \<times> 4 word \<times> 4 word \<times> 5 word"
  | vmrs "4 word"
  | vmsr "4 word"
  | vmul "bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vneg "bool \<times> 5 word \<times> 5 word"
  | vneg_mul "bool \<times> VFPNegMul \<times> 5 word \<times> 5 word \<times> 5 word"
  | vsqrt "bool \<times> 5 word \<times> 5 word"
  | vstm "bool \<times> bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"
  | vstr "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"
  | vsub "bool \<times> 5 word \<times> 5 word \<times> 5 word"

datatype instruction =
    Branch Branch
  | ClearExclusive
  | Data Data
  | Divide "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | Hint Hint
  | IfThen "4 word \<times> 4 word"
  | Load Load
  | Media Media
  | Multiply Multiply
  | NoOperation
  | SIMD SIMD
  | Store Store
  | Swap "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | System System
  | Undefined "32 word"
  | VFP VFP

datatype MachineCode =
    ARM "32 word"
  | BadCode string
  | Thumb "16 word"
  | Thumb2 "16 word \<times> 16 word"
  | ThumbEE "16 word"

datatype exception =
    ASSERT string
  | AlignmentFault "32 word"
  | IMPLEMENTATION_DEFINED string
  | NoException
  | UNPREDICTABLE string
  | VFP_EXCEPTION string

record state =
  Architecture :: Architecture
  CP14 :: CP14
  CP15 :: CP15
  CPSR :: PSR
  CurrentCondition :: "4 word"
  ELR_hyp :: "32 word"
  Encoding :: Encoding
  Extensions :: "Extensions set"
  FP :: FP
  MEM :: "32 word \<Rightarrow> 8 word"
  REG :: "RName \<Rightarrow> 32 word"
  SPSR_abt :: PSR
  SPSR_fiq :: PSR
  SPSR_hyp :: PSR
  SPSR_irq :: PSR
  SPSR_mon :: PSR
  SPSR_svc :: PSR
  SPSR_und :: PSR
  VFPExtension :: VFPExtension
  exception :: exception
  undefined :: bool

fun nat_to_Architecture :: "nat \<Rightarrow> Architecture" where
  "nat_to_Architecture x =
   (if x = 0 then ARM.ARMv4
    else if x = 1 then ARM.ARMv4T
    else if x = 2 then ARM.ARMv5T
    else if x = 3 then ARM.ARMv5TE
    else if x = 4 then ARM.ARMv6
    else if x = 5 then ARM.ARMv6K
    else if x = 6 then ARM.ARMv6T2
    else if x = 7 then ARM.ARMv7_A
    else if x = 8 then ARM.ARMv7_R
    else HOL.undefined)"

fun nat_to_Extensions :: "nat \<Rightarrow> Extensions" where
  "nat_to_Extensions x =
   (if x = 0 then ARM.Extension_ThumbEE
    else if x = 1 then ARM.Extension_Security
    else if x = 2 then ARM.Extension_Multiprocessing
    else if x = 3 then ARM.Extension_Virtualization
    else if x = 4 then ARM.Extension_AdvanvedSIMD
    else HOL.undefined)"

fun nat_to_InstrSet :: "nat \<Rightarrow> InstrSet" where
  "nat_to_InstrSet x =
   (if x = 0 then ARM.InstrSet_ARM
    else if x = 1 then ARM.InstrSet_Thumb
    else if x = 2 then ARM.InstrSet_Jazelle
    else if x = 3 then ARM.InstrSet_ThumbEE
    else HOL.undefined)"

fun nat_to_Encoding :: "nat \<Rightarrow> Encoding" where
  "nat_to_Encoding x =
   (if x = 0 then ARM.Encoding_Thumb
    else if x = 1 then ARM.Encoding_Thumb2
    else if x = 2 then ARM.Encoding_ARM
    else HOL.undefined)"

fun nat_to_RName :: "nat \<Rightarrow> RName" where
  "nat_to_RName x =
   (if x = 0 then ARM.RName_0usr
    else if x = 1 then ARM.RName_1usr
    else if x = 2 then ARM.RName_2usr
    else if x = 3 then ARM.RName_3usr
    else if x = 4 then ARM.RName_4usr
    else if x = 5 then ARM.RName_5usr
    else if x = 6 then ARM.RName_6usr
    else if x = 7 then ARM.RName_7usr
    else if x = 8 then ARM.RName_8usr
    else if x = 9 then ARM.RName_8fiq
    else if x = 10 then ARM.RName_9usr
    else if x = 11 then ARM.RName_9fiq
    else if x = 12 then ARM.RName_10usr
    else if x = 13 then ARM.RName_10fiq
    else if x = 14 then ARM.RName_11usr
    else if x = 15 then ARM.RName_11fiq
    else if x = 16 then ARM.RName_12usr
    else if x = 17 then ARM.RName_12fiq
    else if x = 18 then ARM.RName_SPusr
    else if x = 19 then ARM.RName_SPfiq
    else if x = 20 then ARM.RName_SPirq
    else if x = 21 then ARM.RName_SPsvc
    else if x = 22 then ARM.RName_SPabt
    else if x = 23 then ARM.RName_SPund
    else if x = 24 then ARM.RName_SPmon
    else if x = 25 then ARM.RName_SPhyp
    else if x = 26 then ARM.RName_LRusr
    else if x = 27 then ARM.RName_LRfiq
    else if x = 28 then ARM.RName_LRirq
    else if x = 29 then ARM.RName_LRsvc
    else if x = 30 then ARM.RName_LRabt
    else if x = 31 then ARM.RName_LRund
    else if x = 32 then ARM.RName_LRmon
    else if x = 33 then ARM.RName_PC
    else HOL.undefined)"

fun nat_to_SRType :: "nat \<Rightarrow> SRType" where
  "nat_to_SRType x =
   (if x = 0 then ARM.SRType_LSL
    else if x = 1 then ARM.SRType_LSR
    else if x = 2 then ARM.SRType_ASR
    else if x = 3 then ARM.SRType_ROR
    else if x = 4 then ARM.SRType_RRX
    else HOL.undefined)"

fun nat_to_VFPExtension :: "nat \<Rightarrow> VFPExtension" where
  "nat_to_VFPExtension x =
   (if x = 0 then ARM.NoVFP
    else if x = 1 then ARM.VFPv2
    else if x = 2 then ARM.VFPv3
    else if x = 3 then ARM.VFPv4
    else HOL.undefined)"

fun nat_to_VFPNegMul :: "nat \<Rightarrow> VFPNegMul" where
  "nat_to_VFPNegMul x =
   (if x = 0 then ARM.VFPNegMul_VNMLA
    else if x = 1 then ARM.VFPNegMul_VNMLS
    else if x = 2 then ARM.VFPNegMul_VNMUL
    else HOL.undefined)"

fun Architecture_to_nat :: "Architecture \<Rightarrow> nat" where
  "Architecture_to_nat x =
   (case x of
       ARM.ARMv4 => 0
     | ARM.ARMv4T => 1
     | ARM.ARMv5T => 2
     | ARM.ARMv5TE => 3
     | ARM.ARMv6 => 4
     | ARM.ARMv6K => 5
     | ARM.ARMv6T2 => 6
     | ARM.ARMv7_A => 7
     | ARM.ARMv7_R => 8)"

fun Extensions_to_nat :: "Extensions \<Rightarrow> nat" where
  "Extensions_to_nat x =
   (case x of
       ARM.Extension_ThumbEE => 0
     | ARM.Extension_Security => 1
     | ARM.Extension_Multiprocessing => 2
     | ARM.Extension_Virtualization => 3
     | ARM.Extension_AdvanvedSIMD => 4)"

fun InstrSet_to_nat :: "InstrSet \<Rightarrow> nat" where
  "InstrSet_to_nat x =
   (case x of
       ARM.InstrSet_ARM => 0
     | ARM.InstrSet_Thumb => 1
     | ARM.InstrSet_Jazelle => 2
     | ARM.InstrSet_ThumbEE => 3)"

fun Encoding_to_nat :: "Encoding \<Rightarrow> nat" where
  "Encoding_to_nat x =
   (case x of
       ARM.Encoding_Thumb => 0 | ARM.Encoding_Thumb2 => 1 | ARM.Encoding_ARM => 2)"

fun RName_to_nat :: "RName \<Rightarrow> nat" where
  "RName_to_nat x =
   (case x of
       ARM.RName_0usr => 0
     | ARM.RName_1usr => 1
     | ARM.RName_2usr => 2
     | ARM.RName_3usr => 3
     | ARM.RName_4usr => 4
     | ARM.RName_5usr => 5
     | ARM.RName_6usr => 6
     | ARM.RName_7usr => 7
     | ARM.RName_8usr => 8
     | ARM.RName_8fiq => 9
     | ARM.RName_9usr => 10
     | ARM.RName_9fiq => 11
     | ARM.RName_10usr => 12
     | ARM.RName_10fiq => 13
     | ARM.RName_11usr => 14
     | ARM.RName_11fiq => 15
     | ARM.RName_12usr => 16
     | ARM.RName_12fiq => 17
     | ARM.RName_SPusr => 18
     | ARM.RName_SPfiq => 19
     | ARM.RName_SPirq => 20
     | ARM.RName_SPsvc => 21
     | ARM.RName_SPabt => 22
     | ARM.RName_SPund => 23
     | ARM.RName_SPmon => 24
     | ARM.RName_SPhyp => 25
     | ARM.RName_LRusr => 26
     | ARM.RName_LRfiq => 27
     | ARM.RName_LRirq => 28
     | ARM.RName_LRsvc => 29
     | ARM.RName_LRabt => 30
     | ARM.RName_LRund => 31
     | ARM.RName_LRmon => 32
     | ARM.RName_PC => 33)"

fun SRType_to_nat :: "SRType \<Rightarrow> nat" where
  "SRType_to_nat x =
   (case x of
       ARM.SRType_LSL => 0
     | ARM.SRType_LSR => 1
     | ARM.SRType_ASR => 2
     | ARM.SRType_ROR => 3
     | ARM.SRType_RRX => 4)"

fun VFPExtension_to_nat :: "VFPExtension \<Rightarrow> nat" where
  "VFPExtension_to_nat x =
   (case x of
       ARM.NoVFP => 0 | ARM.VFPv2 => 1 | ARM.VFPv3 => 2 | ARM.VFPv4 => 3)"

fun VFPNegMul_to_nat :: "VFPNegMul \<Rightarrow> nat" where
  "VFPNegMul_to_nat x =
   (case x of
       ARM.VFPNegMul_VNMLA => 0 | ARM.VFPNegMul_VNMLS => 1 | ARM.VFPNegMul_VNMUL => 2)"

fun Architecture_to_string :: "Architecture \<Rightarrow> string" where
  "Architecture_to_string x =
   (case x of
       ARM.ARMv4 => ''ARMv4''
     | ARM.ARMv4T => ''ARMv4T''
     | ARM.ARMv5T => ''ARMv5T''
     | ARM.ARMv5TE => ''ARMv5TE''
     | ARM.ARMv6 => ''ARMv6''
     | ARM.ARMv6K => ''ARMv6K''
     | ARM.ARMv6T2 => ''ARMv6T2''
     | ARM.ARMv7_A => ''ARMv7_A''
     | ARM.ARMv7_R => ''ARMv7_R'')"

fun Extensions_to_string :: "Extensions \<Rightarrow> string" where
  "Extensions_to_string x =
   (case x of
       ARM.Extension_ThumbEE => ''Extension_ThumbEE''
     | ARM.Extension_Security => ''Extension_Security''
     | ARM.Extension_Multiprocessing => ''Extension_Multiprocessing''
     | ARM.Extension_Virtualization => ''Extension_Virtualization''
     | ARM.Extension_AdvanvedSIMD => ''Extension_AdvanvedSIMD'')"

fun InstrSet_to_string :: "InstrSet \<Rightarrow> string" where
  "InstrSet_to_string x =
   (case x of
       ARM.InstrSet_ARM => ''InstrSet_ARM''
     | ARM.InstrSet_Thumb => ''InstrSet_Thumb''
     | ARM.InstrSet_Jazelle => ''InstrSet_Jazelle''
     | ARM.InstrSet_ThumbEE => ''InstrSet_ThumbEE'')"

fun Encoding_to_string :: "Encoding \<Rightarrow> string" where
  "Encoding_to_string x =
   (case x of
       ARM.Encoding_Thumb => ''Encoding_Thumb''
     | ARM.Encoding_Thumb2 => ''Encoding_Thumb2''
     | ARM.Encoding_ARM => ''Encoding_ARM'')"

fun RName_to_string :: "RName \<Rightarrow> string" where
  "RName_to_string x =
   (case x of
       ARM.RName_0usr => ''RName_0usr''
     | ARM.RName_1usr => ''RName_1usr''
     | ARM.RName_2usr => ''RName_2usr''
     | ARM.RName_3usr => ''RName_3usr''
     | ARM.RName_4usr => ''RName_4usr''
     | ARM.RName_5usr => ''RName_5usr''
     | ARM.RName_6usr => ''RName_6usr''
     | ARM.RName_7usr => ''RName_7usr''
     | ARM.RName_8usr => ''RName_8usr''
     | ARM.RName_8fiq => ''RName_8fiq''
     | ARM.RName_9usr => ''RName_9usr''
     | ARM.RName_9fiq => ''RName_9fiq''
     | ARM.RName_10usr => ''RName_10usr''
     | ARM.RName_10fiq => ''RName_10fiq''
     | ARM.RName_11usr => ''RName_11usr''
     | ARM.RName_11fiq => ''RName_11fiq''
     | ARM.RName_12usr => ''RName_12usr''
     | ARM.RName_12fiq => ''RName_12fiq''
     | ARM.RName_SPusr => ''RName_SPusr''
     | ARM.RName_SPfiq => ''RName_SPfiq''
     | ARM.RName_SPirq => ''RName_SPirq''
     | ARM.RName_SPsvc => ''RName_SPsvc''
     | ARM.RName_SPabt => ''RName_SPabt''
     | ARM.RName_SPund => ''RName_SPund''
     | ARM.RName_SPmon => ''RName_SPmon''
     | ARM.RName_SPhyp => ''RName_SPhyp''
     | ARM.RName_LRusr => ''RName_LRusr''
     | ARM.RName_LRfiq => ''RName_LRfiq''
     | ARM.RName_LRirq => ''RName_LRirq''
     | ARM.RName_LRsvc => ''RName_LRsvc''
     | ARM.RName_LRabt => ''RName_LRabt''
     | ARM.RName_LRund => ''RName_LRund''
     | ARM.RName_LRmon => ''RName_LRmon''
     | ARM.RName_PC => ''RName_PC'')"

fun SRType_to_string :: "SRType \<Rightarrow> string" where
  "SRType_to_string x =
   (case x of
       ARM.SRType_LSL => ''SRType_LSL''
     | ARM.SRType_LSR => ''SRType_LSR''
     | ARM.SRType_ASR => ''SRType_ASR''
     | ARM.SRType_ROR => ''SRType_ROR''
     | ARM.SRType_RRX => ''SRType_RRX'')"

fun VFPExtension_to_string :: "VFPExtension \<Rightarrow> string" where
  "VFPExtension_to_string x =
   (case x of
       ARM.NoVFP => ''NoVFP''
     | ARM.VFPv2 => ''VFPv2''
     | ARM.VFPv3 => ''VFPv3''
     | ARM.VFPv4 => ''VFPv4'')"

fun VFPNegMul_to_string :: "VFPNegMul \<Rightarrow> string" where
  "VFPNegMul_to_string x =
   (case x of
       ARM.VFPNegMul_VNMLA => ''VFPNegMul_VNMLA''
     | ARM.VFPNegMul_VNMLS => ''VFPNegMul_VNMLS''
     | ARM.VFPNegMul_VNMUL => ''VFPNegMul_VNMUL'')"

fun string_to_Architecture :: "string \<Rightarrow> Architecture" where
  "string_to_Architecture x =
   (if x = ''ARMv4'' then ARM.ARMv4
    else if x = ''ARMv4T'' then ARM.ARMv4T
    else if x = ''ARMv5T'' then ARM.ARMv5T
    else if x = ''ARMv5TE'' then ARM.ARMv5TE
    else if x = ''ARMv6'' then ARM.ARMv6
    else if x = ''ARMv6K'' then ARM.ARMv6K
    else if x = ''ARMv6T2'' then ARM.ARMv6T2
    else if x = ''ARMv7_A'' then ARM.ARMv7_A
    else if x = ''ARMv7_R'' then ARM.ARMv7_R
    else HOL.undefined)"

fun string_to_Extensions :: "string \<Rightarrow> Extensions" where
  "string_to_Extensions x =
   (if x = ''Extension_ThumbEE'' then ARM.Extension_ThumbEE
    else if x = ''Extension_Security'' then ARM.Extension_Security
    else if x = ''Extension_Multiprocessing'' then ARM.Extension_Multiprocessing
    else if x = ''Extension_Virtualization'' then ARM.Extension_Virtualization
    else if x = ''Extension_AdvanvedSIMD'' then ARM.Extension_AdvanvedSIMD
    else HOL.undefined)"

fun string_to_InstrSet :: "string \<Rightarrow> InstrSet" where
  "string_to_InstrSet x =
   (if x = ''InstrSet_ARM'' then ARM.InstrSet_ARM
    else if x = ''InstrSet_Thumb'' then ARM.InstrSet_Thumb
    else if x = ''InstrSet_Jazelle'' then ARM.InstrSet_Jazelle
    else if x = ''InstrSet_ThumbEE'' then ARM.InstrSet_ThumbEE
    else HOL.undefined)"

fun string_to_Encoding :: "string \<Rightarrow> Encoding" where
  "string_to_Encoding x =
   (if x = ''Encoding_Thumb'' then ARM.Encoding_Thumb
    else if x = ''Encoding_Thumb2'' then ARM.Encoding_Thumb2
    else if x = ''Encoding_ARM'' then ARM.Encoding_ARM
    else HOL.undefined)"

fun string_to_RName :: "string \<Rightarrow> RName" where
  "string_to_RName x =
   (if x = ''RName_0usr'' then ARM.RName_0usr
    else if x = ''RName_1usr'' then ARM.RName_1usr
    else if x = ''RName_2usr'' then ARM.RName_2usr
    else if x = ''RName_3usr'' then ARM.RName_3usr
    else if x = ''RName_4usr'' then ARM.RName_4usr
    else if x = ''RName_5usr'' then ARM.RName_5usr
    else if x = ''RName_6usr'' then ARM.RName_6usr
    else if x = ''RName_7usr'' then ARM.RName_7usr
    else if x = ''RName_8usr'' then ARM.RName_8usr
    else if x = ''RName_8fiq'' then ARM.RName_8fiq
    else if x = ''RName_9usr'' then ARM.RName_9usr
    else if x = ''RName_9fiq'' then ARM.RName_9fiq
    else if x = ''RName_10usr'' then ARM.RName_10usr
    else if x = ''RName_10fiq'' then ARM.RName_10fiq
    else if x = ''RName_11usr'' then ARM.RName_11usr
    else if x = ''RName_11fiq'' then ARM.RName_11fiq
    else if x = ''RName_12usr'' then ARM.RName_12usr
    else if x = ''RName_12fiq'' then ARM.RName_12fiq
    else if x = ''RName_SPusr'' then ARM.RName_SPusr
    else if x = ''RName_SPfiq'' then ARM.RName_SPfiq
    else if x = ''RName_SPirq'' then ARM.RName_SPirq
    else if x = ''RName_SPsvc'' then ARM.RName_SPsvc
    else if x = ''RName_SPabt'' then ARM.RName_SPabt
    else if x = ''RName_SPund'' then ARM.RName_SPund
    else if x = ''RName_SPmon'' then ARM.RName_SPmon
    else if x = ''RName_SPhyp'' then ARM.RName_SPhyp
    else if x = ''RName_LRusr'' then ARM.RName_LRusr
    else if x = ''RName_LRfiq'' then ARM.RName_LRfiq
    else if x = ''RName_LRirq'' then ARM.RName_LRirq
    else if x = ''RName_LRsvc'' then ARM.RName_LRsvc
    else if x = ''RName_LRabt'' then ARM.RName_LRabt
    else if x = ''RName_LRund'' then ARM.RName_LRund
    else if x = ''RName_LRmon'' then ARM.RName_LRmon
    else if x = ''RName_PC'' then ARM.RName_PC
    else HOL.undefined)"

fun string_to_SRType :: "string \<Rightarrow> SRType" where
  "string_to_SRType x =
   (if x = ''SRType_LSL'' then ARM.SRType_LSL
    else if x = ''SRType_LSR'' then ARM.SRType_LSR
    else if x = ''SRType_ASR'' then ARM.SRType_ASR
    else if x = ''SRType_ROR'' then ARM.SRType_ROR
    else if x = ''SRType_RRX'' then ARM.SRType_RRX
    else HOL.undefined)"

fun string_to_VFPExtension :: "string \<Rightarrow> VFPExtension" where
  "string_to_VFPExtension x =
   (if x = ''NoVFP'' then ARM.NoVFP
    else if x = ''VFPv2'' then ARM.VFPv2
    else if x = ''VFPv3'' then ARM.VFPv3
    else if x = ''VFPv4'' then ARM.VFPv4
    else HOL.undefined)"

fun string_to_VFPNegMul :: "string \<Rightarrow> VFPNegMul" where
  "string_to_VFPNegMul x =
   (if x = ''VFPNegMul_VNMLA'' then ARM.VFPNegMul_VNMLA
    else if x = ''VFPNegMul_VNMLS'' then ARM.VFPNegMul_VNMLS
    else if x = ''VFPNegMul_VNMUL'' then ARM.VFPNegMul_VNMUL
    else HOL.undefined)"

fun boolify'3 :: "3 word \<Rightarrow> (bool \<times> bool \<times> bool)" where
  "boolify'3 w =
   (case to_bl w of
     [b0,b1,b2] \<Rightarrow>
     (b0,b1,b2))"

fun boolify'4 :: "4 word \<Rightarrow> (bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'4 w =
   (case to_bl w of
     [b0,b1,b2,b3] \<Rightarrow>
     (b0,b1,b2,b3))"

fun boolify'8 :: "8 word \<Rightarrow>
  (bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'8 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7))"

fun boolify'16 :: "16 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'16 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15))"

fun boolify'28 :: "28 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'28 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27))"

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("raise'exception",
   close
     (var("e",@{typ exception}),
      close
        (var("state",qTy),
         tp[lx(@{typ 'a}),
            ite(eq(call("state.exception",@{typ exception},var("state",qTy),@{theory}),
                   Term.Const(@{const_name "NoException"},@{typ exception})),
                rupd("state.exception",tp[var("state",qTy),var("e",@{typ exception})],@{theory}),
                var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ArchVersion",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         cs(call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
            [(lc("ARMv4","Architecture",@{theory}),ln 4),
             (lc("ARMv4T","Architecture",@{theory}),ln 4),
             (lc("ARMv5T","Architecture",@{theory}),ln 5),
             (lc("ARMv5TE","Architecture",@{theory}),ln 5),
             (lc("ARMv6","Architecture",@{theory}),ln 6),
             (lc("ARMv6K","Architecture",@{theory}),ln 6),
             (lc("ARMv6T2","Architecture",@{theory}),ln 6),
             (lc("ARMv7_A","Architecture",@{theory}),ln 7),
             (lc("ARMv7_R","Architecture",@{theory}),ln 7)],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveDSPSupport",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         mop(Not,
             bop(In,call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                 sl[lc("ARMv4","Architecture",@{theory}),lc("ARMv4T","Architecture",@{theory}),
                    lc("ARMv5T","Architecture",@{theory})])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveThumb2",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(In,call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
             sl[lc("ARMv6T2","Architecture",@{theory}),lc("ARMv7_A","Architecture",@{theory}),
                lc("ARMv7_R","Architecture",@{theory})]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveThumbEE",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(Or,
             eq(call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                lc("ARMv7_A","Architecture",@{theory})),
             bop(And,
                 eq(call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                    lc("ARMv7_R","Architecture",@{theory})),
                 bop(In,lc("Extension_ThumbEE","Extensions",@{theory}),
                     call("state.Extensions",@{typ "Extensions set"},var("state",qTy),@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveMPExt",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(And,
             bop(Ge,
                 apply
                   (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                    var("state",qTy)),ln 7),
             bop(In,lc("Extension_Multiprocessing","Extensions",@{theory}),
                 call("state.Extensions",@{typ "Extensions set"},var("state",qTy),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveSecurityExt",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(And,
             bop(In,call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                 sl[lc("ARMv6K","Architecture",@{theory}),lc("ARMv7_A","Architecture",@{theory})]),
             bop(In,lc("Extension_Security","Extensions",@{theory}),
                 call("state.Extensions",@{typ "Extensions set"},var("state",qTy),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HaveVirtExt",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(And,
             bop(Ge,
                 apply
                   (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                    var("state",qTy)),ln 7),
             bop(In,lc("Extension_Virtualization","Extensions",@{theory}),
                 call("state.Extensions",@{typ "Extensions set"},var("state",qTy),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'PSR",
   close
     (var_w("x",32),
      record
        ("PSR",
         [bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 29),bop(Bit,var_w("x",32),ln 9),
          bop(Bit,var_w("x",32),ln 6),ex(var_w("x",32),ln 19,ln 16,w4),bop(Bit,var_w("x",32),ln 7),
          cc[ex(var_w("x",32),ln 15,ln 10,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 26,ln 25,(Word_Lib.mk_wordT 2))],bop(Bit,var_w("x",32),ln 24),
          ex(var_w("x",32),ln 4,ln 0,(Word_Lib.mk_wordT 5)),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 27),bop(Bit,var_w("x",32),ln 5),bop(Bit,var_w("x",32),ln 28),
          bop(Bit,var_w("x",32),ln 30),ex(var_w("x",32),ln 23,ln 20,w4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'PSR",
   close
     (var("x",@{typ PSR}),
      let'
        (var_w("IT",8),call("PSR.IT",w8,var("x",@{typ PSR}),@{theory}),
         cc[mop(Cast w1,call("PSR.N",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.Z",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.C",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.V",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.Q",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            ex(var_w("IT",8),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("PSR.J",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            call("PSR.psr'rst",w4,var("x",@{typ PSR}),@{theory}),
            call("PSR.GE",w4,var("x",@{typ PSR}),@{theory}),
            ex(var_w("IT",8),ln 7,ln 2,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("PSR.E",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.A",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.I",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.F",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.T",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            call("PSR.M",(Word_Lib.mk_wordT 5),var("x",@{typ PSR}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'PSR",
   close(tp[var_a w32,var("x",@{typ PSR})],call("reg'PSR",w32,var("x",@{typ PSR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'PSR",
   close(tp[var_a @{typ PSR},var_w("x",32)],call("rec'PSR",@{typ PSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SCTLR",
   close
     (var_w("x",32),
      record
        ("SCTLR",
         [bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 17),
          bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 19),bop(Bit,var_w("x",32),ln 25),
          bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 12),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 27),bop(Bit,var_w("x",32),ln 14),
          bop(Bit,var_w("x",32),ln 10),bop(Bit,var_w("x",32),ln 30),bop(Bit,var_w("x",32),ln 22),
          bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 24),bop(Bit,var_w("x",32),ln 11),
          cc[ex(var_w("x",32),ln 6,ln 3,w4),ex(var_w("x",32),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 16,ln 15,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 18,ln 18,w1),
             ex(var_w("x",32),ln 20,ln 20,w1),ex(var_w("x",32),ln 23,ln 23,w1),
             ex(var_w("x",32),ln 26,ln 26,w1),ex(var_w("x",32),ln 29,ln 28,(Word_Lib.mk_wordT 2))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SCTLR",
   close
     (var("x",@{typ SCTLR}),
      let'
        (var_w("sctlr'rst",14),
         call("SCTLR.sctlr'rst",(Word_Lib.mk_wordT 14),var("x",@{typ SCTLR}),@{theory}),
         cc[mop(Cast w1,call("SCTLR.IE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.TE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.NMFI",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 2,ln 2,w1),
            mop(Cast w1,call("SCTLR.EE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.VE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 3,ln 3,w1),
            mop(Cast w1,call("SCTLR.U",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.FI",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 4,ln 4,w1),
            mop(Cast w1,call("SCTLR.DZ",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 5,ln 5,w1),
            mop(Cast w1,call("SCTLR.BR",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.RR",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.V",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.I",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.Z",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.SW",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.B",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 13,ln 10,w4),
            mop(Cast w1,call("SCTLR.C",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.A",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.M",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SCTLR",
   close(tp[var_a w32,var("x",@{typ SCTLR})],call("reg'SCTLR",w32,var("x",@{typ SCTLR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SCTLR",
   close
     (tp[var_a @{typ SCTLR},var_w("x",32)],call("rec'SCTLR",@{typ SCTLR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HSCTLR",
   close
     (var_w("x",32),
      record
        ("HSCTLR",
         [bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 5),
          bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 12),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 30),bop(Bit,var_w("x",32),ln 19),
          cc[ex(var_w("x",32),ln 4,ln 3,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 11,ln 6,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 18,ln 13,(Word_Lib.mk_wordT 6)),ex(var_w("x",32),ln 20,ln 20,w1),
             ex(var_w("x",32),ln 24,ln 22,(Word_Lib.mk_wordT 3)),ex(var_w("x",32),ln 29,ln 26,w4),
             ex(var_w("x",32),ln 31,ln 31,w1)]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HSCTLR",
   close
     (var("x",@{typ HSCTLR}),
      let'
        (var_w("hsctlr'rst",23),
         call("HSCTLR.hsctlr'rst",(Word_Lib.mk_wordT 23),var("x",@{typ HSCTLR}),@{theory}),
         cc[ex(var_w("hsctlr'rst",23),ln 0,ln 0,w1),
            mop(Cast w1,call("HSCTLR.TE",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 4,ln 1,w4),
            mop(Cast w1,call("HSCTLR.EE",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 7,ln 5,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("HSCTLR.FI",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 8,ln 8,w1),
            mop(Cast w1,call("HSCTLR.WXN",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 14,ln 9,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("HSCTLR.I",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 20,ln 15,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("HSCTLR.CP15BEN",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 22,ln 21,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("HSCTLR.C",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            mop(Cast w1,call("HSCTLR.A",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            mop(Cast w1,call("HSCTLR.M",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HSCTLR",
   close
     (tp[var_a w32,var("x",@{typ HSCTLR})],call("reg'HSCTLR",w32,var("x",@{typ HSCTLR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HSCTLR",
   close
     (tp[var_a @{typ HSCTLR},var_w("x",32)],call("rec'HSCTLR",@{typ HSCTLR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HSR",
   close
     (var_w("x",32),
      record
        ("HSR",
         [ex(var_w("x",32),ln 31,ln 26,(Word_Lib.mk_wordT 6)),bop(Bit,var_w("x",32),ln 25),
          ex(var_w("x",32),ln 24,ln 0,(Word_Lib.mk_wordT 25))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HSR",
   close
     (var("x",@{typ HSR}),
      cc[call("HSR.EC",(Word_Lib.mk_wordT 6),var("x",@{typ HSR}),@{theory}),
         mop(Cast w1,call("HSR.IL",HOLogic.boolT,var("x",@{typ HSR}),@{theory})),
         call("HSR.ISS",(Word_Lib.mk_wordT 25),var("x",@{typ HSR}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HSR",
   close(tp[var_a w32,var("x",@{typ HSR})],call("reg'HSR",w32,var("x",@{typ HSR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HSR",
   close(tp[var_a @{typ HSR},var_w("x",32)],call("rec'HSR",@{typ HSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SCR",
   close
     (var_w("x",32),
      record
        ("SCR",
         [bop(Bit,var_w("x",32),ln 5),bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 2),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 9),
          bop(Bit,var_w("x",32),ln 6),ex(var_w("x",32),ln 31,ln 10,(Word_Lib.mk_wordT 22))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SCR",
   close
     (var("x",@{typ SCR}),
      cc[call("SCR.scr'rst",(Word_Lib.mk_wordT 22),var("x",@{typ SCR}),@{theory}),
         mop(Cast w1,call("SCR.SIF",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.HCE",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.SCD",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.nET",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.AW",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.FW",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.EA",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.FIQ",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.IRQ",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.NS",HOLogic.boolT,var("x",@{typ SCR}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SCR",
   close(tp[var_a w32,var("x",@{typ SCR})],call("reg'SCR",w32,var("x",@{typ SCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SCR",
   close(tp[var_a @{typ SCR},var_w("x",32)],call("rec'SCR",@{typ SCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'NSACR",
   close
     (var_w("x",32),
      record
        ("NSACR",
         [bop(Bit,var_w("x",32),ln 15),bop(Bit,var_w("x",32),ln 14),bop(Bit,var_w("x",32),ln 20),
          bop(Bit,var_w("x",32),ln 19),ex(var_w("x",32),ln 13,ln 0,(Word_Lib.mk_wordT 14)),
          cc[ex(var_w("x",32),ln 18,ln 16,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",32),ln 31,ln 21,(Word_Lib.mk_wordT 11))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'NSACR",
   close
     (var("x",@{typ NSACR}),
      let'
        (var_w("nsacr'rst",14),
         call("NSACR.nsacr'rst",(Word_Lib.mk_wordT 14),var("x",@{typ NSACR}),@{theory}),
         cc[ex(var_w("nsacr'rst",14),ln 10,ln 0,(Word_Lib.mk_wordT 11)),
            mop(Cast w1,call("NSACR.NSTRCDIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            mop(Cast w1,call("NSACR.RFR",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            ex(var_w("nsacr'rst",14),ln 13,ln 11,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("NSACR.NSASEDIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            mop(Cast w1,call("NSACR.NSD32DIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            call("NSACR.cp",(Word_Lib.mk_wordT 14),var("x",@{typ NSACR}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'NSACR",
   close(tp[var_a w32,var("x",@{typ NSACR})],call("reg'NSACR",w32,var("x",@{typ NSACR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'NSACR",
   close
     (tp[var_a @{typ NSACR},var_w("x",32)],call("rec'NSACR",@{typ NSACR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HCR",
   close
     (var_w("x",32),
      record
        ("HCR",
         [bop(Bit,var_w("x",32),ln 5),ex(var_w("x",32),ln 11,ln 10,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",32),ln 12),bop(Bit,var_w("x",32),ln 9),bop(Bit,var_w("x",32),ln 3),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 27),
          ex(var_w("x",32),ln 18,ln 15,w4),bop(Bit,var_w("x",32),ln 20),
          bop(Bit,var_w("x",32),ln 23),bop(Bit,var_w("x",32),ln 24),bop(Bit,var_w("x",32),ln 19),
          bop(Bit,var_w("x",32),ln 22),bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 26),
          bop(Bit,var_w("x",32),ln 14),bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 8),
          bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 0),
          ex(var_w("x",32),ln 31,ln 28,w4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HCR",
   close
     (var("x",@{typ HCR}),
      cc[call("HCR.hcr'rst",w4,var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.TGE",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TVM",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TTLB",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TPU",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TPC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TSW",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TAC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TIDCP",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TSC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         call("HCR.TID",w4,var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.TWE",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TWI",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.DC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         call("HCR.BSU",(Word_Lib.mk_wordT 2),var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.FB",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VA",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VI",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VF",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.AMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.IMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.FMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.PTW",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.SWIO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VM",HOLogic.boolT,var("x",@{typ HCR}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HCR",
   close(tp[var_a w32,var("x",@{typ HCR})],call("reg'HCR",w32,var("x",@{typ HCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HCR",
   close(tp[var_a @{typ HCR},var_w("x",32)],call("rec'HCR",@{typ HCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ProcessorID",close(var_a HOLogic.unitT,li 0))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("IsExternalAbort",close(var_a HOLogic.unitT,lx HOLogic.boolT))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("IsSecure",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         bop(Or,
             mop(Not,
                 apply
                   (call("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                    var("state",qTy))),
             bop(Or,
                 mop(Not,
                     call
                       ("SCR.NS",HOLogic.boolT,
                        call
                          ("CP15.SCR",@{typ SCR},
                           call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                        @{theory})),
                 eq(call
                      ("PSR.M",(Word_Lib.mk_wordT 5),
                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),lw(22,5)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UnalignedSupport",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var_n"v",
            apply
              (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),var("state",qTy)),
            bop(Or,bop(Ge,var_n"v",ln 7),
                bop(And,eq(var_n"v",ln 6),
                    call
                      ("SCTLR.U",HOLogic.boolT,
                       call
                         ("CP15.SCTLR",@{typ SCTLR},
                          call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                       @{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BadMode",
   close
     (var_w("mode",5),
      close
        (var("state",qTy),
         itb([(eq(var_w("mode",5),lw(16,5)),lf),(eq(var_w("mode",5),lw(17,5)),lf),
              (eq(var_w("mode",5),lw(18,5)),lf),(eq(var_w("mode",5),lw(19,5)),lf),
              (eq(var_w("mode",5),lw(22,5)),
               mop(Not,
                   apply
                     (call("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                      var("state",qTy)))),(eq(var_w("mode",5),lw(23,5)),lf),
              (eq(var_w("mode",5),lw(26,5)),
               mop(Not,
                   apply
                     (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                      var("state",qTy)))),(eq(var_w("mode",5),lw(27,5)),lf),
              (eq(var_w("mode",5),lw(31,5)),lf)],lt))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CurrentModeIsNotUser",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(apply
                  (call
                     ("BadMode",@{typ "state \<Rightarrow> bool"},
                      call
                        ("PSR.M",(Word_Lib.mk_wordT 5),
                         call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                      @{theory}),var("state",qTy)),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             cc[ls"BadMode: ",
                                mop(Cast(@{typ string}),
                                    call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                       @{theory}))],@{theory}),@{theory}),var("state",qTy))),
                var("state",qTy)),
            tp[mop(Not,
                   eq(call
                        ("PSR.M",(Word_Lib.mk_wordT 5),
                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),lw(16,5))),
               var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CurrentModeIsUserOrSystem",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(apply
                  (call
                     ("BadMode",@{typ "state \<Rightarrow> bool"},
                      call
                        ("PSR.M",(Word_Lib.mk_wordT 5),
                         call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                      @{theory}),var("state",qTy)),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             cc[ls"BadMode: ",
                                mop(Cast(@{typ string}),
                                    call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                       @{theory}))],@{theory}),@{theory}),var("state",qTy))),
                var("state",qTy)),
            tp[bop(In,
                   call
                     ("PSR.M",(Word_Lib.mk_wordT 5),
                      call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                   sl[lw(16,5),lw(31,5)]),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CurrentModeIsHyp",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(apply
                  (call
                     ("BadMode",@{typ "state \<Rightarrow> bool"},
                      call
                        ("PSR.M",(Word_Lib.mk_wordT 5),
                         call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                      @{theory}),var("state",qTy)),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             cc[ls"BadMode: ",
                                mop(Cast(@{typ string}),
                                    call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                       @{theory}))],@{theory}),@{theory}),var("state",qTy))),
                var("state",qTy)),
            tp[eq(call
                    ("PSR.M",(Word_Lib.mk_wordT 5),
                     call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),lw(26,5)),
               var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("IntegerZeroDivideTrappingEnabled",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         call
           ("SCTLR.DZ",HOLogic.boolT,
            call
              ("CP15.SCTLR",@{typ SCTLR},call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),
               @{theory}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ISETSTATE",
   close
     (var("state",qTy),
      cc[mop(Cast w1,
             call
               ("PSR.J",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                @{theory})),
         mop(Cast w1,
             call
               ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                @{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'ISETSTATE",
   close
     (var_w("value",2),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            rupd
              ("state.CPSR",
               tp[var("state",qTy),
                  rupd
                    ("PSR.J",
                     tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                        bop(Bit,var_w("value",2),ln 1)],@{theory})],@{theory}),
            rupd
              ("state.CPSR",
               tp[var("s",qTy),
                  rupd
                    ("PSR.T",
                     tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                        bop(Bit,var_w("value",2),ln 0)],@{theory})],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CurrentInstrSet",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var_w("v",2),
            apply(const("ISETSTATE",@{typ "state \<Rightarrow> 2 word"},@{theory}),var("state",qTy)),
            itb([(eq(var_w("v",2),lw(0,2)),lc("InstrSet_ARM","InstrSet",@{theory})),
                 (eq(var_w("v",2),lw(1,2)),lc("InstrSet_Thumb","InstrSet",@{theory})),
                 (eq(var_w("v",2),lw(2,2)),lc("InstrSet_Jazelle","InstrSet",@{theory})),
                 (eq(var_w("v",2),lw(3,2)),lc("InstrSet_ThumbEE","InstrSet",@{theory}))],
                lx @{typ InstrSet})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SelectInstrSet",
   close
     (var("iset",@{typ InstrSet}),
      close
        (var("state",qTy),
         cs(var("iset",@{typ InstrSet}),
            [(lc("InstrSet_ARM","InstrSet",@{theory}),
              ite(eq(apply
                       (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                        var("state",qTy)),lc("InstrSet_ThumbEE","InstrSet",@{theory})),
                  mop(Snd,
                      apply
                        (call
                           ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            call
                              ("exception.UNPREDICTABLE",@{typ exception},ls"SelectInstrSet",
                               @{theory}),@{theory}),var("state",qTy))),
                  apply
                    (call("write'ISETSTATE",@{typ "state \<Rightarrow> state"},lw(0,2),@{theory}),
                     var("state",qTy)))),
             (lc("InstrSet_Thumb","InstrSet",@{theory}),
              apply
                (call("write'ISETSTATE",@{typ "state \<Rightarrow> state"},lw(1,2),@{theory}),
                 var("state",qTy))),
             (lc("InstrSet_Jazelle","InstrSet",@{theory}),
              apply
                (call("write'ISETSTATE",@{typ "state \<Rightarrow> state"},lw(2,2),@{theory}),
                 var("state",qTy))),
             (lc("InstrSet_ThumbEE","InstrSet",@{theory}),
              apply
                (call("write'ISETSTATE",@{typ "state \<Rightarrow> state"},lw(3,2),@{theory}),
                 var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ITSTATE",
   close
     (var("state",qTy),
      ite(apply(call("HaveThumb2",@{typ "state \<Rightarrow> bool"},lu,@{theory}),var("state",qTy)),
          call("PSR.IT",w8,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
          lw(0,8))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'ITSTATE",
   close
     (var_w("value",8),
      close
        (var("state",qTy),
         rupd
           ("state.CPSR",
            tp[var("state",qTy),
               rupd
                 ("PSR.IT",
                  tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),var_w("value",8)],
                  @{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ITAdvance",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         ite(bop(And,
                 apply
                   (call("HaveThumb2",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                    var("state",qTy)),
                 mop(Not,
                     eq(call("state.Encoding",@{typ Encoding},var("state",qTy),@{theory}),
                        lc("Encoding_ARM","Encoding",@{theory})))),
             ite(eq(ex(apply
                         (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),
                          var("state",qTy)),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(0,3)),
                 apply
                   (call("write'ITSTATE",@{typ "state \<Rightarrow> state"},lw(0,8),@{theory}),
                    var("state",qTy)),
                 apply
                   (call
                      ("write'ITSTATE",@{typ "state \<Rightarrow> state"},
                       bfi(ln 4,ln 0,
                           bop(Lsl,
                               ex(apply
                                    (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),
                                     var("state",qTy)),ln 4,ln 0,(Word_Lib.mk_wordT 5)),ln 1),
                           apply
                             (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),
                              var("state",qTy))),@{theory}),var("state",qTy))),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("InITBlock",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         mop(Not,
             eq(ex(apply
                     (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),
                      var("state",qTy)),ln 3,ln 0,w4),lw(0,4))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LastInITBlock",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         eq(ex(apply
                 (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),var("state",qTy)),
               ln 3,ln 0,w4),lw(8,4)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ThumbCondition",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         itb([(eq(apply
                    (const("ITSTATE",@{typ "state \<Rightarrow> 8 word"},@{theory}),var("state",qTy)),
                  lw(0,8)),tp[lw(14,4),var("state",qTy)]),
              (mop(Not,
                   eq(ex(call
                           ("PSR.IT",w8,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                            @{theory}),ln 3,ln 0,w4),lw(0,4))),
               tp[ex(call
                       ("PSR.IT",w8,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                        @{theory}),ln 7,ln 4,w4),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"ThumbCondition",@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndian",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         call
           ("PSR.E",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("SetExclusiveMonitors",close(tp[var_w("address",32),var_n"n"],lu))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ExclusiveMonitorsPass",close(tp[var_w("address",32),var_n"n"],lx HOLogic.boolT))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ClearExclusiveLocal",close(var_i"id",lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CurrentCond",
   close
     (var_a HOLogic.unitT,
      close(var("state",qTy),call("state.CurrentCondition",w4,var("state",qTy),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ConditionPassed",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var_w("v",4),
            apply
              (call("CurrentCond",@{typ "state \<Rightarrow> 4 word"},lu,@{theory}),var("state",qTy)),
            let'
              (tp[var_b"v0",var("s",qTy)],
               cs(ex(var_w("v",4),ln 3,ln 1,(Word_Lib.mk_wordT 3)),
                  [(var_w("v",3),
                    itb([(eq(var_w("v",3),lw(0,3)),
                          tp[call
                               ("PSR.Z",HOLogic.boolT,
                                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                             var("state",qTy)]),
                         (eq(var_w("v",3),lw(1,3)),
                          tp[call
                               ("PSR.C",HOLogic.boolT,
                                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                             var("state",qTy)]),
                         (eq(var_w("v",3),lw(2,3)),
                          tp[call
                               ("PSR.N",HOLogic.boolT,
                                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                             var("state",qTy)]),
                         (eq(var_w("v",3),lw(3,3)),
                          tp[call
                               ("PSR.V",HOLogic.boolT,
                                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                             var("state",qTy)]),
                         (eq(var_w("v",3),lw(4,3)),
                          tp[bop(And,
                                 call
                                   ("PSR.C",HOLogic.boolT,
                                    call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                    @{theory}),
                                 mop(Not,
                                     call
                                       ("PSR.Z",HOLogic.boolT,
                                        call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                        @{theory}))),var("state",qTy)]),
                         (eq(var_w("v",3),lw(5,3)),
                          tp[eq(call
                                  ("PSR.N",HOLogic.boolT,
                                   call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                   @{theory}),
                                call
                                  ("PSR.V",HOLogic.boolT,
                                   call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                   @{theory})),var("state",qTy)]),
                         (eq(var_w("v",3),lw(6,3)),
                          tp[bop(And,
                                 eq(call
                                      ("PSR.N",HOLogic.boolT,
                                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                       @{theory}),
                                    call
                                      ("PSR.V",HOLogic.boolT,
                                       call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                       @{theory})),
                                 mop(Not,
                                     call
                                       ("PSR.Z",HOLogic.boolT,
                                        call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                        @{theory}))),var("state",qTy)]),
                         (eq(var_w("v",3),lw(7,3)),tp[lt,var("state",qTy)])],
                        lx(@{typ "bool \<times> state"})))],@{context}),
               ite(bop(And,bop(Bit,var_w("v",4),ln 0),mop(Not,eq(var_w("v",4),lw(15,4)))),
                   mop(Not,var_b"v0"),var_b"v0"))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SPSR",
   close
     (var("state",qTy),
      ite(apply
            (call
               ("BadMode",@{typ "state \<Rightarrow> bool"},
                call
                  ("PSR.M",(Word_Lib.mk_wordT 5),
                   call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),@{theory}),
             var("state",qTy)),
          apply
            (call
               ("raise'exception",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                call
                  ("exception.UNPREDICTABLE",@{typ exception},
                   cc[ls"SPSR: BadMode: ",
                      mop(Cast(@{typ string}),
                          call
                            ("PSR.M",(Word_Lib.mk_wordT 5),
                             call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}))],
                   @{theory}),@{theory}),var("state",qTy)),
          let'
            (var_w("v",5),
             call
               ("PSR.M",(Word_Lib.mk_wordT 5),
                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
             itb([(eq(var_w("v",5),lw(17,5)),
                   tp[call("state.SPSR_fiq",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(18,5)),
                   tp[call("state.SPSR_irq",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(19,5)),
                   tp[call("state.SPSR_svc",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(22,5)),
                   tp[call("state.SPSR_mon",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(23,5)),
                   tp[call("state.SPSR_abt",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(26,5)),
                   tp[call("state.SPSR_hyp",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)]),
                  (eq(var_w("v",5),lw(27,5)),
                   tp[call("state.SPSR_und",@{typ PSR},var("state",qTy),@{theory}),var("state",qTy)])],
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                       call("exception.UNPREDICTABLE",@{typ exception},ls"SPSR",@{theory}),@{theory}),
                    var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'SPSR",
   close
     (var("value",@{typ PSR}),
      close
        (var("state",qTy),
         ite(apply
               (call
                  ("BadMode",@{typ "state \<Rightarrow> bool"},
                   call
                     ("PSR.M",(Word_Lib.mk_wordT 5),
                      call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),@{theory}),
                var("state",qTy)),
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.UNPREDICTABLE",@{typ exception},
                          cc[ls"SPSR: BadMode: ",
                             mop(Cast(@{typ string}),
                                 call
                                   ("PSR.M",(Word_Lib.mk_wordT 5),
                                    call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                                    @{theory}))],@{theory}),@{theory}),var("state",qTy))),
             let'
               (var_w("v",5),
                call
                  ("PSR.M",(Word_Lib.mk_wordT 5),
                   call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                itb([(eq(var_w("v",5),lw(17,5)),
                      rupd("state.SPSR_fiq",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(18,5)),
                      rupd("state.SPSR_irq",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(19,5)),
                      rupd("state.SPSR_svc",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(22,5)),
                      rupd("state.SPSR_mon",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(23,5)),
                      rupd("state.SPSR_abt",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(26,5)),
                      rupd("state.SPSR_hyp",tp[var("state",qTy),var("value",@{typ PSR})],@{theory})),
                     (eq(var_w("v",5),lw(27,5)),
                      rupd("state.SPSR_und",tp[var("state",qTy),var("value",@{typ PSR})],@{theory}))],
                    mop(Snd,
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                              call("exception.UNPREDICTABLE",@{typ exception},ls"SPSR",@{theory}),
                              @{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CPSRWriteByInstr",
   close
     (tp[var_w("value",32),var_w("bytemask",4),var_b"is_excpt_return"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            let'
              (var("s0",qTy),
               ite(bop(Bit,var_w("bytemask",4),ln 3),
                   let'
                     (var("s",qTy),
                      rupd
                        ("state.CPSR",
                         tp[var("s",qTy),
                            call
                              ("write'reg'PSR",@{typ PSR},
                               tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                  bfi(ln 31,ln 27,
                                      ex(var_w("value",32),ln 31,ln 27,(Word_Lib.mk_wordT 5)),
                                      call
                                        ("reg'PSR",w32,
                                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                         @{theory}))],@{theory})],@{theory}),
                      ite(var_b"is_excpt_return",
                          rupd
                            ("state.CPSR",
                             tp[var("s",qTy),
                                call
                                  ("write'reg'PSR",@{typ PSR},
                                   tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                      bfi(ln 26,ln 24,
                                          ex(var_w("value",32),ln 26,ln 24,(Word_Lib.mk_wordT 3)),
                                          call
                                            ("reg'PSR",w32,
                                             call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             @{theory}))],@{theory})],@{theory}),var("s",qTy))),
                   var("s",qTy)),
               let'
                 (var("s0",qTy),
                  ite(bop(Bit,var_w("bytemask",4),ln 2),
                      rupd
                        ("state.CPSR",
                         tp[var("s0",qTy),
                            call
                              ("write'reg'PSR",@{typ PSR},
                               tp[call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),
                                  bfi(ln 19,ln 16,ex(var_w("value",32),ln 19,ln 16,w4),
                                      call
                                        ("reg'PSR",w32,
                                         call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),
                                         @{theory}))],@{theory})],@{theory}),var("s0",qTy)),
                  let'
                    (var("s0",qTy),
                     ite(bop(Bit,var_w("bytemask",4),ln 1),
                         let'
                           (var("s",qTy),
                            ite(var_b"is_excpt_return",
                                rupd
                                  ("state.CPSR",
                                   tp[var("s0",qTy),
                                      call
                                        ("write'reg'PSR",@{typ PSR},
                                         tp[call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),
                                            bfi(ln 15,ln 10,
                                                ex(var_w("value",32),ln 15,ln 10,
                                                   (Word_Lib.mk_wordT 6)),
                                                call
                                                  ("reg'PSR",w32,
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s0",qTy),
                                                      @{theory}),@{theory}))],@{theory})],@{theory}),
                                var("s0",qTy)),
                            let'
                              (var("s",qTy),
                               rupd
                                 ("state.CPSR",
                                  tp[var("s",qTy),
                                     call
                                       ("write'reg'PSR",@{typ PSR},
                                        tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           bfi(ln 9,ln 9,
                                               mop(Cast w1,bop(Bit,var_w("value",32),ln 9)),
                                               call
                                                 ("reg'PSR",w32,
                                                  call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  @{theory}))],@{theory})],@{theory}),
                               ite(bop(And,var_b"v",
                                       bop(Or,
                                           apply
                                             (call
                                                ("IsSecure",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("s",qTy)),
                                           call
                                             ("SCR.AW",HOLogic.boolT,
                                              call
                                                ("CP15.SCR",@{typ SCR},
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                 @{theory}),@{theory}))),
                                   rupd
                                     ("state.CPSR",
                                      tp[var("s",qTy),
                                         call
                                           ("write'reg'PSR",@{typ PSR},
                                            tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                               bfi(ln 8,ln 8,
                                                   mop(Cast w1,bop(Bit,var_w("value",32),ln 8)),
                                                   call
                                                     ("reg'PSR",w32,
                                                      call
                                                        ("state.CPSR",@{typ PSR},var("s",qTy),
                                                         @{theory}),@{theory}))],@{theory})],
                                      @{theory}),var("s",qTy)))),var("s0",qTy)),
                     ite(bop(Bit,var_w("bytemask",4),ln 0),
                         let'
                           (var("s0",qTy),
                            ite(var_b"v",
                                rupd
                                  ("state.CPSR",
                                   tp[var("s0",qTy),
                                      call
                                        ("write'reg'PSR",@{typ PSR},
                                         tp[call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),
                                            bfi(ln 7,ln 7,
                                                mop(Cast w1,bop(Bit,var_w("value",32),ln 7)),
                                                call
                                                  ("reg'PSR",w32,
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s0",qTy),
                                                      @{theory}),@{theory}))],@{theory})],@{theory}),
                                var("s0",qTy)),
                            let'
                              (var("s",qTy),
                               ite(bop(And,var_b"v",
                                       bop(And,
                                           bop(Or,
                                               mop(Not,
                                                   call
                                                     ("SCTLR.NMFI",HOLogic.boolT,
                                                      call
                                                        ("CP15.SCTLR",@{typ SCTLR},
                                                         call
                                                           ("state.CP15",@{typ CP15},var("s",qTy),
                                                            @{theory}),@{theory}),@{theory})),
                                               mop(Not,bop(Bit,var_w("value",32),ln 6))),
                                           bop(Or,
                                               apply
                                                 (call
                                                    ("IsSecure",@{typ "state \<Rightarrow> bool"},
                                                     lu,@{theory}),var("s0",qTy)),
                                               bop(Or,
                                                   call
                                                     ("SCR.FW",HOLogic.boolT,
                                                      call
                                                        ("CP15.SCR",@{typ SCR},
                                                         call
                                                           ("state.CP15",@{typ CP15},var("s0",qTy),
                                                            @{theory}),@{theory}),@{theory}),
                                                   apply
                                                     (call
                                                        ("HaveVirtExt",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s0",qTy)))))),
                                   rupd
                                     ("state.CPSR",
                                      tp[var("s0",qTy),
                                         call
                                           ("write'reg'PSR",@{typ PSR},
                                            tp[call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),
                                               bfi(ln 6,ln 6,
                                                   mop(Cast w1,bop(Bit,var_w("value",32),ln 6)),
                                                   call
                                                     ("reg'PSR",w32,
                                                      call
                                                        ("state.CPSR",@{typ PSR},var("s0",qTy),
                                                         @{theory}),@{theory}))],@{theory})],
                                      @{theory}),var("s0",qTy)),
                               let'
                                 (var("s",qTy),
                                  ite(var_b"is_excpt_return",
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            call
                                              ("write'reg'PSR",@{typ PSR},
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  bfi(ln 5,ln 5,
                                                      mop(Cast w1,bop(Bit,var_w("value",32),ln 5)),
                                                      call
                                                        ("reg'PSR",w32,
                                                         call
                                                           ("state.CPSR",@{typ PSR},var("s",qTy),
                                                            @{theory}),@{theory}))],@{theory})],
                                         @{theory}),var("s",qTy)),
                                  ite(var_b"v",
                                      ite(apply
                                            (call
                                               ("BadMode",@{typ "state \<Rightarrow> bool"},
                                                ex(var_w("value",32),ln 4,ln 0,(Word_Lib.mk_wordT 5)),
                                                @{theory}),var("s",qTy)),
                                          mop(Snd,
                                              apply
                                                (call
                                                   ("raise'exception",
                                                    @{typ
                                                    "state \<Rightarrow> (unit \<times> state)"},
                                                    call
                                                      ("exception.UNPREDICTABLE",@{typ exception},
                                                       cc[ls"CPSRWriteByInstr: BadMode: ",
                                                          mop(Cast(@{typ string}),
                                                              ex(var_w("value",32),ln 4,ln 0,
                                                                 (Word_Lib.mk_wordT 5)))],@{theory}),
                                                    @{theory}),var("s",qTy))),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             let'
                                               (var("s0",qTy),
                                                ite(bop(And,
                                                        mop(Not,
                                                            apply
                                                              (call
                                                                 ("IsSecure",
                                                                  @{typ "state \<Rightarrow> bool"},
                                                                  lu,@{theory}),var("s",qTy))),
                                                        eq(ex(var_w("value",32),ln 4,ln 0,
                                                              (Word_Lib.mk_wordT 5)),lw(22,5))),
                                                    mop(Snd,
                                                        apply
                                                          (call
                                                             ("raise'exception",
                                                              @{typ
                                                              "state \<Rightarrow>
                                                               (unit \<times> state)"},
                                                              call
                                                                ("exception.UNPREDICTABLE",
                                                                 @{typ exception},
                                                                 ls"CPSRWriteByInstr",@{theory}),
                                                              @{theory}),var("s",qTy))),var("s",qTy)),
                                                tp[apply
                                                     (call
                                                        ("IsSecure",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                             let'
                                               (var("s",qTy),
                                                ite(bop(And,mop(Not,var_b"v"),
                                                        bop(And,
                                                            eq(ex(var_w("value",32),ln 4,ln 0,
                                                                  (Word_Lib.mk_wordT 5)),lw(17,5)),
                                                            call
                                                              ("NSACR.RFR",HOLogic.boolT,
                                                               call
                                                                 ("CP15.NSACR",@{typ NSACR},
                                                                  call
                                                                    ("state.CP15",@{typ CP15},
                                                                     var("s",qTy),@{theory}),
                                                                  @{theory}),@{theory}))),
                                                    mop(Snd,
                                                        apply
                                                          (call
                                                             ("raise'exception",
                                                              @{typ
                                                              "state \<Rightarrow>
                                                               (unit \<times> state)"},
                                                              call
                                                                ("exception.UNPREDICTABLE",
                                                                 @{typ exception},
                                                                 ls"CPSRWriteByInstr",@{theory}),
                                                              @{theory}),var("s",qTy))),var("s",qTy)),
                                                let'
                                                  (tp[var_b"v",var("s",qTy)],
                                                   let'
                                                     (var("s0",qTy),
                                                      ite(bop(And,
                                                              mop(Not,
                                                                  call
                                                                    ("SCR.NS",HOLogic.boolT,
                                                                     call
                                                                       ("CP15.SCR",@{typ SCR},
                                                                        call
                                                                          ("state.CP15",@{typ CP15},
                                                                           var("s",qTy),@{theory}),
                                                                        @{theory}),@{theory})),
                                                              eq(ex(var_w("value",32),ln 4,ln 0,
                                                                    (Word_Lib.mk_wordT 5)),lw(26,5))),
                                                          mop(Snd,
                                                              apply
                                                                (call
                                                                   ("raise'exception",
                                                                    @{typ
                                                                    "state \<Rightarrow>
                                                                     (unit \<times> state)"},
                                                                    call
                                                                      ("exception.UNPREDICTABLE",
                                                                       @{typ exception},
                                                                       ls"CPSRWriteByInstr",
                                                                       @{theory}),@{theory}),
                                                                 var("s",qTy))),var("s",qTy)),
                                                      tp[apply
                                                           (call
                                                              ("IsSecure",
                                                               @{typ "state \<Rightarrow> bool"},lu,
                                                               @{theory}),var("s0",qTy)),
                                                         var("s0",qTy)]),
                                                   let'
                                                     (var("s",qTy),
                                                      ite(bop(And,mop(Not,var_b"v"),
                                                              bop(And,
                                                                  mop(Not,
                                                                      eq(call
                                                                           ("PSR.M",
                                                                            (Word_Lib.mk_wordT 5),
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               @{theory}),@{theory}),
                                                                         lw(26,5))),
                                                                  eq(ex(var_w("value",32),ln 4,ln 0,
                                                                        (Word_Lib.mk_wordT 5)),
                                                                     lw(26,5)))),
                                                          mop(Snd,
                                                              apply
                                                                (call
                                                                   ("raise'exception",
                                                                    @{typ
                                                                    "state \<Rightarrow>
                                                                     (unit \<times> state)"},
                                                                    call
                                                                      ("exception.UNPREDICTABLE",
                                                                       @{typ exception},
                                                                       ls"CPSRWriteByInstr",
                                                                       @{theory}),@{theory}),
                                                                 var("s",qTy))),var("s",qTy)),
                                                      let'
                                                        (var("s",qTy),
                                                         ite(bop(And,
                                                                 eq(call
                                                                      ("PSR.M",
                                                                       (Word_Lib.mk_wordT 5),
                                                                       call
                                                                         ("state.CPSR",@{typ PSR},
                                                                          var("s",qTy),@{theory}),
                                                                       @{theory}),lw(26,5)),
                                                                 bop(And,
                                                                     mop(Not,
                                                                         eq(ex(var_w("value",32),
                                                                               ln 4,ln 0,
                                                                               (Word_Lib.mk_wordT 5)),
                                                                            lw(26,5))),
                                                                     mop(Not,var_b"is_excpt_return"))),
                                                             mop(Snd,
                                                                 apply
                                                                   (call
                                                                      ("raise'exception",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        (unit \<times> state)"},
                                                                       call
                                                                         ("exception.UNPREDICTABLE",
                                                                          @{typ exception},
                                                                          ls"CPSRWriteByInstr",
                                                                          @{theory}),@{theory}),
                                                                    var("s",qTy))),var("s",qTy)),
                                                         rupd
                                                           ("state.CPSR",
                                                            tp[var("s",qTy),
                                                               call
                                                                 ("write'reg'PSR",@{typ PSR},
                                                                  tp[call
                                                                       ("state.CPSR",@{typ PSR},
                                                                        var("s",qTy),@{theory}),
                                                                     bfi(ln 4,ln 0,
                                                                         ex(var_w("value",32),ln 4,
                                                                            ln 0,
                                                                            (Word_Lib.mk_wordT 5)),
                                                                         call
                                                                           ("reg'PSR",w32,
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               @{theory}),@{theory}))],
                                                                  @{theory})],@{theory}))))))),
                                      var("s",qTy))))),var("s0",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SPSRWriteByInstr",
   close
     (tp[var_w("value",32),var_w("bytemask",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsUserOrSystem",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            let'
              (var("s",qTy),
               ite(var_b"v",
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRWriteByInstr",
                                @{theory}),@{theory}),var("s",qTy))),var("s",qTy)),
               let'
                 (var("s",qTy),
                  ite(bop(Bit,var_w("bytemask",4),ln 3),
                      let'
                        (tp[var("v",@{typ PSR}),var("s",qTy)],
                         apply
                           (const
                              ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},@{theory}),
                            var("s",qTy)),
                         apply
                           (call
                              ("write'SPSR",@{typ "state \<Rightarrow> state"},
                               call
                                 ("write'reg'PSR",@{typ PSR},
                                  tp[var("v",@{typ PSR}),
                                     bfi(ln 31,ln 24,ex(var_w("value",32),ln 31,ln 24,w8),
                                         call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}))],
                                  @{theory}),@{theory}),var("s",qTy))),var("s",qTy)),
                  let'
                    (var("s",qTy),
                     ite(bop(Bit,var_w("bytemask",4),ln 2),
                         let'
                           (tp[var("v",@{typ PSR}),var("s",qTy)],
                            apply
                              (const
                                 ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},@{theory}),
                               var("s",qTy)),
                            apply
                              (call
                                 ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                  call
                                    ("write'reg'PSR",@{typ PSR},
                                     tp[var("v",@{typ PSR}),
                                        bfi(ln 19,ln 16,ex(var_w("value",32),ln 19,ln 16,w4),
                                            call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}))],
                                     @{theory}),@{theory}),var("s",qTy))),var("s",qTy)),
                     let'
                       (var("s",qTy),
                        ite(bop(Bit,var_w("bytemask",4),ln 1),
                            let'
                              (tp[var("v",@{typ PSR}),var("s",qTy)],
                               apply
                                 (const
                                    ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                                     @{theory}),var("s",qTy)),
                               apply
                                 (call
                                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                     call
                                       ("write'reg'PSR",@{typ PSR},
                                        tp[var("v",@{typ PSR}),
                                           bfi(ln 15,ln 8,ex(var_w("value",32),ln 15,ln 8,w8),
                                               call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}))],
                                        @{theory}),@{theory}),var("s",qTy))),var("s",qTy)),
                        ite(bop(Bit,var_w("bytemask",4),ln 0),
                            let'
                              (tp[var("v",@{typ PSR}),var("s",qTy)],
                               apply
                                 (const
                                    ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                                     @{theory}),var("s",qTy)),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     apply
                                       (call
                                          ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                           call
                                             ("write'reg'PSR",@{typ PSR},
                                              tp[var("v",@{typ PSR}),
                                                 bfi(ln 7,ln 5,
                                                     ex(var_w("value",32),ln 7,ln 5,
                                                        (Word_Lib.mk_wordT 3)),
                                                     call
                                                       ("reg'PSR",w32,var("v",@{typ PSR}),@{theory}))],
                                              @{theory}),@{theory}),var("s",qTy)),
                                     tp[apply
                                          (call
                                             ("BadMode",@{typ "state \<Rightarrow> bool"},
                                              ex(var_w("value",32),ln 4,ln 0,(Word_Lib.mk_wordT 5)),
                                              @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  ite(var_b"v",
                                      mop(Snd,
                                          apply
                                            (call
                                               ("raise'exception",
                                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                                call
                                                  ("exception.UNPREDICTABLE",@{typ exception},
                                                   cc[ls"SPSRWriteByInstr: BadMode: ",
                                                      mop(Cast(@{typ string}),
                                                          ex(var_w("value",32),ln 4,ln 0,
                                                             (Word_Lib.mk_wordT 5)))],@{theory}),
                                                @{theory}),var("s",qTy))),
                                      let'
                                        (tp[var("v",@{typ PSR}),var("s",qTy)],
                                         apply
                                           (const
                                              ("SPSR",
                                               @{typ "state \<Rightarrow> (PSR \<times> state)"},
                                               @{theory}),var("s",qTy)),
                                         apply
                                           (call
                                              ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                               call
                                                 ("write'reg'PSR",@{typ PSR},
                                                  tp[var("v",@{typ PSR}),
                                                     bfi(ln 4,ln 0,
                                                         ex(var_w("value",32),ln 4,ln 0,
                                                            (Word_Lib.mk_wordT 5)),
                                                         call
                                                           ("reg'PSR",w32,var("v",@{typ PSR}),
                                                            @{theory}))],@{theory}),@{theory}),
                                            var("s",qTy)))))),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("RBankSelect",
   close
     (tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName}),var("irq",@{typ RName}),
         var("svc",@{typ RName}),var("abt",@{typ RName}),var("und",@{typ RName}),
         var("mon",@{typ RName}),var("hyp",@{typ RName})],
      close
        (var("state",qTy),
         ite(apply
               (call("BadMode",@{typ "state \<Rightarrow> bool"},var_w("mode",5),@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (RName \<times> state)"},
                   call
                     ("exception.UNPREDICTABLE",@{typ exception},
                      cc[ls"RBankSelect: BadMode",mop(Cast(@{typ string}),var_w("mode",5))],
                      @{theory}),@{theory}),var("state",qTy)),
             tp[itb([(eq(var_w("mode",5),lw(16,5)),var("usr",@{typ RName})),
                     (eq(var_w("mode",5),lw(17,5)),var("fiq",@{typ RName})),
                     (eq(var_w("mode",5),lw(18,5)),var("irq",@{typ RName})),
                     (eq(var_w("mode",5),lw(19,5)),var("svc",@{typ RName})),
                     (eq(var_w("mode",5),lw(22,5)),var("mon",@{typ RName})),
                     (eq(var_w("mode",5),lw(23,5)),var("abt",@{typ RName})),
                     (eq(var_w("mode",5),lw(26,5)),var("hyp",@{typ RName})),
                     (eq(var_w("mode",5),lw(27,5)),var("und",@{typ RName})),
                     (eq(var_w("mode",5),lw(31,5)),var("usr",@{typ RName}))],lx @{typ RName}),
                var("state",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("RfiqBankSelect",
   close
     (tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName})],
      close
        (var("state",qTy),
         apply
           (call
              ("RBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
               tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName}),
                  var("usr",@{typ RName}),var("usr",@{typ RName}),var("usr",@{typ RName}),
                  var("usr",@{typ RName}),var("usr",@{typ RName}),var("usr",@{typ RName})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LookUpRName",
   close
     (tp[var_w("n",4),var_w("mode",5)],
      close
        (var("state",qTy),
         itb([(eq(var_w("n",4),lw(0,4)),tp[lc("RName_0usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(1,4)),tp[lc("RName_1usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(2,4)),tp[lc("RName_2usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(3,4)),tp[lc("RName_3usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(4,4)),tp[lc("RName_4usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(5,4)),tp[lc("RName_5usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(6,4)),tp[lc("RName_6usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(7,4)),tp[lc("RName_7usr","RName",@{theory}),var("state",qTy)]),
              (eq(var_w("n",4),lw(8,4)),
               apply
                 (call
                    ("RfiqBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_8usr","RName",@{theory}),
                        lc("RName_8fiq","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(9,4)),
               apply
                 (call
                    ("RfiqBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_9usr","RName",@{theory}),
                        lc("RName_9fiq","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(10,4)),
               apply
                 (call
                    ("RfiqBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_10usr","RName",@{theory}),
                        lc("RName_10fiq","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(11,4)),
               apply
                 (call
                    ("RfiqBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_11usr","RName",@{theory}),
                        lc("RName_11fiq","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(12,4)),
               apply
                 (call
                    ("RfiqBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_12usr","RName",@{theory}),
                        lc("RName_12fiq","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(13,4)),
               apply
                 (call
                    ("RBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_SPusr","RName",@{theory}),
                        lc("RName_SPfiq","RName",@{theory}),lc("RName_SPirq","RName",@{theory}),
                        lc("RName_SPsvc","RName",@{theory}),lc("RName_SPabt","RName",@{theory}),
                        lc("RName_SPund","RName",@{theory}),lc("RName_SPmon","RName",@{theory}),
                        lc("RName_SPhyp","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(14,4)),
               apply
                 (call
                    ("RBankSelect",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     tp[var_w("mode",5),lc("RName_LRusr","RName",@{theory}),
                        lc("RName_LRfiq","RName",@{theory}),lc("RName_LRirq","RName",@{theory}),
                        lc("RName_LRsvc","RName",@{theory}),lc("RName_LRabt","RName",@{theory}),
                        lc("RName_LRund","RName",@{theory}),lc("RName_LRmon","RName",@{theory}),
                        lc("RName_LRusr","RName",@{theory})],@{theory}),var("state",qTy))),
              (eq(var_w("n",4),lw(15,4)),
               apply
                 (call
                    ("raise'exception",@{typ "state \<Rightarrow> (RName \<times> state)"},
                     call
                       ("exception.ASSERT",@{typ exception},ls"LookUpRName: n >= 0 and n <= 14",
                        @{theory}),@{theory}),var("state",qTy)))],lx(@{typ "RName \<times> state"})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Rmode",
   close
     (tp[var_w("n",4),var_w("mode",5)],
      close
        (var("state",qTy),
         let'
           (var_b"v",
            mop(Not,
                apply
                  (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),var("state",qTy))),
            let'
              (var("s",qTy),
               ite(bop(And,var_b"v",eq(var_w("mode",5),lw(22,5))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                             @{theory}),var("state",qTy))),var("state",qTy)),
               let'
                 (var("s",qTy),
                  ite(bop(And,var_b"v",
                          bop(And,eq(var_w("mode",5),lw(17,5)),
                              call
                                ("NSACR.RFR",HOLogic.boolT,
                                 call
                                   ("CP15.NSACR",@{typ NSACR},
                                    call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                                 @{theory}))),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                                @{theory}),var("s",qTy))),var("s",qTy)),
                  let'
                    (tp[var("v0",@{typ RName}),var("s0",qTy)],
                     apply
                       (call
                          ("LookUpRName",@{typ "state \<Rightarrow> (RName \<times> state)"},
                           tp[var_w("n",4),var_w("mode",5)],@{theory}),var("s",qTy)),
                     tp[apply
                          (call
                             ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),
                              @{theory}),var("v0",@{typ RName})),var("s0",qTy)])))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'Rmode",
   close
     (tp[var_w("value",32),var_w("n",4),var_w("mode",5)],
      close
        (var("state",qTy),
         let'
           (var_b"v",
            mop(Not,
                apply
                  (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),var("state",qTy))),
            let'
              (var("s",qTy),
               ite(bop(And,var_b"v",eq(var_w("mode",5),lw(22,5))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                             @{theory}),var("state",qTy))),var("state",qTy)),
               let'
                 (var("s",qTy),
                  ite(bop(And,var_b"v",
                          bop(And,eq(var_w("mode",5),lw(17,5)),
                              call
                                ("NSACR.RFR",HOLogic.boolT,
                                 call
                                   ("CP15.NSACR",@{typ NSACR},
                                    call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                                 @{theory}))),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                                @{theory}),var("s",qTy))),var("s",qTy)),
                  let'
                    (tp[var("v",@{typ RName}),var("s",qTy)],
                     apply
                       (call
                          ("LookUpRName",@{typ "state \<Rightarrow> (RName \<times> state)"},
                           tp[var_w("n",4),var_w("mode",5)],@{theory}),
                        ite(bop(And,eq(var_w("n",4),lw(13,4)),
                                bop(And,
                                    mop(Not,
                                        eq(ex(var_w("value",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                                           lw(0,2))),
                                    mop(Not,
                                        eq(apply
                                             (call
                                                ("CurrentInstrSet",
                                                 @{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                                              var("s",qTy)),lc("InstrSet_ARM","InstrSet",@{theory}))))),
                            mop(Snd,
                                apply
                                  (call
                                     ("raise'exception",
                                      @{typ "state \<Rightarrow> (unit \<times> state)"},
                                      call
                                        ("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",
                                         @{theory}),@{theory}),var("s",qTy))),var("s",qTy))),
                     rupd
                       ("state.REG",
                        tp[var("s",qTy),
                           fupd
                             (call
                                ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),
                                 @{theory}),var("v",@{typ RName}),var_w("value",32))],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("R",
   close
     (var_w("n",4),
      close
        (var("state",qTy),
         ite(eq(var_w("n",4),lw(15,4)),
             tp[bop(Add,
                    apply
                      (call
                         ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("state",qTy),
                          @{theory}),lc("RName_PC","RName",@{theory})),
                    ite(eq(apply
                             (call
                                ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                 @{theory}),var("state",qTy)),
                           lc("InstrSet_ARM","InstrSet",@{theory})),lw(8,32),lw(4,32))),
                var("state",qTy)],
             apply
               (call
                  ("Rmode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                   tp[var_w("n",4),
                      call
                        ("PSR.M",(Word_Lib.mk_wordT 5),
                         call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'R",
   close
     (tp[var_w("value",32),var_w("n",4)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'Rmode",@{typ "state \<Rightarrow> state"},
               tp[var_w("value",32),var_w("n",4),
                  call
                    ("PSR.M",(Word_Lib.mk_wordT 5),
                     call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SP",
   close
     (var("state",qTy),
      apply
        (call("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},lw(13,4),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'SP",
   close
     (var_w("value",32),
      close
        (var("state",qTy),
         apply
           (call
              ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("value",32),lw(13,4)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LR",
   close
     (var("state",qTy),
      apply
        (call("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},lw(14,4),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'LR",
   close
     (var_w("value",32),
      close
        (var("state",qTy),
         apply
           (call
              ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("value",32),lw(14,4)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PC",
   close
     (var("state",qTy),
      apply
        (call("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},lw(15,4),@{theory}),
         var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BranchTo",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         rupd
           ("state.REG",
            tp[var("state",qTy),
               fupd
                 (call("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("state",qTy),@{theory}),
                  lc("RName_PC","RName",@{theory}),var_w("address",32))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PCStoreValue",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BranchWritePC",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                   var("state",qTy)),lc("InstrSet_ARM","InstrSet",@{theory})),
             apply
               (call
                  ("BranchTo",@{typ "state \<Rightarrow> state"},
                   cc[ex(var_w("address",32),ln 31,ln 2,(Word_Lib.mk_wordT 30)),lw(0,2)],@{theory}),
                ite(bop(And,
                        bop(Lt,
                            apply
                              (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                               var("state",qTy)),ln 6),
                        mop(Not,eq(ex(var_w("address",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2)))),
                    mop(Snd,
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                              call
                                ("exception.UNPREDICTABLE",@{typ exception},ls"BranchWritePC",
                                 @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
             apply
               (call
                  ("BranchTo",@{typ "state \<Rightarrow> state"},
                   cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(0,1)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BXWritePC",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         itb([(eq(apply
                    (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                     var("state",qTy)),lc("InstrSet_ThumbEE","InstrSet",@{theory})),
               ite(bop(Bit,var_w("address",32),ln 0),
                   apply
                     (call
                        ("BranchTo",@{typ "state \<Rightarrow> state"},
                         cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(0,1)],
                         @{theory}),var("state",qTy)),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"BXWritePC",@{theory}),
                             @{theory}),var("state",qTy))))),
              (bop(Bit,var_w("address",32),ln 0),
               apply
                 (call
                    ("BranchTo",@{typ "state \<Rightarrow> state"},
                     cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(0,1)],@{theory}),
                  apply
                    (call
                       ("SelectInstrSet",@{typ "state \<Rightarrow> state"},
                        lc("InstrSet_Thumb","InstrSet",@{theory}),@{theory}),var("state",qTy)))),
              (mop(Not,bop(Bit,var_w("address",32),ln 1)),
               apply
                 (call("BranchTo",@{typ "state \<Rightarrow> state"},var_w("address",32),@{theory}),
                  apply
                    (call
                       ("SelectInstrSet",@{typ "state \<Rightarrow> state"},
                        lc("InstrSet_ARM","InstrSet",@{theory}),@{theory}),var("state",qTy))))],
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call("exception.UNPREDICTABLE",@{typ exception},ls"BXWritePC",@{theory}),
                       @{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LoadWritePC",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                    var("state",qTy)),ln 5),
             apply
               (call("BXWritePC",@{typ "state \<Rightarrow> state"},var_w("address",32),@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("BranchWritePC",@{typ "state \<Rightarrow> state"},var_w("address",32),@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ALUWritePC",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         ite(bop(And,
                 bop(Ge,
                     apply
                       (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                        var("state",qTy)),ln 7),
                 eq(apply
                      (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                       var("state",qTy)),lc("InstrSet_ARM","InstrSet",@{theory}))),
             apply
               (call("BXWritePC",@{typ "state \<Rightarrow> state"},var_w("address",32),@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("BranchWritePC",@{typ "state \<Rightarrow> state"},var_w("address",32),@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ThisInstrLength",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         ite(eq(call("state.Encoding",@{typ Encoding},var("state",qTy),@{theory}),
                lc("Encoding_Thumb","Encoding",@{theory})),ln 16,ln 32))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("IncPC",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("BranchTo",@{typ "state \<Rightarrow> state"},
               bop(Add,
                   apply
                     (call
                        ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("state",qTy),@{theory}),
                      lc("RName_PC","RName",@{theory})),
                   ite(eq(apply
                            (call("ThisInstrLength",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                             var("state",qTy)),ln 16),lw(2,32),lw(4,32))),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem1",
   close
     (var_w("address",32),
      close
        (var("state",qTy),
         mop(Cast(@{typ "bool list"}),
             apply
               (call("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("state",qTy),@{theory}),
                var_w("address",32))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("mem",
   close
     (tp[var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         itb([(eq(var_n"size",ln 1),
               tp[ex(apply
                       (call
                          ("mem1",@{typ "state \<Rightarrow> bool list"},
                           bop(Add,var_w("address",32),lw(0,32)),@{theory}),var("state",qTy)),ln 7,
                     ln 0,@{typ "bool list"}),var("state",qTy)]),
              (eq(var_n"size",ln 2),
               tp[ex(cc[apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(1,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(0,32)),@{theory}),var("state",qTy))],
                     ln 15,ln 0,@{typ "bool list"}),var("state",qTy)]),
              (eq(var_n"size",ln 4),
               tp[ex(cc[apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(3,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(2,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(1,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(0,32)),@{theory}),var("state",qTy))],
                     ln 31,ln 0,@{typ "bool list"}),var("state",qTy)]),
              (eq(var_n"size",ln 8),
               tp[ex(cc[apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(7,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(6,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(5,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(4,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(3,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(2,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(1,32)),@{theory}),var("state",qTy)),
                        apply
                          (call
                             ("mem1",@{typ "state \<Rightarrow> bool list"},
                              bop(Add,var_w("address",32),lw(0,32)),@{theory}),var("state",qTy))],
                     ln 63,ln 0,@{typ "bool list"}),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (bool list \<times> state)"},
                   call("exception.ASSERT",@{typ exception},ls"mem: size in {1, 2, 4, 8}",@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'mem",
   close
     (tp[var_v"value",var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         itb([(eq(var_n"size",ln 1),
               rupd
                 ("state.MEM",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("state",qTy),
                           @{theory}),bop(Add,var_w("address",32),lw(0,32)),
                        mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"})))],@{theory})),
              (eq(var_n"size",ln 2),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.MEM",
                     tp[var("state",qTy),
                        fupd
                          (call
                             ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("state",qTy),
                              @{theory}),bop(Add,var_w("address",32),lw(0,32)),
                           mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"})))],@{theory}),
                  rupd
                    ("state.MEM",
                     tp[var("s",qTy),
                        fupd
                          (call
                             ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                              @{theory}),bop(Add,var_w("address",32),lw(1,32)),
                           mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"})))],@{theory}))),
              (eq(var_n"size",ln 4),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.MEM",
                     tp[var("state",qTy),
                        fupd
                          (call
                             ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("state",qTy),
                              @{theory}),bop(Add,var_w("address",32),lw(0,32)),
                           mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"})))],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.MEM",
                        tp[var("s",qTy),
                           fupd
                             (call
                                ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                 @{theory}),bop(Add,var_w("address",32),lw(1,32)),
                              mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"})))],
                        @{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.MEM",
                           tp[var("s",qTy),
                              fupd
                                (call
                                   ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                    @{theory}),bop(Add,var_w("address",32),lw(2,32)),
                                 mop(Cast w8,ex(var_v"value",ln 23,ln 16,@{typ "bool list"})))],
                           @{theory}),
                        rupd
                          ("state.MEM",
                           tp[var("s",qTy),
                              fupd
                                (call
                                   ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                    @{theory}),bop(Add,var_w("address",32),lw(3,32)),
                                 mop(Cast w8,ex(var_v"value",ln 31,ln 24,@{typ "bool list"})))],
                           @{theory}))))),
              (eq(var_n"size",ln 8),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.MEM",
                     tp[var("state",qTy),
                        fupd
                          (call
                             ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("state",qTy),
                              @{theory}),bop(Add,var_w("address",32),lw(0,32)),
                           mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"})))],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.MEM",
                        tp[var("s",qTy),
                           fupd
                             (call
                                ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                 @{theory}),bop(Add,var_w("address",32),lw(1,32)),
                              mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"})))],
                        @{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.MEM",
                           tp[var("s",qTy),
                              fupd
                                (call
                                   ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                    @{theory}),bop(Add,var_w("address",32),lw(2,32)),
                                 mop(Cast w8,ex(var_v"value",ln 23,ln 16,@{typ "bool list"})))],
                           @{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.MEM",
                              tp[var("s",qTy),
                                 fupd
                                   (call
                                      ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                       var("s",qTy),@{theory}),
                                    bop(Add,var_w("address",32),lw(3,32)),
                                    mop(Cast w8,ex(var_v"value",ln 31,ln 24,@{typ "bool list"})))],
                              @{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.MEM",
                                 tp[var("s",qTy),
                                    fupd
                                      (call
                                         ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                          var("s",qTy),@{theory}),
                                       bop(Add,var_w("address",32),lw(4,32)),
                                       mop(Cast w8,ex(var_v"value",ln 39,ln 32,@{typ "bool list"})))],
                                 @{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.MEM",
                                    tp[var("s",qTy),
                                       fupd
                                         (call
                                            ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                             var("s",qTy),@{theory}),
                                          bop(Add,var_w("address",32),lw(5,32)),
                                          mop(Cast w8,
                                              ex(var_v"value",ln 47,ln 40,@{typ "bool list"})))],
                                    @{theory}),
                                 let'
                                   (var("s",qTy),
                                    rupd
                                      ("state.MEM",
                                       tp[var("s",qTy),
                                          fupd
                                            (call
                                               ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                                var("s",qTy),@{theory}),
                                             bop(Add,var_w("address",32),lw(6,32)),
                                             mop(Cast w8,
                                                 ex(var_v"value",ln 55,ln 48,@{typ "bool list"})))],
                                       @{theory}),
                                    rupd
                                      ("state.MEM",
                                       tp[var("s",qTy),
                                          fupd
                                            (call
                                               ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                                var("s",qTy),@{theory}),
                                             bop(Add,var_w("address",32),lw(7,32)),
                                             mop(Cast w8,
                                                 ex(var_v"value",ln 63,ln 56,@{typ "bool list"})))],
                                       @{theory})))))))))],
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.ASSERT",@{typ exception},ls"mem: size in {1, 2, 4, 8}",
                          @{theory}),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndianReverse",
   close
     (tp[var_v"value",var_n"n"],
      close
        (var("state",qTy),
         itb([(eq(var_n"n",ln 1),tp[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),var("state",qTy)]),
              (eq(var_n"n",ln 2),
               tp[cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                     ex(var_v"value",ln 15,ln 8,@{typ "bool list"})],var("state",qTy)]),
              (eq(var_n"n",ln 4),
               tp[cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                     ex(var_v"value",ln 15,ln 8,@{typ "bool list"}),
                     ex(var_v"value",ln 23,ln 16,@{typ "bool list"}),
                     ex(var_v"value",ln 31,ln 24,@{typ "bool list"})],var("state",qTy)]),
              (eq(var_n"n",ln 8),
               tp[cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                     ex(var_v"value",ln 15,ln 8,@{typ "bool list"}),
                     ex(var_v"value",ln 23,ln 16,@{typ "bool list"}),
                     ex(var_v"value",ln 31,ln 24,@{typ "bool list"}),
                     ex(var_v"value",ln 39,ln 32,@{typ "bool list"}),
                     ex(var_v"value",ln 47,ln 40,@{typ "bool list"}),
                     ex(var_v"value",ln 55,ln 48,@{typ "bool list"}),
                     ex(var_v"value",ln 63,ln 56,@{typ "bool list"})],var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (bool list \<times> state)"},
                   call
                     ("exception.ASSERT",@{typ exception},ls"BigEndianReverse: n in {1, 2, 4, 8}",
                      @{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Align",
   close
     (tp[var("w",@{typ "'N::len word"}),var_n"n"],
      mop(Cast(@{typ "'N::len word"}),
          bop(Mul,var_n"n",bop(Div,mop(Cast HOLogic.natT,var("w",@{typ "'N::len word"})),var_n"n")))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Aligned",
   close
     (tp[var("w",@{typ "'N::len word"}),var_n"n"],
      eq(var("w",@{typ "'N::len word"}),
         call("Align",@{typ "'N::len word"},tp[var("w",@{typ "'N::len word"}),var_n"n"],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemA_with_priv",
   close
     (tp[var_w("address",32),var_n"size",var_b"privileged"],
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ "'N::len word"}),var("s1",@{typ "32 word \<times> state"})],
            let'
              (var("s",@{typ "32 word \<times> state"}),
               itb([(call("Aligned",HOLogic.boolT,tp[var_w("address",32),var_n"size"],@{theory}),
                     tp[var_w("address",32),var("state",qTy)]),
                    (bop(Or,
                         call
                           ("SCTLR.A",HOLogic.boolT,
                            call
                              ("CP15.SCTLR",@{typ SCTLR},
                               call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                            @{theory}),
                         call
                           ("SCTLR.U",HOLogic.boolT,
                            call
                              ("CP15.SCTLR",@{typ SCTLR},
                               call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                            @{theory})),
                     tp[lx w32,
                        mop(Snd,
                            apply
                              (call
                                 ("raise'exception",
                                  @{typ "state \<Rightarrow> (unit \<times> state)"},
                                  call
                                    ("exception.AlignmentFault",@{typ exception},
                                     var_w("address",32),@{theory}),@{theory}),var("state",qTy)))])],
                   tp[call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),
                      var("state",qTy)]),
               let'
                 (tp[var_v"v",var("s",@{typ "32 word \<times> state"})],
                  let'
                    (tp[var_v"v",var("s3",qTy)],
                     apply
                       (call
                          ("mem",@{typ "state \<Rightarrow> (bool list \<times> state)"},
                           tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),var_n"size"],
                           @{theory}),mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                     tp[var_v"v",mop(Fst,var("s",@{typ "32 word \<times> state"})),var("s3",qTy)]),
                  let'
                    (tp[var("r",@{typ "'N::len word"}),
                        var("s1",@{typ "bool list \<times> 32 word \<times> state"})],
                     let'
                       (var("s0",@{typ "bool list \<times> 32 word \<times> state"}),
                        tp[var_v"v",var("s",@{typ "32 word \<times> state"})],
                        let'
                          (var("s",@{typ "bool list \<times> 32 word \<times> state"}),
                           ite(call
                                 ("PSR.E",HOLogic.boolT,
                                  call
                                    ("state.CPSR",@{typ PSR},
                                     mop(Snd,var("s",@{typ "32 word \<times> state"})),@{theory}),
                                  @{theory}),
                               let'
                                 (tp[var_v"v",
                                     var("s",@{typ "bool list \<times> 32 word \<times> state"})],
                                  cs(let'
                                       (tp[var_v"v",var("s3",qTy)],
                                        apply
                                          (call
                                             ("BigEndianReverse",
                                              @{typ
                                              "state \<Rightarrow> (bool list \<times> state)"},
                                              tp[mop(Fst,
                                                     var("s0",
                                                         @{typ
                                                         "bool list \<times> 32 word \<times> state"})),
                                                 var_n"size"],@{theory}),
                                           mop(Snd,
                                               mop(Snd,
                                                   var("s0",
                                                       @{typ
                                                       "bool list \<times> 32 word \<times> state"})))),
                                        tp[var_v"v",
                                           mop(Fst,
                                               mop(Snd,
                                                   var("s0",
                                                       @{typ
                                                       "bool list \<times> 32 word \<times> state"}))),
                                           var("s3",qTy)]),
                                     [(tp[var_v"v",var("s3",@{typ "32 word \<times> state"})],
                                       tp[var_v"v",
                                          mop(Fst,
                                              var("s0",
                                                  @{typ "bool list \<times> 32 word \<times> state"})),
                                          var("s3",@{typ "32 word \<times> state"})])],@{context}),
                                  tp[var_v"v",
                                     mop(Snd,
                                         var("s",@{typ "bool list \<times> 32 word \<times> state"}))]),
                               var("s0",@{typ "bool list \<times> 32 word \<times> state"})),
                           tp[mop(Cast(@{typ "'N::len word"}),
                                  mop(Fst,
                                      var("s",@{typ "bool list \<times> 32 word \<times> state"}))),
                              var("s",@{typ "bool list \<times> 32 word \<times> state"})])),
                     tp[var("r",@{typ "'N::len word"}),
                        mop(Snd,var("s1",@{typ "bool list \<times> 32 word \<times> state"}))]))),
            tp[var("r",@{typ "'N::len word"}),mop(Snd,var("s1",@{typ "32 word \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemA_with_priv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"privileged"],
      close
        (var("state",qTy),
         let'
           (var("s",@{typ "32 word \<times> state"}),
            itb([(call("Aligned",HOLogic.boolT,tp[var_w("address",32),var_n"size"],@{theory}),
                  tp[var_w("address",32),var("state",qTy)]),
                 (bop(Or,
                      call
                        ("SCTLR.A",HOLogic.boolT,
                         call
                           ("CP15.SCTLR",@{typ SCTLR},
                            call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                         @{theory}),
                      call
                        ("SCTLR.U",HOLogic.boolT,
                         call
                           ("CP15.SCTLR",@{typ SCTLR},
                            call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                         @{theory})),
                  tp[lx w32,
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.AlignmentFault",@{typ exception},var_w("address",32),
                                  @{theory}),@{theory}),var("state",qTy)))])],
                tp[call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),var("state",qTy)]),
            let'
              (tp[var_v"v",var("s",@{typ "32 word \<times> state"})],
               ite(call
                     ("PSR.E",HOLogic.boolT,
                      call
                        ("state.CPSR",@{typ PSR},mop(Snd,var("s",@{typ "32 word \<times> state"})),
                         @{theory}),@{theory}),
                   let'
                     (tp[var_v"v",var("s3",qTy)],
                      apply
                        (call
                           ("BigEndianReverse",
                            @{typ "state \<Rightarrow> (bool list \<times> state)"},
                            tp[mop(Cast(@{typ "bool list"}),var("value",@{typ "'N::len word"})),
                               var_n"size"],@{theory}),
                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                      tp[var_v"v",mop(Fst,var("s",@{typ "32 word \<times> state"})),var("s3",qTy)]),
                   tp[mop(Cast(@{typ "bool list"}),var("value",@{typ "'N::len word"})),
                      var("s",@{typ "32 word \<times> state"})]),
               apply
                 (call
                    ("write'mem",@{typ "state \<Rightarrow> state"},
                     tp[var_v"v",mop(Fst,var("s",@{typ "32 word \<times> state"})),var_n"size"],
                     @{theory}),mop(Snd,var("s",@{typ "32 word \<times> state"}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemA_unpriv",
   close
     (tp[var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         apply
           (call
              ("MemA_with_priv",@{typ "state \<Rightarrow> ('N::len word \<times> state)"},
               tp[var_w("address",32),var_n"size",lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemA_unpriv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         apply
           (call
              ("write'MemA_with_priv",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemA",
   close
     (tp[var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            apply
              (call
                 ("MemA_with_priv",@{typ "state \<Rightarrow> ('N::len word \<times> state)"},
                  tp[var_w("address",32),var_n"size",var_b"v"],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemA",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            apply
              (call
                 ("write'MemA_with_priv",@{typ "state \<Rightarrow> state"},
                  tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"v"],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemU_with_priv",
   close
     (tp[var_w("address",32),var_n"size",var_b"privileged"],
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ "'N::len word"}),var("s1",@{typ "bool list \<times> state"})],
            let'
              (var_v"s0",bop(Rep,ln 64,lv"0"),
               let'
                 (var_w("v",32),
                  ite(bop(And,
                          mop(Not,
                              call
                                ("SCTLR.A",HOLogic.boolT,
                                 call
                                   ("CP15.SCTLR",@{typ SCTLR},
                                    call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),
                                    @{theory}),@{theory})),
                          mop(Not,
                              call
                                ("SCTLR.U",HOLogic.boolT,
                                 call
                                   ("CP15.SCTLR",@{typ SCTLR},
                                    call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),
                                    @{theory}),@{theory}))),
                      call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),
                      var_w("address",32)),
                  let'
                    (var("s",@{typ "bool list \<times> state"}),
                     itb([(call("Aligned",HOLogic.boolT,tp[var_w("v",32),var_n"size"],@{theory}),
                           let'
                             (tp[var("v",@{typ "'N::len word"}),
                                 var("s",@{typ "bool list \<times> state"})],
                              let'
                                (tp[var("v",@{typ "'N::len word"}),var("s3",qTy)],
                                 apply
                                   (call
                                      ("MemA_with_priv",
                                       @{typ "state \<Rightarrow> ('N::len word \<times> state)"},
                                       tp[var_w("v",32),var_n"size",var_b"privileged"],@{theory}),
                                    var("state",qTy)),
                                 tp[var("v",@{typ "'N::len word"}),var_v"s0",var("s3",qTy)]),
                              tp[mop(Cast(@{typ "bool list"}),var("v",@{typ "'N::len word"})),
                                 mop(Snd,var("s",@{typ "bool list \<times> state"}))])),
                          (call
                             ("SCTLR.A",HOLogic.boolT,
                              call
                                ("CP15.SCTLR",@{typ SCTLR},
                                 call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                              @{theory}),
                           tp[var_v"s0",
                              mop(Snd,
                                  apply
                                    (call
                                       ("raise'exception",
                                        @{typ "state \<Rightarrow> (unit \<times> state)"},
                                        call
                                          ("exception.AlignmentFault",@{typ exception},
                                           var_w("address",32),@{theory}),@{theory}),
                                     var("state",qTy)))])],
                         let'
                           (var("s",@{typ "bool list \<times> state"}),
                            mop(Snd,
                                apply
                                  (forloop
                                     (tp[ln 0,bop(Sub,var_n"size",ln 1),
                                         close
                                           (var_n"i",
                                            close
                                              (var("state",@{typ "bool list \<times> state"}),
                                               let'
                                                 (tp[var_v"v",
                                                     var("s",@{typ "bool list \<times> state"})],
                                                  let'
                                                    (tp[var_w("v0",8),
                                                        var("s",@{typ "bool list \<times> state"})],
                                                     let'
                                                       (tp[var_w("v",8),var("s3",qTy)],
                                                        apply
                                                          (call
                                                             ("MemA_with_priv",
                                                              @{typ
                                                              "state \<Rightarrow>
                                                               (8 word \<times> state)"},
                                                              tp[bop(Add,var_w("v",32),
                                                                     mop(Cast w32,var_n"i")),ln 1,
                                                                 var_b"privileged"],@{theory}),
                                                           mop(Snd,
                                                               var("state",
                                                                   @{typ "bool list \<times> state"}))),
                                                        tp[var_w("v",8),
                                                           mop(Fst,
                                                               var("state",
                                                                   @{typ "bool list \<times> state"})),
                                                           var("s3",qTy)]),
                                                     tp[bfi(bop(Add,bop(Mul,ln 8,var_n"i"),ln 7),
                                                            bop(Mul,ln 8,var_n"i"),
                                                            mop(Cast(@{typ "bool list"}),
                                                                var_w("v0",8)),
                                                            mop(Fst,
                                                                var("state",
                                                                    @{typ
                                                                    "bool list \<times> state"}))),
                                                        var("s",@{typ "bool list \<times> state"})]),
                                                  tp[lu,var_v"v",
                                                     mop(Snd,
                                                         var("s",@{typ "bool list \<times> state"}))])))]),
                                   tp[var_v"s0",var("state",qTy)])),
                            ite(call
                                  ("PSR.E",HOLogic.boolT,
                                   call
                                     ("state.CPSR",@{typ PSR},
                                      mop(Snd,var("s",@{typ "bool list \<times> state"})),@{theory}),
                                   @{theory}),
                                let'
                                  (tp[var_v"v",var("s",@{typ "bool list \<times> state"})],
                                   cs(apply
                                        (call
                                           ("BigEndianReverse",
                                            @{typ "state \<Rightarrow> (bool list \<times> state)"},
                                            tp[mop(Fst,var("s",@{typ "bool list \<times> state"})),
                                               var_n"size"],@{theory}),
                                         mop(Snd,var("s",@{typ "bool list \<times> state"}))),
                                      [(tp[var_v"v",var("s3",qTy)],
                                        tp[var_v"v",
                                           mop(Fst,var("s",@{typ "bool list \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[var_v"v",mop(Snd,var("s",@{typ "bool list \<times> state"}))]),
                                var("s",@{typ "bool list \<times> state"})))),
                     tp[mop(Cast(@{typ "'N::len word"}),
                            mop(Fst,var("s",@{typ "bool list \<times> state"}))),
                        var("s",@{typ "bool list \<times> state"})]))),
            tp[var("r",@{typ "'N::len word"}),mop(Snd,var("s1",@{typ "bool list \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemU_with_priv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"privileged"],
      close
        (var("state",qTy),
         let'
           (var_w("v",32),
            ite(bop(And,
                    mop(Not,
                        call
                          ("SCTLR.A",HOLogic.boolT,
                           call
                             ("CP15.SCTLR",@{typ SCTLR},
                              call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                           @{theory})),
                    mop(Not,
                        call
                          ("SCTLR.U",HOLogic.boolT,
                           call
                             ("CP15.SCTLR",@{typ SCTLR},
                              call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                           @{theory}))),
                call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),var_w("address",32)),
            itb([(call("Aligned",HOLogic.boolT,tp[var_w("v",32),var_n"size"],@{theory}),
                  apply
                    (call
                       ("write'MemA_with_priv",@{typ "state \<Rightarrow> state"},
                        tp[var("value",@{typ "'N::len word"}),var_w("v",32),var_n"size",
                           var_b"privileged"],@{theory}),var("state",qTy))),
                 (call
                    ("SCTLR.A",HOLogic.boolT,
                     call
                       ("CP15.SCTLR",@{typ SCTLR},
                        call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                     @{theory}),
                  mop(Snd,
                      apply
                        (call
                           ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            call
                              ("exception.AlignmentFault",@{typ exception},var_w("address",32),
                               @{theory}),@{theory}),var("state",qTy))))],
                let'
                  (tp[var_v"v0",var("s",qTy)],
                   ite(call
                         ("PSR.E",HOLogic.boolT,
                          call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                       apply
                         (call
                            ("BigEndianReverse",
                             @{typ "state \<Rightarrow> (bool list \<times> state)"},
                             tp[mop(Cast(@{typ "bool list"}),var("value",@{typ "'N::len word"})),
                                var_n"size"],@{theory}),var("state",qTy)),
                       tp[mop(Cast(@{typ "bool list"}),var("value",@{typ "'N::len word"})),
                          var("state",qTy)]),
                   mop(Snd,
                       apply
                         (forloop
                            (tp[ln 0,bop(Sub,var_n"size",ln 1),
                                close
                                  (var_n"i",
                                   close
                                     (var("state",qTy),
                                      tp[lu,
                                         apply
                                           (call
                                              ("write'MemA_with_priv",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[mop(Cast w8,
                                                      ex(var_v"v0",
                                                         bop(Add,bop(Mul,ln 8,var_n"i"),ln 7),
                                                         bop(Mul,ln 8,var_n"i"),@{typ "bool list"})),
                                                  bop(Add,var_w("v",32),mop(Cast w32,var_n"i")),
                                                  ln 1,var_b"privileged"],@{theory}),
                                            var("state",qTy))]))]),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemU_unpriv",
   close
     (tp[var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         apply
           (call
              ("MemU_with_priv",@{typ "state \<Rightarrow> ('N::len word \<times> state)"},
               tp[var_w("address",32),var_n"size",lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemU_unpriv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         apply
           (call
              ("write'MemU_with_priv",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("MemU",
   close
     (tp[var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            apply
              (call
                 ("MemU_with_priv",@{typ "state \<Rightarrow> ('N::len word \<times> state)"},
                  tp[var_w("address",32),var_n"size",var_b"v"],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'MemU",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            apply
              (call
                 ("write'MemU_with_priv",@{typ "state \<Rightarrow> state"},
                  tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"v"],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("NullCheckIfThumbEE",
   close
     (var_w("n",4),
      close
        (var("state",qTy),
         let'
           (tp[var_b"r",var("s1",@{typ "bool \<times> state"})],
            let'
              (var("s",@{typ "bool \<times> state"}),
               ite(eq(apply
                        (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                         var("state",qTy)),lc("InstrSet_ThumbEE","InstrSet",@{theory})),
                   itb([(eq(var_w("n",4),lw(15,4)),
                         let'
                           (tp[var_w("v",32),var("s",@{typ "bool \<times> state"})],
                            let'
                              (tp[var_w("v",32),var("s3",qTy)],
                               apply
                                 (const
                                    ("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     @{theory}),var("state",qTy)),tp[var_w("v",32),lf,var("s3",qTy)]),
                            ite(eq(call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),lw(0,32)),
                                tp[mop(Fst,var("s",@{typ "bool \<times> state"})),
                                   mop(Snd,
                                       apply
                                         (call
                                            ("raise'exception",
                                             @{typ "state \<Rightarrow> (unit \<times> state)"},
                                             call
                                               ("exception.UNPREDICTABLE",@{typ exception},
                                                ls"NullCheckIfThumbEE",@{theory}),@{theory}),
                                          mop(Snd,var("s",@{typ "bool \<times> state"}))))],
                                var("s",@{typ "bool \<times> state"})))),
                        (eq(var_w("n",4),lw(13,4)),
                         let'
                           (tp[var_w("v",32),var("s",@{typ "bool \<times> state"})],
                            let'
                              (tp[var_w("v",32),var("s3",qTy)],
                               apply
                                 (const
                                    ("SP",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     @{theory}),var("state",qTy)),tp[var_w("v",32),lf,var("s3",qTy)]),
                            ite(eq(var_w("v",32),lw(0,32)),
                                tp[mop(Fst,var("s",@{typ "bool \<times> state"})),
                                   mop(Snd,
                                       apply
                                         (call
                                            ("raise'exception",
                                             @{typ "state \<Rightarrow> (unit \<times> state)"},
                                             call
                                               ("exception.UNPREDICTABLE",@{typ exception},
                                                ls"NullCheckIfThumbEE",@{theory}),@{theory}),
                                          mop(Snd,var("s",@{typ "bool \<times> state"}))))],
                                var("s",@{typ "bool \<times> state"}))))],
                       let'
                         (tp[var_w("v",32),var("s",@{typ "bool \<times> state"})],
                          let'
                            (tp[var_w("v",32),var("s3",qTy)],
                             apply
                               (call
                                  ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                   var_w("n",4),@{theory}),var("state",qTy)),
                             tp[var_w("v",32),lf,var("s3",qTy)]),
                          ite(eq(var_w("v",32),lw(0,32)),
                              let'
                                (tp[var_w("v",32),var("s",@{typ "bool \<times> state"})],
                                 let'
                                   (tp[var_w("v",32),var("s3",qTy)],
                                    apply
                                      (const
                                         ("PC",
                                          @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                          @{theory}),mop(Snd,var("s",@{typ "bool \<times> state"}))),
                                    tp[var_w("v",32),mop(Fst,var("s",@{typ "bool \<times> state"})),
                                       var("s3",qTy)]),
                                 let'
                                   (var("s1",qTy),
                                    apply
                                      (call
                                         ("write'ITSTATE",@{typ "state \<Rightarrow> state"},
                                          lw(0,8),@{theory}),
                                       apply
                                         (call
                                            ("write'LR",@{typ "state \<Rightarrow> state"},
                                             cc[ex(var_w("v",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                                                lw(1,1)],@{theory}),
                                          mop(Snd,var("s",@{typ "bool \<times> state"})))),
                                    tp[lt,
                                       apply
                                         (call
                                            ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                                             bop(Sub,
                                                 call
                                                   ("CP14.TEEHBR",w32,
                                                    call
                                                      ("state.CP14",@{typ CP14},var("s1",qTy),
                                                       @{theory}),@{theory}),lw(4,32)),@{theory}),
                                          var("s1",qTy))])),var("s",@{typ "bool \<times> state"})))),
                   tp[lf,var("state",qTy)]),
               tp[mop(Not,mop(Fst,var("s",@{typ "bool \<times> state"}))),
                  var("s",@{typ "bool \<times> state"})]),
            tp[var_b"r",mop(Snd,var("s1",@{typ "bool \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("HighestSetBit",
   close
     (var("w",@{typ "'N::len word"}),
      ite(eq(var("w",@{typ "'N::len word"}),ly(0,"N")),mop(Neg,li 1),
          mop(Cast HOLogic.intT,mop(Log,var("w",@{typ "'N::len word"}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("CountLeadingZeroBits",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Cast HOLogic.natT,
          bop(Sub,bop(Sub,mop(Cast HOLogic.intT,mop(Size,ly(0,"N"))),li 1),
              call("HighestSetBit",HOLogic.intT,var("w",@{typ "'N::len word"}),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LowestSetBit",
   close
     (var("w",@{typ "'N::len word"}),
      call("CountLeadingZeroBits",HOLogic.natT,mop(Rev,var("w",@{typ "'N::len word"})),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("BitCount",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,mop(Size,ly(0,"N")),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("state",@{typ "nat \<times> unit"}),
                             tp[lu,
                                ite(bop(Bit,var("w",@{typ "'N::len word"}),var_n"i"),
                                    tp[bop(Add,mop(Fst,var("state",@{typ "nat \<times> unit"})),ln 1),
                                       lu],var("state",@{typ "nat \<times> unit"}))]))]),tp[ln 0,lu])))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SignExtendFrom",
   close
     (tp[var("w",@{typ "'N::len word"}),var_n"p"],
      let'
        (var_n"s",bop(Sub,bop(Sub,mop(Size,ly(0,"N")),ln 1),var_n"p"),
         bop(Asr,bop(Lsl,var("w",@{typ "'N::len word"}),var_n"s"),var_n"s"))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Extend",
   close
     (tp[var_b"unsigned",var("w",@{typ "'M::len word"})],
      ite(var_b"unsigned",mop(Cast(@{typ "'N::len word"}),var("w",@{typ "'M::len word"})),
          mop(SE(@{typ "'N::len word"}),var("w",@{typ "'M::len word"})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("UInt",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var("w",@{typ "'N::len word"})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignedSatQ",
   close
     (tp[var_i"i",var_n"N"],
      close
        (var("state",qTy),
         tp[let'
              (var_i"max",mop(Cast HOLogic.intT,bop(Exp,ln 2,bop(Sub,var_n"N",ln 1))),
               itb([(bop(Gt,var_i"i",bop(Sub,var_i"max",li 1)),
                     tp[mop(Cast(@{typ "'M::len word"}),bop(Sub,var_i"max",li 1)),lt]),
                    (bop(Lt,var_i"i",mop(Neg,var_i"max")),
                     tp[mop(Cast(@{typ "'M::len word"}),mop(Neg,var_i"max")),lt])],
                   tp[mop(Cast(@{typ "'M::len word"}),var_i"i"),lf])),
            ite(bop(Lt,mop(Size,ly(0,"M")),var_n"N"),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.ASSERT",@{typ exception},ls"SignedSatQ: M < N",@{theory}),
                          @{theory}),var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UnsignedSatQ",
   close
     (tp[var_i"i",var_n"N"],
      close
        (var("state",qTy),
         tp[let'
              (var_i"max",mop(Cast HOLogic.intT,bop(Sub,bop(Exp,ln 2,var_n"N"),ln 1)),
               itb([(bop(Gt,var_i"i",var_i"max"),tp[mop(Cast(@{typ "'M::len word"}),var_i"max"),lt]),
                    (bop(Lt,var_i"i",li 0),tp[ly(0,"M"),lt])],
                   tp[mop(Cast(@{typ "'M::len word"}),var_i"i"),lf])),
            ite(bop(Lt,mop(Size,ly(0,"M")),var_n"N"),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.ASSERT",@{typ exception},ls"UnsignedSatQ: M < N",@{theory}),
                          @{theory}),var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SatQ",
   close
     (tp[var_i"i",var_n"N",var_b"unsigned"],
      close
        (var("state",qTy),
         ite(var_b"unsigned",
             apply
               (call
                  ("UnsignedSatQ",
                   @{typ "state \<Rightarrow> (('M::len word \<times> bool) \<times> state)"},
                   tp[var_i"i",var_n"N"],@{theory}),var("state",qTy)),
             apply
               (call
                  ("SignedSatQ",
                   @{typ "state \<Rightarrow> (('M::len word \<times> bool) \<times> state)"},
                   tp[var_i"i",var_n"N"],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignedSat",
   close
     (tp[var_i"i",var_n"N"],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "'M::len word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("SignedSatQ",
                  @{typ "state \<Rightarrow> (('M::len word \<times> bool) \<times> state)"},
                  tp[var_i"i",var_n"N"],@{theory}),var("state",qTy)),
            tp[mop(Fst,var("v",@{typ "'M::len word \<times> bool"})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UnsignedSat",
   close
     (tp[var_i"i",var_n"N"],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "'M::len word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedSatQ",
                  @{typ "state \<Rightarrow> (('M::len word \<times> bool) \<times> state)"},
                  tp[var_i"i",var_n"N"],@{theory}),var("state",qTy)),
            tp[mop(Fst,var("v",@{typ "'M::len word \<times> bool"})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LSL_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         tp[tp[bop(Lsl,var("x",@{typ "'N::len word"}),var_n"shift"),
               bop(Bit,
                   cc[mop(Cast(@{typ "bool list"}),var("x",@{typ "'N::len word"})),
                      bop(Rep,var_n"shift",lv"0")],mop(Size,ly(0,"N")))],
            ite(eq(var_n"shift",ln 0),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.ASSERT",@{typ exception},ls"LSL_C",@{theory}),@{theory}),
                       var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LSL",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         ite(eq(var_n"shift",ln 0),tp[var("x",@{typ "'N::len word"}),var("state",qTy)],
             let'
               (tp[var("v",@{typ "'N::len word \<times> bool"}),var("s",qTy)],
                apply
                  (call
                     ("LSL_C",
                      @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                      tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),var("state",qTy)),
                tp[mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LSR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         tp[tp[bop(Lsr,var("x",@{typ "'N::len word"}),var_n"shift"),
               bop(And,bop(Le,var_n"shift",mop(Size,ly(0,"N"))),
                   bop(Bit,var("x",@{typ "'N::len word"}),bop(Sub,var_n"shift",ln 1)))],
            ite(eq(var_n"shift",ln 0),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.ASSERT",@{typ exception},ls"LSR_C",@{theory}),@{theory}),
                       var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LSR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         ite(eq(var_n"shift",ln 0),tp[var("x",@{typ "'N::len word"}),var("state",qTy)],
             let'
               (tp[var("v",@{typ "'N::len word \<times> bool"}),var("s",qTy)],
                apply
                  (call
                     ("LSR_C",
                      @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                      tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),var("state",qTy)),
                tp[mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ASR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         tp[tp[bop(Asr,var("x",@{typ "'N::len word"}),var_n"shift"),
               bop(Bit,var("x",@{typ "'N::len word"}),
                   bop(Sub,mop(Min,tp[mop(Size,ly(0,"N")),var_n"shift"]),ln 1))],
            ite(eq(var_n"shift",ln 0),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.ASSERT",@{typ exception},ls"ASR_C",@{theory}),@{theory}),
                       var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ASR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         ite(eq(var_n"shift",ln 0),tp[var("x",@{typ "'N::len word"}),var("state",qTy)],
             let'
               (tp[var("v",@{typ "'N::len word \<times> bool"}),var("s",qTy)],
                apply
                  (call
                     ("ASR_C",
                      @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                      tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),var("state",qTy)),
                tp[mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ROR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         tp[let'
              (var("result",@{typ "'N::len word"}),
               bop(Ror,var("x",@{typ "'N::len word"}),var_n"shift"),
               tp[var("result",@{typ "'N::len word"}),mop(Msb,var("result",@{typ "'N::len word"}))]),
            ite(eq(var_n"shift",ln 0),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call("exception.ASSERT",@{typ exception},ls"ROR_C",@{theory}),@{theory}),
                       var("state",qTy))),var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ROR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      close
        (var("state",qTy),
         ite(eq(var_n"shift",ln 0),tp[var("x",@{typ "'N::len word"}),var("state",qTy)],
             let'
               (tp[var("v",@{typ "'N::len word \<times> bool"}),var("s",qTy)],
                apply
                  (call
                     ("ROR_C",
                      @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                      tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),var("state",qTy)),
                tp[mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RRX_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],
      tp[mop(Cast(@{typ "'N::len word"}),
             cc[mop(Cast(@{typ "bool list"}),var_b"carry_in"),
                ex(mop(Cast(@{typ "bool list"}),var("x",@{typ "'N::len word"})),
                   bop(Sub,mop(Size,ly(0,"N")),ln 1),ln 1,@{typ "bool list"})]),
         bop(Bit,var("x",@{typ "'N::len word"}),ln 0)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RRX",
   close
     (tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],
      mop(Fst,
          call
            ("RRX_C",@{typ "'N::len word \<times> bool"},
             tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeImmShift",
   close
     (tp[var_w("typ",2),var_w("imm5",5)],
      itb([(eq(var_w("typ",2),lw(0,2)),
            tp[lc("SRType_LSL","SRType",@{theory}),mop(Cast HOLogic.natT,var_w("imm5",5))]),
           (eq(var_w("typ",2),lw(1,2)),
            tp[lc("SRType_LSR","SRType",@{theory}),
               ite(eq(var_w("imm5",5),lw(0,5)),ln 32,mop(Cast HOLogic.natT,var_w("imm5",5)))]),
           (eq(var_w("typ",2),lw(2,2)),
            tp[lc("SRType_ASR","SRType",@{theory}),
               ite(eq(var_w("imm5",5),lw(0,5)),ln 32,mop(Cast HOLogic.natT,var_w("imm5",5)))]),
           (eq(var_w("typ",2),lw(3,2)),
            ite(eq(var_w("imm5",5),lw(0,5)),tp[lc("SRType_RRX","SRType",@{theory}),ln 1],
                tp[lc("SRType_ROR","SRType",@{theory}),mop(Cast HOLogic.natT,var_w("imm5",5))]))],
          lx(@{typ "SRType \<times> nat"}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeRegShift",
   close
     (var_w("typ",2),
      itb([(eq(var_w("typ",2),lw(0,2)),lc("SRType_LSL","SRType",@{theory})),
           (eq(var_w("typ",2),lw(1,2)),lc("SRType_LSR","SRType",@{theory})),
           (eq(var_w("typ",2),lw(2,2)),lc("SRType_ASR","SRType",@{theory})),
           (eq(var_w("typ",2),lw(3,2)),lc("SRType_ROR","SRType",@{theory}))],lx @{typ SRType})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Shift_C",
   close
     (tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",var_b"carry_in"],
      close
        (var("state",qTy),
         ite(eq(var_n"amount",ln 0),
             tp[tp[var("value",@{typ "'N::len word"}),var_b"carry_in"],var("state",qTy)],
             cs(var("typ",@{typ SRType}),
                [(lc("SRType_LSL","SRType",@{theory}),
                  apply
                    (call
                       ("LSL_C",
                        @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                        tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory}),
                     var("state",qTy))),
                 (lc("SRType_LSR","SRType",@{theory}),
                  apply
                    (call
                       ("LSR_C",
                        @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                        tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory}),
                     var("state",qTy))),
                 (lc("SRType_ASR","SRType",@{theory}),
                  apply
                    (call
                       ("ASR_C",
                        @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                        tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory}),
                     var("state",qTy))),
                 (lc("SRType_ROR","SRType",@{theory}),
                  apply
                    (call
                       ("ROR_C",
                        @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                        tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory}),
                     var("state",qTy))),
                 (lc("SRType_RRX","SRType",@{theory}),
                  tp[call
                       ("RRX_C",@{typ "'N::len word \<times> bool"},
                        tp[var("value",@{typ "'N::len word"}),var_b"carry_in"],@{theory}),
                     var("state",qTy)])],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Shift",
   close
     (tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",var_b"carry_in"],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "'N::len word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("Shift_C",
                  @{typ "state \<Rightarrow> (('N::len word \<times> bool) \<times> state)"},
                  tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",
                     var_b"carry_in"],@{theory}),var("state",qTy)),
            tp[mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ARMExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      close
        (var("state",qTy),
         apply
           (call
              ("Shift_C",@{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
               tp[mop(Cast w32,ex(var_w("imm12",12),ln 7,ln 0,w8)),
                  lc("SRType_ROR","SRType",@{theory}),
                  bop(Mul,ln 2,mop(Cast HOLogic.natT,ex(var_w("imm12",12),ln 11,ln 8,w4))),
                  var_b"carry_in"],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ARMExpandImm",
   close
     (var_w("imm12",12),
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("ARMExpandImm_C",
                  @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                  tp[var_w("imm12",12),
                     call
                       ("PSR.C",HOLogic.boolT,
                        call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],
                  @{theory}),var("state",qTy)),
            tp[mop(Fst,var("v",@{typ "32 word \<times> bool"})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ThumbExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      close
        (var("state",qTy),
         ite(eq(ex(var_w("imm12",12),ln 11,ln 10,(Word_Lib.mk_wordT 2)),lw(0,2)),
             let'
               (tp[var_w("v",32),var("s",qTy)],
                cs(ex(var_w("imm12",12),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
                   [(var_w("v",2),
                     itb([(eq(var_w("v",2),lw(0,2)),
                           tp[mop(Cast w32,ex(var_w("imm12",12),ln 7,ln 0,w8)),var("state",qTy)]),
                          (eq(var_w("v",2),lw(1,2)),
                           ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                               apply
                                 (call
                                    ("raise'exception",
                                     @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"ThumbExpandImm_C",@{theory}),@{theory}),var("state",qTy)),
                               tp[cc[lw(0,8),ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8),
                                     ex(var_w("imm12",12),ln 7,ln 0,w8)],var("state",qTy)])),
                          (eq(var_w("v",2),lw(2,2)),
                           ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                               apply
                                 (call
                                    ("raise'exception",
                                     @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"ThumbExpandImm_C",@{theory}),@{theory}),var("state",qTy)),
                               tp[cc[ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8),
                                     ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)],var("state",qTy)])),
                          (eq(var_w("v",2),lw(3,2)),
                           ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                               apply
                                 (call
                                    ("raise'exception",
                                     @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"ThumbExpandImm_C",@{theory}),@{theory}),var("state",qTy)),
                               tp[cc[ex(var_w("imm12",12),ln 7,ln 0,w8),
                                     ex(var_w("imm12",12),ln 7,ln 0,w8),
                                     ex(var_w("imm12",12),ln 7,ln 0,w8),
                                     ex(var_w("imm12",12),ln 7,ln 0,w8)],var("state",qTy)]))],
                         lx(@{typ "32 word \<times> state"})))],@{context}),
                tp[tp[var_w("v",32),var_b"carry_in"],var("s",qTy)]),
             apply
               (call
                  ("ROR_C",@{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                   tp[mop(Cast w32,cc[lw(1,1),ex(var_w("imm12",12),ln 6,ln 0,(Word_Lib.mk_wordT 7))]),
                      mop(Cast HOLogic.natT,ex(var_w("imm12",12),ln 11,ln 7,(Word_Lib.mk_wordT 5)))],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      close
        (var("state",qTy),
         ite(eq(call("state.Encoding",@{typ Encoding},var("state",qTy),@{theory}),
                lc("Encoding_Thumb2","Encoding",@{theory})),
             apply
               (call
                  ("ThumbExpandImm_C",
                   @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                   tp[var_w("imm12",12),var_b"carry_in"],@{theory}),var("state",qTy)),
             apply
               (call
                  ("ARMExpandImm_C",
                   @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                   tp[var_w("imm12",12),var_b"carry_in"],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("AddWithCarry",
   close
     (tp[var("x",@{typ "'N::len word"}),var("y",@{typ "'N::len word"}),var_b"carry_in"],
      let'
        (var_n"unsigned_sum",
         bop(Add,
             bop(Add,mop(Cast HOLogic.natT,var("x",@{typ "'N::len word"})),
                 mop(Cast HOLogic.natT,var("y",@{typ "'N::len word"}))),
             mop(Cast HOLogic.natT,var_b"carry_in")),
         let'
           (var("result",@{typ "'N::len word"}),
            mop(Cast(@{typ "'N::len word"}),var_n"unsigned_sum"),
            tp[var("result",@{typ "'N::len word"}),
               mop(Not,
                   eq(mop(Cast HOLogic.natT,var("result",@{typ "'N::len word"})),var_n"unsigned_sum")),
               mop(Not,
                   eq(mop(Cast HOLogic.intT,var("result",@{typ "'N::len word"})),
                      bop(Add,
                          bop(Add,mop(Cast HOLogic.intT,var("x",@{typ "'N::len word"})),
                              mop(Cast HOLogic.intT,var("y",@{typ "'N::len word"}))),
                          mop(Cast HOLogic.intT,var_b"carry_in"))))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DataProcessingALU",
   close
     (tp[var_w("opc",4),var_w("a",32),var_w("b",32),var_b"c"],
      itb([(eq(var_w("opc",4),lw(0,4)),
            tp[bop(BAnd,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(8,4)),
            tp[bop(BAnd,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(1,4)),
            tp[bop(BXor,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(9,4)),
            tp[bop(BXor,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(2,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),lt],@{theory})),
           (eq(var_w("opc",4),lw(10,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),lt],@{theory})),
           (eq(var_w("opc",4),lw(3,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[mop(BNot,var_w("a",32)),var_w("b",32),lt],@{theory})),
           (eq(var_w("opc",4),lw(4,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),lf],@{theory})),
           (eq(var_w("opc",4),lw(11,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),lf],@{theory})),
           (eq(var_w("opc",4),lw(5,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(6,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(7,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[mop(BNot,var_w("a",32)),var_w("b",32),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(12,4)),
            tp[bop(BOr,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(13,4)),tp[var_w("b",32),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(14,4)),
            tp[bop(BAnd,var_w("a",32),mop(BNot,var_w("b",32))),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(15,4)),
            tp[bop(BOr,var_w("a",32),mop(BNot,var_w("b",32))),var_b"c",lx HOLogic.boolT])],
          lx(@{typ "32 word \<times> bool \<times> bool"}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ArithmeticOpcode",
   close
     (var_w("opc",4),
      bop(And,bop(Or,bop(Bit,var_w("opc",4),ln 2),bop(Bit,var_w("opc",4),ln 1)),
          mop(Not,bop(And,bop(Bit,var_w("opc",4),ln 3),bop(Bit,var_w("opc",4),ln 2))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ExcVectorBase",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         itb([(call
                 ("SCTLR.V",HOLogic.boolT,
                  call
                    ("CP15.SCTLR",@{typ SCTLR},
                     call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),@{theory}),
               lw(268431360,32)),
              (apply
                 (call("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                  var("state",qTy)),
               call
                 ("CP15.VBAR",w32,call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),
                  @{theory}))],lw(0,32)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("EnterMonitorMode",
   close
     (tp[var("new_spsr_value",@{typ PSR}),var_w("new_lr_value",32),var_w("vect_offset",32)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'R",@{typ "state \<Rightarrow> state"},
                  tp[var_w("new_lr_value",32),lw(14,4)],@{theory}),
               apply
                 (call
                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                     var("new_spsr_value",@{typ PSR}),@{theory}),
                  rupd
                    ("state.CPSR",
                     tp[var("state",qTy),
                        rupd
                          ("PSR.M",
                           tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),lw(22,5)],
                           @{theory})],@{theory}))),
            let'
              (var("s",qTy),
               rupd
                 ("state.CPSR",
                  tp[var("s",qTy),
                     rupd
                       ("PSR.J",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lf],
                        @{theory})],@{theory}),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.CPSR",
                     tp[var("s",qTy),
                        rupd
                          ("PSR.T",
                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                              call
                                ("SCTLR.TE",HOLogic.boolT,
                                 call
                                   ("CP15.SCTLR",@{typ SCTLR},
                                    call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                                 @{theory})],@{theory})],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.E",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                 call
                                   ("SCTLR.EE",HOLogic.boolT,
                                    call
                                      ("CP15.SCTLR",@{typ SCTLR},
                                       call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                       @{theory}),@{theory})],@{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.A",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                 @{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.F",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                    @{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.I",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                       @{theory})],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.IT",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             lw(0,8)],@{theory})],@{theory}),
                                 apply
                                   (call
                                      ("BranchTo",@{typ "state \<Rightarrow> state"},
                                       bop(Add,
                                           call
                                             ("CP15.MVBAR",w32,
                                              call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                              @{theory}),var_w("vect_offset",32)),@{theory}),
                                    var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("EnterHypMode",
   close
     (tp[var("new_spsr_value",@{typ PSR}),var_w("new_lr_value",32),var_w("vect_offset",32)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'R",@{typ "state \<Rightarrow> state"},
                  tp[var_w("new_lr_value",32),lw(14,4)],@{theory}),
               apply
                 (call
                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                     var("new_spsr_value",@{typ PSR}),@{theory}),
                  rupd
                    ("state.CPSR",
                     tp[var("state",qTy),
                        rupd
                          ("PSR.M",
                           tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),lw(26,5)],
                           @{theory})],@{theory}))),
            let'
              (var("s",qTy),
               rupd
                 ("state.CPSR",
                  tp[var("s",qTy),
                     rupd
                       ("PSR.J",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lf],
                        @{theory})],@{theory}),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.CPSR",
                     tp[var("s",qTy),
                        rupd
                          ("PSR.T",
                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                              call
                                ("SCTLR.TE",HOLogic.boolT,
                                 call
                                   ("CP15.SCTLR",@{typ SCTLR},
                                    call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                                 @{theory})],@{theory})],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.E",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                 call
                                   ("SCTLR.EE",HOLogic.boolT,
                                    call
                                      ("CP15.SCTLR",@{typ SCTLR},
                                       call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                       @{theory}),@{theory})],@{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.A",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                 @{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.F",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                    @{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.I",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                       @{theory})],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.IT",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             lw(0,8)],@{theory})],@{theory}),
                                 apply
                                   (call
                                      ("BranchTo",@{typ "state \<Rightarrow> state"},
                                       bop(Add,
                                           call
                                             ("CP15.MVBAR",w32,
                                              call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                              @{theory}),var_w("vect_offset",32)),@{theory}),
                                    var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeReset",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            let'
              (var("s",qTy),
               rupd
                 ("state.CPSR",
                  tp[var("state",qTy),
                     rupd
                       ("PSR.M",
                        tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),lw(19,5)],
                        @{theory})],@{theory}),
               tp[apply
                    (call("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                     var("s",qTy)),var("s",qTy)]),
            let'
              (var("s",qTy),
               ite(var_b"v",
                   rupd
                     ("state.CP15",
                      tp[var("s",qTy),
                         rupd
                           ("CP15.SCR",
                            tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                               rupd
                                 ("SCR.NS",
                                  tp[call
                                       ("CP15.SCR",@{typ SCR},
                                        call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                        @{theory}),lf],@{theory})],@{theory})],@{theory}),
                   var("s",qTy)),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.CPSR",
                     tp[var("s",qTy),
                        rupd
                          ("PSR.I",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                           @{theory})],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.F",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                              @{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.A",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                 @{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.IT",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lw(0,8)],
                                    @{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.J",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lf],
                                       @{theory})],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.T",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             call
                                               ("SCTLR.TE",HOLogic.boolT,
                                                call
                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                   call
                                                     ("state.CP15",@{typ CP15},var("s",qTy),
                                                      @{theory}),@{theory}),@{theory})],@{theory})],
                                    @{theory}),
                                 let'
                                   (tp[var_w("v",32),var("s",qTy)],
                                    let'
                                      (var("s0",qTy),
                                       rupd
                                         ("state.CPSR",
                                          tp[var("s",qTy),
                                             rupd
                                               ("PSR.E",
                                                tp[call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                   call
                                                     ("SCTLR.EE",HOLogic.boolT,
                                                      call
                                                        ("CP15.SCTLR",@{typ SCTLR},
                                                         call
                                                           ("state.CP15",@{typ CP15},var("s",qTy),
                                                            @{theory}),@{theory}),@{theory})],
                                                @{theory})],@{theory}),
                                       tp[apply
                                            (call
                                               ("ExcVectorBase",
                                                @{typ "state \<Rightarrow> 32 word"},lu,@{theory}),
                                             var("s0",qTy)),var("s0",qTy)]),
                                    apply
                                      (call
                                         ("BranchTo",@{typ "state \<Rightarrow> state"},
                                          bop(Add,var_w("v",32),lw(0,32)),@{theory}),var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeUndefInstrException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(2,32)),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
               let'
                 (var_w("vect_offset",32),lw(4,32),
                  let'
                    (var_w("preferred_exceptn_return",32),
                     bop(Sub,var_w("v",32),
                         ite(call
                               ("PSR.T",HOLogic.boolT,
                                call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                             lw(2,32),lw(4,32))),
                     itb([(bop(And,
                               apply
                                 (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s",qTy)),
                               bop(And,
                                   apply
                                     (call
                                        ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                         @{theory}),var("s",qTy)),
                                   bop(And,
                                       call
                                         ("SCR.NS",HOLogic.boolT,
                                          call
                                            ("CP15.SCR",@{typ SCR},
                                             call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                             @{theory}),@{theory}),
                                       eq(call
                                            ("PSR.M",(Word_Lib.mk_wordT 5),
                                             call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             @{theory}),lw(26,5))))),
                           apply
                             (call
                                ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                                 tp[var("v0",@{typ PSR}),var_w("preferred_exceptn_return",32),
                                    var_w("vect_offset",32)],@{theory}),var("s",qTy))),
                          (bop(And,
                               apply
                                 (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s",qTy)),
                               bop(And,
                                   apply
                                     (call
                                        ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                         @{theory}),var("s",qTy)),
                                   bop(And,
                                       mop(Not,
                                           apply
                                             (call
                                                ("IsSecure",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("s",qTy))),
                                       bop(And,
                                           call
                                             ("HCR.TGE",HOLogic.boolT,
                                              call
                                                ("CP15.HCR",@{typ HCR},
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                 @{theory}),@{theory}),
                                           eq(call
                                                ("PSR.M",(Word_Lib.mk_wordT 5),
                                                 call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 @{theory}),lw(16,5)))))),
                           apply
                             (call
                                ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                                 tp[var("v0",@{typ PSR}),var_w("preferred_exceptn_return",32),
                                    lw(20,32)],@{theory}),var("s",qTy)))],
                         let'
                           (var("s",qTy),
                            ite(eq(call
                                     ("PSR.M",(Word_Lib.mk_wordT 5),
                                      call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                   lw(22,5)),
                                rupd
                                  ("state.CP15",
                                   tp[var("s",qTy),
                                      rupd
                                        ("CP15.SCR",
                                         tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                            rupd
                                              ("SCR.NS",
                                               tp[call
                                                    ("CP15.SCR",@{typ SCR},
                                                     call
                                                       ("state.CP15",@{typ CP15},var("s",qTy),
                                                        @{theory}),@{theory}),lf],@{theory})],
                                         @{theory})],@{theory}),var("s",qTy)),
                            let'
                              (var("s",qTy),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[var_w("v",32),lw(14,4)],@{theory}),
                                  apply
                                    (call
                                       ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                        var("v0",@{typ PSR}),@{theory}),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.M",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(27,5)],@{theory})],@{theory}))),
                               let'
                                 (var("s",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.IT",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(0,8)],@{theory})],@{theory}),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.J",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lf],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.T",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),
                                                       call
                                                         ("SCTLR.TE",HOLogic.boolT,
                                                          call
                                                            ("CP15.SCTLR",@{typ SCTLR},
                                                             call
                                                               ("state.CP15",@{typ CP15},
                                                                var("s",qTy),@{theory}),@{theory}),
                                                          @{theory})],@{theory})],@{theory}),
                                           let'
                                             (tp[var_w("v",32),var("s",qTy)],
                                              let'
                                                (var("s0",qTy),
                                                 rupd
                                                   ("state.CPSR",
                                                    tp[var("s",qTy),
                                                       rupd
                                                         ("PSR.E",
                                                          tp[call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory}),
                                                             call
                                                               ("SCTLR.EE",HOLogic.boolT,
                                                                call
                                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                                   call
                                                                     ("state.CP15",@{typ CP15},
                                                                      var("s",qTy),@{theory}),
                                                                   @{theory}),@{theory})],@{theory})],
                                                    @{theory}),
                                                 tp[apply
                                                      (call
                                                         ("ExcVectorBase",
                                                          @{typ "state \<Rightarrow> 32 word"},lu,
                                                          @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                              apply
                                                (call
                                                   ("BranchTo",@{typ "state \<Rightarrow> state"},
                                                    bop(Add,var_w("v",32),var_w("vect_offset",32)),
                                                    @{theory}),var("s",qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeSVCException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call("ITAdvance",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(call
                     ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                      @{theory}),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),tp[bop(Sub,var_w("v",32),lw(2,32)),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
               let'
                 (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                  let'
                    (var_w("vect_offset",32),lw(8,32),
                     itb([(bop(And,
                               apply
                                 (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s",qTy)),
                               bop(And,
                                   apply
                                     (call
                                        ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                         @{theory}),var("s",qTy)),
                                   bop(And,
                                       call
                                         ("SCR.NS",HOLogic.boolT,
                                          call
                                            ("CP15.SCR",@{typ SCR},
                                             call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                             @{theory}),@{theory}),
                                       eq(call
                                            ("PSR.M",(Word_Lib.mk_wordT 5),
                                             call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             @{theory}),lw(26,5))))),
                           apply
                             (call
                                ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                                 tp[var("v0",@{typ PSR}),var_w("v",32),var_w("vect_offset",32)],
                                 @{theory}),var("s",qTy))),
                          (bop(And,
                               apply
                                 (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s",qTy)),
                               bop(And,
                                   apply
                                     (call
                                        ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                         @{theory}),var("s",qTy)),
                                   bop(And,
                                       mop(Not,
                                           apply
                                             (call
                                                ("IsSecure",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("s",qTy))),
                                       bop(And,
                                           call
                                             ("HCR.TGE",HOLogic.boolT,
                                              call
                                                ("CP15.HCR",@{typ HCR},
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                 @{theory}),@{theory}),
                                           eq(call
                                                ("PSR.M",(Word_Lib.mk_wordT 5),
                                                 call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 @{theory}),lw(16,5)))))),
                           apply
                             (call
                                ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                                 tp[var("v0",@{typ PSR}),var_w("v",32),lw(20,32)],@{theory}),
                              var("s",qTy)))],
                         let'
                           (var("s",qTy),
                            ite(eq(call
                                     ("PSR.M",(Word_Lib.mk_wordT 5),
                                      call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                   lw(22,5)),
                                rupd
                                  ("state.CP15",
                                   tp[var("s",qTy),
                                      rupd
                                        ("CP15.SCR",
                                         tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                            rupd
                                              ("SCR.NS",
                                               tp[call
                                                    ("CP15.SCR",@{typ SCR},
                                                     call
                                                       ("state.CP15",@{typ CP15},var("s",qTy),
                                                        @{theory}),@{theory}),lf],@{theory})],
                                         @{theory})],@{theory}),var("s",qTy)),
                            let'
                              (var("s",qTy),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[var_w("v",32),lw(14,4)],@{theory}),
                                  apply
                                    (call
                                       ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                        var("v0",@{typ PSR}),@{theory}),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.M",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(19,5)],@{theory})],@{theory}))),
                               let'
                                 (var("s",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.IT",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(0,8)],@{theory})],@{theory}),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.J",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lf],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.T",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),
                                                       call
                                                         ("SCTLR.TE",HOLogic.boolT,
                                                          call
                                                            ("CP15.SCTLR",@{typ SCTLR},
                                                             call
                                                               ("state.CP15",@{typ CP15},
                                                                var("s",qTy),@{theory}),@{theory}),
                                                          @{theory})],@{theory})],@{theory}),
                                           let'
                                             (tp[var_w("v",32),var("s",qTy)],
                                              let'
                                                (var("s0",qTy),
                                                 rupd
                                                   ("state.CPSR",
                                                    tp[var("s",qTy),
                                                       rupd
                                                         ("PSR.E",
                                                          tp[call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory}),
                                                             call
                                                               ("SCTLR.EE",HOLogic.boolT,
                                                                call
                                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                                   call
                                                                     ("state.CP15",@{typ CP15},
                                                                      var("s",qTy),@{theory}),
                                                                   @{theory}),@{theory})],@{theory})],
                                                    @{theory}),
                                                 tp[apply
                                                      (call
                                                         ("ExcVectorBase",
                                                          @{typ "state \<Rightarrow> 32 word"},lu,
                                                          @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                              apply
                                                (call
                                                   ("BranchTo",@{typ "state \<Rightarrow> state"},
                                                    bop(Add,var_w("v",32),var_w("vect_offset",32)),
                                                    @{theory}),var("s",qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeSMCException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call("ITAdvance",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(call
                     ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                      @{theory}),
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
               let'
                 (var("s0",qTy),
                  ite(eq(call
                           ("PSR.M",(Word_Lib.mk_wordT 5),
                            call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),lw(22,5)),
                      rupd
                        ("state.CP15",
                         tp[var("s",qTy),
                            rupd
                              ("CP15.SCR",
                               tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                  rupd
                                    ("SCR.NS",
                                     tp[call
                                          ("CP15.SCR",@{typ SCR},
                                           call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           @{theory}),lf],@{theory})],@{theory})],@{theory}),
                      var("s",qTy)),
                  apply
                    (call
                       ("EnterMonitorMode",@{typ "state \<Rightarrow> state"},
                        tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),var_w("v",32),
                           lw(8,32)],@{theory}),
                     rupd
                       ("state.CPSR",
                        tp[var("s0",qTy),
                           rupd
                             ("PSR.M",
                              tp[call("state.CPSR",@{typ PSR},var("s0",qTy),@{theory}),lw(22,5)],
                              @{theory})],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeHVCException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call("ITAdvance",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(call
                     ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                      @{theory}),
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
               let'
                 (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                  ite(eq(call
                           ("PSR.M",(Word_Lib.mk_wordT 5),
                            call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),lw(26,5)),
                      apply
                        (call
                           ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                            tp[var("v0",@{typ PSR}),var_w("v",32),lw(8,32)],@{theory}),var("s",qTy)),
                      apply
                        (call
                           ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                            tp[var("v0",@{typ PSR}),var_w("v",32),lw(20,32)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeDataAbortException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Add,var_w("v",32),lw(4,32)),var("s",qTy)]),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy))),
            let'
              (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
               let'
                 (var_w("vect_offset",32),lw(16,32),
                  itb([(bop(And,
                            apply
                              (call
                                 ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            bop(And,
                                call
                                  ("SCR.EA",HOLogic.boolT,
                                   call
                                     ("CP15.SCR",@{typ SCR},
                                      call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                      @{theory}),@{theory}),
                                call("IsExternalAbort",HOLogic.boolT,lu,@{theory}))),
                        apply
                          (call
                             ("EnterMonitorMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),var_w("v",32),var_w("vect_offset",32)],
                              @{theory}),
                           ite(eq(call
                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                     call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                  lw(22,5)),
                               rupd
                                 ("state.CP15",
                                  tp[var("s",qTy),
                                     rupd
                                       ("CP15.SCR",
                                        tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           rupd
                                             ("SCR.NS",
                                              tp[call
                                                   ("CP15.SCR",@{typ SCR},
                                                    call
                                                      ("state.CP15",@{typ CP15},var("s",qTy),
                                                       @{theory}),@{theory}),lf],@{theory})],
                                        @{theory})],@{theory}),var("s",qTy)))),
                       (bop(And,
                            apply
                              (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            bop(And,
                                apply
                                  (call
                                     ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                      @{theory}),var("s",qTy)),
                                bop(And,
                                    call
                                      ("SCR.NS",HOLogic.boolT,
                                       call
                                         ("CP15.SCR",@{typ SCR},
                                          call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                          @{theory}),@{theory}),
                                    eq(call
                                         ("PSR.M",(Word_Lib.mk_wordT 5),
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory}),lw(26,5))))),
                        apply
                          (call
                             ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),bop(Sub,var_w("v",32),lw(8,32)),
                                 var_w("vect_offset",32)],@{theory}),var("s",qTy)))],
                      let'
                        (var("s",qTy),
                         ite(bop(And,
                                 apply
                                   (call
                                      ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                       @{theory}),var("s",qTy)),
                                 eq(call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                       @{theory}),lw(22,5))),
                             rupd
                               ("state.CP15",
                                tp[var("s",qTy),
                                   rupd
                                     ("CP15.SCR",
                                      tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                         rupd
                                           ("SCR.NS",
                                            tp[call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),lf],@{theory})],@{theory})],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),lw(14,4)],@{theory}),
                               apply
                                 (call
                                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                     var("v0",@{typ PSR}),@{theory}),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.M",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lw(23,5)],@{theory})],@{theory}))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               let'
                                 (var("s0",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  tp[apply
                                       (call
                                          ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                           @{theory}),var("s0",qTy)),var("s0",qTy)]),
                               let'
                                 (var("s",qTy),
                                  ite(bop(Or,mop(Not,var_b"v"),
                                          bop(Or,
                                              apply
                                                (call
                                                   ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              bop(Or,
                                                  mop(Not,
                                                      call
                                                        ("SCR.NS",HOLogic.boolT,
                                                         call
                                                           ("CP15.SCR",@{typ SCR},
                                                            call
                                                              ("state.CP15",@{typ CP15},
                                                               var("s",qTy),@{theory}),@{theory}),
                                                         @{theory})),
                                                  call
                                                    ("SCR.AW",HOLogic.boolT,
                                                     call
                                                       ("CP15.SCR",@{typ SCR},
                                                        call
                                                          ("state.CP15",@{typ CP15},var("s",qTy),
                                                           @{theory}),@{theory}),@{theory})))),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.A",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  lt],@{theory})],@{theory}),var("s",qTy)),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.IT",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(0,8)],@{theory})],@{theory}),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.J",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lf],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.T",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),
                                                       call
                                                         ("SCTLR.TE",HOLogic.boolT,
                                                          call
                                                            ("CP15.SCTLR",@{typ SCTLR},
                                                             call
                                                               ("state.CP15",@{typ CP15},
                                                                var("s",qTy),@{theory}),@{theory}),
                                                          @{theory})],@{theory})],@{theory}),
                                           let'
                                             (tp[var_w("v",32),var("s",qTy)],
                                              let'
                                                (var("s0",qTy),
                                                 rupd
                                                   ("state.CPSR",
                                                    tp[var("s",qTy),
                                                       rupd
                                                         ("PSR.E",
                                                          tp[call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory}),
                                                             call
                                                               ("SCTLR.EE",HOLogic.boolT,
                                                                call
                                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                                   call
                                                                     ("state.CP15",@{typ CP15},
                                                                      var("s",qTy),@{theory}),
                                                                   @{theory}),@{theory})],@{theory})],
                                                    @{theory}),
                                                 tp[apply
                                                      (call
                                                         ("ExcVectorBase",
                                                          @{typ "state \<Rightarrow> 32 word"},lu,
                                                          @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                              apply
                                                (call
                                                   ("BranchTo",@{typ "state \<Rightarrow> state"},
                                                    bop(Add,var_w("v",32),var_w("vect_offset",32)),
                                                    @{theory}),var("s",qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakePrefetchAbortException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
               let'
                 (var_w("vect_offset",32),lw(12,32),
                  itb([(bop(And,
                            apply
                              (call
                                 ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            bop(And,
                                call
                                  ("SCR.EA",HOLogic.boolT,
                                   call
                                     ("CP15.SCR",@{typ SCR},
                                      call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                      @{theory}),@{theory}),
                                call("IsExternalAbort",HOLogic.boolT,lu,@{theory}))),
                        apply
                          (call
                             ("EnterMonitorMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),var_w("v",32),var_w("vect_offset",32)],
                              @{theory}),
                           ite(eq(call
                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                     call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                  lw(22,5)),
                               rupd
                                 ("state.CP15",
                                  tp[var("s",qTy),
                                     rupd
                                       ("CP15.SCR",
                                        tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           rupd
                                             ("SCR.NS",
                                              tp[call
                                                   ("CP15.SCR",@{typ SCR},
                                                    call
                                                      ("state.CP15",@{typ CP15},var("s",qTy),
                                                       @{theory}),@{theory}),lf],@{theory})],
                                        @{theory})],@{theory}),var("s",qTy)))),
                       (bop(And,
                            apply
                              (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            bop(And,
                                apply
                                  (call
                                     ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                      @{theory}),var("s",qTy)),
                                bop(And,
                                    call
                                      ("SCR.NS",HOLogic.boolT,
                                       call
                                         ("CP15.SCR",@{typ SCR},
                                          call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                          @{theory}),@{theory}),
                                    eq(call
                                         ("PSR.M",(Word_Lib.mk_wordT 5),
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory}),lw(26,5))))),
                        apply
                          (call
                             ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),bop(Sub,var_w("v",32),lw(4,32)),
                                 var_w("vect_offset",32)],@{theory}),var("s",qTy)))],
                      let'
                        (var("s",qTy),
                         ite(bop(And,
                                 apply
                                   (call
                                      ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                       @{theory}),var("s",qTy)),
                                 eq(call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                       @{theory}),lw(22,5))),
                             rupd
                               ("state.CP15",
                                tp[var("s",qTy),
                                   rupd
                                     ("CP15.SCR",
                                      tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                         rupd
                                           ("SCR.NS",
                                            tp[call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),lf],@{theory})],@{theory})],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),lw(14,4)],@{theory}),
                               apply
                                 (call
                                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                     var("v0",@{typ PSR}),@{theory}),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.M",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lw(23,5)],@{theory})],@{theory}))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               let'
                                 (var("s0",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  tp[apply
                                       (call
                                          ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                           @{theory}),var("s0",qTy)),var("s0",qTy)]),
                               let'
                                 (var("s",qTy),
                                  ite(bop(Or,mop(Not,var_b"v"),
                                          bop(Or,
                                              apply
                                                (call
                                                   ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              bop(Or,
                                                  mop(Not,
                                                      call
                                                        ("SCR.NS",HOLogic.boolT,
                                                         call
                                                           ("CP15.SCR",@{typ SCR},
                                                            call
                                                              ("state.CP15",@{typ CP15},
                                                               var("s",qTy),@{theory}),@{theory}),
                                                         @{theory})),
                                                  call
                                                    ("SCR.AW",HOLogic.boolT,
                                                     call
                                                       ("CP15.SCR",@{typ SCR},
                                                        call
                                                          ("state.CP15",@{typ CP15},var("s",qTy),
                                                           @{theory}),@{theory}),@{theory})))),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.A",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  lt],@{theory})],@{theory}),var("s",qTy)),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.IT",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(0,8)],@{theory})],@{theory}),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.J",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lf],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.T",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),
                                                       call
                                                         ("SCTLR.TE",HOLogic.boolT,
                                                          call
                                                            ("CP15.SCTLR",@{typ SCTLR},
                                                             call
                                                               ("state.CP15",@{typ CP15},
                                                                var("s",qTy),@{theory}),@{theory}),
                                                          @{theory})],@{theory})],@{theory}),
                                           let'
                                             (tp[var_w("v",32),var("s",qTy)],
                                              let'
                                                (var("s0",qTy),
                                                 rupd
                                                   ("state.CPSR",
                                                    tp[var("s",qTy),
                                                       rupd
                                                         ("PSR.E",
                                                          tp[call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory}),
                                                             call
                                                               ("SCTLR.EE",HOLogic.boolT,
                                                                call
                                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                                   call
                                                                     ("state.CP15",@{typ CP15},
                                                                      var("s",qTy),@{theory}),
                                                                   @{theory}),@{theory})],@{theory})],
                                                    @{theory}),
                                                 tp[apply
                                                      (call
                                                         ("ExcVectorBase",
                                                          @{typ "state \<Rightarrow> 32 word"},lu,
                                                          @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                              apply
                                                (call
                                                   ("BranchTo",@{typ "state \<Rightarrow> state"},
                                                    bop(Add,var_w("v",32),var_w("vect_offset",32)),
                                                    @{theory}),var("s",qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakePhysicalIRQException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
               let'
                 (var_w("vect_offset",32),lw(24,32),
                  itb([(bop(And,
                            apply
                              (call
                                 ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            call
                              ("SCR.IRQ",HOLogic.boolT,
                               call
                                 ("CP15.SCR",@{typ SCR},
                                  call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                               @{theory})),
                        apply
                          (call
                             ("EnterMonitorMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),var_w("v",32),var_w("vect_offset",32)],
                              @{theory}),
                           ite(eq(call
                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                     call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                  lw(22,5)),
                               rupd
                                 ("state.CP15",
                                  tp[var("s",qTy),
                                     rupd
                                       ("CP15.SCR",
                                        tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           rupd
                                             ("SCR.NS",
                                              tp[call
                                                   ("CP15.SCR",@{typ SCR},
                                                    call
                                                      ("state.CP15",@{typ CP15},var("s",qTy),
                                                       @{theory}),@{theory}),lf],@{theory})],
                                        @{theory})],@{theory}),var("s",qTy)))),
                       (bop(Or,
                            bop(And,
                                apply
                                  (call
                                     ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                   var("s",qTy)),
                                bop(And,
                                    apply
                                      (call
                                         ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                          @{theory}),var("s",qTy)),
                                    bop(And,
                                        mop(Not,
                                            call
                                              ("SCR.IRQ",HOLogic.boolT,
                                               call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),@{theory})),
                                        bop(And,
                                            call
                                              ("HCR.IMO",HOLogic.boolT,
                                               call
                                                 ("CP15.HCR",@{typ HCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),@{theory}),
                                            mop(Not,
                                                apply
                                                  (call
                                                     ("IsSecure",@{typ "state \<Rightarrow> bool"},
                                                      lu,@{theory}),var("s",qTy))))))),
                            eq(call
                                 ("PSR.M",(Word_Lib.mk_wordT 5),
                                  call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                               lw(26,5))),
                        apply
                          (call
                             ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),bop(Sub,var_w("v",32),lw(4,32)),
                                 var_w("vect_offset",32)],@{theory}),
                           rupd
                             ("state.CP15",
                              tp[var("s",qTy),
                                 rupd
                                   ("CP15.HSR",
                                    tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                       lx @{typ HSR}],@{theory})],@{theory})))],
                      let'
                        (var("s",qTy),
                         ite(eq(call
                                  ("PSR.M",(Word_Lib.mk_wordT 5),
                                   call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                lw(22,5)),
                             rupd
                               ("state.CP15",
                                tp[var("s",qTy),
                                   rupd
                                     ("CP15.SCR",
                                      tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                         rupd
                                           ("SCR.NS",
                                            tp[call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),lf],@{theory})],@{theory})],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),lw(14,4)],@{theory}),
                               apply
                                 (call
                                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                     var("v0",@{typ PSR}),@{theory}),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.M",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lw(18,5)],@{theory})],@{theory}))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               let'
                                 (var("s0",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  tp[apply
                                       (call
                                          ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                           @{theory}),var("s0",qTy)),var("s0",qTy)]),
                               let'
                                 (var("s",qTy),
                                  ite(bop(Or,mop(Not,var_b"v"),
                                          bop(Or,
                                              apply
                                                (call
                                                   ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              bop(Or,
                                                  mop(Not,
                                                      call
                                                        ("SCR.NS",HOLogic.boolT,
                                                         call
                                                           ("CP15.SCR",@{typ SCR},
                                                            call
                                                              ("state.CP15",@{typ CP15},
                                                               var("s",qTy),@{theory}),@{theory}),
                                                         @{theory})),
                                                  call
                                                    ("SCR.AW",HOLogic.boolT,
                                                     call
                                                       ("CP15.SCR",@{typ SCR},
                                                        call
                                                          ("state.CP15",@{typ CP15},var("s",qTy),
                                                           @{theory}),@{theory}),@{theory})))),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.A",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  lt],@{theory})],@{theory}),var("s",qTy)),
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.IT",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 lw(0,8)],@{theory})],@{theory}),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.J",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lf],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.T",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),
                                                       call
                                                         ("SCTLR.TE",HOLogic.boolT,
                                                          call
                                                            ("CP15.SCTLR",@{typ SCTLR},
                                                             call
                                                               ("state.CP15",@{typ CP15},
                                                                var("s",qTy),@{theory}),@{theory}),
                                                          @{theory})],@{theory})],@{theory}),
                                           let'
                                             (var("s",qTy),
                                              rupd
                                                ("state.CPSR",
                                                 tp[var("s",qTy),
                                                    rupd
                                                      ("PSR.E",
                                                       tp[call
                                                            ("state.CPSR",@{typ PSR},var("s",qTy),
                                                             @{theory}),
                                                          call
                                                            ("SCTLR.EE",HOLogic.boolT,
                                                             call
                                                               ("CP15.SCTLR",@{typ SCTLR},
                                                                call
                                                                  ("state.CP15",@{typ CP15},
                                                                   var("s",qTy),@{theory}),@{theory}),
                                                             @{theory})],@{theory})],@{theory}),
                                              ite(call
                                                    ("SCTLR.VE",HOLogic.boolT,
                                                     call
                                                       ("CP15.SCTLR",@{typ SCTLR},
                                                        call
                                                          ("state.CP15",@{typ CP15},var("s",qTy),
                                                           @{theory}),@{theory}),@{theory}),
                                                  mop(Snd,
                                                      apply
                                                        (call
                                                           ("raise'exception",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (unit \<times> state)"},
                                                            call
                                                              ("exception.IMPLEMENTATION_DEFINED",
                                                               @{typ exception},
                                                               ls"branch to an IRQ vector",@{theory}),
                                                            @{theory}),var("s",qTy))),
                                                  apply
                                                    (call
                                                       ("BranchTo",
                                                        @{typ "state \<Rightarrow> state"},
                                                        bop(Add,
                                                            apply
                                                              (call
                                                                 ("ExcVectorBase",
                                                                  @{typ
                                                                  "state \<Rightarrow> 32 word"},lu,
                                                                  @{theory}),var("s",qTy)),
                                                            var_w("vect_offset",32)),@{theory}),
                                                     var("s",qTy))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeVirtualIRQException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("v",32),lw(14,4)],
                     @{theory}),
                  apply
                    (call
                       ("write'SPSR",@{typ "state \<Rightarrow> state"},
                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.M",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lw(18,5)],
                              @{theory})],@{theory}))),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.CPSR",
                     tp[var("s",qTy),
                        rupd
                          ("PSR.I",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                           @{theory})],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.A",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                              @{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.IT",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lw(0,8)],
                                 @{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.J",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lf],
                                    @{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.T",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          call
                                            ("SCTLR.TE",HOLogic.boolT,
                                             call
                                               ("CP15.SCTLR",@{typ SCTLR},
                                                call
                                                  ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                @{theory}),@{theory})],@{theory})],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.E",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             call
                                               ("SCTLR.EE",HOLogic.boolT,
                                                call
                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                   call
                                                     ("state.CP15",@{typ CP15},var("s",qTy),
                                                      @{theory}),@{theory}),@{theory})],@{theory})],
                                    @{theory}),
                                 ite(call
                                       ("SCTLR.VE",HOLogic.boolT,
                                        call
                                          ("CP15.SCTLR",@{typ SCTLR},
                                           call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           @{theory}),@{theory}),
                                     mop(Snd,
                                         apply
                                           (call
                                              ("raise'exception",
                                               @{typ "state \<Rightarrow> (unit \<times> state)"},
                                               call
                                                 ("exception.IMPLEMENTATION_DEFINED",
                                                  @{typ exception},ls"branch to an IRQ vector",
                                                  @{theory}),@{theory}),var("s",qTy))),
                                     apply
                                       (call
                                          ("BranchTo",@{typ "state \<Rightarrow> state"},
                                           bop(Add,
                                               apply
                                                 (call
                                                    ("ExcVectorBase",
                                                     @{typ "state \<Rightarrow> 32 word"},lu,
                                                     @{theory}),var("s",qTy)),lw(24,32)),@{theory}),
                                        var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakePhysicalFIQException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("v0",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
               let'
                 (var_w("vect_offset",32),lw(28,32),
                  itb([(bop(And,
                            apply
                              (call
                                 ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                               var("s",qTy)),
                            call
                              ("SCR.FIQ",HOLogic.boolT,
                               call
                                 ("CP15.SCR",@{typ SCR},
                                  call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                               @{theory})),
                        apply
                          (call
                             ("EnterMonitorMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),var_w("v",32),var_w("vect_offset",32)],
                              @{theory}),
                           ite(eq(call
                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                     call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                  lw(22,5)),
                               rupd
                                 ("state.CP15",
                                  tp[var("s",qTy),
                                     rupd
                                       ("CP15.SCR",
                                        tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           rupd
                                             ("SCR.NS",
                                              tp[call
                                                   ("CP15.SCR",@{typ SCR},
                                                    call
                                                      ("state.CP15",@{typ CP15},var("s",qTy),
                                                       @{theory}),@{theory}),lf],@{theory})],
                                        @{theory})],@{theory}),var("s",qTy)))),
                       (bop(Or,
                            bop(And,
                                apply
                                  (call
                                     ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                   var("s",qTy)),
                                bop(And,
                                    apply
                                      (call
                                         ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                          @{theory}),var("s",qTy)),
                                    bop(And,
                                        mop(Not,
                                            call
                                              ("SCR.FIQ",HOLogic.boolT,
                                               call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),@{theory})),
                                        bop(And,
                                            call
                                              ("HCR.FMO",HOLogic.boolT,
                                               call
                                                 ("CP15.HCR",@{typ HCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),@{theory}),
                                            mop(Not,
                                                apply
                                                  (call
                                                     ("IsSecure",@{typ "state \<Rightarrow> bool"},
                                                      lu,@{theory}),var("s",qTy))))))),
                            eq(call
                                 ("PSR.M",(Word_Lib.mk_wordT 5),
                                  call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                               lw(26,5))),
                        apply
                          (call
                             ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                              tp[var("v0",@{typ PSR}),bop(Sub,var_w("v",32),lw(4,32)),
                                 var_w("vect_offset",32)],@{theory}),
                           rupd
                             ("state.CP15",
                              tp[var("s",qTy),
                                 rupd
                                   ("CP15.HSR",
                                    tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                       lx @{typ HSR}],@{theory})],@{theory})))],
                      let'
                        (var("s",qTy),
                         ite(eq(call
                                  ("PSR.M",(Word_Lib.mk_wordT 5),
                                   call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                lw(22,5)),
                             rupd
                               ("state.CP15",
                                tp[var("s",qTy),
                                   rupd
                                     ("CP15.SCR",
                                      tp[call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                         rupd
                                           ("SCR.NS",
                                            tp[call
                                                 ("CP15.SCR",@{typ SCR},
                                                  call
                                                    ("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                                  @{theory}),lf],@{theory})],@{theory})],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),lw(14,4)],@{theory}),
                               apply
                                 (call
                                    ("write'SPSR",@{typ "state \<Rightarrow> state"},
                                     var("v0",@{typ PSR}),@{theory}),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.M",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lw(17,5)],@{theory})],@{theory}))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               let'
                                 (var("s0",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.I",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),
                                  tp[apply
                                       (call
                                          ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,
                                           @{theory}),var("s0",qTy)),var("s0",qTy)]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     ite(bop(Or,mop(Not,var_b"v"),
                                             bop(Or,
                                                 apply
                                                   (call
                                                      ("HaveVirtExt",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy)),
                                                 bop(Or,
                                                     mop(Not,
                                                         call
                                                           ("SCR.NS",HOLogic.boolT,
                                                            call
                                                              ("CP15.SCR",@{typ SCR},
                                                               call
                                                                 ("state.CP15",@{typ CP15},
                                                                  var("s",qTy),@{theory}),@{theory}),
                                                            @{theory})),
                                                     call
                                                       ("SCR.FW",HOLogic.boolT,
                                                        call
                                                          ("CP15.SCR",@{typ SCR},
                                                           call
                                                             ("state.CP15",@{typ CP15},var("s",qTy),
                                                              @{theory}),@{theory}),@{theory})))),
                                         rupd
                                           ("state.CPSR",
                                            tp[var("s",qTy),
                                               rupd
                                                 ("PSR.F",
                                                  tp[call
                                                       ("state.CPSR",@{typ PSR},var("s",qTy),
                                                        @{theory}),lt],@{theory})],@{theory}),
                                         var("s",qTy)),
                                     tp[apply
                                          (call
                                             ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},
                                              lu,@{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  let'
                                    (var("s",qTy),
                                     ite(bop(Or,mop(Not,var_b"v"),
                                             bop(Or,
                                                 apply
                                                   (call
                                                      ("HaveVirtExt",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy)),
                                                 bop(Or,
                                                     mop(Not,
                                                         call
                                                           ("SCR.NS",HOLogic.boolT,
                                                            call
                                                              ("CP15.SCR",@{typ SCR},
                                                               call
                                                                 ("state.CP15",@{typ CP15},
                                                                  var("s",qTy),@{theory}),@{theory}),
                                                            @{theory})),
                                                     call
                                                       ("SCR.AW",HOLogic.boolT,
                                                        call
                                                          ("CP15.SCR",@{typ SCR},
                                                           call
                                                             ("state.CP15",@{typ CP15},var("s",qTy),
                                                              @{theory}),@{theory}),@{theory})))),
                                         rupd
                                           ("state.CPSR",
                                            tp[var("s",qTy),
                                               rupd
                                                 ("PSR.A",
                                                  tp[call
                                                       ("state.CPSR",@{typ PSR},var("s",qTy),
                                                        @{theory}),lt],@{theory})],@{theory}),
                                         var("s",qTy)),
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.IT",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),lw(0,8)],@{theory})],@{theory}),
                                        let'
                                          (var("s",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.J",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),lf],@{theory})],@{theory}),
                                           let'
                                             (var("s",qTy),
                                              rupd
                                                ("state.CPSR",
                                                 tp[var("s",qTy),
                                                    rupd
                                                      ("PSR.T",
                                                       tp[call
                                                            ("state.CPSR",@{typ PSR},var("s",qTy),
                                                             @{theory}),
                                                          call
                                                            ("SCTLR.TE",HOLogic.boolT,
                                                             call
                                                               ("CP15.SCTLR",@{typ SCTLR},
                                                                call
                                                                  ("state.CP15",@{typ CP15},
                                                                   var("s",qTy),@{theory}),@{theory}),
                                                             @{theory})],@{theory})],@{theory}),
                                              let'
                                                (var("s",qTy),
                                                 rupd
                                                   ("state.CPSR",
                                                    tp[var("s",qTy),
                                                       rupd
                                                         ("PSR.E",
                                                          tp[call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory}),
                                                             call
                                                               ("SCTLR.EE",HOLogic.boolT,
                                                                call
                                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                                   call
                                                                     ("state.CP15",@{typ CP15},
                                                                      var("s",qTy),@{theory}),
                                                                   @{theory}),@{theory})],@{theory})],
                                                    @{theory}),
                                                 ite(call
                                                       ("SCTLR.VE",HOLogic.boolT,
                                                        call
                                                          ("CP15.SCTLR",@{typ SCTLR},
                                                           call
                                                             ("state.CP15",@{typ CP15},var("s",qTy),
                                                              @{theory}),@{theory}),@{theory}),
                                                     mop(Snd,
                                                         apply
                                                           (call
                                                              ("raise'exception",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (unit \<times> state)"},
                                                               call
                                                                 ("exception.IMPLEMENTATION_DEFINED",
                                                                  @{typ exception},
                                                                  ls"branch to an FIQ vector",
                                                                  @{theory}),@{theory}),var("s",qTy))),
                                                     apply
                                                       (call
                                                          ("BranchTo",
                                                           @{typ "state \<Rightarrow> state"},
                                                           bop(Add,
                                                               apply
                                                                 (call
                                                                    ("ExcVectorBase",
                                                                     @{typ
                                                                     "state \<Rightarrow> 32 word"},
                                                                     lu,@{theory}),var("s",qTy)),
                                                               var_w("vect_offset",32)),@{theory}),
                                                        var("s",qTy)))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeVirtualFIQException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                apply
                  (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                   var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)])),
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("v",32),lw(14,4)],
                     @{theory}),
                  apply
                    (call
                       ("write'SPSR",@{typ "state \<Rightarrow> state"},
                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.M",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lw(17,5)],
                              @{theory})],@{theory}))),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.CPSR",
                     tp[var("s",qTy),
                        rupd
                          ("PSR.I",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                           @{theory})],@{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.F",tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                              @{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.A",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                 @{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.IT",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lw(0,8)],
                                    @{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.J",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lf],
                                       @{theory})],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.T",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             call
                                               ("SCTLR.TE",HOLogic.boolT,
                                                call
                                                  ("CP15.SCTLR",@{typ SCTLR},
                                                   call
                                                     ("state.CP15",@{typ CP15},var("s",qTy),
                                                      @{theory}),@{theory}),@{theory})],@{theory})],
                                    @{theory}),
                                 let'
                                   (var("s",qTy),
                                    rupd
                                      ("state.CPSR",
                                       tp[var("s",qTy),
                                          rupd
                                            ("PSR.E",
                                             tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                call
                                                  ("SCTLR.EE",HOLogic.boolT,
                                                   call
                                                     ("CP15.SCTLR",@{typ SCTLR},
                                                      call
                                                        ("state.CP15",@{typ CP15},var("s",qTy),
                                                         @{theory}),@{theory}),@{theory})],@{theory})],
                                       @{theory}),
                                    ite(call
                                          ("SCTLR.VE",HOLogic.boolT,
                                           call
                                             ("CP15.SCTLR",@{typ SCTLR},
                                              call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                              @{theory}),@{theory}),
                                        mop(Snd,
                                            apply
                                              (call
                                                 ("raise'exception",
                                                  @{typ "state \<Rightarrow> (unit \<times> state)"},
                                                  call
                                                    ("exception.IMPLEMENTATION_DEFINED",
                                                     @{typ exception},ls"branch to an FIQ vector",
                                                     @{theory}),@{theory}),var("s",qTy))),
                                        apply
                                          (call
                                             ("BranchTo",@{typ "state \<Rightarrow> state"},
                                              bop(Add,
                                                  apply
                                                    (call
                                                       ("ExcVectorBase",
                                                        @{typ "state \<Rightarrow> 32 word"},lu,
                                                        @{theory}),var("s",qTy)),lw(28,32)),
                                              @{theory}),var("s",qTy)))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TakeHypTrapException",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(call
                  ("PSR.T",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                   @{theory}),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(4,32)),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),tp[bop(Sub,var_w("v",32),lw(8,32)),var("s",qTy)])),
            apply
              (call
                 ("EnterHypMode",@{typ "state \<Rightarrow> state"},
                  tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),var_w("v",32),lw(20,32)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("WriteHSR",
   close
     (tp[var_w("ec",6),var_w("HSRString",25)],
      close
        (var("state",qTy),
         let'
           (var_w("s0",32),bfi(ln 31,ln 26,var_w("ec",6),lw(0,32)),
            let'
              (var_w("s0",32),
               ite(bop(Or,mop(Not,eq(ex(var_w("ec",6),ln 5,ln 3,(Word_Lib.mk_wordT 3)),lw(4,3))),
                       bop(And,bop(Bit,var_w("ec",6),ln 2),bop(Bit,var_w("HSRString",25),ln 24))),
                   bfi(ln 25,ln 25,
                       mop(Cast w1,
                           eq(apply
                                (call
                                   ("ThisInstrLength",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                                 var("state",qTy)),ln 32)),var_w("s0",32)),var_w("s0",32)),
               let'
                 (var("s",@{typ "32 word \<times> state"}),
                  ite(bop(And,eq(ex(var_w("ec",6),ln 5,ln 4,(Word_Lib.mk_wordT 2)),lw(0,2)),
                          mop(Not,eq(ex(var_w("ec",6),ln 3,ln 0,w4),lw(0,4)))),
                      ite(eq(apply
                               (call
                                  ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                   @{theory}),var("state",qTy)),
                             lc("InstrSet_ARM","InstrSet",@{theory})),
                          tp[bfi(ln 23,ln 20,
                                 apply
                                   (call
                                      ("CurrentCond",@{typ "state \<Rightarrow> 4 word"},lu,
                                       @{theory}),var("state",qTy)),
                                 bfi(ln 24,ln 24,mop(Cast w1,lt),var_w("s0",32))),var("state",qTy)],
                          let'
                            (var_w("s0",32),
                             bfi(ln 24,ln 24,mop(Cast w1,lx HOLogic.boolT),var_w("s0",32)),
                             tp[bfi(ln 19,ln 0,
                                    ex(var_w("HSRString",25),ln 19,ln 0,(Word_Lib.mk_wordT 20)),
                                    ite(bop(Bit,var_w("s0",32),ln 24),
                                        ite(apply
                                              (call
                                                 ("ConditionPassed",
                                                  @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                               var("state",qTy)),
                                            bfi(ln 23,ln 20,
                                                ite(lx HOLogic.boolT,
                                                    apply
                                                      (call
                                                         ("CurrentCond",
                                                          @{typ "state \<Rightarrow> 4 word"},lu,
                                                          @{theory}),var("state",qTy)),lw(14,4)),
                                                var_w("s0",32)),
                                            bfi(ln 23,ln 20,
                                                apply
                                                  (call
                                                     ("CurrentCond",
                                                      @{typ "state \<Rightarrow> 4 word"},lu,
                                                      @{theory}),var("state",qTy)),var_w("s0",32))),
                                        var_w("s0",32))),var("state",qTy)])),
                      tp[bfi(ln 24,ln 0,var_w("HSRString",25),var_w("s0",32)),var("state",qTy)]),
                  rupd
                    ("state.CP15",
                     tp[mop(Snd,var("s",@{typ "32 word \<times> state"})),
                        rupd
                          ("CP15.HSR",
                           tp[call
                                ("state.CP15",@{typ CP15},
                                 mop(Snd,var("s",@{typ "32 word \<times> state"})),@{theory}),
                              call
                                ("write'reg'HSR",@{typ HSR},
                                 tp[call
                                      ("CP15.HSR",@{typ HSR},
                                       call
                                         ("state.CP15",@{typ CP15},
                                          mop(Snd,var("s",@{typ "32 word \<times> state"})),
                                          @{theory}),@{theory}),
                                    mop(Fst,var("s",@{typ "32 word \<times> state"}))],@{theory})],
                           @{theory})],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CallSupervisor",
   close
     (var_w("immediate",16),
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            apply
              (call("TakeSVCException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               let'
                 (tp[var_b"v",var("s",qTy)],
                  itb([(var_b"v",tp[lt,var("s",qTy)]),
                       (apply
                          (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                           var("s",qTy)),
                        ite(mop(Not,
                                apply
                                  (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                   var("s",qTy))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("CurrentModeIsNotUser",
                                     @{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                                  var("s",qTy)),
                               tp[bop(And,mop(Not,var_b"v"),
                                      call
                                        ("HCR.TGE",HOLogic.boolT,
                                         call
                                           ("CP15.HCR",@{typ HCR},
                                            call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                            @{theory}),@{theory})),var("s",qTy)]),
                            tp[lf,var("s",qTy)]))],tp[lf,var("s",qTy)]),
                  ite(var_b"v",
                      apply
                        (call
                           ("WriteHSR",@{typ "state \<Rightarrow> state"},
                            tp[lw(18,6),
                               bfi(ln 15,ln 0,
                                   ite(eq(apply
                                            (call
                                               ("CurrentCond",@{typ "state \<Rightarrow> 4 word"},
                                                lu,@{theory}),var("s",qTy)),lw(14,4)),
                                       var_w("immediate",16),lx w16),lw(0,25))],@{theory}),
                         var("s",qTy)),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CallHypervisor",
   close
     (var_w("immediate",16),
      close
        (var("state",qTy),
         apply
           (call("TakeHVCException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            apply
              (call
                 ("WriteHSR",@{typ "state \<Rightarrow> state"},
                  tp[lw(18,6),cc[var_w("immediate",16),lw(0,9)]],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BankedRegisterAccessValid",
   close
     (tp[var_w("SYSm",5),var_w("mode",5)],
      close
        (var("state",qTy),
         itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(0,2)),
               itb([(eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(7,3)),
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},
                                  ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                            var("state",qTy)))),
                    (eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(6,3)),
                     ite(bop(In,var_w("mode",5),sl[lw(26,5),lw(31,5)]),
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                                var("state",qTy))),var("state",qTy))),
                    (eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(5,3)),
                     ite(eq(var_w("mode",5),lw(31,5)),
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                                var("state",qTy))),var("state",qTy))),
                    (mop(Not,eq(var_w("mode",5),lw(17,5))),
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},
                                  ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                            var("state",qTy))))],var("state",qTy))),
              (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(1,2)),
               ite(bop(Or,eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(7,3)),
                       bop(Or,eq(var_w("mode",5),lw(17,5)),
                           bop(And,
                               call
                                 ("NSACR.RFR",HOLogic.boolT,
                                  call
                                    ("CP15.NSACR",@{typ NSACR},
                                     call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),
                                     @{theory}),@{theory}),
                               mop(Not,
                                   apply
                                     (call
                                        ("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                      var("state",qTy)))))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},
                                ls"BankedRegisterAccessValid",@{theory}),@{theory}),var("state",qTy))),
                   var("state",qTy))),
              (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(3,2)),
               itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 2)),
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},
                                  ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                            var("state",qTy)))),
                    (mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                     ite(bop(Or,
                             mop(Not,
                                 apply
                                   (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                    var("state",qTy))),eq(var_w("mode",5),lw(22,5))),
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                                var("state",qTy))),var("state",qTy))),
                    (mop(Not,eq(var_w("mode",5),lw(22,5))),
                     mop(Snd,
                         apply
                           (call
                              ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},
                                  ls"BankedRegisterAccessValid",@{theory}),@{theory}),
                            var("state",qTy))))],var("state",qTy)))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SPSRAccessValid",
   close
     (tp[var_w("SYSm",5),var_w("mode",5)],
      close
        (var("state",qTy),
         itb([(eq(var_w("SYSm",5),lw(14,5)),
               ite(bop(Or,
                       bop(And,
                           mop(Not,
                               apply
                                 (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("state",qTy))),
                           call
                             ("NSACR.RFR",HOLogic.boolT,
                              call
                                ("CP15.NSACR",@{typ NSACR},
                                 call("state.CP15",@{typ CP15},var("state",qTy),@{theory}),@{theory}),
                              @{theory})),eq(var_w("mode",5),lw(17,5))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(16,5)),
               ite(eq(var_w("mode",5),lw(18,5)),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(18,5)),
               ite(eq(var_w("mode",5),lw(19,5)),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(20,5)),
               ite(eq(var_w("mode",5),lw(23,5)),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(22,5)),
               ite(eq(var_w("mode",5),lw(27,5)),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(28,5)),
               ite(bop(Or,eq(var_w("mode",5),lw(22,5)),
                       mop(Not,
                           apply
                             (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                              var("state",qTy)))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
              (eq(var_w("SYSm",5),lw(30,5)),
               ite(mop(Not,eq(var_w("mode",5),lw(22,5))),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)))],
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory}),
                       @{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'FPSCR",
   close
     (var_w("x",32),
      record
        ("FPSCR",
         [bop(Bit,var_w("x",32),ln 26),bop(Bit,var_w("x",32),ln 29),bop(Bit,var_w("x",32),ln 25),
          bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 9),bop(Bit,var_w("x",32),ln 24),
          bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 15),bop(Bit,var_w("x",32),ln 0),
          bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 12),
          bop(Bit,var_w("x",32),ln 31),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 10),
          bop(Bit,var_w("x",32),ln 27),ex(var_w("x",32),ln 23,ln 22,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 11),bop(Bit,var_w("x",32),ln 28),
          bop(Bit,var_w("x",32),ln 30),
          cc[ex(var_w("x",32),ln 6,ln 5,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 14,ln 13,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 21,ln 16,(Word_Lib.mk_wordT 6))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'FPSCR",
   close
     (var("x",@{typ FPSCR}),
      let'
        (var_w("fpscr'rst",10),
         call("FPSCR.fpscr'rst",(Word_Lib.mk_wordT 10),var("x",@{typ FPSCR}),@{theory}),
         cc[mop(Cast w1,call("FPSCR.N",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.Z",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.C",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.V",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.QC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.AHP",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.DN",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.FZ",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            call("FPSCR.RMode",(Word_Lib.mk_wordT 2),var("x",@{typ FPSCR}),@{theory}),
            ex(var_w("fpscr'rst",10),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("FPSCR.IDE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            ex(var_w("fpscr'rst",10),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("FPSCR.IXE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.UFE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.OFE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.DZE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.IOE",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.IDC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            ex(var_w("fpscr'rst",10),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("FPSCR.IXC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.UFC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.OFC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.DZC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory})),
            mop(Cast w1,call("FPSCR.IOC",HOLogic.boolT,var("x",@{typ FPSCR}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'FPSCR",
   close(tp[var_a w32,var("x",@{typ FPSCR})],call("reg'FPSCR",w32,var("x",@{typ FPSCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'FPSCR",
   close
     (tp[var_a @{typ FPSCR},var_w("x",32)],call("rec'FPSCR",@{typ FPSCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("RoundingMode",
   close
     (var("state",qTy),
      let'
        (var_w("v",2),
         call
           ("FPSCR.RMode",(Word_Lib.mk_wordT 2),
            call
              ("FP.FPSCR",@{typ FPSCR},call("state.FP",@{typ FP},var("state",qTy),@{theory}),
               @{theory}),@{theory}),
         itb([(eq(var_w("v",2),lw(0,2)),@{term roundTiesToEven}),
              (eq(var_w("v",2),lw(1,2)),@{term roundTowardPositive}),
              (eq(var_w("v",2),lw(2,2)),@{term roundTowardNegative}),
              (eq(var_w("v",2),lw(3,2)),@{term roundTowardZero})],lx @{typ ieee_rounding}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPAdd32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      close
        (var("state",qTy),
         mop(FPAdd false,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",32),var_w("op2",32)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPSub32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      close
        (var("state",qTy),
         mop(FPSub false,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",32),var_w("op2",32)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPMul32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      close
        (var("state",qTy),
         mop(FPMul false,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",32),var_w("op2",32)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPAdd64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      close
        (var("state",qTy),
         mop(FPAdd true,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",64),var_w("op2",64)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPSub64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      close
        (var("state",qTy),
         mop(FPSub true,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",64),var_w("op2",64)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPMul64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      close
        (var("state",qTy),
         mop(FPMul true,
             tp[apply
                  (const("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                   var("state",qTy)),var_w("op1",64),var_w("op2",64)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPToFixed32",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_towards_zero"],
      close
        (var("state",qTy),
         cs(mop(FPToInt false,
                tp[ite(var_b"round_towards_zero",@{term roundTowardZero},
                       apply
                         (const
                            ("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                             @{theory}),var("state",qTy))),var_w("operand",32)]),
            [(mop(Some,var_i"i"),
              let'
                (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
                 apply
                   (call
                      ("SatQ",@{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                       tp[var_i"i",ln 32,var_b"unsigned"],@{theory}),var("state",qTy)),
                 let'
                   (tp[var_w("result",32),var_b"overflow"],var("v",@{typ "32 word \<times> bool"}),
                    ite(var_b"overflow",
                        apply
                          (call
                             ("raise'exception",
                              @{typ "state \<Rightarrow> (32 word \<times> state)"},
                              call
                                ("exception.VFP_EXCEPTION",@{typ exception},
                                 ls"FPToFixed32: overflow exception",@{theory}),@{theory}),
                           var("s",qTy)),tp[var_w("result",32),var("s",qTy)])))),
             (lo HOLogic.intT,
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    call
                      ("exception.VFP_EXCEPTION",@{typ exception},ls"FPToFixed32: NaN or infinity",
                       @{theory}),@{theory}),var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FPToFixed64",
   close
     (tp[var_w("operand",64),var_b"unsigned",var_b"round_towards_zero"],
      close
        (var("state",qTy),
         cs(mop(FPToInt true,
                tp[ite(var_b"round_towards_zero",@{term roundTowardZero},
                       apply
                         (const
                            ("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                             @{theory}),var("state",qTy))),var_w("operand",64)]),
            [(mop(Some,var_i"i"),
              let'
                (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
                 apply
                   (call
                      ("SatQ",@{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                       tp[var_i"i",ln 32,var_b"unsigned"],@{theory}),var("state",qTy)),
                 let'
                   (tp[var_w("result",32),var_b"overflow"],var("v",@{typ "32 word \<times> bool"}),
                    ite(var_b"overflow",
                        apply
                          (call
                             ("raise'exception",
                              @{typ "state \<Rightarrow> (32 word \<times> state)"},
                              call
                                ("exception.VFP_EXCEPTION",@{typ exception},
                                 ls"FPToFixed64: overflow exception",@{theory}),@{theory}),
                           var("s",qTy)),tp[var_w("result",32),var("s",qTy)])))),
             (lo HOLogic.intT,
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    call
                      ("exception.VFP_EXCEPTION",@{typ exception},ls"FPToFixed64: NaN or infinity",
                       @{theory}),@{theory}),var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FixedToFP32",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_to_nearest"],
      close
        (var("state",qTy),
         mop(FPFromInt false,
             tp[ite(var_b"round_to_nearest",@{term roundTiesToEven},
                    apply
                      (const
                         ("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                       var("state",qTy))),
                ite(var_b"unsigned",
                    mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var_w("operand",32))),
                    mop(Cast HOLogic.intT,var_w("operand",32)))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("FixedToFP64",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_to_nearest"],
      close
        (var("state",qTy),
         mop(FPFromInt true,
             tp[ite(var_b"round_to_nearest",@{term roundTiesToEven},
                    apply
                      (const
                         ("RoundingMode",@{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                       var("state",qTy))),
                ite(var_b"unsigned",
                    mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var_w("operand",32))),
                    mop(Cast HOLogic.intT,var_w("operand",32)))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("D",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (call
              ("FP.REG",@{typ "5 word \<Rightarrow> 64 word"},
               call("state.FP",@{typ FP},var("state",qTy),@{theory}),@{theory}),var_w("n",5)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'D",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         rupd
           ("state.FP",
            tp[var("state",qTy),
               rupd
                 ("FP.REG",
                  tp[call("state.FP",@{typ FP},var("state",qTy),@{theory}),
                     fupd
                       (call
                          ("FP.REG",@{typ "5 word \<Rightarrow> 64 word"},
                           call("state.FP",@{typ FP},var("state",qTy),@{theory}),@{theory}),
                        var_w("n",5),var_w("value",64))],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("S",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         ite(bop(Bit,var_w("n",5),ln 0),
             ex(apply
                  (call
                     ("D",@{typ "state \<Rightarrow> 64 word"},bop(Div,var_w("n",5),lw(2,5)),
                      @{theory}),var("state",qTy)),ln 63,ln 32,w32),
             ex(apply
                  (call
                     ("D",@{typ "state \<Rightarrow> 64 word"},bop(Div,var_w("n",5),lw(2,5)),
                      @{theory}),var("state",qTy)),ln 31,ln 0,w32)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'S",
   close
     (tp[var_w("value",32),var_w("n",5)],
      close
        (var("state",qTy),
         ite(bop(Bit,var_w("n",5),ln 0),
             let'
               (var_w("x",5),bop(Div,var_w("n",5),lw(2,5)),
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[bfi(ln 63,ln 32,var_w("value",32),
                             apply
                               (call
                                  ("D",@{typ "state \<Rightarrow> 64 word"},var_w("x",5),@{theory}),
                                var("state",qTy))),var_w("x",5)],@{theory}),var("state",qTy))),
             let'
               (var_w("x",5),bop(Div,var_w("n",5),lw(2,5)),
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[bfi(ln 31,ln 0,var_w("value",32),
                             apply
                               (call
                                  ("D",@{typ "state \<Rightarrow> 64 word"},var_w("x",5),@{theory}),
                                var("state",qTy))),var_w("x",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("VFPExpandImm",
   close
     (tp[var_w("imm8",8),var_b"single"],
      ite(var_b"single",
          mop(Cast w64,
              cc[ex(var_w("imm8",8),ln 7,ln 7,w1),mop(BNot,ex(var_w("imm8",8),ln 6,ln 6,w1)),
                 rep(ex(var_w("imm8",8),ln 6,ln 6,w1),ln 5,(Word_Lib.mk_wordT 5)),
                 ex(var_w("imm8",8),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
                 rep(lw(0,1),ln 19,(Word_Lib.mk_wordT 19))]),
          cc[ex(var_w("imm8",8),ln 7,ln 7,w1),mop(BNot,ex(var_w("imm8",8),ln 6,ln 6,w1)),
             rep(ex(var_w("imm8",8),ln 6,ln 6,w1),ln 8,w8),
             ex(var_w("imm8",8),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
             rep(lw(0,1),ln 48,(Word_Lib.mk_wordT 48))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FPCompare32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      itb([(bop(Or,mop(FPIsNan false,var_w("op1",32)),mop(FPIsNan false,var_w("op2",32))),lw(3,4)),
           (mop(FPEqual false,tp[var_w("op1",32),var_w("op2",32)]),lw(6,4)),
           (mop(FPLessThan false,tp[var_w("op1",32),var_w("op2",32)]),lw(8,4))],lw(2,4))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FPCompare64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      itb([(bop(Or,mop(FPIsNan true,var_w("op1",64)),mop(FPIsNan true,var_w("op2",64))),lw(3,4)),
           (mop(FPEqual true,tp[var_w("op1",64),var_w("op2",64)]),lw(6,4)),
           (mop(FPLessThan true,tp[var_w("op1",64),var_w("op2",64)]),lw(8,4))],lw(2,4))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FPZero32",close(var_w("sign",1),cc[var_w("sign",1),lw(0,31)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FPZero64",close(var_w("sign",1),cc[var_w("sign",1),lw(0,63)]))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmov_imm",
   close
     (tp[var_b"single_register",var_w("d",5),var_w("imm64",64)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"single_register",
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("imm64",64),ln 31,ln 0,w32),var_w("d",5)],@{theory}),
                   var("state",qTy)),
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[var_w("imm64",64),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmov",
   close
     (tp[var_b"single_register",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"single_register",
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                            var("state",qTy)),var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                            var("state",qTy)),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmov_single",
   close
     (tp[var_b"to_arm_register",var_w("t",4),var_w("n",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"to_arm_register",
                apply
                  (call
                     ("write'R",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),@{theory}),
                            var("state",qTy)),var_w("t",4)],@{theory}),var("state",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("t",4),
                         @{theory}),var("state",qTy)),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         tp[var_w("v",32),var_w("n",5)],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmov_two_singles",
   close
     (tp[var_b"to_arm_registers",var_w("t",4),var_w("t2",4),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"to_arm_registers",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (call
                           ("write'R",@{typ "state \<Rightarrow> state"},
                            tp[apply
                                 (call
                                    ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                                  var("state",qTy)),var_w("t",4)],@{theory}),var("state",qTy)),
                      tp[apply
                           (call
                              ("S",@{typ "state \<Rightarrow> 32 word"},
                               bop(Add,var_w("m",5),lw(1,5)),@{theory}),var("s0",qTy)),var("s0",qTy)]),
                   apply
                     (call
                        ("write'R",@{typ "state \<Rightarrow> state"},
                         tp[var_w("v",32),var_w("t2",4)],@{theory}),var("s",qTy))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("t",4),
                         @{theory}),var("state",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("t2",4),
                            @{theory}),
                         apply
                           (call
                              ("write'S",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",32),var_w("m",5)],@{theory}),var("s",qTy))),
                      apply
                        (call
                           ("write'S",@{typ "state \<Rightarrow> state"},
                            tp[var_w("v",32),bop(Add,var_w("m",5),lw(1,5))],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmov_double",
   close
     (tp[var_b"to_arm_registers",var_w("t",4),var_w("t2",4),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"to_arm_registers",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (call
                           ("write'R",@{typ "state \<Rightarrow> state"},
                            tp[ex(apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 0,w32),var_w("t",4)],
                            @{theory}),var("state",qTy)),
                      tp[apply
                           (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                            var("s0",qTy)),var("s0",qTy)]),
                   apply
                     (call
                        ("write'R",@{typ "state \<Rightarrow> state"},
                         tp[ex(var_w("v",64),ln 63,ln 32,w32),var_w("t2",4)],@{theory}),var("s",qTy))),
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      let'
                        (tp[var_w("v0",32),var("s",qTy)],
                         apply
                           (call
                              ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               var_w("t",4),@{theory}),var("state",qTy)),
                         apply
                           (call
                              ("write'D",@{typ "state \<Rightarrow> state"},
                               tp[bfi(ln 31,ln 0,var_w("v0",32),
                                      apply
                                        (call
                                           ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                            @{theory}),var("state",qTy))),var_w("m",5)],@{theory}),
                            var("s",qTy))),
                      tp[apply
                           (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                            var("s0",qTy)),var("s0",qTy)]),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("t2",4),
                            @{theory}),var("s",qTy)),
                      apply
                        (call
                           ("write'D",@{typ "state \<Rightarrow> state"},
                            tp[bfi(ln 63,ln 32,var_w("v0",32),var_w("v",64)),var_w("m",5)],@{theory}),
                         var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vabs",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPAbs true,
                             apply
                               (call
                                  ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                                var("state",qTy))),var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPAbs false,
                             apply
                               (call
                                  ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                                var("state",qTy))),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vneg",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPNeg true,
                             apply
                               (call
                                  ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                                var("state",qTy))),var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPNeg false,
                             apply
                               (call
                                  ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                                var("state",qTy))),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vsqrt",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPSqrt true,
                             tp[apply
                                  (const
                                     ("RoundingMode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                      @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                   var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPSqrt false,
                             tp[apply
                                  (const
                                     ("RoundingMode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                      @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                   var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vcvt_float",
   close
     (tp[var_b"double_to_single",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"double_to_single",
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[mop(FP64To32,
                             tp[apply
                                  (const
                                     ("RoundingMode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                      @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                   var("state",qTy)),
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[mop(FP32To64,
                             apply
                               (call
                                  ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                                var("state",qTy))),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vcvt_to_integer",
   close
     (tp[var_b"dp_operation",var_b"unsigned",var_b"round_zero",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (tp[var("v",@{typ "32 word \<times> 5 word"}),var("s",qTy)],
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("FPToFixed64",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[apply
                                 (call
                                    ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                                  var("state",qTy)),var_b"unsigned",var_b"round_zero"],@{theory}),
                         var("state",qTy)),tp[tp[var_w("v",32),var_w("d",5)],var("s",qTy)]),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         var("v",@{typ "32 word \<times> 5 word"}),@{theory}),var("s",qTy))),
                let'
                  (tp[var("v",@{typ "32 word \<times> 5 word"}),var("s",qTy)],
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("FPToFixed32",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[apply
                                 (call
                                    ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                                  var("state",qTy)),var_b"unsigned",var_b"round_zero"],@{theory}),
                         var("state",qTy)),tp[tp[var_w("v",32),var_w("d",5)],var("s",qTy)]),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         var("v",@{typ "32 word \<times> 5 word"}),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vcvt_from_integer",
   close
     (tp[var_b"dp_operation",var_b"unsigned",var_w("d",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FixedToFP64",@{typ "state \<Rightarrow> 64 word"},
                               tp[apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                        @{theory}),var("state",qTy)),var_b"unsigned",lf],@{theory}),
                            var("state",qTy)),var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FixedToFP32",@{typ "state \<Rightarrow> 32 word"},
                               tp[apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                        @{theory}),var("state",qTy)),var_b"unsigned",lf],@{theory}),
                            var("state",qTy)),var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vcmp",
   close
     (tp[var_b"dp_operation",var_w("d",5),var("m_with_zero",@{typ "5 word option"})],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   cs(var("m_with_zero",@{typ "5 word option"}),
                      [(mop(Some,var_w("m",5)),
                        tp[apply
                             (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                              var("state",qTy)),var("state",qTy)]),
                       (lo (Word_Lib.mk_wordT 5),
                        tp[call("FPZero64",w64,lw(0,1),@{theory}),var("state",qTy)])],@{context}),
                   let'
                     (var("v0",@{typ FPSCR}),
                      call
                        ("FP.FPSCR",@{typ FPSCR},call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                         @{theory}),
                      rupd
                        ("state.FP",
                         tp[var("s",qTy),
                            rupd
                              ("FP.FPSCR",
                               tp[call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                                  call
                                    ("write'reg'FPSCR",@{typ FPSCR},
                                     tp[var("v0",@{typ FPSCR}),
                                        bfi(ln 31,ln 28,
                                            call
                                              ("FPCompare64",w4,
                                               tp[apply
                                                    (call
                                                       ("D",@{typ "state \<Rightarrow> 64 word"},
                                                        var_w("d",5),@{theory}),var("s",qTy)),
                                                  var_w("v",64)],@{theory}),
                                            call("reg'FPSCR",w32,var("v0",@{typ FPSCR}),@{theory}))],
                                     @{theory})],@{theory})],@{theory}))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   cs(var("m_with_zero",@{typ "5 word option"}),
                      [(mop(Some,var_w("m",5)),
                        tp[apply
                             (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                              var("state",qTy)),var("state",qTy)]),
                       (lo (Word_Lib.mk_wordT 5),
                        tp[call("FPZero32",w32,lw(0,1),@{theory}),var("state",qTy)])],@{context}),
                   let'
                     (var("v0",@{typ FPSCR}),
                      call
                        ("FP.FPSCR",@{typ FPSCR},call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                         @{theory}),
                      rupd
                        ("state.FP",
                         tp[var("s",qTy),
                            rupd
                              ("FP.FPSCR",
                               tp[call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                                  call
                                    ("write'reg'FPSCR",@{typ FPSCR},
                                     tp[var("v0",@{typ FPSCR}),
                                        bfi(ln 31,ln 28,
                                            call
                                              ("FPCompare32",w4,
                                               tp[apply
                                                    (call
                                                       ("S",@{typ "state \<Rightarrow> 32 word"},
                                                        var_w("d",5),@{theory}),var("s",qTy)),
                                                  var_w("v",32)],@{theory}),
                                            call("reg'FPSCR",w32,var("v0",@{typ FPSCR}),@{theory}))],
                                     @{theory})],@{theory})],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmsr",
   close
     (var_w("t",4),
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            let'
              (tp[var("v",@{typ FP}),var("s",qTy)],
               let'
                 (tp[var("v",@{typ "FP \<times> FPSCR"}),var("s",qTy)],
                  let'
                    (tp[var_w("v0",32),var("s0",qTy)],
                     apply
                       (call
                          ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("t",4),
                           @{theory}),var("state",qTy)),
                     tp[tp[call("state.FP",@{typ FP},var("state",qTy),@{theory}),
                           call
                             ("write'reg'FPSCR",@{typ FPSCR},
                              tp[call
                                   ("FP.FPSCR",@{typ FPSCR},
                                    call("state.FP",@{typ FP},var("state",qTy),@{theory}),@{theory}),
                                 var_w("v0",32)],@{theory})],var("s0",qTy)]),
                  tp[rupd("FP.FPSCR",var("v",@{typ "FP \<times> FPSCR"}),@{theory}),var("s",qTy)]),
               rupd("state.FP",tp[var("s",qTy),var("v",@{typ FP})],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmrs",
   close
     (var_w("t",4),
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(mop(Not,eq(var_w("t",4),lw(15,4))),
                apply
                  (call
                     ("write'R",@{typ "state \<Rightarrow> state"},
                      tp[call
                           ("reg'FPSCR",w32,
                            call
                              ("FP.FPSCR",@{typ FPSCR},
                               call("state.FP",@{typ FP},var("state",qTy),@{theory}),@{theory}),
                            @{theory}),var_w("t",4)],@{theory}),var("state",qTy)),
                let'
                  (var("s",qTy),
                   rupd
                     ("state.CPSR",
                      tp[var("state",qTy),
                         rupd
                           ("PSR.N",
                            tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                               call
                                 ("FPSCR.N",HOLogic.boolT,
                                  call
                                    ("FP.FPSCR",@{typ FPSCR},
                                     call("state.FP",@{typ FP},var("state",qTy),@{theory}),@{theory}),
                                  @{theory})],@{theory})],@{theory}),
                   let'
                     (var("s",qTy),
                      rupd
                        ("state.CPSR",
                         tp[var("s",qTy),
                            rupd
                              ("PSR.Z",
                               tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                  call
                                    ("FPSCR.Z",HOLogic.boolT,
                                     call
                                       ("FP.FPSCR",@{typ FPSCR},
                                        call("state.FP",@{typ FP},var("s",qTy),@{theory}),@{theory}),
                                     @{theory})],@{theory})],@{theory}),
                      let'
                        (var("s",qTy),
                         rupd
                           ("state.CPSR",
                            tp[var("s",qTy),
                               rupd
                                 ("PSR.C",
                                  tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                     call
                                       ("FPSCR.C",HOLogic.boolT,
                                        call
                                          ("FP.FPSCR",@{typ FPSCR},
                                           call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                                           @{theory}),@{theory})],@{theory})],@{theory}),
                         rupd
                           ("state.CPSR",
                            tp[var("s",qTy),
                               rupd
                                 ("PSR.V",
                                  tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                     call
                                       ("FPSCR.V",HOLogic.boolT,
                                        call
                                          ("FP.FPSCR",@{typ FPSCR},
                                           call("state.FP",@{typ FP},var("s",qTy),@{theory}),
                                           @{theory}),@{theory})],@{theory})],@{theory})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vadd",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPAdd64",@{typ "state \<Rightarrow> 64 word"},
                               tp[apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPAdd32",@{typ "state \<Rightarrow> 32 word"},
                               tp[apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vsub",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPSub64",@{typ "state \<Rightarrow> 64 word"},
                               tp[apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPSub32",@{typ "state \<Rightarrow> 32 word"},
                               tp[apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmul",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPMul64",@{typ "state \<Rightarrow> 64 word"},
                               tp[apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[apply
                           (call
                              ("FPMul32",@{typ "state \<Rightarrow> 32 word"},
                               tp[apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                        @{theory}),var("state",qTy))],@{theory}),var("state",qTy)),
                         var_w("d",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vdiv",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                apply
                  (call
                     ("write'D",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPDiv true,
                             tp[apply
                                  (const
                                     ("RoundingMode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),
                                      @{theory}),var("state",qTy)),
                                apply
                                  (call
                                     ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                      @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                   var("state",qTy)),
                apply
                  (call
                     ("write'S",@{typ "state \<Rightarrow> state"},
                      tp[mop(FPDiv false,
                             tp[apply
                                  (const
                                     ("RoundingMode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),
                                      @{theory}),var("state",qTy)),
                                apply
                                  (call
                                     ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                      @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                   var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vmla_vmls",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (var_w("v",64),
                   apply
                     (call
                        ("FPMul64",@{typ "state \<Rightarrow> 64 word"},
                         tp[apply
                              (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                               var("state",qTy)),
                            apply
                              (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                               var("state",qTy))],@{theory}),var("state",qTy)),
                   apply
                     (call
                        ("write'D",@{typ "state \<Rightarrow> state"},
                         tp[apply
                              (call
                                 ("FPAdd64",@{typ "state \<Rightarrow> 64 word"},
                                  tp[apply
                                       (call
                                          ("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"add",var_w("v",64),mop(FPNeg true,var_w("v",64)))],
                                  @{theory}),var("state",qTy)),var_w("d",5)],@{theory}),
                      var("state",qTy))),
                let'
                  (var_w("v",32),
                   apply
                     (call
                        ("FPMul32",@{typ "state \<Rightarrow> 32 word"},
                         tp[apply
                              (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),@{theory}),
                               var("state",qTy)),
                            apply
                              (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                               var("state",qTy))],@{theory}),var("state",qTy)),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         tp[apply
                              (call
                                 ("FPAdd32",@{typ "state \<Rightarrow> 32 word"},
                                  tp[apply
                                       (call
                                          ("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"add",var_w("v",32),mop(FPNeg false,var_w("v",32)))],
                                  @{theory}),var("state",qTy)),var_w("d",5)],@{theory}),
                      var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vfma_vfms",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (var_w("v",64),
                   apply
                     (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'D",@{typ "state \<Rightarrow> state"},
                         tp[mop(FPMulAdd true,
                                tp[apply
                                     (const
                                        ("RoundingMode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   ite(var_b"add",var_w("v",64),mop(FPNeg true,var_w("v",64))),
                                   apply
                                     (call
                                        ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                         @{theory}),var("state",qTy)),
                                   apply
                                     (call
                                        ("D",@{typ "state \<Rightarrow> 64 word"},var_w("d",5),
                                         @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                      var("state",qTy))),
                let'
                  (var_w("v",32),
                   apply
                     (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         tp[mop(FPMulAdd false,
                                tp[apply
                                     (const
                                        ("RoundingMode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   ite(var_b"add",var_w("v",32),mop(FPNeg false,var_w("v",32))),
                                   apply
                                     (call
                                        ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                         @{theory}),var("state",qTy)),
                                   apply
                                     (call
                                        ("S",@{typ "state \<Rightarrow> 32 word"},var_w("d",5),
                                         @{theory}),var("state",qTy))]),var_w("d",5)],@{theory}),
                      var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vfnma_vfnms",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (var_w("v",64),
                   apply
                     (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'D",@{typ "state \<Rightarrow> state"},
                         tp[mop(FPMulAdd true,
                                tp[apply
                                     (const
                                        ("RoundingMode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   ite(var_b"add",var_w("v",64),mop(FPNeg true,var_w("v",64))),
                                   apply
                                     (call
                                        ("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),
                                         @{theory}),var("state",qTy)),
                                   mop(FPNeg true,
                                       apply
                                         (call
                                            ("D",@{typ "state \<Rightarrow> 64 word"},var_w("d",5),
                                             @{theory}),var("state",qTy)))]),var_w("d",5)],@{theory}),
                      var("state",qTy))),
                let'
                  (var_w("v",32),
                   apply
                     (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'S",@{typ "state \<Rightarrow> state"},
                         tp[mop(FPMulAdd false,
                                tp[apply
                                     (const
                                        ("RoundingMode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   ite(var_b"add",var_w("v",32),mop(FPNeg false,var_w("v",32))),
                                   apply
                                     (call
                                        ("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),
                                         @{theory}),var("state",qTy)),
                                   mop(FPNeg false,
                                       apply
                                         (call
                                            ("S",@{typ "state \<Rightarrow> 32 word"},var_w("d",5),
                                             @{theory}),var("state",qTy)))]),var_w("d",5)],@{theory}),
                      var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vneg_mul",
   close
     (tp[var_b"dp_operation",var("typ",@{typ VFPNegMul}),var_w("d",5),var_w("n",5),var_w("m",5)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"dp_operation",
                let'
                  (var_w("v",64),
                   apply
                     (call
                        ("FPMul64",@{typ "state \<Rightarrow> 64 word"},
                         tp[apply
                              (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                               var("state",qTy)),
                            apply
                              (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("m",5),@{theory}),
                               var("state",qTy))],@{theory}),var("state",qTy)),
                   cs(var("typ",@{typ VFPNegMul}),
                      [(lc("VFPNegMul_VNMLA","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'D",@{typ "state \<Rightarrow> state"},
                              tp[apply
                                   (call
                                      ("FPAdd64",@{typ "state \<Rightarrow> 64 word"},
                                       tp[mop(FPNeg true,
                                              apply
                                                (call
                                                   ("D",@{typ "state \<Rightarrow> 64 word"},
                                                    var_w("d",5),@{theory}),var("state",qTy))),
                                          mop(FPNeg true,var_w("v",64))],@{theory}),var("state",qTy)),
                                 var_w("d",5)],@{theory}),var("state",qTy))),
                       (lc("VFPNegMul_VNMLS","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'D",@{typ "state \<Rightarrow> state"},
                              tp[apply
                                   (call
                                      ("FPAdd64",@{typ "state \<Rightarrow> 64 word"},
                                       tp[mop(FPNeg true,
                                              apply
                                                (call
                                                   ("D",@{typ "state \<Rightarrow> 64 word"},
                                                    var_w("d",5),@{theory}),var("state",qTy))),
                                          var_w("v",64)],@{theory}),var("state",qTy)),var_w("d",5)],
                              @{theory}),var("state",qTy))),
                       (lc("VFPNegMul_VNMUL","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'D",@{typ "state \<Rightarrow> state"},
                              tp[mop(FPNeg true,var_w("v",64)),var_w("d",5)],@{theory}),
                           var("state",qTy)))],@{context})),
                let'
                  (var_w("v",32),
                   apply
                     (call
                        ("FPMul32",@{typ "state \<Rightarrow> 32 word"},
                         tp[apply
                              (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("n",5),@{theory}),
                               var("state",qTy)),
                            apply
                              (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("m",5),@{theory}),
                               var("state",qTy))],@{theory}),var("state",qTy)),
                   cs(var("typ",@{typ VFPNegMul}),
                      [(lc("VFPNegMul_VNMLA","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'S",@{typ "state \<Rightarrow> state"},
                              tp[apply
                                   (call
                                      ("FPAdd32",@{typ "state \<Rightarrow> 32 word"},
                                       tp[mop(FPNeg false,
                                              apply
                                                (call
                                                   ("S",@{typ "state \<Rightarrow> 32 word"},
                                                    var_w("d",5),@{theory}),var("state",qTy))),
                                          mop(FPNeg false,var_w("v",32))],@{theory}),
                                    var("state",qTy)),var_w("d",5)],@{theory}),var("state",qTy))),
                       (lc("VFPNegMul_VNMLS","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'S",@{typ "state \<Rightarrow> state"},
                              tp[apply
                                   (call
                                      ("FPAdd32",@{typ "state \<Rightarrow> 32 word"},
                                       tp[mop(FPNeg false,
                                              apply
                                                (call
                                                   ("S",@{typ "state \<Rightarrow> 32 word"},
                                                    var_w("d",5),@{theory}),var("state",qTy))),
                                          var_w("v",32)],@{theory}),var("state",qTy)),var_w("d",5)],
                              @{theory}),var("state",qTy))),
                       (lc("VFPNegMul_VNMUL","VFPNegMul",@{theory}),
                        apply
                          (call
                             ("write'S",@{typ "state \<Rightarrow> state"},
                              tp[mop(FPNeg false,var_w("v",32)),var_w("d",5)],@{theory}),
                           var("state",qTy)))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vldr",
   close
     (tp[var_b"single_reg",var_b"add",var_w("d",5),var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("n",4),lw(15,4)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),
                   tp[call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),var("s",qTy)]),
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (var_w("address",32),
               ite(var_b"add",bop(Add,var_w("v",32),var_w("imm32",32)),
                   bop(Sub,var_w("v",32),var_w("imm32",32))),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  ite(var_b"single_reg",
                      let'
                        (tp[var_w("v",32),var("s",qTy)],
                         apply
                           (call
                              ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                         apply
                           (call
                              ("write'S",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",32),var_w("d",5)],@{theory}),var("s",qTy))),
                      let'
                        (tp[var_w("v",32),var("s",qTy)],
                         apply
                           (call
                              ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                         let'
                           (tp[var_w("v0",32),var("s",qTy)],
                            apply
                              (call
                                 ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  tp[bop(Add,var_w("address",32),lw(4,32)),ln 4],@{theory}),
                               var("s",qTy)),
                            apply
                              (call
                                 ("write'D",@{typ "state \<Rightarrow> state"},
                                  tp[ite(apply
                                           (call
                                              ("BigEndian",@{typ "state \<Rightarrow> bool"},lu,
                                               @{theory}),var("s",qTy)),
                                         cc[var_w("v",32),var_w("v0",32)],
                                         cc[var_w("v0",32),var_w("v",32)]),var_w("d",5)],@{theory}),
                               var("s",qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vstr",
   close
     (tp[var_b"single_reg",var_b"add",var_w("d",5),var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(var_b"add",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[bop(Add,var_w("v",32),var_w("imm32",32)),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[bop(Sub,var_w("v",32),var_w("imm32",32)),var("s",qTy)])),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               ite(var_b"single_reg",
                   apply
                     (call
                        ("write'MemA",@{typ "state \<Rightarrow> state"},
                         tp[apply
                              (call("S",@{typ "state \<Rightarrow> 32 word"},var_w("d",5),@{theory}),
                               var("s",qTy)),var_w("v",32),ln 4],@{theory}),var("s",qTy)),
                   let'
                     (var_w("v0",64),
                      apply
                        (call("D",@{typ "state \<Rightarrow> 64 word"},var_w("d",5),@{theory}),
                         var("s",qTy)),
                      let'
                        (tp[var_b"v1",var("s",qTy)],
                         let'
                           (var("s0",qTy),
                            apply
                              (call
                                 ("write'MemA",@{typ "state \<Rightarrow> state"},
                                  tp[ite(apply
                                           (call
                                              ("BigEndian",@{typ "state \<Rightarrow> bool"},lu,
                                               @{theory}),var("s",qTy)),
                                         ex(var_w("v0",64),ln 63,ln 32,w32),
                                         ex(var_w("v0",64),ln 31,ln 0,w32)),var_w("v",32),ln 4],
                                  @{theory}),var("s",qTy)),
                            tp[apply
                                 (call("BigEndian",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s0",qTy)),var("s0",qTy)]),
                         apply
                           (call
                              ("write'MemA",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"v1",ex(var_w("v0",64),ln 31,ln 0,w32),
                                      ex(var_w("v0",64),ln 63,ln 32,w32)),
                                  bop(Add,var_w("v",32),lw(4,32)),ln 4],@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vldm",
   close
     (tp[var_b"single_regs",var_b"add",var_b"wback",var_w("d",5),var_w("n",4),var_w("imm8",8)],
      close
        (var("state",qTy),
         let'
           (var_w("imm32",32),mop(Cast w32,cc[var_w("imm8",8),lw(0,2)]),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(var_b"add",
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                            @{theory}),var("state",qTy)),
                      tp[bop(Sub,var_w("v",32),var_w("imm32",32)),var("s",qTy)])),
               let'
                 (var("s",@{typ "32 word \<times> state"}),
                  mop(Snd,
                      apply
                        (forloop
                           (tp[ln 0,
                               bop(Sub,
                                   ite(var_b"single_regs",mop(Cast HOLogic.natT,var_w("imm8",8)),
                                       bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)),ln 1),
                               close
                                 (var_n"r",
                                  close
                                    (var("state",@{typ "32 word \<times> state"}),
                                     ite(var_b"single_regs",
                                         let'
                                           (var("s",@{typ "32 word \<times> state"}),
                                            let'
                                              (tp[var("v",@{typ "32 word \<times> 5 word"}),
                                                  var("s",@{typ "32 word \<times> state"})],
                                               let'
                                                 (tp[var_w("v",32),
                                                     var("s",@{typ "32 word \<times> state"})],
                                                  cs(apply
                                                       (call
                                                          ("MemA",
                                                           @{typ
                                                           "state \<Rightarrow>
                                                            (32 word \<times> state)"},
                                                           tp[mop(Fst,
                                                                  var("state",
                                                                      @{typ
                                                                      "32 word \<times> state"})),
                                                              ln 4],@{theory}),
                                                        mop(Snd,
                                                            var("state",
                                                                @{typ "32 word \<times> state"}))),
                                                     [(tp[var_w("v",32),var("s3",qTy)],
                                                       tp[var_w("v",32),
                                                          mop(Fst,
                                                              var("state",
                                                                  @{typ "32 word \<times> state"})),
                                                          var("s3",qTy)])],@{context}),
                                                  tp[tp[var_w("v",32),
                                                        bop(Add,var_w("d",5),
                                                            mop(Cast (Word_Lib.mk_wordT 5),var_n"r"))],
                                                     var("s",@{typ "32 word \<times> state"})]),
                                               tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                                  apply
                                                    (call
                                                       ("write'S",
                                                        @{typ "state \<Rightarrow> state"},
                                                        var("v",@{typ "32 word \<times> 5 word"}),
                                                        @{theory}),
                                                     mop(Snd,
                                                         var("s",@{typ "32 word \<times> state"})))]),
                                            tp[lu,
                                               bop(Add,
                                                   mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                                   lw(4,32)),
                                               mop(Snd,var("s",@{typ "32 word \<times> state"}))]),
                                         let'
                                           (tp[var_w("v",32),
                                               var("s",@{typ "32 word \<times> state"})],
                                            cs(apply
                                                 (call
                                                    ("MemA",
                                                     @{typ
                                                     "state \<Rightarrow> (32 word \<times> state)"},
                                                     tp[mop(Fst,
                                                            var("state",
                                                                @{typ "32 word \<times> state"})),
                                                        ln 4],@{theory}),
                                                  mop(Snd,
                                                      var("state",@{typ "32 word \<times> state"}))),
                                               [(tp[var_w("v",32),var("s3",qTy)],
                                                 tp[var_w("v",32),
                                                    mop(Fst,
                                                        var("state",@{typ "32 word \<times> state"})),
                                                    var("s3",qTy)])],@{context}),
                                            let'
                                              (tp[var_w("v0",32),
                                                  var("s",@{typ "32 word \<times> state"})],
                                               cs(apply
                                                    (call
                                                       ("MemA",
                                                        @{typ
                                                        "state \<Rightarrow>
                                                         (32 word \<times> state)"},
                                                        tp[bop(Add,
                                                               mop(Fst,
                                                                   var("s",
                                                                       @{typ
                                                                       "32 word \<times> state"})),
                                                               lw(4,32)),ln 4],@{theory}),
                                                     mop(Snd,
                                                         var("s",@{typ "32 word \<times> state"}))),
                                                  [(tp[var_w("v",32),var("s3",qTy)],
                                                    tp[var_w("v",32),
                                                       mop(Fst,
                                                           var("s",@{typ "32 word \<times> state"})),
                                                       var("s3",qTy)])],@{context}),
                                               let'
                                                 (var("s1",qTy),
                                                  mop(Snd,var("s",@{typ "32 word \<times> state"})),
                                                  tp[lu,
                                                     bop(Add,
                                                         mop(Fst,
                                                             var("s",@{typ "32 word \<times> state"})),
                                                         lw(8,32)),
                                                     apply
                                                       (call
                                                          ("write'D",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[ite(apply
                                                                    (call
                                                                       ("BigEndian",
                                                                        @{typ
                                                                        "state \<Rightarrow> bool"},
                                                                        lu,@{theory}),var("s1",qTy)),
                                                                  cc[var_w("v",32),var_w("v0",32)],
                                                                  cc[var_w("v0",32),var_w("v",32)]),
                                                              bop(Add,var_w("d",5),
                                                                  mop(Cast (Word_Lib.mk_wordT 5),
                                                                      var_n"r"))],@{theory}),
                                                        var("s1",qTy))]))))))]),
                         tp[var_w("v",32),var("s",qTy)])),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     ite(var_b"wback",
                         let'
                           (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                            ite(var_b"add",
                                let'
                                  (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[bop(Add,var_w("v",32),var_w("imm32",32)),
                                      var("s",@{typ "32 word \<times> state"})]),
                                let'
                                  (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[bop(Sub,var_w("v",32),var_w("imm32",32)),
                                      var("s",@{typ "32 word \<times> state"})])),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),var_w("n",4)],@{theory}),
                               mop(Snd,var("s",@{typ "32 word \<times> state"})))),
                         mop(Snd,var("s",@{typ "32 word \<times> state"}))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vstm",
   close
     (tp[var_b"single_regs",var_b"add",var_b"wback",var_w("d",5),var_w("n",4),var_w("imm8",8)],
      close
        (var("state",qTy),
         let'
           (var_w("imm32",32),mop(Cast w32,cc[var_w("imm8",8),lw(0,2)]),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(var_b"add",
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                            @{theory}),var("state",qTy)),
                      tp[bop(Sub,var_w("v",32),var_w("imm32",32)),var("s",qTy)])),
               let'
                 (var("s",@{typ "32 word \<times> state"}),
                  mop(Snd,
                      apply
                        (forloop
                           (tp[ln 0,
                               bop(Sub,
                                   ite(var_b"single_regs",mop(Cast HOLogic.natT,var_w("imm8",8)),
                                       bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)),ln 1),
                               close
                                 (var_n"r",
                                  close
                                    (var("state",@{typ "32 word \<times> state"}),
                                     ite(var_b"single_regs",
                                         tp[lu,
                                            bop(Add,
                                                mop(Fst,var("state",@{typ "32 word \<times> state"})),
                                                lw(4,32)),
                                            apply
                                              (call
                                                 ("write'MemA",@{typ "state \<Rightarrow> state"},
                                                  tp[apply
                                                       (call
                                                          ("S",@{typ "state \<Rightarrow> 32 word"},
                                                           bop(Add,var_w("d",5),
                                                               mop(Cast (Word_Lib.mk_wordT 5),
                                                                   var_n"r")),@{theory}),
                                                        mop(Snd,
                                                            var("state",
                                                                @{typ "32 word \<times> state"}))),
                                                     mop(Fst,
                                                         var("state",@{typ "32 word \<times> state"})),
                                                     ln 4],@{theory}),
                                               mop(Snd,var("state",@{typ "32 word \<times> state"})))],
                                         let'
                                           (var_w("v",64),
                                            apply
                                              (call
                                                 ("D",@{typ "state \<Rightarrow> 64 word"},
                                                  bop(Add,var_w("d",5),
                                                      mop(Cast (Word_Lib.mk_wordT 5),var_n"r")),
                                                  @{theory}),
                                               mop(Snd,var("state",@{typ "32 word \<times> state"}))),
                                            let'
                                              (tp[var_w("s0",32),var("s1",qTy)],
                                               tp[mop(Fst,
                                                      var("state",@{typ "32 word \<times> state"})),
                                                  apply
                                                    (call
                                                       ("write'MemA",
                                                        @{typ "state \<Rightarrow> state"},
                                                        tp[ite(apply
                                                                 (call
                                                                    ("BigEndian",
                                                                     @{typ
                                                                     "state \<Rightarrow> bool"},lu,
                                                                     @{theory}),
                                                                  mop(Snd,
                                                                      var("state",
                                                                          @{typ
                                                                          "32 word \<times> state"}))),
                                                               ex(var_w("v",64),ln 63,ln 32,w32),
                                                               ex(var_w("v",64),ln 31,ln 0,w32)),
                                                           mop(Fst,
                                                               var("state",
                                                                   @{typ "32 word \<times> state"})),
                                                           ln 4],@{theory}),
                                                     mop(Snd,
                                                         var("state",@{typ "32 word \<times> state"})))],
                                               tp[lu,bop(Add,var_w("s0",32),lw(8,32)),
                                                  apply
                                                    (call
                                                       ("write'MemA",
                                                        @{typ "state \<Rightarrow> state"},
                                                        tp[ite(apply
                                                                 (call
                                                                    ("BigEndian",
                                                                     @{typ
                                                                     "state \<Rightarrow> bool"},lu,
                                                                     @{theory}),var("s1",qTy)),
                                                               ex(var_w("v",64),ln 31,ln 0,w32),
                                                               ex(var_w("v",64),ln 63,ln 32,w32)),
                                                           bop(Add,var_w("s0",32),lw(4,32)),ln 4],
                                                        @{theory}),var("s1",qTy))])))))]),
                         tp[var_w("v",32),var("s",qTy)])),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     ite(var_b"wback",
                         let'
                           (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                            ite(var_b"add",
                                let'
                                  (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[bop(Add,var_w("v",32),var_w("imm32",32)),
                                      var("s",@{typ "32 word \<times> state"})]),
                                let'
                                  (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[bop(Sub,var_w("v",32),var_w("imm32",32)),
                                      var("s",@{typ "32 word \<times> state"})])),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),var_w("n",4)],@{theory}),
                               mop(Snd,var("s",@{typ "32 word \<times> state"})))),
                         mop(Snd,var("s",@{typ "32 word \<times> state"}))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BranchTarget",
   close
     (var_w("imm32",32),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                  bop(Add,var_w("v",32),var_w("imm32",32)),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BranchExchange",
   close
     (var_w("m",4),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("BXWritePC",@{typ "state \<Rightarrow> state"},var_w("v",32),@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BranchLinkExchangeImmediate",
   close
     (tp[var("targetInstrSet",@{typ InstrSet}),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(eq(apply
                     (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                      var("state",qTy)),lc("InstrSet_ARM","InstrSet",@{theory})),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'LR",@{typ "state \<Rightarrow> state"},
                         bop(Sub,var_w("v",32),lw(4,32)),@{theory}),var("s",qTy))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'LR",@{typ "state \<Rightarrow> state"},
                         cc[ex(var_w("v",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(1,1)],@{theory}),
                      var("s",qTy)))),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(eq(var("targetInstrSet",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",@{theory})),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),
                      tp[bop(Add,call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                             var_w("imm32",32)),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),tp[bop(Add,var_w("v",32),var_w("imm32",32)),var("s",qTy)])),
               apply
                 (call("BranchWritePC",@{typ "state \<Rightarrow> state"},var_w("v",32),@{theory}),
                  apply
                    (call
                       ("SelectInstrSet",@{typ "state \<Rightarrow> state"},
                        var("targetInstrSet",@{typ InstrSet}),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BranchLinkExchangeRegister",
   close
     (var_w("m",4),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("BXWritePC",@{typ "state \<Rightarrow> state"},var_w("v",32),@{theory}),
               ite(eq(apply
                        (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                         var("s",qTy)),lc("InstrSet_ARM","InstrSet",@{theory})),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),
                      apply
                        (call
                           ("write'LR",@{typ "state \<Rightarrow> state"},
                            bop(Sub,var_w("v",32),lw(4,32)),@{theory}),var("s",qTy))),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),
                      apply
                        (call
                           ("write'LR",@{typ "state \<Rightarrow> state"},
                            cc[ex(bop(Sub,var_w("v",32),lw(2,32)),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                               lw(1,1)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CompareBranch",
   close
     (tp[var_b"nonzero",var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            ite(mop(Not,eq(var_b"nonzero",eq(var_w("v",32),lw(0,32)))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   apply
                     (call
                        ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                         bop(Add,var_w("v",32),var_w("imm32",32)),@{theory}),var("s",qTy))),
                apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TableBranchByte",
   close
     (tp[var_b"is_tbh",var_w("m",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",16),var("s",qTy)],
                   ite(var_b"is_tbh",
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                var_w("n",4),@{theory}),var("s",qTy)),
                          let'
                            (tp[var("v",@{typ "32 word \<times> nat"}),var("s",qTy)],
                             let'
                               (tp[var_w("v",32),var("s",qTy)],
                                let'
                                  (tp[var_w("v0",32),var("s",qTy)],
                                   apply
                                     (call
                                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         var_w("m",4),@{theory}),var("s",qTy)),
                                   let'
                                     (tp[var_w("v0",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("LSL",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            tp[var_w("v0",32),ln 1],@{theory}),var("s",qTy)),
                                      tp[bop(Add,var_w("v",32),var_w("v0",32)),var("s",qTy)])),
                                tp[tp[var_w("v",32),ln 2],var("s",qTy)]),
                             apply
                               (call
                                  ("MemU",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                                   var("v",@{typ "32 word \<times> nat"}),@{theory}),var("s",qTy)))),
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                var_w("n",4),@{theory}),var("s",qTy)),
                          let'
                            (tp[var("v",@{typ "32 word \<times> nat"}),var("s",qTy)],
                             let'
                               (tp[var_w("v",32),var("s",qTy)],
                                let'
                                  (tp[var_w("v0",32),var("s",qTy)],
                                   apply
                                     (call
                                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         var_w("m",4),@{theory}),var("s",qTy)),
                                   tp[bop(Add,var_w("v",32),var_w("v0",32)),var("s",qTy)]),
                                tp[tp[var_w("v",32),ln 1],var("s",qTy)]),
                             apply
                               (call
                                  ("MemU",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                                   var("v",@{typ "32 word \<times> nat"}),@{theory}),var("s",qTy))))),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),
                      apply
                        (call
                           ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                            bop(Add,var_w("v0",32),bop(Mul,lw(2,32),mop(Cast w32,var_w("v",16)))),
                            @{theory}),var("s",qTy)))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CheckArray",
   close
     (tp[var_w("m",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v",var("s",qTy)],
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                        @{theory}),var("s",qTy)),
                  tp[bop(Ule,var_w("v",32),var_w("v0",32)),var("s",qTy)]),
               ite(var_b"v",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                         var("s",qTy)),
                      let'
                        (var("s",qTy),
                         apply
                           (call
                              ("write'ITSTATE",@{typ "state \<Rightarrow> state"},lw(0,8),@{theory}),
                            apply
                              (call
                                 ("write'LR",@{typ "state \<Rightarrow> state"},
                                  cc[ex(var_w("v",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(1,1)],
                                  @{theory}),var("s",qTy))),
                         apply
                           (call
                              ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                               bop(Sub,
                                   call
                                     ("CP14.TEEHBR",w32,
                                      call("state.CP14",@{typ CP14},var("s",qTy),@{theory}),
                                      @{theory}),lw(8,32)),@{theory}),var("s",qTy)))),
                   apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'HandlerBranchLink",
   close
     (tp[var_b"generate_link",var_w("handler_offset",32)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(var_b"generate_link",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'LR",@{typ "state \<Rightarrow> state"},
                         cc[ex(bop(Sub,var_w("v",32),lw(2,32)),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                            lw(1,1)],@{theory}),var("s",qTy))),var("state",qTy)),
            apply
              (call
                 ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                  bop(Add,
                      call
                        ("CP14.TEEHBR",w32,call("state.CP14",@{typ CP14},var("s",qTy),@{theory}),
                         @{theory}),var_w("handler_offset",32)),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'HandlerBranchLinkParameter",
   close
     (tp[var_w("imm32",32),var_w("handler_offset",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("imm32",32),lw(8,4)],
                     @{theory}),var("state",qTy))),
            let'
              (var("s",qTy),
               apply
                 (call
                    ("write'LR",@{typ "state \<Rightarrow> state"},
                     cc[ex(bop(Sub,var_w("v",32),lw(2,32)),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                        lw(1,1)],@{theory}),var("s",qTy)),
               apply
                 (call
                    ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                     bop(Add,
                         call
                           ("CP14.TEEHBR",w32,call("state.CP14",@{typ CP14},var("s",qTy),@{theory}),
                            @{theory}),var_w("handler_offset",32)),@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'HandlerBranchParameter",
   close
     (tp[var_w("imm32",32),var_w("handler_offset",32)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("imm32",32),lw(8,4)],
                  @{theory}),var("state",qTy)),
            apply
              (call
                 ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                  bop(Add,
                      call
                        ("CP14.TEEHBR",w32,call("state.CP14",@{typ CP14},var("s",qTy),@{theory}),
                         @{theory}),var_w("handler_offset",32)),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'EnterxLeavex",
   close
     (var_b"is_enterx",
      close
        (var("state",qTy),
         ite(var_b"is_enterx",
             let'
               (tp[var_b"v",var("s",qTy)],
                apply
                  (call
                     ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                      @{theory}),var("state",qTy)),
                ite(var_b"v",
                    apply
                      (call
                         ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                       var("s",qTy)),
                    apply
                      (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                       apply
                         (call
                            ("SelectInstrSet",@{typ "state \<Rightarrow> state"},
                             lc("InstrSet_ThumbEE","InstrSet",@{theory}),@{theory}),var("s",qTy))))),
             apply
               (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                apply
                  (call
                     ("SelectInstrSet",@{typ "state \<Rightarrow> state"},
                      lc("InstrSet_Thumb","InstrSet",@{theory}),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'IfThen",
   close
     (tp[var_w("firstcond",4),var_w("mask",4)],
      close
        (var("state",qTy),
         rupd
           ("state.Encoding",
            tp[apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  rupd
                    ("state.CPSR",
                     tp[var("state",qTy),
                        rupd
                          ("PSR.IT",
                           tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),
                              cc[var_w("firstcond",4),var_w("mask",4)]],@{theory})],@{theory})),
               lc("Encoding_ARM","Encoding",@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CountLeadingZeroes",
   close
     (tp[var_w("d",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[mop(Cast w32,
                            call("CountLeadingZeroBits",HOLogic.natT,var_w("v",32),@{theory})),
                        var_w("d",4)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveHalfword",
   close
     (tp[var_b"high",var_w("d",4),var_w("imm16",16)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("d",4),
                         @{theory}),var("state",qTy)),
                   apply
                     (call
                        ("write'R",@{typ "state \<Rightarrow> state"},
                         tp[bfi(ln 31,ln 16,var_w("imm16",16),var_w("v",32)),var_w("d",4)],@{theory}),
                      var("s",qTy))),
                apply
                  (call
                     ("write'R",@{typ "state \<Rightarrow> state"},
                      tp[mop(Cast w32,var_w("imm16",16)),var_w("d",4)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DataProcessing",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("imm32",32),var_b"C"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            itb([(bop(Or,eq(var_w("opc",4),lw(13,4)),
                      bop(And,eq(var_w("opc",4),lw(15,4)),eq(var_w("n",4),lw(15,4)))),
                  tp[lw(0,32),var("state",qTy)]),
                 (bop(And,bop(In,var_w("opc",4),sl[lw(4,4),lw(2,4)]),
                      bop(And,eq(var_w("n",4),lw(15,4)),mop(Not,var_b"setflags"))),
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     apply
                       (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                        var("state",qTy)),
                     tp[call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),var("s",qTy)]))],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("result",32),var_b"carry",var_b"overflow"],
               call
                 ("DataProcessingALU",@{typ "32 word \<times> bool \<times> bool"},
                  tp[var_w("opc",4),var_w("v",32),var_w("imm32",32),
                     call
                       ("PSR.C",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                        @{theory})],@{theory}),
               let'
                 (var("s",qTy),
                  ite(mop(Not,eq(ex(var_w("opc",4),ln 3,ln 2,(Word_Lib.mk_wordT 2)),lw(2,2))),
                      apply
                        (call
                           ("write'R",@{typ "state \<Rightarrow> state"},
                            tp[var_w("result",32),var_w("d",4)],@{theory}),var("s",qTy)),
                      var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     ite(var_b"setflags",
                         let'
                           (var("s",qTy),
                            rupd
                              ("state.CPSR",
                               tp[var("s",qTy),
                                  rupd
                                    ("PSR.N",
                                     tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                        bop(Bit,var_w("result",32),ln 31)],@{theory})],@{theory}),
                            let'
                              (var("s",qTy),
                               rupd
                                 ("state.CPSR",
                                  tp[var("s",qTy),
                                     rupd
                                       ("PSR.Z",
                                        tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           eq(var_w("result",32),lw(0,32))],@{theory})],@{theory}),
                               ite(call("ArithmeticOpcode",HOLogic.boolT,var_w("opc",4),@{theory}),
                                   let'
                                     (var("s",qTy),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.C",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  var_b"carry"],@{theory})],@{theory}),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.V",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  var_b"overflow"],@{theory})],@{theory})),
                                   rupd
                                     ("state.CPSR",
                                      tp[var("s",qTy),
                                         rupd
                                           ("PSR.C",
                                            tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                               var_b"C"],@{theory})],@{theory})))),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DataProcessingPC",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            itb([(bop(Or,eq(var_w("opc",4),lw(13,4)),
                      bop(And,eq(var_w("opc",4),lw(15,4)),eq(var_w("n",4),lw(15,4)))),
                  tp[lw(0,32),var("state",qTy)]),
                 (bop(And,bop(In,var_w("opc",4),sl[lw(4,4),lw(2,4)]),
                      bop(And,eq(var_w("n",4),lw(15,4)),mop(Not,var_b"setflags"))),
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     apply
                       (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                        var("state",qTy)),
                     tp[call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),var("s",qTy)]))],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("result",32),var_a HOLogic.boolT,var_a HOLogic.boolT],
               call
                 ("DataProcessingALU",@{typ "32 word \<times> bool \<times> bool"},
                  tp[var_w("opc",4),var_w("v",32),var_w("imm32",32),
                     call
                       ("PSR.C",HOLogic.boolT,call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                        @{theory})],@{theory}),
               ite(var_b"setflags",
                   let'
                     (tp[var_b"v",var("s",qTy)],
                      apply
                        (call
                           ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            lu,@{theory}),var("s",qTy)),
                      ite(var_b"v",
                          apply
                            (call
                               ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                                @{theory}),var("s",qTy)),
                          let'
                            (tp[var_b"v",var("s",qTy)],
                             apply
                               (call
                                  ("CurrentModeIsUserOrSystem",
                                   @{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                                var("s",qTy)),
                             ite(var_b"v",
                                 mop(Snd,
                                     apply
                                       (call
                                          ("raise'exception",
                                           @{typ "state \<Rightarrow> (unit \<times> state)"},
                                           call
                                             ("exception.UNPREDICTABLE",@{typ exception},
                                              ls"DataProcessingPC",@{theory}),@{theory}),
                                        var("s",qTy))),
                                 let'
                                   (tp[var("v",@{typ PSR}),var("s",qTy)],
                                    apply
                                      (const
                                         ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                                          @{theory}),var("s",qTy)),
                                    let'
                                      (var("s",qTy),
                                       apply
                                         (call
                                            ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                                             tp[call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}),
                                                lw(15,4),lt],@{theory}),var("s",qTy)),
                                       ite(bop(And,
                                               eq(call
                                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                                     call
                                                       ("state.CPSR",@{typ PSR},var("s",qTy),
                                                        @{theory}),@{theory}),lw(26,5)),
                                               eq(apply
                                                    (call
                                                       ("CurrentInstrSet",
                                                        @{typ "state \<Rightarrow> InstrSet"},lu,
                                                        @{theory}),var("s",qTy)),
                                                  lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                                           mop(Snd,
                                               apply
                                                 (call
                                                    ("raise'exception",
                                                     @{typ
                                                     "state \<Rightarrow> (unit \<times> state)"},
                                                     call
                                                       ("exception.UNPREDICTABLE",@{typ exception},
                                                        ls"DataProcessingPC",@{theory}),@{theory}),
                                                  var("s",qTy))),
                                           apply
                                             (call
                                                ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                                                 var_w("result",32),@{theory}),var("s",qTy))))))))),
                   apply
                     (call
                        ("ALUWritePC",@{typ "state \<Rightarrow> state"},var_w("result",32),
                         @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Move",
   close
     (tp[var_b"setflags",var_b"negate",var_w("d",4),var_w("imm12",12)],
      close
        (var("state",qTy),
         let'
           (var_w("opc",4),cc[lw(3,2),mop(Cast w1,var_b"negate"),lw(1,1)],
            let'
              (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
               apply
                 (call
                    ("ExpandImm_C",
                     @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                     tp[var_w("imm12",12),
                        call
                          ("PSR.C",HOLogic.boolT,
                           call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],
                     @{theory}),var("state",qTy)),
               let'
                 (tp[var_w("imm32",32),var_b"carry"],var("v",@{typ "32 word \<times> bool"}),
                  ite(eq(var_w("d",4),lw(15,4)),
                      apply
                        (call
                           ("DataProcessingPC",@{typ "state \<Rightarrow> state"},
                            tp[var_w("opc",4),var_b"setflags",lw(15,4),var_w("imm32",32)],@{theory}),
                         var("s",qTy)),
                      apply
                        (call
                           ("DataProcessing",@{typ "state \<Rightarrow> state"},
                            tp[var_w("opc",4),var_b"setflags",var_w("d",4),lw(15,4),
                               var_w("imm32",32),var_b"carry"],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TestCompareImmediate",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("imm12",12)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("ExpandImm_C",
                  @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                  tp[var_w("imm12",12),
                     call
                       ("PSR.C",HOLogic.boolT,
                        call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],
                  @{theory}),var("state",qTy)),
            let'
              (tp[var_w("imm32",32),var_b"carry"],var("v",@{typ "32 word \<times> bool"}),
               apply
                 (call
                    ("DataProcessing",@{typ "state \<Rightarrow> state"},
                     tp[cc[lw(2,2),var_w("op",2)],lt,lx w4,var_w("n",4),var_w("imm32",32),
                        var_b"carry"],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ArithLogicImmediate",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("imm12",12)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
            apply
              (call
                 ("ExpandImm_C",
                  @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                  tp[var_w("imm12",12),
                     call
                       ("PSR.C",HOLogic.boolT,
                        call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory})],
                  @{theory}),var("state",qTy)),
            let'
              (tp[var_w("imm32",32),var_b"carry"],var("v",@{typ "32 word \<times> bool"}),
               ite(eq(var_w("d",4),lw(15,4)),
                   apply
                     (call
                        ("DataProcessingPC",@{typ "state \<Rightarrow> state"},
                         tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("imm32",32)],@{theory}),
                      var("s",qTy)),
                   apply
                     (call
                        ("DataProcessing",@{typ "state \<Rightarrow> state"},
                         tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                            var_w("imm32",32),var_b"carry"],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("doRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_n"shift_n"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
               apply
                 (call
                    ("Shift_C",
                     @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                     tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                        call
                          ("PSR.C",HOLogic.boolT,
                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory})],
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("shifted",32),var_b"carry"],var("v",@{typ "32 word \<times> bool"}),
                  ite(eq(var_w("d",4),lw(15,4)),
                      apply
                        (call
                           ("DataProcessingPC",@{typ "state \<Rightarrow> state"},
                            tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("shifted",32)],
                            @{theory}),var("s",qTy)),
                      apply
                        (call
                           ("DataProcessing",@{typ "state \<Rightarrow> state"},
                            tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                               var_w("shifted",32),var_b"carry"],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Register",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_n"shift_n"],
      close
        (var("state",qTy),
         apply
           (call
              ("doRegister",@{typ "state \<Rightarrow> state"},
               tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
                  var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TestCompareRegister",
   close
     (tp[var_w("opc",2),var_w("n",4),var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],
      close
        (var("state",qTy),
         apply
           (call
              ("doRegister",@{typ "state \<Rightarrow> state"},
               tp[cc[lw(2,2),var_w("opc",2)],lt,lw(0,4),var_w("n",4),var_w("m",4),
                  var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ShiftImmediate",
   close
     (tp[var_b"negate",var_b"setflags",var_w("d",4),var_w("m",4),var("shift_t",@{typ SRType}),
         var_n"shift_n"],
      close
        (var("state",qTy),
         ite(var_b"negate",
             apply
               (call
                  ("doRegister",@{typ "state \<Rightarrow> state"},
                   tp[lw(15,4),var_b"setflags",var_w("d",4),lw(15,4),var_w("m",4),
                      var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),var("state",qTy)),
             apply
               (call
                  ("doRegister",@{typ "state \<Rightarrow> state"},
                   tp[lw(13,4),var_b"setflags",var_w("d",4),lx w4,var_w("m",4),
                      var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("doRegisterShiftedRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_w("s",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s0",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
               let'
                 (tp[var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                     var("s",qTy)],
                  let'
                    (tp[var_w("v0",32),var("s",qTy)],
                     apply
                       (call
                          ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("s",4),
                           @{theory}),var("s0",qTy)),
                     tp[tp[var_w("v",32),var("shift_t",@{typ SRType}),
                           mop(Cast HOLogic.natT,ex(var_w("v0",32),ln 7,ln 0,w8)),
                           call
                             ("PSR.C",HOLogic.boolT,
                              call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory})],
                        var("s",qTy)]),
                  apply
                    (call
                       ("Shift_C",
                        @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                        var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                        @{theory}),var("s",qTy))),
               let'
                 (tp[var_w("shifted",32),var_b"carry"],var("v",@{typ "32 word \<times> bool"}),
                  apply
                    (call
                       ("DataProcessing",@{typ "state \<Rightarrow> state"},
                        tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                           var_w("shifted",32),var_b"carry"],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'RegisterShiftedRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_w("s",4)],
      close
        (var("state",qTy),
         apply
           (call
              ("doRegisterShiftedRegister",@{typ "state \<Rightarrow> state"},
               tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
                  var("shift_t",@{typ SRType}),var_w("s",4)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ShiftRegister",
   close
     (tp[var_b"negate",var_b"setflags",var_w("d",4),var_w("n",4),var("shift_t",@{typ SRType}),
         var_w("m",4)],
      close
        (var("state",qTy),
         ite(var_b"negate",
             apply
               (call
                  ("doRegisterShiftedRegister",@{typ "state \<Rightarrow> state"},
                   tp[lw(15,4),var_b"setflags",var_w("d",4),lw(15,4),var_w("n",4),
                      var("shift_t",@{typ SRType}),var_w("m",4)],@{theory}),var("state",qTy)),
             apply
               (call
                  ("doRegisterShiftedRegister",@{typ "state \<Rightarrow> state"},
                   tp[lw(13,4),var_b"setflags",var_w("d",4),lx w4,var_w("n",4),
                      var("shift_t",@{typ SRType}),var_w("m",4)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AddSub",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("imm12",12)],
      close
        (var("state",qTy),
         apply
           (call
              ("DataProcessing",@{typ "state \<Rightarrow> state"},
               tp[ite(var_b"sub",lw(2,4),lw(4,4)),lf,var_w("d",4),var_w("n",4),
                  mop(Cast w32,var_w("imm12",12)),lx HOLogic.boolT],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SaturatingAddSubtract",
   close
     (tp[var_w("opc",2),var_w("d",4),var_w("m",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (var("s",@{typ "bool \<times> 32 word \<times> state"}),
            itb([(eq(var_w("opc",2),lw(0,2)),
                  let'
                    (tp[var_w("v",32),var("s",@{typ "bool \<times> 32 word \<times> state"})],
                     let'
                       (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                        let'
                          (tp[var_w("v",32),var("s3",qTy)],
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("state",qTy)),
                           tp[var_w("v",32),lx w32,var("s3",qTy)]),
                        tp[var_w("v",32),lx HOLogic.boolT,var("s3",@{typ "32 word \<times> state"})]),
                     let'
                       (tp[var("v",@{typ "32 word \<times> bool"}),
                           var("s",@{typ "bool \<times> 32 word \<times> state"})],
                        let'
                          (tp[var("v",@{typ "int \<times> nat"}),
                              var("s",@{typ "bool \<times> 32 word \<times> state"})],
                           let'
                             (tp[var_i"v",var("s",@{typ "bool \<times> 32 word \<times> state"})],
                              let'
                                (tp[var_w("v0",32),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})],
                                 let'
                                   (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                                    let'
                                      (tp[var_w("v",32),var("s3",qTy)],
                                       apply
                                         (call
                                            ("R",
                                             @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                             var_w("n",4),@{theory}),
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"})))),
                                       tp[var_w("v",32),
                                          mop(Fst,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"}))),
                                          var("s3",qTy)]),
                                    tp[var_w("v",32),
                                       mop(Fst,
                                           var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                       var("s3",@{typ "32 word \<times> state"})]),
                                 tp[bop(Add,mop(Cast HOLogic.intT,var_w("v",32)),
                                        mop(Cast HOLogic.intT,var_w("v0",32))),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})]),
                              tp[tp[var_i"v",ln 32],
                                 var("s",@{typ "bool \<times> 32 word \<times> state"})]),
                           let'
                             (tp[var("v",@{typ "32 word \<times> bool"}),
                                 var("s3",@{typ "32 word \<times> state"})],
                              let'
                                (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                                 apply
                                   (call
                                      ("SignedSatQ",
                                       @{typ
                                       "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                                       var("v",@{typ "int \<times> nat"}),@{theory}),
                                    mop(Snd,
                                        mop(Snd,
                                            var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                                 tp[var("v",@{typ "32 word \<times> bool"}),
                                    mop(Fst,
                                        mop(Snd,
                                            var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                    var("s3",qTy)]),
                              tp[var("v",@{typ "32 word \<times> bool"}),
                                 mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                 var("s3",@{typ "32 word \<times> state"})])),
                        let'
                          (tp[var_w("r",32),var_b"s0"],var("v",@{typ "32 word \<times> bool"}),
                           tp[var_b"s0",var_w("r",32),
                              mop(Snd,
                                  mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"})))])))),
                 (eq(var_w("opc",2),lw(1,2)),
                  let'
                    (tp[var_w("v",32),var("s",@{typ "bool \<times> 32 word \<times> state"})],
                     let'
                       (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                        let'
                          (tp[var_w("v",32),var("s3",qTy)],
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("state",qTy)),
                           tp[var_w("v",32),lx w32,var("s3",qTy)]),
                        tp[var_w("v",32),lx HOLogic.boolT,var("s3",@{typ "32 word \<times> state"})]),
                     let'
                       (tp[var("v",@{typ "32 word \<times> bool"}),
                           var("s",@{typ "bool \<times> 32 word \<times> state"})],
                        let'
                          (tp[var("v",@{typ "int \<times> nat"}),
                              var("s",@{typ "bool \<times> 32 word \<times> state"})],
                           let'
                             (tp[var_i"v",var("s",@{typ "bool \<times> 32 word \<times> state"})],
                              let'
                                (tp[var_w("v0",32),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})],
                                 let'
                                   (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                                    let'
                                      (tp[var_w("v",32),var("s3",qTy)],
                                       apply
                                         (call
                                            ("R",
                                             @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                             var_w("n",4),@{theory}),
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"})))),
                                       tp[var_w("v",32),
                                          mop(Fst,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"}))),
                                          var("s3",qTy)]),
                                    tp[var_w("v",32),
                                       mop(Fst,
                                           var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                       var("s3",@{typ "32 word \<times> state"})]),
                                 tp[bop(Sub,mop(Cast HOLogic.intT,var_w("v",32)),
                                        mop(Cast HOLogic.intT,var_w("v0",32))),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})]),
                              tp[tp[var_i"v",ln 32],
                                 var("s",@{typ "bool \<times> 32 word \<times> state"})]),
                           let'
                             (tp[var("v",@{typ "32 word \<times> bool"}),
                                 var("s3",@{typ "32 word \<times> state"})],
                              let'
                                (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                                 apply
                                   (call
                                      ("SignedSatQ",
                                       @{typ
                                       "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                                       var("v",@{typ "int \<times> nat"}),@{theory}),
                                    mop(Snd,
                                        mop(Snd,
                                            var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                                 tp[var("v",@{typ "32 word \<times> bool"}),
                                    mop(Fst,
                                        mop(Snd,
                                            var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                    var("s3",qTy)]),
                              tp[var("v",@{typ "32 word \<times> bool"}),
                                 mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                 var("s3",@{typ "32 word \<times> state"})])),
                        let'
                          (tp[var_w("r",32),var_b"s0"],var("v",@{typ "32 word \<times> bool"}),
                           tp[var_b"s0",var_w("r",32),
                              mop(Snd,
                                  mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"})))])))),
                 (eq(var_w("opc",2),lw(2,2)),
                  let'
                    (tp[var_w("v",32),var("s",@{typ "bool \<times> 32 word \<times> state"})],
                     let'
                       (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                        let'
                          (tp[var_w("v",32),var("s3",qTy)],
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("n",4),@{theory}),var("state",qTy)),
                           tp[var_w("v",32),lx w32,var("s3",qTy)]),
                        tp[var_w("v",32),lx HOLogic.boolT,var("s3",@{typ "32 word \<times> state"})]),
                     let'
                       (tp[var("v",@{typ "32 word \<times> bool"}),
                           var("s",@{typ "bool \<times> 32 word \<times> state"})],
                        let'
                          (tp[var("v",@{typ "32 word \<times> bool"}),
                              var("s3",@{typ "32 word \<times> state"})],
                           let'
                             (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                              apply
                                (call
                                   ("SignedSatQ",
                                    @{typ
                                    "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                                    tp[bop(Mul,li 2,mop(Cast HOLogic.intT,var_w("v",32))),ln 32],
                                    @{theory}),
                                 mop(Snd,
                                     mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                              tp[var("v",@{typ "32 word \<times> bool"}),
                                 mop(Fst,
                                     mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                 var("s3",qTy)]),
                           tp[var("v",@{typ "32 word \<times> bool"}),
                              mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                              var("s3",@{typ "32 word \<times> state"})]),
                        let'
                          (tp[var_w("doubled",32),var_b"sat1"],
                           var("v",@{typ "32 word \<times> bool"}),
                           let'
                             (tp[var_w("v",32),
                                 var("s",@{typ "bool \<times> 32 word \<times> state"})],
                              let'
                                (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                                 let'
                                   (tp[var_w("v",32),var("s3",qTy)],
                                    apply
                                      (call
                                         ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                          var_w("m",4),@{theory}),
                                       mop(Snd,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                                    tp[var_w("v",32),
                                       mop(Fst,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                       var("s3",qTy)]),
                                 tp[var_w("v",32),
                                    mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                    var("s3",@{typ "32 word \<times> state"})]),
                              let'
                                (tp[var("v",@{typ "32 word \<times> bool"}),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})],
                                 let'
                                   (tp[var("v",@{typ "32 word \<times> bool"}),
                                       var("s3",@{typ "32 word \<times> state"})],
                                    let'
                                      (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                                       apply
                                         (call
                                            ("SignedSatQ",
                                             @{typ
                                             "state \<Rightarrow>
                                              ((32 word \<times> bool) \<times> state)"},
                                             tp[bop(Add,mop(Cast HOLogic.intT,var_w("v",32)),
                                                    mop(Cast HOLogic.intT,var_w("doubled",32))),
                                                ln 32],@{theory}),
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"})))),
                                       tp[var("v",@{typ "32 word \<times> bool"}),
                                          mop(Fst,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"}))),
                                          var("s3",qTy)]),
                                    tp[var("v",@{typ "32 word \<times> bool"}),
                                       mop(Fst,
                                           var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                       var("s3",@{typ "32 word \<times> state"})]),
                                 let'
                                   (tp[var_w("r",32),var_b"sat2"],
                                    var("v",@{typ "32 word \<times> bool"}),
                                    tp[bop(Or,var_b"sat1",var_b"sat2"),var_w("r",32),
                                       mop(Snd,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"})))]))))))),
                 (eq(var_w("opc",2),lw(3,2)),
                  let'
                    (tp[var_w("v",32),var("s",@{typ "bool \<times> 32 word \<times> state"})],
                     let'
                       (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                        let'
                          (tp[var_w("v",32),var("s3",qTy)],
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("n",4),@{theory}),var("state",qTy)),
                           tp[var_w("v",32),lx w32,var("s3",qTy)]),
                        tp[var_w("v",32),lx HOLogic.boolT,var("s3",@{typ "32 word \<times> state"})]),
                     let'
                       (tp[var("v",@{typ "32 word \<times> bool"}),
                           var("s",@{typ "bool \<times> 32 word \<times> state"})],
                        let'
                          (tp[var("v",@{typ "32 word \<times> bool"}),
                              var("s3",@{typ "32 word \<times> state"})],
                           let'
                             (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                              apply
                                (call
                                   ("SignedSatQ",
                                    @{typ
                                    "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                                    tp[bop(Mul,li 2,mop(Cast HOLogic.intT,var_w("v",32))),ln 32],
                                    @{theory}),
                                 mop(Snd,
                                     mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                              tp[var("v",@{typ "32 word \<times> bool"}),
                                 mop(Fst,
                                     mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                 var("s3",qTy)]),
                           tp[var("v",@{typ "32 word \<times> bool"}),
                              mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                              var("s3",@{typ "32 word \<times> state"})]),
                        let'
                          (tp[var_w("doubled",32),var_b"sat1"],
                           var("v",@{typ "32 word \<times> bool"}),
                           let'
                             (tp[var_w("v",32),
                                 var("s",@{typ "bool \<times> 32 word \<times> state"})],
                              let'
                                (tp[var_w("v",32),var("s3",@{typ "32 word \<times> state"})],
                                 let'
                                   (tp[var_w("v",32),var("s3",qTy)],
                                    apply
                                      (call
                                         ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                          var_w("m",4),@{theory}),
                                       mop(Snd,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"})))),
                                    tp[var_w("v",32),
                                       mop(Fst,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                                       var("s3",qTy)]),
                                 tp[var_w("v",32),
                                    mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                    var("s3",@{typ "32 word \<times> state"})]),
                              let'
                                (tp[var("v",@{typ "32 word \<times> bool"}),
                                    var("s",@{typ "bool \<times> 32 word \<times> state"})],
                                 let'
                                   (tp[var("v",@{typ "32 word \<times> bool"}),
                                       var("s3",@{typ "32 word \<times> state"})],
                                    let'
                                      (tp[var("v",@{typ "32 word \<times> bool"}),var("s3",qTy)],
                                       apply
                                         (call
                                            ("SignedSatQ",
                                             @{typ
                                             "state \<Rightarrow>
                                              ((32 word \<times> bool) \<times> state)"},
                                             tp[bop(Sub,mop(Cast HOLogic.intT,var_w("v",32)),
                                                    mop(Cast HOLogic.intT,var_w("doubled",32))),
                                                ln 32],@{theory}),
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"})))),
                                       tp[var("v",@{typ "32 word \<times> bool"}),
                                          mop(Fst,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ "bool \<times> 32 word \<times> state"}))),
                                          var("s3",qTy)]),
                                    tp[var("v",@{typ "32 word \<times> bool"}),
                                       mop(Fst,
                                           var("s",@{typ "bool \<times> 32 word \<times> state"})),
                                       var("s3",@{typ "32 word \<times> state"})]),
                                 let'
                                   (tp[var_w("r",32),var_b"sat2"],
                                    var("v",@{typ "32 word \<times> bool"}),
                                    tp[bop(Or,var_b"sat1",var_b"sat2"),var_w("r",32),
                                       mop(Snd,
                                           mop(Snd,
                                               var("s",@{typ "bool \<times> 32 word \<times> state"})))])))))))],
                mop(Snd,lx(@{typ "unit \<times> bool \<times> 32 word \<times> state"}))),
            let'
              (var("s2",qTy),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[mop(Fst,mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"}))),
                        var_w("d",4)],@{theory}),
                  mop(Snd,mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> state"})))),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  ite(mop(Fst,var("s",@{typ "bool \<times> 32 word \<times> state"})),
                      rupd
                        ("state.CPSR",
                         tp[var("s2",qTy),
                            rupd
                              ("PSR.Q",tp[call("state.CPSR",@{typ PSR},var("s2",qTy),@{theory}),lt],
                               @{theory})],@{theory}),var("s2",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Multiply32",
   close
     (tp[var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (var_w("result",32),bop(Mul,var_w("v",32),var_w("v0",32)),
                  let'
                    (var("s",qTy),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[var_w("result",32),var_w("d",4)],@{theory}),var("s",qTy)),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        ite(var_b"setflags",
                            let'
                              (var("s",qTy),
                               rupd
                                 ("state.CPSR",
                                  tp[var("s",qTy),
                                     rupd
                                       ("PSR.N",
                                        tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           bop(Bit,var_w("result",32),ln 31)],@{theory})],@{theory}),
                               let'
                                 (tp[var_n"v1",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.Z",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 eq(var_w("result",32),lw(0,32))],@{theory})],
                                        @{theory}),
                                     tp[apply
                                          (call
                                             ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                              @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  ite(eq(var_n"v1",ln 4),
                                      rupd
                                        ("state.CPSR",
                                         tp[var("s",qTy),
                                            rupd
                                              ("PSR.C",
                                               tp[call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                  apply
                                                    (lx(@{typ
                                                        "(32 word \<times> 32 word \<times> bool) \<Rightarrow>
                                                         bool"}),
                                                     tp[var_w("v",32),var_w("v0",32),
                                                        call
                                                          ("PSR.C",HOLogic.boolT,
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              @{theory}),@{theory})])],@{theory})],
                                         @{theory}),var("s",qTy)))),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MultiplyAccumulate",
   close
     (tp[var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v1",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (var_w("result",32),
                     bop(Add,bop(Mul,var_w("v",32),var_w("v0",32)),var_w("v1",32)),
                     let'
                       (var("s",qTy),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              tp[var_w("result",32),var_w("d",4)],@{theory}),var("s",qTy)),
                        apply
                          (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                           ite(var_b"setflags",
                               let'
                                 (var("s",qTy),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.N",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              bop(Bit,var_w("result",32),ln 31)],@{theory})],
                                     @{theory}),
                                  let'
                                    (tp[var_n"v2",var("s",qTy)],
                                     let'
                                       (var("s0",qTy),
                                        rupd
                                          ("state.CPSR",
                                           tp[var("s",qTy),
                                              rupd
                                                ("PSR.Z",
                                                 tp[call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),eq(var_w("result",32),lw(0,32))],
                                                 @{theory})],@{theory}),
                                        tp[apply
                                             (call
                                                ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                 @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                     ite(eq(var_n"v2",ln 4),
                                         rupd
                                           ("state.CPSR",
                                            tp[var("s",qTy),
                                               rupd
                                                 ("PSR.C",
                                                  tp[call
                                                       ("state.CPSR",@{typ PSR},var("s",qTy),
                                                        @{theory}),
                                                     apply
                                                       (lx(@{typ
                                                           "(32 word \<times>
                                                             32 word \<times> 32 word \<times> bool) \<Rightarrow>
                                                            bool"}),
                                                        tp[var_w("v",32),var_w("v0",32),
                                                           var_w("v1",32),
                                                           call
                                                             ("PSR.C",HOLogic.boolT,
                                                              call
                                                                ("state.CPSR",@{typ PSR},
                                                                 var("s",qTy),@{theory}),@{theory})])],
                                                  @{theory})],@{theory}),var("s",qTy)))),
                               var("s",qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MultiplyLong",
   close
     (tp[var_b"accumulate",var_b"signed",var_b"setflags",var_w("dhi",4),var_w("dlo",4),var_w("n",4),
         var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v1",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("dhi",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (tp[var_w("v2",32),var("s",qTy)],
                     apply
                       (call
                          ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("dlo",4),
                           @{theory}),var("s",qTy)),
                     let'
                       (var_w("result",64),
                        bop(Add,
                            ite(var_b"signed",
                                bop(Mul,mop(SE w64,var_w("v",32)),mop(SE w64,var_w("v0",32))),
                                bop(Mul,mop(Cast w64,var_w("v",32)),mop(Cast w64,var_w("v0",32)))),
                            ite(var_b"accumulate",cc[var_w("v1",32),var_w("v2",32)],lw(0,64))),
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("write'R",@{typ "state \<Rightarrow> state"},
                                 tp[ex(var_w("result",64),ln 31,ln 0,w32),var_w("dlo",4)],@{theory}),
                              apply
                                (call
                                   ("write'R",@{typ "state \<Rightarrow> state"},
                                    tp[ex(var_w("result",64),ln 63,ln 32,w32),var_w("dhi",4)],
                                    @{theory}),var("s",qTy))),
                           apply
                             (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                              ite(var_b"setflags",
                                  let'
                                    (var("s",qTy),
                                     rupd
                                       ("state.CPSR",
                                        tp[var("s",qTy),
                                           rupd
                                             ("PSR.N",
                                              tp[call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 bop(Bit,var_w("result",64),ln 63)],@{theory})],
                                        @{theory}),
                                     let'
                                       (tp[var_n"v3",var("s",qTy)],
                                        let'
                                          (var("s0",qTy),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.Z",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),eq(var_w("result",64),lw(0,64))],
                                                    @{theory})],@{theory}),
                                           tp[apply
                                                (call
                                                   ("ArchVersion",@{typ "state \<Rightarrow> nat"},
                                                    lu,@{theory}),var("s0",qTy)),var("s0",qTy)]),
                                        ite(eq(var_n"v3",ln 4),
                                            let'
                                              (var("s",qTy),
                                               rupd
                                                 ("state.CPSR",
                                                  tp[var("s",qTy),
                                                     rupd
                                                       ("PSR.C",
                                                        tp[call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              @{theory}),
                                                           apply
                                                             (lx(@{typ
                                                                 "(32 word \<times>
                                                                   32 word \<times>
                                                                   32 word \<times>
                                                                   32 word \<times> bool) \<Rightarrow>
                                                                  bool"}),
                                                              tp[var_w("v",32),var_w("v0",32),
                                                                 var_w("v1",32),var_w("v2",32),
                                                                 call
                                                                   ("PSR.C",HOLogic.boolT,
                                                                    call
                                                                      ("state.CPSR",@{typ PSR},
                                                                       var("s",qTy),@{theory}),
                                                                    @{theory})])],@{theory})],
                                                  @{theory}),
                                               rupd
                                                 ("state.CPSR",
                                                  tp[var("s",qTy),
                                                     rupd
                                                       ("PSR.V",
                                                        tp[call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              @{theory}),
                                                           apply
                                                             (lx(@{typ
                                                                 "(32 word \<times>
                                                                   32 word \<times>
                                                                   32 word \<times>
                                                                   32 word \<times> bool) \<Rightarrow>
                                                                  bool"}),
                                                              tp[var_w("v",32),var_w("v0",32),
                                                                 var_w("v1",32),var_w("v2",32),
                                                                 call
                                                                   ("PSR.V",HOLogic.boolT,
                                                                    call
                                                                      ("state.CPSR",@{typ PSR},
                                                                       var("s",qTy),@{theory}),
                                                                    @{theory})])],@{theory})],
                                                  @{theory})),var("s",qTy)))),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MultiplyAccumulateAccumulate",
   close
     (tp[var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v",64),var("s",qTy)],
                     let'
                       (tp[var_w("v0",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("m",4),@{theory}),var("s",qTy)),
                        tp[bop(Mul,mop(Cast w64,var_w("v",32)),mop(Cast w64,var_w("v0",32))),
                           var("s",qTy)]),
                     let'
                       (tp[var_w("v0",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("dhi",4),@{theory}),var("s",qTy)),
                        tp[bop(Add,var_w("v",64),mop(Cast w64,var_w("v0",32))),var("s",qTy)])),
                  let'
                    (tp[var_w("v0",32),var("s",qTy)],
                     apply
                       (call
                          ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("dlo",4),
                           @{theory}),var("s",qTy)),
                     tp[bop(Add,var_w("v",64),mop(Cast w64,var_w("v0",32))),var("s",qTy)])),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[ex(var_w("v",64),ln 31,ln 0,w32),var_w("dlo",4)],@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[ex(var_w("v",64),ln 63,ln 32,w32),var_w("dhi",4)],@{theory}),
                        var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MultiplySubtract",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               let'
                 (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     let'
                       (tp[var_w("v0",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("m",4),@{theory}),var("s",qTy)),
                        let'
                          (tp[var_w("v0",32),var("s",qTy)],
                           let'
                             (tp[var_w("v1",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("n",4),@{theory}),var("s",qTy)),
                              tp[bop(Mul,var_w("v0",32),var_w("v1",32)),var("s",qTy)]),
                           tp[bop(Sub,var_w("v",32),var_w("v0",32)),var("s",qTy)])),
                     tp[tp[var_w("v",32),var_w("d",4)],var("s",qTy)]),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        var("v",@{typ "32 word \<times> 4 word"}),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Signed16Multiply32Accumulate",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",16),var("s",qTy)],
            ite(var_b"n_high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
            let'
              (tp[var_w("v0",16),var("s",qTy)],
               ite(var_b"m_high",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
               let'
                 (tp[var_w("v1",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (var_i"v",
                     bop(Add,
                         bop(Mul,mop(Cast HOLogic.intT,var_w("v",16)),
                             mop(Cast HOLogic.intT,var_w("v0",16))),
                         mop(Cast HOLogic.intT,var_w("v1",32))),
                     let'
                       (var_w("result32",32),mop(Cast w32,var_i"v"),
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("write'R",@{typ "state \<Rightarrow> state"},
                                 tp[var_w("result32",32),var_w("d",4)],@{theory}),var("s",qTy)),
                           apply
                             (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                              ite(mop(Not,eq(var_i"v",mop(Cast HOLogic.intT,var_w("result32",32)))),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.Q",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Signed16Multiply32Result",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",16),var("s",qTy)],
            ite(var_b"n_high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
            let'
              (tp[var_w("v0",16),var("s",qTy)],
               ite(var_b"m_high",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[mop(Cast w32,
                               bop(Mul,mop(Cast HOLogic.intT,var_w("v",16)),
                                   mop(Cast HOLogic.intT,var_w("v0",16)))),var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Signed16x32Multiply32Accumulate",
   close
     (tp[var_b"m_high",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",16),var("s",qTy)],
            ite(var_b"m_high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
            let'
              (var_i"sh16",bop(Exp,li 2,ln 16),
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (tp[var_i"v",var("s",qTy)],
                     let'
                       (tp[var_i"v",var("s",qTy)],
                        let'
                          (tp[var_w("v1",32),var("s",qTy)],
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("a",4),@{theory}),var("s",qTy)),
                           tp[bop(Add,
                                  bop(Mul,mop(Cast HOLogic.intT,var_w("v0",32)),
                                      mop(Cast HOLogic.intT,var_w("v",16))),
                                  bop(Mul,mop(Cast HOLogic.intT,var_w("v1",32)),var_i"sh16")),
                              var("s",qTy)]),tp[bop(Div,var_i"v",var_i"sh16"),var("s",qTy)]),
                     let'
                       (var_w("result32",32),mop(Cast w32,var_i"v"),
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("write'R",@{typ "state \<Rightarrow> state"},
                                 tp[var_w("result32",32),var_w("d",4)],@{theory}),var("s",qTy)),
                           apply
                             (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                              ite(mop(Not,eq(var_i"v",mop(Cast HOLogic.intT,var_w("result32",32)))),
                                  rupd
                                    ("state.CPSR",
                                     tp[var("s",qTy),
                                        rupd
                                          ("PSR.Q",
                                           tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              lt],@{theory})],@{theory}),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Signed16x32Multiply32Result",
   close
     (tp[var_b"m_high",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",16),var("s",qTy)],
            ite(var_b"m_high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                     @{theory}),var("s",qTy)),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[mop(Cast w32,
                               bop(Div,
                                   bop(Mul,mop(Cast HOLogic.intT,var_w("v0",32)),
                                       mop(Cast HOLogic.intT,var_w("v",16))),bop(Exp,li 2,ln 16))),
                           var_w("d",4)],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Signed16Multiply64Accumulate",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",16),var("s",qTy)],
            ite(var_b"n_high",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
            let'
              (tp[var_w("v0",16),var("s",qTy)],
               ite(var_b"m_high",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
               let'
                 (tp[var_w("v1",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("dhi",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (tp[var_i"v",var("s",qTy)],
                     let'
                       (tp[var_i"v1",var("s",qTy)],
                        let'
                          (tp[var_w("v",64),var("s",qTy)],
                           let'
                             (tp[var_w("v2",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("dlo",4),@{theory}),var("s",qTy)),
                              tp[cc[var_w("v1",32),var_w("v2",32)],var("s",qTy)]),
                           tp[mop(Cast HOLogic.intT,var_w("v",64)),var("s",qTy)]),
                        tp[bop(Add,
                               bop(Mul,mop(Cast HOLogic.intT,var_w("v",16)),
                                   mop(Cast HOLogic.intT,var_w("v0",16))),var_i"v1"),var("s",qTy)]),
                     let'
                       (var_w("result64",64),mop(Cast w64,var_i"v"),
                        apply
                          (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                           apply
                             (call
                                ("write'R",@{typ "state \<Rightarrow> state"},
                                 tp[ex(var_w("result64",64),ln 31,ln 0,w32),var_w("dlo",4)],
                                 @{theory}),
                              apply
                                (call
                                   ("write'R",@{typ "state \<Rightarrow> state"},
                                    tp[ex(var_w("result64",64),ln 63,ln 32,w32),var_w("dhi",4)],
                                    @{theory}),var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedMultiplyDual",
   close
     (tp[var_b"sub",var_b"m_swap",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(var_b"m_swap",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("state",qTy)),
                   apply
                     (call
                        ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                         tp[var_w("v",32),ln 16],@{theory}),var("s",qTy))),
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                     @{theory}),var("s",qTy)),
               let'
                 (var_i"v0",
                  bop(Mul,mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16)),
                      mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16))),
                  let'
                    (tp[var_w("v1",32),var("s",qTy)],
                     apply
                       (call
                          ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                           @{theory}),var("s",qTy)),
                     let'
                       (var_i"v1",
                        bop(Mul,mop(Cast HOLogic.intT,ex(var_w("v1",32),ln 31,ln 16,w16)),
                            mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16))),
                        let'
                          (tp[var_w("v2",32),var("s",qTy)],
                           ite(eq(var_w("a",4),lw(15,4)),tp[lw(0,32),var("s",qTy)],
                               apply
                                 (call
                                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     var_w("a",4),@{theory}),var("s",qTy))),
                           let'
                             (var_i"result",
                              ite(var_b"sub",
                                  bop(Add,bop(Sub,var_i"v0",var_i"v1"),
                                      mop(Cast HOLogic.intT,var_w("v2",32))),
                                  bop(Add,bop(Add,var_i"v0",var_i"v1"),
                                      mop(Cast HOLogic.intT,var_w("v2",32)))),
                              let'
                                (var_w("result32",32),mop(Cast w32,var_i"result"),
                                 let'
                                   (var("s",qTy),
                                    apply
                                      (call
                                         ("write'R",@{typ "state \<Rightarrow> state"},
                                          tp[var_w("result32",32),var_w("d",4)],@{theory}),
                                       var("s",qTy)),
                                    apply
                                      (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                       ite(mop(Not,
                                               eq(var_i"result",
                                                  mop(Cast HOLogic.intT,var_w("result32",32)))),
                                           rupd
                                             ("state.CPSR",
                                              tp[var("s",qTy),
                                                 rupd
                                                   ("PSR.Q",
                                                    tp[call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),lt],@{theory})],@{theory}),
                                           var("s",qTy)))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedMultiplyLongDual",
   close
     (tp[var_b"sub",var_b"m_swap",var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               ite(var_b"m_swap",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                            @{theory}),var("s",qTy)),
                      apply
                        (call
                           ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[var_w("v",32),ln 16],@{theory}),var("s",qTy))),
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                         @{theory}),var("s",qTy))),
               let'
                 (var_i"product1",
                  bop(Mul,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                      mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16))),
                  let'
                    (var_i"product2",
                     bop(Mul,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                         mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16))),
                     let'
                       (tp[var_w("v",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("dhi",4),@{theory}),var("s",qTy)),
                        let'
                          (tp[var_w("v",64),var("s",qTy)],
                           let'
                             (tp[var_w("v0",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("dlo",4),@{theory}),var("s",qTy)),
                              tp[cc[var_w("v",32),var_w("v0",32)],var("s",qTy)]),
                           let'
                             (var_w("result64",64),
                              mop(Cast w64,
                                  ite(var_b"sub",
                                      bop(Add,bop(Sub,var_i"product1",var_i"product2"),
                                          mop(Cast HOLogic.intT,var_w("v",64))),
                                      bop(Add,bop(Add,var_i"product1",var_i"product2"),
                                          mop(Cast HOLogic.intT,var_w("v",64))))),
                              apply
                                (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                 apply
                                   (call
                                      ("write'R",@{typ "state \<Rightarrow> state"},
                                       tp[ex(var_w("result64",64),ln 31,ln 0,w32),var_w("dlo",4)],
                                       @{theory}),
                                    apply
                                      (call
                                         ("write'R",@{typ "state \<Rightarrow> state"},
                                          tp[ex(var_w("result64",64),ln 63,ln 32,w32),var_w("dhi",4)],
                                          @{theory}),var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedMostSignificantMultiply",
   close
     (tp[var_b"round",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("a",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_i"v",var("s",qTy)],
                  let'
                    (tp[var_i"v0",var("s",qTy)],
                     let'
                       (tp[var_w("v1",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("m",4),@{theory}),var("s",qTy)),
                        tp[bop(Mul,mop(Cast HOLogic.intT,var_w("v0",32)),
                               mop(Cast HOLogic.intT,var_w("v1",32))),var("s",qTy)]),
                     tp[bop(Add,mop(Cast HOLogic.intT,bop(Lsl,mop(Cast w64,var_w("v",32)),ln 32)),
                            var_i"v0"),var("s",qTy)]),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[ex(mop(Cast w64,
                                     ite(var_b"round",bop(Add,var_i"v",li 2147483648),var_i"v")),
                                 ln 63,ln 32,w32),var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedMostSignificantMultiplySubtract",
   close
     (tp[var_b"round",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_i"v",var("s",qTy)],
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                        @{theory}),var("s",qTy)),
                  let'
                    (tp[var_i"v0",var("s",qTy)],
                     let'
                       (tp[var_w("v1",32),var("s",qTy)],
                        apply
                          (call
                             ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                              var_w("m",4),@{theory}),var("s",qTy)),
                        tp[bop(Mul,mop(Cast HOLogic.intT,var_w("v0",32)),
                               mop(Cast HOLogic.intT,var_w("v1",32))),var("s",qTy)]),
                     tp[bop(Sub,mop(Cast HOLogic.intT,bop(Lsl,mop(Cast w64,var_w("v",32)),ln 32)),
                            var_i"v0"),var("s",qTy)])),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[ex(mop(Cast w64,
                                  ite(var_b"round",bop(Add,var_i"v",li 2147483648),var_i"v")),ln 63,
                              ln 32,w32),var_w("d",4)],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignedParallelAddSub16",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               tp[itb([(eq(var_w("op",2),lw(0,2)),
                        tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16))),
                           bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16)))]),
                       (eq(var_w("op",2),lw(1,2)),
                        tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16))),
                           bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16)))]),
                       (eq(var_w("op",2),lw(2,2)),
                        tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16))),
                           bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16)))]),
                       (eq(var_w("op",2),lw(3,2)),
                        tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16))),
                           bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                               mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16)))])],
                      lx(@{typ "int \<times> int"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               let'
                 (var("s",qTy),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w16,var_i"res2"),mop(Cast w16,var_i"res1")],var_w("d",4)],
                        @{theory}),var("s",qTy)),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.GE",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                 bfi(ln 1,ln 0,ite(bop(Ge,var_i"res1",li 0),lw(3,2),lw(0,2)),
                                     call
                                       ("PSR.GE",w4,
                                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                        @{theory}))],@{theory})],@{theory}),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.GE",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                    bfi(ln 3,ln 2,ite(bop(Ge,var_i"res2",li 0),lw(3,2),lw(0,2)),
                                        call
                                          ("PSR.GE",w4,
                                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           @{theory}))],@{theory})],@{theory})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedSaturatingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               let'
                 (tp[var_w("v",16),var("s",qTy)],
                  apply
                    (call
                       ("SignedSat",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                        tp[var_i"res2",ln 16],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     let'
                       (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                        let'
                          (tp[var_w("v",32),var("s",qTy)],
                           let'
                             (tp[var_w("v0",16),var("s",qTy)],
                              apply
                                (call
                                   ("SignedSat",
                                    @{typ "state \<Rightarrow> (16 word \<times> state)"},
                                    tp[var_i"res1",ln 16],@{theory}),var("s",qTy)),
                              tp[cc[var_w("v",16),var_w("v0",16)],var("s",qTy)]),
                           tp[tp[var_w("v",32),var_w("d",4)],var("s",qTy)]),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              var("v",@{typ "32 word \<times> 4 word"}),@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedHalvingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w16,bop(Div,var_i"res2",li 2)),
                              mop(Cast w16,bop(Div,var_i"res1",li 2))],var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignedParallelAddSub8",
   close
     (tp[var_b"sub",var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               tp[ite(var_b"sub",
                      tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 7,ln 0,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 7,ln 0,w8))),
                         bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 8,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 8,w8))),
                         bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 23,ln 16,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 23,ln 16,w8))),
                         bop(Sub,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 24,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 24,w8)))],
                      tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 7,ln 0,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 7,ln 0,w8))),
                         bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 8,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 15,ln 8,w8))),
                         bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 23,ln 16,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 23,ln 16,w8))),
                         bop(Add,mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 24,w8)),
                             mop(Cast HOLogic.intT,ex(var_w("v0",32),ln 31,ln 24,w8)))]),
                  var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               let'
                 (var("s",qTy),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w8,var_i"res4"),mop(Cast w8,var_i"res3"),
                              mop(Cast w8,var_i"res2"),mop(Cast w8,var_i"res1")],var_w("d",4)],
                        @{theory}),var("s",qTy)),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.GE",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                 bfi(ln 0,ln 0,mop(Cast w1,bop(Ge,var_i"res1",li 0)),
                                     call
                                       ("PSR.GE",w4,
                                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                        @{theory}))],@{theory})],@{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.GE",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                    bfi(ln 1,ln 1,mop(Cast w1,bop(Ge,var_i"res2",li 0)),
                                        call
                                          ("PSR.GE",w4,
                                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           @{theory}))],@{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.GE",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                       bfi(ln 2,ln 2,mop(Cast w1,bop(Ge,var_i"res3",li 0)),
                                           call
                                             ("PSR.GE",w4,
                                              call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              @{theory}))],@{theory})],@{theory}),
                           apply
                             (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.GE",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          bfi(ln 3,ln 3,mop(Cast w1,bop(Ge,var_i"res4",li 0)),
                                              call
                                                ("PSR.GE",w4,
                                                 call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 @{theory}))],@{theory})],@{theory})))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedSaturatingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               let'
                 (tp[var_w("v",8),var("s",qTy)],
                  apply
                    (call
                       ("SignedSat",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                        tp[var_i"res4",ln 8],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     let'
                       (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                        let'
                          (tp[var_w("v",32),var("s",qTy)],
                           let'
                             (tp[var_w("v0",8),var("s",qTy)],
                              apply
                                (call
                                   ("SignedSat",
                                    @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                    tp[var_i"res3",ln 8],@{theory}),var("s",qTy)),
                              let'
                                (tp[var_w("v0",24),var("s",qTy)],
                                 let'
                                   (tp[var_w("v1",8),var("s",qTy)],
                                    apply
                                      (call
                                         ("SignedSat",
                                          @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                          tp[var_i"res2",ln 8],@{theory}),var("s",qTy)),
                                    let'
                                      (tp[var_w("v1",16),var("s",qTy)],
                                       let'
                                         (tp[var_w("v2",8),var("s",qTy)],
                                          apply
                                            (call
                                               ("SignedSat",
                                                @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                                tp[var_i"res1",ln 8],@{theory}),var("s",qTy)),
                                          tp[cc[var_w("v1",8),var_w("v2",8)],var("s",qTy)]),
                                       tp[cc[var_w("v0",8),var_w("v1",16)],var("s",qTy)])),
                                 tp[cc[var_w("v",8),var_w("v0",24)],var("s",qTy)])),
                           tp[tp[var_w("v",32),var_w("d",4)],var("s",qTy)]),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              var("v",@{typ "32 word \<times> 4 word"}),@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SignedHalvingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("SignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w8,bop(Div,var_i"res4",li 2)),
                              mop(Cast w8,bop(Div,var_i"res3",li 2)),
                              mop(Cast w8,bop(Div,var_i"res2",li 2)),
                              mop(Cast w8,bop(Div,var_i"res1",li 2))],var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UnsignedParallelAddSub16",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               tp[itb([(eq(var_w("op",2),lw(0,2)),
                        tp[bop(Add,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16),@{theory}),
                               call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16),@{theory})),
                           bop(Add,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16),@{theory}),
                               call
                                 ("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16),@{theory}))]),
                       (eq(var_w("op",2),lw(1,2)),
                        tp[bop(Sub,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16),@{theory}),
                               call
                                 ("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16),@{theory})),
                           bop(Add,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16),@{theory}),
                               call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16),@{theory}))]),
                       (eq(var_w("op",2),lw(2,2)),
                        tp[bop(Add,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16),@{theory}),
                               call
                                 ("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16),@{theory})),
                           bop(Sub,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16),@{theory}),
                               call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16),@{theory}))]),
                       (eq(var_w("op",2),lw(3,2)),
                        tp[bop(Sub,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16),@{theory}),
                               call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 0,w16),@{theory})),
                           bop(Sub,
                               call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16),@{theory}),
                               call
                                 ("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 16,w16),@{theory}))])],
                      lx(@{typ "int \<times> int"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               let'
                 (var("s",qTy),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w16,var_i"res2"),mop(Cast w16,var_i"res1")],var_w("d",4)],
                        @{theory}),var("s",qTy)),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.CPSR",
                        tp[var("s",qTy),
                           rupd
                             ("PSR.GE",
                              tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                 bfi(ln 1,ln 0,
                                     ite(bop(Ge,var_i"res1",
                                             ite(bop(In,var_w("op",2),sl[lw(1,2),lw(3,2)]),li 0,
                                                 li 65536)),lw(3,2),lw(0,2)),
                                     call
                                       ("PSR.GE",w4,
                                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                        @{theory}))],@{theory})],@{theory}),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.GE",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                    bfi(ln 3,ln 2,
                                        ite(bop(Ge,var_i"res2",
                                                ite(bop(In,var_w("op",2),sl[lw(2,2),lw(3,2)]),li 0,
                                                    li 65536)),lw(3,2),lw(0,2)),
                                        call
                                          ("PSR.GE",w4,
                                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           @{theory}))],@{theory})],@{theory})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedSaturatingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               let'
                 (tp[var_w("v",16),var("s",qTy)],
                  apply
                    (call
                       ("UnsignedSat",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                        tp[var_i"res2",ln 16],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     let'
                       (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                        let'
                          (tp[var_w("v",32),var("s",qTy)],
                           let'
                             (tp[var_w("v0",16),var("s",qTy)],
                              apply
                                (call
                                   ("UnsignedSat",
                                    @{typ "state \<Rightarrow> (16 word \<times> state)"},
                                    tp[var_i"res1",ln 16],@{theory}),var("s",qTy)),
                              tp[cc[var_w("v",16),var_w("v0",16)],var("s",qTy)]),
                           tp[tp[var_w("v",32),var_w("d",4)],var("s",qTy)]),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              var("v",@{typ "32 word \<times> 4 word"}),@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedHalvingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub16",
                  @{typ "state \<Rightarrow> ((int \<times> int) \<times> state)"},
                  tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2"],var("v",@{typ "int \<times> int"}),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w16,bop(Div,var_i"res2",li 2)),
                              mop(Cast w16,bop(Div,var_i"res1",li 2))],var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UnsignedParallelAddSub8",
   close
     (tp[var_b"sub",var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               tp[ite(var_b"sub",
                      tp[bop(Sub,call("UInt",HOLogic.intT,ex(var_w("v",32),ln 7,ln 0,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 7,ln 0,w8),@{theory})),
                         bop(Sub,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 8,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 8,w8),@{theory})),
                         bop(Sub,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 23,ln 16,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 23,ln 16,w8),@{theory})),
                         bop(Sub,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 24,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 24,w8),@{theory}))],
                      tp[bop(Add,call("UInt",HOLogic.intT,ex(var_w("v",32),ln 7,ln 0,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 7,ln 0,w8),@{theory})),
                         bop(Add,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 15,ln 8,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 15,ln 8,w8),@{theory})),
                         bop(Add,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 23,ln 16,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 23,ln 16,w8),@{theory})),
                         bop(Add,
                             call("UInt",HOLogic.intT,ex(var_w("v",32),ln 31,ln 24,w8),@{theory}),
                             call("UInt",HOLogic.intT,ex(var_w("v0",32),ln 31,ln 24,w8),@{theory}))]),
                  var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               let'
                 (var("s",qTy),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w8,var_i"res4"),mop(Cast w8,var_i"res3"),
                              mop(Cast w8,var_i"res2"),mop(Cast w8,var_i"res1")],var_w("d",4)],
                        @{theory}),var("s",qTy)),
                  let'
                    (var_i"ge_lim",ite(var_b"sub",li 0,li 256),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CPSR",
                           tp[var("s",qTy),
                              rupd
                                ("PSR.GE",
                                 tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                    bfi(ln 0,ln 0,mop(Cast w1,bop(Ge,var_i"res1",var_i"ge_lim")),
                                        call
                                          ("PSR.GE",w4,
                                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                           @{theory}))],@{theory})],@{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.CPSR",
                              tp[var("s",qTy),
                                 rupd
                                   ("PSR.GE",
                                    tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                       bfi(ln 1,ln 1,mop(Cast w1,bop(Ge,var_i"res2",var_i"ge_lim")),
                                           call
                                             ("PSR.GE",w4,
                                              call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                              @{theory}))],@{theory})],@{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.CPSR",
                                 tp[var("s",qTy),
                                    rupd
                                      ("PSR.GE",
                                       tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          bfi(ln 2,ln 2,
                                              mop(Cast w1,bop(Ge,var_i"res3",var_i"ge_lim")),
                                              call
                                                ("PSR.GE",w4,
                                                 call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                                 @{theory}))],@{theory})],@{theory}),
                              apply
                                (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                 rupd
                                   ("state.CPSR",
                                    tp[var("s",qTy),
                                       rupd
                                         ("PSR.GE",
                                          tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                             bfi(ln 3,ln 3,
                                                 mop(Cast w1,bop(Ge,var_i"res4",var_i"ge_lim")),
                                                 call
                                                   ("PSR.GE",w4,
                                                    call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       @{theory}),@{theory}))],@{theory})],@{theory}))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedSaturatingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               let'
                 (tp[var_w("v",8),var("s",qTy)],
                  apply
                    (call
                       ("UnsignedSat",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                        tp[var_i"res4",ln 8],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     let'
                       (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                        let'
                          (tp[var_w("v",32),var("s",qTy)],
                           let'
                             (tp[var_w("v0",8),var("s",qTy)],
                              apply
                                (call
                                   ("UnsignedSat",
                                    @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                    tp[var_i"res3",ln 8],@{theory}),var("s",qTy)),
                              let'
                                (tp[var_w("v0",24),var("s",qTy)],
                                 let'
                                   (tp[var_w("v1",8),var("s",qTy)],
                                    apply
                                      (call
                                         ("UnsignedSat",
                                          @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                          tp[var_i"res2",ln 8],@{theory}),var("s",qTy)),
                                    let'
                                      (tp[var_w("v1",16),var("s",qTy)],
                                       let'
                                         (tp[var_w("v2",8),var("s",qTy)],
                                          apply
                                            (call
                                               ("UnsignedSat",
                                                @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                                tp[var_i"res1",ln 8],@{theory}),var("s",qTy)),
                                          tp[cc[var_w("v1",8),var_w("v2",8)],var("s",qTy)]),
                                       tp[cc[var_w("v0",8),var_w("v1",16)],var("s",qTy)])),
                                 tp[cc[var_w("v",8),var_w("v0",24)],var("s",qTy)])),
                           tp[tp[var_w("v",32),var_w("d",4)],var("s",qTy)]),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              var("v",@{typ "32 word \<times> 4 word"}),@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedHalvingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "int \<times> int \<times> int \<times> int"}),var("s",qTy)],
            apply
              (call
                 ("UnsignedParallelAddSub8",
                  @{typ
                  "state \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> state)"},
                  tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),var("state",qTy)),
            let'
              (tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
               var("v",@{typ "int \<times> int \<times> int \<times> int"}),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[mop(Cast w8,bop(Div,var_i"res4",li 2)),
                              mop(Cast w8,bop(Div,var_i"res3",li 2)),
                              mop(Cast w8,bop(Div,var_i"res2",li 2)),
                              mop(Cast w8,bop(Div,var_i"res1",li 2))],var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnsignedSumAbsoluteDifferences",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("a",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("a",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v1",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                        @{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[mop(Cast w32,
                                  bop(Add,
                                      bop(Add,
                                          bop(Add,
                                              bop(Add,
                                                  call("UInt",HOLogic.intT,var_w("v",32),@{theory}),
                                                  mop(Abs,
                                                      bop(Sub,
                                                          call
                                                            ("UInt",HOLogic.intT,
                                                             ex(var_w("v0",32),ln 7,ln 0,w8),
                                                             @{theory}),
                                                          call
                                                            ("UInt",HOLogic.intT,
                                                             ex(var_w("v1",32),ln 7,ln 0,w8),
                                                             @{theory})))),
                                              mop(Abs,
                                                  bop(Sub,
                                                      call
                                                        ("UInt",HOLogic.intT,
                                                         ex(var_w("v0",32),ln 15,ln 8,w8),@{theory}),
                                                      call
                                                        ("UInt",HOLogic.intT,
                                                         ex(var_w("v1",32),ln 15,ln 8,w8),@{theory})))),
                                          mop(Abs,
                                              bop(Sub,
                                                  call
                                                    ("UInt",HOLogic.intT,
                                                     ex(var_w("v0",32),ln 23,ln 16,w8),@{theory}),
                                                  call
                                                    ("UInt",HOLogic.intT,
                                                     ex(var_w("v1",32),ln 23,ln 16,w8),@{theory})))),
                                      mop(Abs,
                                          bop(Sub,
                                              call
                                                ("UInt",HOLogic.intT,
                                                 ex(var_w("v0",32),ln 31,ln 24,w8),@{theory}),
                                              call
                                                ("UInt",HOLogic.intT,
                                                 ex(var_w("v1",32),ln 31,ln 24,w8),@{theory}))))),
                              var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("GenerateIntegerZeroDivide",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Divide",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            ite(eq(var_w("v",32),lw(0,32)),
                ite(apply
                      (call
                         ("IntegerZeroDivideTrappingEnabled",@{typ "state \<Rightarrow> bool"},lu,
                          @{theory}),var("s",qTy)),
                    apply
                      (call
                         ("GenerateIntegerZeroDivide",@{typ "state \<Rightarrow> state"},lu,
                          @{theory}),var("s",qTy)),
                    apply
                      (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                       apply
                         (call
                            ("write'R",@{typ "state \<Rightarrow> state"},tp[lw(0,32),var_w("d",4)],
                             @{theory}),var("s",qTy)))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   ite(var_b"unsigned",
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                var_w("n",4),@{theory}),var("s",qTy)),
                          let'
                            (tp[var_w("v0",32),var("s",qTy)],
                             apply
                               (call
                                  ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                   var_w("m",4),@{theory}),var("s",qTy)),
                             tp[bop(Div,var_w("v",32),var_w("v0",32)),var("s",qTy)])),
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                var_w("n",4),@{theory}),var("s",qTy)),
                          let'
                            (tp[var_w("v0",32),var("s",qTy)],
                             apply
                               (call
                                  ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                   var_w("m",4),@{theory}),var("s",qTy)),
                             tp[bop(Quot,var_w("v",32),var_w("v0",32)),var("s",qTy)]))),
                   apply
                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      apply
                        (call
                           ("write'R",@{typ "state \<Rightarrow> state"},
                            tp[var_w("v",32),var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'PackHalfword",
   close
     (tp[var("shift_t",@{typ SRType}),var_n"shift_n",var_b"tbform",var_w("d",4),var_w("n",4),
         var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               apply
                 (call
                    ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                     tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                        call
                          ("PSR.C",HOLogic.boolT,
                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory})],
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v0",16),var("s",qTy)],
                  ite(var_b"tbform",tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)],
                      let'
                        (tp[var_w("v",32),var("s",qTy)],
                         apply
                           (call
                              ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               var_w("n",4),@{theory}),var("s",qTy)),
                         tp[ex(var_w("v",32),ln 15,ln 0,w16),var("s",qTy)])),
                  let'
                    (tp[var_w("v1",16),var("s",qTy)],
                     ite(var_b"tbform",
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            apply
                              (call
                                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  var_w("n",4),@{theory}),var("s",qTy)),
                            tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                         tp[ex(var_w("v",32),ln 31,ln 16,w16),var("s",qTy)]),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              tp[cc[var_w("v1",16),var_w("v0",16)],var_w("d",4)],@{theory}),
                           var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Saturate",
   close
     (tp[var("shift_t",@{typ SRType}),var_n"shift_n",var_n"saturate_to",var_b"unsigned",
         var_w("d",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               apply
                 (call
                    ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                     tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                        call
                          ("PSR.C",HOLogic.boolT,
                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory})],
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var("v",@{typ "32 word \<times> bool"}),var("s",qTy)],
                  ite(var_b"unsigned",
                      apply
                        (call
                           ("UnsignedSatQ",
                            @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                            tp[mop(Cast HOLogic.intT,var_w("v",32)),var_n"saturate_to"],@{theory}),
                         var("s",qTy)),
                      apply
                        (call
                           ("SignedSatQ",
                            @{typ "state \<Rightarrow> ((32 word \<times> bool) \<times> state)"},
                            tp[mop(Cast HOLogic.intT,var_w("v",32)),var_n"saturate_to"],@{theory}),
                         var("s",qTy))),
                  let'
                    (tp[var_w("result",32),var_b"sat"],var("v",@{typ "32 word \<times> bool"}),
                     let'
                       (var("s",qTy),
                        apply
                          (call
                             ("write'R",@{typ "state \<Rightarrow> state"},
                              tp[ite(var_b"unsigned",var_w("result",32),
                                     call
                                       ("SignExtendFrom",w32,
                                        tp[var_w("result",32),var_n"saturate_to"],@{theory})),
                                 var_w("d",4)],@{theory}),var("s",qTy)),
                        apply
                          (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                           ite(var_b"sat",
                               rupd
                                 ("state.CPSR",
                                  tp[var("s",qTy),
                                     rupd
                                       ("PSR.Q",
                                        tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                        @{theory})],@{theory}),var("s",qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Saturate16",
   close
     (tp[var_n"saturate_to",var_b"unsigned",var_w("d",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var("v",@{typ "(16 word \<times> bool) \<times> 16 word \<times> bool"}),
                  var("s",qTy)],
               ite(var_b"unsigned",
                   let'
                     (tp[var("v0",@{typ "16 word \<times> bool"}),var("s",qTy)],
                      apply
                        (call
                           ("UnsignedSatQ",
                            @{typ "state \<Rightarrow> ((16 word \<times> bool) \<times> state)"},
                            tp[mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               var_n"saturate_to"],@{theory}),var("s",qTy)),
                      let'
                        (tp[var("v1",@{typ "16 word \<times> bool"}),var("s",qTy)],
                         apply
                           (call
                              ("UnsignedSatQ",
                               @{typ "state \<Rightarrow> ((16 word \<times> bool) \<times> state)"},
                               tp[mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                                  var_n"saturate_to"],@{theory}),var("s",qTy)),
                         tp[tp[var("v0",@{typ "16 word \<times> bool"}),
                               var("v1",@{typ "16 word \<times> bool"})],var("s",qTy)])),
                   let'
                     (tp[var("v0",@{typ "16 word \<times> bool"}),var("s",qTy)],
                      apply
                        (call
                           ("SignedSatQ",
                            @{typ "state \<Rightarrow> ((16 word \<times> bool) \<times> state)"},
                            tp[mop(Cast HOLogic.intT,ex(var_w("v",32),ln 15,ln 0,w16)),
                               var_n"saturate_to"],@{theory}),var("s",qTy)),
                      let'
                        (tp[var("v1",@{typ "16 word \<times> bool"}),var("s",qTy)],
                         apply
                           (call
                              ("SignedSatQ",
                               @{typ "state \<Rightarrow> ((16 word \<times> bool) \<times> state)"},
                               tp[mop(Cast HOLogic.intT,ex(var_w("v",32),ln 31,ln 16,w16)),
                                  var_n"saturate_to"],@{theory}),var("s",qTy)),
                         tp[tp[var("v0",@{typ "16 word \<times> bool"}),
                               var("v1",@{typ "16 word \<times> bool"})],var("s",qTy)]))),
               let'
                 (tp[tp[var_w("result1",16),var_b"sat1"],var_w("result2",16),var_b"sat2"],
                  var("v",@{typ "(16 word \<times> bool) \<times> 16 word \<times> bool"}),
                  let'
                    (var("s",qTy),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[ite(var_b"unsigned",cc[var_w("result2",16),var_w("result1",16)],
                                  cc[call
                                       ("SignExtendFrom",w16,
                                        tp[var_w("result2",16),var_n"saturate_to"],@{theory}),
                                     call
                                       ("SignExtendFrom",w16,
                                        tp[var_w("result1",16),var_n"saturate_to"],@{theory})]),
                              var_w("d",4)],@{theory}),var("s",qTy)),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        ite(bop(Or,var_b"sat1",var_b"sat2"),
                            rupd
                              ("state.CPSR",
                               tp[var("s",qTy),
                                  rupd
                                    ("PSR.Q",
                                     tp[call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),lt],
                                     @{theory})],@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ExtendByte",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("n",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                        tp[var_w("v0",32),var_n"rotation"],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[bop(Add,var_w("v",32),
                                  call
                                    ("Extend",w32,
                                     tp[var_b"unsigned",ex(var_w("v0",32),ln 7,ln 0,w8)],@{theory})),
                              var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ExtendByte16",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("n",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                        tp[var_w("v0",32),var_n"rotation"],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[cc[bop(Add,ex(var_w("v",32),ln 31,ln 16,w16),
                                     call
                                       ("Extend",w16,
                                        tp[var_b"unsigned",ex(var_w("v0",32),ln 23,ln 16,w8)],
                                        @{theory})),
                                 bop(Add,ex(var_w("v",32),ln 15,ln 0,w16),
                                     call
                                       ("Extend",w16,
                                        tp[var_b"unsigned",ex(var_w("v0",32),ln 7,ln 0,w8)],
                                        @{theory}))],var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ExtendHalfword",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("n",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               let'
                 (tp[var_w("v0",32),var("s",qTy)],
                  apply
                    (call
                       ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                        tp[var_w("v0",32),var_n"rotation"],@{theory}),var("s",qTy)),
                  apply
                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                     apply
                       (call
                          ("write'R",@{typ "state \<Rightarrow> state"},
                           tp[bop(Add,var_w("v",32),
                                  call
                                    ("Extend",w32,
                                     tp[var_b"unsigned",ex(var_w("v0",32),ln 15,ln 0,w16)],@{theory})),
                              var_w("d",4)],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SelectBytes",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),
                     @{theory}),var("s",qTy)),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[cc[ite(bop(Bit,
                                      call
                                        ("PSR.GE",w4,
                                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                         @{theory}),ln 3),ex(var_w("v",32),ln 31,ln 24,w8),
                                  ex(var_w("v0",32),ln 31,ln 24,w8)),
                              ite(bop(Bit,
                                      call
                                        ("PSR.GE",w4,
                                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                         @{theory}),ln 2),ex(var_w("v",32),ln 23,ln 16,w8),
                                  ex(var_w("v0",32),ln 23,ln 16,w8)),
                              ite(bop(Bit,
                                      call
                                        ("PSR.GE",w4,
                                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                         @{theory}),ln 1),ex(var_w("v",32),ln 15,ln 8,w8),
                                  ex(var_w("v0",32),ln 15,ln 8,w8)),
                              ite(bop(Bit,
                                      call
                                        ("PSR.GE",w4,
                                         call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                         @{theory}),ln 0),ex(var_w("v",32),ln 7,ln 0,w8),
                                  ex(var_w("v0",32),ln 7,ln 0,w8))],var_w("d",4)],@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ByteReverse",
   close
     (tp[var_w("d",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[cc[ex(var_w("v",32),ln 7,ln 0,w8),ex(var_w("v",32),ln 15,ln 8,w8),
                           ex(var_w("v",32),ln 23,ln 16,w8),ex(var_w("v",32),ln 31,ln 24,w8)],
                        var_w("d",4)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ByteReversePackedHalfword",
   close
     (tp[var_w("d",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[cc[ex(var_w("v",32),ln 23,ln 16,w8),ex(var_w("v",32),ln 31,ln 24,w8),
                           ex(var_w("v",32),ln 7,ln 0,w8),ex(var_w("v",32),ln 15,ln 8,w8)],
                        var_w("d",4)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ByteReverseSignedHalfword",
   close
     (tp[var_w("d",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[cc[mop(SE (Word_Lib.mk_wordT 24),ex(var_w("v",32),ln 7,ln 0,w8)),
                           ex(var_w("v",32),ln 15,ln 8,w8)],var_w("d",4)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ReverseBits",
   close
     (tp[var_w("d",4),var_w("m",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               apply
                 (call
                    ("write'R",@{typ "state \<Rightarrow> state"},
                     tp[mop(Rev,var_w("v",32)),var_w("d",4)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BitFieldExtract",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_n"lsbit",var_n"widthminus1"],
      close
        (var("state",qTy),
         let'
           (var_n"msbit",bop(Add,var_n"lsbit",var_n"widthminus1"),
            let'
              (tp[var_w("v",32),var("s",qTy)],
               ite(var_b"unsigned",
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                            @{theory}),var("state",qTy)),
                      tp[ex(var_w("v",32),var_n"msbit",var_n"lsbit",w32),var("s",qTy)]),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                            @{theory}),var("state",qTy)),
                      tp[call
                           ("SignExtendFrom",w32,
                            tp[ex(var_w("v",32),var_n"msbit",var_n"lsbit",w32),var_n"widthminus1"],
                            @{theory}),var("s",qTy)])),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},tp[var_w("v",32),var_w("d",4)],
                        @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BitFieldClearOrInsert",
   close
     (tp[var_w("d",4),var_w("n",4),var_n"lsbit",var_n"msbit"],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            ite(eq(var_w("n",4),lw(15,4)),tp[lw(0,32),var("state",qTy)],
                apply
                  (call
                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                      @{theory}),var("state",qTy))),
            let'
              (tp[var_w("v0",32),var("s",qTy)],
               apply
                 (call
                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("d",4),
                     @{theory}),var("s",qTy)),
               apply
                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                  apply
                    (call
                       ("write'R",@{typ "state \<Rightarrow> state"},
                        tp[mop(Cast w32,
                               bfi(var_n"msbit",var_n"lsbit",
                                   ex(mop(Cast(@{typ "bool list"}),var_w("v",32)),
                                      bop(Sub,var_n"msbit",var_n"lsbit"),ln 0,@{typ "bool list"}),
                                   mop(Cast(@{typ "bool list"}),var_w("v0",32)))),var_w("d",4)],
                        @{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadWord",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (tp[var_w("v",32),var("s",qTy)],
                               apply
                                 (call
                                    ("MemU",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                               let'
                                 (var("s",qTy),
                                  ite(var_b"wback",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)),
                                  ite(eq(var_w("t",4),lw(15,4)),
                                      ite(call
                                            ("Aligned",HOLogic.boolT,tp[var_w("address",32),ln 4],
                                             @{theory}),
                                          apply
                                            (call
                                               ("LoadWritePC",@{typ "state \<Rightarrow> state"},
                                                var_w("v",32),@{theory}),var("s",qTy)),
                                          mop(Snd,
                                              apply
                                                (call
                                                   ("raise'exception",
                                                    @{typ
                                                    "state \<Rightarrow> (unit \<times> state)"},
                                                    call
                                                      ("exception.UNPREDICTABLE",@{typ exception},
                                                       ls"Load",@{theory}),@{theory}),var("s",qTy)))),
                                      apply
                                        (call
                                           ("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                         let'
                                           (tp[var("v",@{typ "32 word \<times> 4 word"}),
                                               var("s",qTy)],
                                            let'
                                              (tp[var_w("v",32),var("s",qTy)],
                                               itb([(bop(Or,
                                                         apply
                                                           (call
                                                              ("UnalignedSupport",
                                                               @{typ "state \<Rightarrow> bool"},lu,
                                                               @{theory}),var("s",qTy)),
                                                         call
                                                           ("Aligned",HOLogic.boolT,
                                                            tp[var_w("address",32),ln 4],@{theory})),
                                                     tp[var_w("v",32),var("s",qTy)]),
                                                    (eq(call
                                                          ("state.Encoding",@{typ Encoding},
                                                           var("s",qTy),@{theory}),
                                                        lc("Encoding_ARM","Encoding",@{theory})),
                                                     apply
                                                       (call
                                                          ("ROR",
                                                           @{typ
                                                           "state \<Rightarrow>
                                                            (32 word \<times> state)"},
                                                           tp[var_w("v",32),
                                                              bop(Mul,ln 8,
                                                                  mop(Cast HOLogic.natT,
                                                                      ex(var_w("address",32),ln 1,
                                                                         ln 0,(Word_Lib.mk_wordT 2))))],
                                                           @{theory}),var("s",qTy)))],
                                                   tp[lx w32,var("s",qTy)]),
                                               tp[tp[var_w("v",32),var_w("t",4)],var("s",qTy)]),
                                            apply
                                              (call
                                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                                  var("v",@{typ "32 word \<times> 4 word"}),
                                                  @{theory}),var("s",qTy))))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadLiteral",
   close
     (tp[var_b"add",var_w("t",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},lw(15,4),
                  @{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   let'
                     (var_w("v",32),call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                      let'
                        (var_w("address",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("imm32",32)),
                             bop(Sub,var_w("v",32),var_w("imm32",32))),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            apply
                              (call
                                 ("MemU",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                            ite(eq(var_w("t",4),lw(15,4)),
                                ite(call
                                      ("Aligned",HOLogic.boolT,tp[var_w("address",32),ln 4],
                                       @{theory}),
                                    apply
                                      (call
                                         ("LoadWritePC",@{typ "state \<Rightarrow> state"},
                                          var_w("v",32),@{theory}),var("s",qTy)),
                                    mop(Snd,
                                        apply
                                          (call
                                             ("raise'exception",
                                              @{typ "state \<Rightarrow> (unit \<times> state)"},
                                              call
                                                ("exception.UNPREDICTABLE",@{typ exception},
                                                 ls"LoadLiteral",@{theory}),@{theory}),var("s",qTy)))),
                                apply
                                  (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                   let'
                                     (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                                      let'
                                        (tp[var_w("v",32),var("s",qTy)],
                                         itb([(bop(Or,
                                                   apply
                                                     (call
                                                        ("UnalignedSupport",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy)),
                                                   call
                                                     ("Aligned",HOLogic.boolT,
                                                      tp[var_w("address",32),ln 4],@{theory})),
                                               tp[var_w("v",32),var("s",qTy)]),
                                              (eq(call
                                                    ("state.Encoding",@{typ Encoding},var("s",qTy),
                                                     @{theory}),
                                                  lc("Encoding_ARM","Encoding",@{theory})),
                                               apply
                                                 (call
                                                    ("ROR",
                                                     @{typ
                                                     "state \<Rightarrow> (32 word \<times> state)"},
                                                     tp[var_w("v",32),
                                                        bop(Mul,ln 8,
                                                            mop(Cast HOLogic.natT,
                                                                ex(var_w("address",32),ln 1,ln 0,
                                                                   (Word_Lib.mk_wordT 2))))],
                                                     @{theory}),var("s",qTy)))],
                                             tp[lx w32,var("s",qTy)]),
                                         tp[tp[var_w("v",32),var_w("t",4)],var("s",qTy)]),
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            var("v",@{typ "32 word \<times> 4 word"}),@{theory}),
                                         var("s",qTy))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                            let'
                              (tp[var_w("v",32),var("s",qTy)],
                               apply
                                 (call
                                    ("MemU_unpriv",
                                     @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                               let'
                                 (tp[var_b"v0",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     ite(var_b"postindex",
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                            var("s",qTy)),var("s",qTy)),
                                     tp[apply
                                          (call
                                             ("UnalignedSupport",@{typ "state \<Rightarrow> bool"},
                                              lu,@{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  apply
                                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                     let'
                                       (tp[var("v",@{typ "32 word \<times> 4 word"}),var("s",qTy)],
                                        let'
                                          (tp[var_w("v",32),var("s",qTy)],
                                           itb([(bop(Or,var_b"v0",
                                                     call
                                                       ("Aligned",HOLogic.boolT,
                                                        tp[var_w("address",32),ln 4],@{theory})),
                                                 tp[var_w("v",32),var("s",qTy)]),
                                                (eq(call
                                                      ("state.Encoding",@{typ Encoding},
                                                       var("s",qTy),@{theory}),
                                                    lc("Encoding_ARM","Encoding",@{theory})),
                                                 apply
                                                   (call
                                                      ("ROR",
                                                       @{typ
                                                       "state \<Rightarrow> (32 word \<times> state)"},
                                                       tp[var_w("v",32),
                                                          bop(Mul,ln 8,
                                                              mop(Cast HOLogic.natT,
                                                                  ex(var_w("address",32),ln 1,ln 0,
                                                                     (Word_Lib.mk_wordT 2))))],
                                                       @{theory}),var("s",qTy)))],
                                               tp[lx w32,var("s",qTy)]),
                                           tp[tp[var_w("v",32),var_w("t",4)],var("s",qTy)]),
                                        apply
                                          (call
                                             ("write'R",@{typ "state \<Rightarrow> state"},
                                              var("v",@{typ "32 word \<times> 4 word"}),@{theory}),
                                           var("s",qTy)))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadByte",
   close
     (tp[var_b"unsigned",var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),
         var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (tp[var_w("v",8),var("s",qTy)],
                            apply
                              (call
                                 ("MemU",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                                  tp[ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),ln 1],
                                  @{theory}),var("s",qTy)),
                            let'
                              (var("s",qTy),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[call
                                          ("Extend",w32,tp[var_b"unsigned",var_w("v",8)],@{theory}),
                                        var_w("t",4)],@{theory}),var("s",qTy)),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"wback",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadByteLiteral",
   close
     (tp[var_b"unsigned",var_b"add",var_w("t",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},lw(15,4),
                  @{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   let'
                     (var_w("v",32),call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                      let'
                        (tp[var_w("v",8),var("s",qTy)],
                         apply
                           (call
                              ("MemU",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                               tp[ite(var_b"add",bop(Add,var_w("v",32),var_w("imm32",32)),
                                      bop(Sub,var_w("v",32),var_w("imm32",32))),ln 1],@{theory}),
                            var("s",qTy)),
                         apply
                           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[call("Extend",w32,tp[var_b"unsigned",var_w("v",8)],@{theory}),
                                     var_w("t",4)],@{theory}),var("s",qTy)))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadByteUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (tp[var_w("v",8),var("s",qTy)],
                            apply
                              (call
                                 ("MemU_unpriv",
                                  @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                  tp[ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                                     ln 1],@{theory}),var("s",qTy)),
                            let'
                              (var("s",qTy),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[mop(Cast w32,var_w("v",8)),var_w("t",4)],@{theory}),
                                  var("s",qTy)),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"postindex",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadSignedByteUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset2})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset2}),
                         [(call("offset2.register_form2",@{typ offset2},var_w("m",4),@{theory}),
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("s",qTy))),
                          (call
                             ("offset2.immediate_form2",@{typ offset2},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (tp[var_w("v",8),var("s",qTy)],
                            apply
                              (call
                                 ("MemU_unpriv",
                                  @{typ "state \<Rightarrow> (8 word \<times> state)"},
                                  tp[ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                                     ln 1],@{theory}),var("s",qTy)),
                            let'
                              (var("s",qTy),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[mop(SE w32,var_w("v",8)),var_w("t",4)],@{theory}),
                                  var("s",qTy)),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"postindex",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadHalf",
   close
     (tp[var_b"unsigned",var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),
         var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (tp[var_w("v",16),var("s",qTy)],
                               apply
                                 (call
                                    ("MemU",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                                     tp[var_w("address",32),ln 2],@{theory}),var("s",qTy)),
                               let'
                                 (tp[var_b"v0",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     ite(var_b"wback",
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                            var("s",qTy)),var("s",qTy)),
                                     tp[apply
                                          (call
                                             ("UnalignedSupport",@{typ "state \<Rightarrow> bool"},
                                              lu,@{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  apply
                                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                     apply
                                       (call
                                          ("write'R",@{typ "state \<Rightarrow> state"},
                                           tp[ite(bop(Or,var_b"v0",
                                                      call
                                                        ("Aligned",HOLogic.boolT,
                                                         tp[var_w("address",32),ln 2],@{theory})),
                                                  call
                                                    ("Extend",w32,tp[var_b"unsigned",var_w("v",16)],
                                                     @{theory}),lx w32),var_w("t",4)],@{theory}),
                                        var("s",qTy))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadHalfLiteral",
   close
     (tp[var_b"unsigned",var_b"add",var_w("t",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},lw(15,4),
                  @{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (const("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                      var("s",qTy)),
                   let'
                     (var_w("v",32),call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                      let'
                        (var_w("address",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("imm32",32)),
                             bop(Sub,var_w("v",32),var_w("imm32",32))),
                         let'
                           (tp[var_w("v",16),var("s",qTy)],
                            apply
                              (call
                                 ("MemU",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                                  tp[var_w("address",32),ln 2],@{theory}),var("s",qTy)),
                            apply
                              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                               apply
                                 (call
                                    ("write'R",@{typ "state \<Rightarrow> state"},
                                     tp[ite(bop(Or,
                                                apply
                                                  (call
                                                     ("UnalignedSupport",
                                                      @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                                   var("s",qTy)),
                                                call
                                                  ("Aligned",HOLogic.boolT,
                                                   tp[var_w("address",32),ln 2],@{theory})),
                                            call
                                              ("Extend",w32,tp[var_b"unsigned",var_w("v",16)],
                                               @{theory}),lx w32),var_w("t",4)],@{theory}),
                                  var("s",qTy))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadHalfUnprivileged",
   close
     (tp[var_b"unsigned",var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),
         var("m",@{typ offset2})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset2}),
                         [(call("offset2.register_form2",@{typ offset2},var_w("m",4),@{theory}),
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("s",qTy))),
                          (call
                             ("offset2.immediate_form2",@{typ offset2},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                            let'
                              (tp[var_w("v",16),var("s",qTy)],
                               apply
                                 (call
                                    ("MemU_unpriv",
                                     @{typ "state \<Rightarrow> (16 word \<times> state)"},
                                     tp[var_w("address",32),ln 2],@{theory}),var("s",qTy)),
                               let'
                                 (tp[var_b"v0",var("s",qTy)],
                                  let'
                                    (var("s0",qTy),
                                     ite(var_b"postindex",
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                            var("s",qTy)),var("s",qTy)),
                                     tp[apply
                                          (call
                                             ("UnalignedSupport",@{typ "state \<Rightarrow> bool"},
                                              lu,@{theory}),var("s0",qTy)),var("s0",qTy)]),
                                  apply
                                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                     apply
                                       (call
                                          ("write'R",@{typ "state \<Rightarrow> state"},
                                           tp[ite(bop(Or,var_b"v0",
                                                      call
                                                        ("Aligned",HOLogic.boolT,
                                                         tp[var_w("address",32),ln 2],@{theory})),
                                                  call
                                                    ("Extend",w32,tp[var_b"unsigned",var_w("v",16)],
                                                     @{theory}),lx w32),var_w("t",4)],@{theory}),
                                        var("s",qTy))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadMultiple",
   close
     (tp[var_b"increment",var_b"index",var_b"wback",var_w("n",4),var_w("registers",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (var_w("length",32),
                      bop(Mul,lw(4,32),
                          mop(Cast w32,call("BitCount",HOLogic.natT,var_w("registers",16),@{theory}))),
                      let'
                        (var("s",@{typ "32 word \<times> state"}),
                         mop(Snd,
                             apply
                               (forloop
                                  (tp[ln 0,ln 14,
                                      close
                                        (var_n"i",
                                         close
                                           (var("state",@{typ "32 word \<times> state"}),
                                            ite(bop(Bit,var_w("registers",16),var_n"i"),
                                                let'
                                                  (var("s",@{typ "32 word \<times> state"}),
                                                   let'
                                                     (tp[var("v",@{typ "32 word \<times> 4 word"}),
                                                         var("s",@{typ "32 word \<times> state"})],
                                                      let'
                                                        (tp[var_w("v",32),
                                                            var("s",@{typ "32 word \<times> state"})],
                                                         cs(apply
                                                              (call
                                                                 ("MemA",
                                                                  @{typ
                                                                  "state \<Rightarrow>
                                                                   (32 word \<times> state)"},
                                                                  tp[mop(Fst,
                                                                         var("state",
                                                                             @{typ
                                                                             "32 word \<times> state"})),
                                                                     ln 4],@{theory}),
                                                               mop(Snd,
                                                                   var("state",
                                                                       @{typ
                                                                       "32 word \<times> state"}))),
                                                            [(tp[var_w("v",32),var("s3",qTy)],
                                                              tp[var_w("v",32),
                                                                 mop(Fst,
                                                                     var("state",
                                                                         @{typ
                                                                         "32 word \<times> state"})),
                                                                 var("s3",qTy)])],@{context}),
                                                         tp[tp[var_w("v",32),mop(Cast w4,var_n"i")],
                                                            var("s",@{typ "32 word \<times> state"})]),
                                                      tp[mop(Fst,
                                                             var("s",@{typ "32 word \<times> state"})),
                                                         apply
                                                           (call
                                                              ("write'R",
                                                               @{typ "state \<Rightarrow> state"},
                                                               var("v",
                                                                   @{typ "32 word \<times> 4 word"}),
                                                               @{theory}),
                                                            mop(Snd,
                                                                var("s",
                                                                    @{typ "32 word \<times> state"})))]),
                                                   tp[lu,
                                                      bop(Add,
                                                          mop(Fst,
                                                              var("s",
                                                                  @{typ "32 word \<times> state"})),
                                                          lw(4,32)),
                                                      mop(Snd,
                                                          var("s",@{typ "32 word \<times> state"}))]),
                                                tp[lu,var("state",@{typ "32 word \<times> state"})])))]),
                                tp[itb([(eq(var_b"index",var_b"increment"),
                                         bop(Add,
                                             ite(var_b"increment",var_w("v",32),
                                                 bop(Sub,var_w("v",32),var_w("length",32))),lw(4,32))),
                                        (var_b"increment",var_w("v",32))],
                                       bop(Sub,var_w("v",32),var_w("length",32))),var("s",qTy)])),
                         let'
                           (var("s",@{typ "32 word \<times> state"}),
                            ite(bop(Bit,var_w("registers",16),ln 15),
                                let'
                                  (tp[var_w("v",32),var("s",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("MemA",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                               ln 4],@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                      apply
                                        (call
                                           ("LoadWritePC",@{typ "state \<Rightarrow> state"},
                                            var_w("v",32),@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"})))]),
                                tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                   apply
                                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                      mop(Snd,var("s",@{typ "32 word \<times> state"})))]),
                            ite(var_b"wback",
                                ite(bop(Bit,var_w("registers",16),
                                        mop(Cast HOLogic.natT,var_w("n",4))),
                                    apply
                                      (call
                                         ("write'R",@{typ "state \<Rightarrow> state"},
                                          tp[lx w32,var_w("n",4)],@{theory}),
                                       mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                    apply
                                      (call
                                         ("write'R",@{typ "state \<Rightarrow> state"},
                                          tp[ite(var_b"increment",
                                                 bop(Add,var_w("v",32),var_w("length",32)),
                                                 bop(Sub,var_w("v",32),var_w("length",32))),
                                             var_w("n",4)],@{theory}),
                                       mop(Snd,var("s",@{typ "32 word \<times> state"})))),
                                mop(Snd,var("s",@{typ "32 word \<times> state"}))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadMultipleExceptionReturn",
   close
     (tp[var_b"increment",var_b"wordhigher",var_b"wback",var_w("n",4),var_w("registers",15)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v",var("s",qTy)],
               apply
                 (call
                    ("CurrentModeIsUserOrSystem",@{typ "state \<Rightarrow> (bool \<times> state)"},
                     lu,@{theory}),
                  ite(var_b"v",
                      apply
                        (call
                           ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                            @{theory}),var("s",qTy)),var("s",qTy))),
               let'
                 (tp[var_w("v",32),var("s",qTy)],
                  apply
                    (call
                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                        @{theory}),
                     ite(var_b"v",
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"LoadMultipleExceptionReturn",@{theory}),@{theory}),
                                var("s",qTy))),var("s",qTy))),
                  let'
                    (var_w("length",32),
                     bop(Add,
                         bop(Mul,lw(4,32),
                             mop(Cast w32,
                                 call("BitCount",HOLogic.natT,var_w("registers",15),@{theory}))),
                         lw(4,32)),
                     let'
                       (var("s",@{typ "32 word \<times> state"}),
                        mop(Snd,
                            apply
                              (forloop
                                 (tp[ln 0,ln 14,
                                     close
                                       (var_n"i",
                                        close
                                          (var("state",@{typ "32 word \<times> state"}),
                                           ite(bop(Bit,var_w("registers",15),var_n"i"),
                                               let'
                                                 (var("s",@{typ "32 word \<times> state"}),
                                                  let'
                                                    (tp[var("v",@{typ "32 word \<times> 4 word"}),
                                                        var("s",@{typ "32 word \<times> state"})],
                                                     let'
                                                       (tp[var_w("v",32),
                                                           var("s",@{typ "32 word \<times> state"})],
                                                        cs(apply
                                                             (call
                                                                ("MemA",
                                                                 @{typ
                                                                 "state \<Rightarrow>
                                                                  (32 word \<times> state)"},
                                                                 tp[mop(Fst,
                                                                        var("state",
                                                                            @{typ
                                                                            "32 word \<times> state"})),
                                                                    ln 4],@{theory}),
                                                              mop(Snd,
                                                                  var("state",
                                                                      @{typ
                                                                      "32 word \<times> state"}))),
                                                           [(tp[var_w("v",32),var("s3",qTy)],
                                                             tp[var_w("v",32),
                                                                mop(Fst,
                                                                    var("state",
                                                                        @{typ
                                                                        "32 word \<times> state"})),
                                                                var("s3",qTy)])],@{context}),
                                                        tp[tp[var_w("v",32),mop(Cast w4,var_n"i")],
                                                           var("s",@{typ "32 word \<times> state"})]),
                                                     tp[mop(Fst,
                                                            var("s",@{typ "32 word \<times> state"})),
                                                        apply
                                                          (call
                                                             ("write'R",
                                                              @{typ "state \<Rightarrow> state"},
                                                              var("v",
                                                                  @{typ "32 word \<times> 4 word"}),
                                                              @{theory}),
                                                           mop(Snd,
                                                               var("s",
                                                                   @{typ "32 word \<times> state"})))]),
                                                  tp[lu,
                                                     bop(Add,
                                                         mop(Fst,
                                                             var("s",@{typ "32 word \<times> state"})),
                                                         lw(4,32)),
                                                     mop(Snd,
                                                         var("s",@{typ "32 word \<times> state"}))]),
                                               tp[lu,var("state",@{typ "32 word \<times> state"})])))]),
                               tp[itb([(var_b"wordhigher",
                                        bop(Add,
                                            ite(var_b"increment",var_w("v",32),
                                                bop(Sub,var_w("v",32),var_w("length",32))),lw(4,32))),
                                       (var_b"increment",var_w("v",32))],
                                      bop(Sub,var_w("v",32),var_w("length",32))),var("s",qTy)])),
                        let'
                          (tp[var_w("v0",32),var("s",@{typ "32 word \<times> state"})],
                           cs(apply
                                (call
                                   ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),ln 4],
                                    @{theory}),mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                              [(tp[var_w("v",32),var("s3",qTy)],
                                tp[var_w("v",32),mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                   var("s3",qTy)])],@{context}),
                           let'
                             (var("s",@{typ "32 word \<times> state"}),
                              ite(var_b"wback",
                                  tp[mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                     ite(bop(Bit,var_w("registers",15),
                                             mop(Cast HOLogic.natT,var_w("n",4))),
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[lx w32,var_w("n",4)],@{theory}),
                                            mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[ite(var_b"increment",
                                                      bop(Add,var_w("v",32),var_w("length",32)),
                                                      bop(Sub,var_w("v",32),var_w("length",32))),
                                                  var_w("n",4)],@{theory}),
                                            mop(Snd,var("s",@{typ "32 word \<times> state"}))))],
                                  var("s",@{typ "32 word \<times> state"})),
                              let'
                                (tp[var("v1",@{typ PSR}),var("s",@{typ "32 word \<times> state"})],
                                 let'
                                   (tp[var("v",@{typ PSR}),var("s3",qTy)],
                                    apply
                                      (const
                                         ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},
                                          @{theory}),
                                       mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                    tp[var("v",@{typ PSR}),
                                       mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                       var("s3",qTy)]),
                                 apply
                                   (call
                                      ("BranchWritePC",@{typ "state \<Rightarrow> state"},
                                       var_w("v0",32),@{theory}),
                                    apply
                                      (call
                                         ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                                          tp[call("reg'PSR",w32,var("v1",@{typ PSR}),@{theory}),
                                             lw(15,4),lt],@{theory}),
                                       mop(Snd,var("s",@{typ "32 word \<times> state"})))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadMultipleUserRegisters",
   close
     (tp[var_b"increment",var_b"wordhigher",var_w("n",4),var_w("registers",15)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v",var("s",qTy)],
               apply
                 (call
                    ("CurrentModeIsUserOrSystem",@{typ "state \<Rightarrow> (bool \<times> state)"},
                     lu,@{theory}),
                  ite(var_b"v",
                      apply
                        (call
                           ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                            @{theory}),var("s",qTy)),var("s",qTy))),
               let'
                 (var("s",qTy),
                  ite(var_b"v",
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},
                                   ls"LoadMultipleUserRegisters",@{theory}),@{theory}),var("s",qTy))),
                      var("s",qTy)),
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     ite(var_b"increment",
                         apply
                           (call
                              ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               var_w("n",4),@{theory}),var("s",qTy)),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            apply
                              (call
                                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  var_w("n",4),@{theory}),var("s",qTy)),
                            tp[bop(Sub,var_w("v",32),
                                   bop(Mul,lw(4,32),
                                       mop(Cast w32,
                                           call
                                             ("BitCount",HOLogic.natT,var_w("registers",15),
                                              @{theory})))),var("s",qTy)])),
                     apply
                       (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                        mop(Snd,
                            mop(Snd,
                                apply
                                  (forloop
                                     (tp[ln 0,ln 14,
                                         close
                                           (var_n"i",
                                            close
                                              (var("state",@{typ "32 word \<times> state"}),
                                               ite(bop(Bit,var_w("registers",15),var_n"i"),
                                                   let'
                                                     (var("s",@{typ "32 word \<times> state"}),
                                                      let'
                                                        (tp[var("v",
                                                                @{typ
                                                                "32 word \<times>
                                                                 4 word \<times> 5 word"}),
                                                            var("s",@{typ "32 word \<times> state"})],
                                                         let'
                                                           (tp[var_w("v",32),
                                                               var("s",
                                                                   @{typ "32 word \<times> state"})],
                                                            cs(apply
                                                                 (call
                                                                    ("MemA",
                                                                     @{typ
                                                                     "state \<Rightarrow>
                                                                      (32 word \<times> state)"},
                                                                     tp[mop(Fst,
                                                                            var("state",
                                                                                @{typ
                                                                                "32 word \<times>
                                                                                 state"})),ln 4],
                                                                     @{theory}),
                                                                  mop(Snd,
                                                                      var("state",
                                                                          @{typ
                                                                          "32 word \<times> state"}))),
                                                               [(tp[var_w("v",32),var("s3",qTy)],
                                                                 tp[var_w("v",32),
                                                                    mop(Fst,
                                                                        var("state",
                                                                            @{typ
                                                                            "32 word \<times> state"})),
                                                                    var("s3",qTy)])],@{context}),
                                                            tp[tp[var_w("v",32),
                                                                  mop(Cast w4,var_n"i"),lw(16,5)],
                                                               var("s",
                                                                   @{typ "32 word \<times> state"})]),
                                                         tp[mop(Fst,
                                                                var("s",
                                                                    @{typ "32 word \<times> state"})),
                                                            apply
                                                              (call
                                                                 ("write'Rmode",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  var("v",
                                                                      @{typ
                                                                      "32 word \<times>
                                                                       4 word \<times> 5 word"}),
                                                                  @{theory}),
                                                               mop(Snd,
                                                                   var("s",
                                                                       @{typ
                                                                       "32 word \<times> state"})))]),
                                                      tp[lu,
                                                         bop(Add,
                                                             mop(Fst,
                                                                 var("s",
                                                                     @{typ "32 word \<times> state"})),
                                                             lw(4,32)),
                                                         mop(Snd,
                                                             var("s",@{typ "32 word \<times> state"}))]),
                                                   tp[lu,
                                                      var("state",@{typ "32 word \<times> state"})])))]),
                                   tp[ite(var_b"wordhigher",bop(Add,var_w("v",32),lw(4,32)),
                                          var_w("v",32)),var("s",qTy)])))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadDual",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("t2",4),var_w("n",4),
         var("m",@{typ offset2})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset2}),
                         [(call("offset2.register_form2",@{typ offset2},var_w("m",4),@{theory}),
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("s",qTy))),
                          (call
                             ("offset2.immediate_form2",@{typ offset2},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (tp[var_w("v",32),var("s",qTy)],
                               apply
                                 (call
                                    ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     tp[var_w("address",32),ln 4],@{theory}),var("s",qTy)),
                               let'
                                 (tp[var_w("v",32),var("s",qTy)],
                                  apply
                                    (call
                                       ("MemA",
                                        @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                        tp[bop(Add,var_w("address",32),lw(4,32)),ln 4],@{theory}),
                                     apply
                                       (call
                                          ("write'R",@{typ "state \<Rightarrow> state"},
                                           tp[var_w("v",32),var_w("t",4)],@{theory}),var("s",qTy))),
                                  let'
                                    (var("s",qTy),
                                     apply
                                       (call
                                          ("write'R",@{typ "state \<Rightarrow> state"},
                                           tp[var_w("v",32),var_w("t2",4)],@{theory}),var("s",qTy)),
                                     apply
                                       (call
                                          ("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                        ite(var_b"wback",
                                            apply
                                              (call
                                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                               var("s",qTy)),var("s",qTy)))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadDualLiteral",
   close
     (tp[var_b"add",var_w("t",4),var_w("t2",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},lw(15,4),
                  @{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   ite(var_b"add",
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (const
                               ("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                             var("s",qTy)),
                          tp[bop(Add,call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                                 var_w("imm32",32)),var("s",qTy)]),
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (const
                               ("PC",@{typ "state \<Rightarrow> (32 word \<times> state)"},@{theory}),
                             var("s",qTy)),
                          tp[bop(Sub,call("Align",w32,tp[var_w("v",32),ln 4],@{theory}),
                                 var_w("imm32",32)),var("s",qTy)])),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[var_w("v",32),ln 4],@{theory}),var("s",qTy)),
                      let'
                        (tp[var_w("v",32),var("s",qTy)],
                         apply
                           (call
                              ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               tp[bop(Add,var_w("v",32),lw(4,32)),ln 4],@{theory}),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v0",32),var_w("t",4)],@{theory}),var("s",qTy))),
                         apply
                           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[var_w("v",32),var_w("t2",4)],@{theory}),var("s",qTy)))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadExclusive",
   close
     (tp[var_w("t",4),var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v",32),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[bop(Add,var_w("v",32),var_w("imm32",32)),ln 4],@{theory}),
                         var("s",qTy)),
                      apply
                        (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                         apply
                           (call
                              ("write'R",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",32),var_w("t",4)],@{theory}),var("s",qTy))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadExclusiveByte",
   close
     (tp[var_w("t",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v",8),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                            tp[var_w("v",32),ln 1],@{theory}),var("s",qTy)),
                      apply
                        (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                         apply
                           (call
                              ("write'R",@{typ "state \<Rightarrow> state"},
                               tp[mop(Cast w32,var_w("v",8)),var_w("t",4)],@{theory}),var("s",qTy))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadExclusiveHalf",
   close
     (tp[var_w("t",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v",16),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                            tp[var_w("v",32),ln 2],@{theory}),var("s",qTy)),
                      apply
                        (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                         apply
                           (call
                              ("write'R",@{typ "state \<Rightarrow> state"},
                               tp[mop(Cast w32,var_w("v",16)),var_w("t",4)],@{theory}),var("s",qTy))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LoadExclusiveDoubleword",
   close
     (tp[var_w("t",4),var_w("t2",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v",64),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                            tp[var_w("v",32),ln 8],@{theory}),var("s",qTy)),
                      let'
                        (tp[var_b"v0",var("s",qTy)],
                         let'
                           (var("s0",qTy),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[ite(apply
                                           (call
                                              ("BigEndian",@{typ "state \<Rightarrow> bool"},lu,
                                               @{theory}),var("s",qTy)),
                                         ex(var_w("v",64),ln 63,ln 32,w32),
                                         ex(var_w("v",64),ln 31,ln 0,w32)),var_w("t",4)],@{theory}),
                               var("s",qTy)),
                            tp[apply
                                 (call("BigEndian",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s0",qTy)),var("s0",qTy)]),
                         apply
                           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                            apply
                              (call
                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                  tp[ite(var_b"v0",ex(var_w("v",64),ln 31,ln 0,w32),
                                         ex(var_w("v",64),ln 63,ln 32,w32)),var_w("t2",4)],@{theory}),
                               var("s",qTy)))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreWord",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (tp[var_w("v",32),var("s",qTy)],
                               ite(eq(var_w("t",4),lw(15,4)),
                                   apply
                                     (call
                                        ("PCStoreValue",
                                         @{typ "state \<Rightarrow> (32 word \<times> state)"},lu,
                                         @{theory}),var("s",qTy)),
                                   apply
                                     (call
                                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         var_w("t",4),@{theory}),var("s",qTy))),
                               let'
                                 (var("s",qTy),
                                  ite(bop(Or,
                                          apply
                                            (call
                                               ("UnalignedSupport",
                                                @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                             var("s",qTy)),
                                          bop(Or,
                                              call
                                                ("Aligned",HOLogic.boolT,
                                                 tp[var_w("address",32),ln 4],@{theory}),
                                              eq(apply
                                                   (call
                                                      ("CurrentInstrSet",
                                                       @{typ "state \<Rightarrow> InstrSet"},lu,
                                                       @{theory}),var("s",qTy)),
                                                 lc("InstrSet_ARM","InstrSet",@{theory})))),
                                      apply
                                        (call
                                           ("write'MemU",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),var_w("address",32),ln 4],@{theory}),
                                         var("s",qTy)),
                                      apply
                                        (call
                                           ("write'MemU",@{typ "state \<Rightarrow> state"},
                                            tp[lx w32,var_w("address",32),ln 4],@{theory}),
                                         var("s",qTy))),
                                  apply
                                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                     ite(var_b"wback",
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                            var("s",qTy)),var("s",qTy))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                            let'
                              (tp[var_w("v",32),var("s",qTy)],
                               ite(eq(var_w("t",4),lw(15,4)),
                                   apply
                                     (call
                                        ("PCStoreValue",
                                         @{typ "state \<Rightarrow> (32 word \<times> state)"},lu,
                                         @{theory}),var("s",qTy)),
                                   apply
                                     (call
                                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         var_w("t",4),@{theory}),var("s",qTy))),
                               let'
                                 (var("s",qTy),
                                  ite(bop(Or,
                                          apply
                                            (call
                                               ("UnalignedSupport",
                                                @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                             var("s",qTy)),
                                          bop(Or,
                                              call
                                                ("Aligned",HOLogic.boolT,
                                                 tp[var_w("address",32),ln 4],@{theory}),
                                              eq(apply
                                                   (call
                                                      ("CurrentInstrSet",
                                                       @{typ "state \<Rightarrow> InstrSet"},lu,
                                                       @{theory}),var("s",qTy)),
                                                 lc("InstrSet_ARM","InstrSet",@{theory})))),
                                      apply
                                        (call
                                           ("write'MemU_unpriv",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),var_w("address",32),ln 4],@{theory}),
                                         var("s",qTy)),
                                      apply
                                        (call
                                           ("write'MemU_unpriv",@{typ "state \<Rightarrow> state"},
                                            tp[lx w32,var_w("address",32),ln 4],@{theory}),
                                         var("s",qTy))),
                                  apply
                                    (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                     ite(var_b"postindex",
                                         apply
                                           (call
                                              ("write'R",@{typ "state \<Rightarrow> state"},
                                               tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                            var("s",qTy)),var("s",qTy))))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreByte",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var("s",qTy),
                            let'
                              (tp[var_w("v0",32),var("s",qTy)],
                               apply
                                 (call
                                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     var_w("t",4),@{theory}),var("s",qTy)),
                               apply
                                 (call
                                    ("write'MemU",@{typ "state \<Rightarrow> state"},
                                     tp[ex(var_w("v0",32),ln 7,ln 0,w8),
                                        ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),ln 1],
                                     @{theory}),var("s",qTy))),
                            apply
                              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                               ite(var_b"wback",
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                      var("s",qTy)),var("s",qTy))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreByteUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var("s",qTy),
                            let'
                              (tp[var_w("v0",32),var("s",qTy)],
                               apply
                                 (call
                                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     var_w("t",4),@{theory}),var("s",qTy)),
                               apply
                                 (call
                                    ("write'MemU_unpriv",@{typ "state \<Rightarrow> state"},
                                     tp[ex(var_w("v0",32),ln 7,ln 0,w8),
                                        ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                                        ln 1],@{theory}),var("s",qTy))),
                            apply
                              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                               ite(var_b"postindex",
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                      var("s",qTy)),var("s",qTy))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreHalf",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset1}),
                         [(call
                             ("offset1.register_form1",@{typ offset1},
                              tp[var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                           let'
                             (tp[var_w("v",32),var("s",qTy)],
                              apply
                                (call
                                   ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    var_w("m",4),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("Shift",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                    tp[var_w("v",32),var("shift_t",@{typ SRType}),var_n"shift_n",
                                       call
                                         ("PSR.C",HOLogic.boolT,
                                          call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                          @{theory})],@{theory}),var("s",qTy)))),
                          (call
                             ("offset1.immediate_form1",@{typ offset1},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (var("s",qTy),
                               ite(bop(Or,
                                       apply
                                         (call
                                            ("UnalignedSupport",@{typ "state \<Rightarrow> bool"},
                                             lu,@{theory}),var("s",qTy)),
                                       call
                                         ("Aligned",HOLogic.boolT,tp[var_w("address",32),ln 2],
                                          @{theory})),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("t",4),@{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'MemU",@{typ "state \<Rightarrow> state"},
                                            tp[ex(var_w("v",32),ln 15,ln 0,w16),var_w("address",32),
                                               ln 2],@{theory}),var("s",qTy))),
                                   apply
                                     (call
                                        ("write'MemU",@{typ "state \<Rightarrow> state"},
                                         tp[lx w16,var_w("address",32),ln 2],@{theory}),var("s",qTy))),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"wback",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreHalfUnprivileged",
   close
     (tp[var_b"add",var_b"postindex",var_w("t",4),var_w("n",4),var("m",@{typ offset2})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset2}),
                         [(call("offset2.register_form2",@{typ offset2},var_w("m",4),@{theory}),
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("s",qTy))),
                          (call
                             ("offset2.immediate_form2",@{typ offset2},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"postindex",var_w("v",32),var_w("offset_addr",32)),
                            let'
                              (var("s",qTy),
                               ite(bop(Or,
                                       apply
                                         (call
                                            ("UnalignedSupport",@{typ "state \<Rightarrow> bool"},
                                             lu,@{theory}),var("s",qTy)),
                                       call
                                         ("Aligned",HOLogic.boolT,tp[var_w("address",32),ln 2],
                                          @{theory})),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("t",4),@{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'MemU_unpriv",@{typ "state \<Rightarrow> state"},
                                            tp[ex(var_w("v",32),ln 15,ln 0,w16),var_w("address",32),
                                               ln 2],@{theory}),var("s",qTy))),
                                   apply
                                     (call
                                        ("write'MemU_unpriv",@{typ "state \<Rightarrow> state"},
                                         tp[lx w16,var_w("address",32),ln 2],@{theory}),var("s",qTy))),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"postindex",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreMultiple",
   close
     (tp[var_b"increment",var_b"index",var_b"wback",var_w("n",4),var_w("registers",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (var_w("length",32),
                      bop(Mul,lw(4,32),
                          mop(Cast w32,call("BitCount",HOLogic.natT,var_w("registers",16),@{theory}))),
                      let'
                        (var("s",@{typ "32 word \<times> state"}),
                         mop(Snd,
                             apply
                               (forloop
                                  (tp[ln 0,ln 14,
                                      close
                                        (var_n"i",
                                         close
                                           (var("state",@{typ "32 word \<times> state"}),
                                            ite(bop(Bit,var_w("registers",16),var_n"i"),
                                                let'
                                                  (var("s",@{typ "32 word \<times> state"}),
                                                   ite(bop(And,
                                                           eq(mop(Cast w4,var_n"i"),var_w("n",4)),
                                                           bop(And,var_b"wback",
                                                               mop(Not,
                                                                   eq(var_n"i",
                                                                      call
                                                                        ("LowestSetBit",
                                                                         HOLogic.natT,
                                                                         var_w("registers",16),
                                                                         @{theory}))))),
                                                       tp[mop(Fst,
                                                              var("state",
                                                                  @{typ "32 word \<times> state"})),
                                                          apply
                                                            (call
                                                               ("write'MemA",
                                                                @{typ "state \<Rightarrow> state"},
                                                                tp[lx w32,
                                                                   mop(Fst,
                                                                       var("state",
                                                                           @{typ
                                                                           "32 word \<times> state"})),
                                                                   ln 4],@{theory}),
                                                             mop(Snd,
                                                                 var("state",
                                                                     @{typ "32 word \<times> state"})))],
                                                       let'
                                                         (tp[var_w("v0",32),
                                                             var("s",@{typ "32 word \<times> state"})],
                                                          cs(apply
                                                               (call
                                                                  ("R",
                                                                   @{typ
                                                                   "state \<Rightarrow>
                                                                    (32 word \<times> state)"},
                                                                   mop(Cast w4,var_n"i"),@{theory}),
                                                                mop(Snd,
                                                                    var("state",
                                                                        @{typ
                                                                        "32 word \<times> state"}))),
                                                             [(tp[var_w("v",32),var("s3",qTy)],
                                                               tp[var_w("v",32),
                                                                  mop(Fst,
                                                                      var("state",
                                                                          @{typ
                                                                          "32 word \<times> state"})),
                                                                  var("s3",qTy)])],@{context}),
                                                          tp[mop(Fst,
                                                                 var("s",
                                                                     @{typ "32 word \<times> state"})),
                                                             apply
                                                               (call
                                                                  ("write'MemA",
                                                                   @{typ
                                                                   "state \<Rightarrow> state"},
                                                                   tp[var_w("v0",32),
                                                                      mop(Fst,
                                                                          var("state",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               state"})),ln 4],
                                                                   @{theory}),
                                                                mop(Snd,
                                                                    var("s",
                                                                        @{typ
                                                                        "32 word \<times> state"})))])),
                                                   tp[lu,
                                                      bop(Add,
                                                          mop(Fst,
                                                              var("s",
                                                                  @{typ "32 word \<times> state"})),
                                                          lw(4,32)),
                                                      mop(Snd,
                                                          var("s",@{typ "32 word \<times> state"}))]),
                                                tp[lu,var("state",@{typ "32 word \<times> state"})])))]),
                                tp[itb([(eq(var_b"index",var_b"increment"),
                                         bop(Add,
                                             ite(var_b"increment",var_w("v",32),
                                                 bop(Sub,var_w("v",32),var_w("length",32))),lw(4,32))),
                                        (var_b"increment",var_w("v",32))],
                                       bop(Sub,var_w("v",32),var_w("length",32))),var("s",qTy)])),
                         let'
                           (var("s",@{typ "32 word \<times> state"}),
                            ite(bop(Bit,var_w("registers",16),ln 15),
                                let'
                                  (tp[var_w("v0",32),var("s0",@{typ "32 word \<times> state"})],
                                   cs(apply
                                        (call
                                           ("PCStoreValue",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            lu,@{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                      [(tp[var_w("v",32),var("s3",qTy)],
                                        tp[var_w("v",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                           var("s3",qTy)])],@{context}),
                                   tp[mop(Fst,var("s0",@{typ "32 word \<times> state"})),
                                      apply
                                        (call
                                           ("write'MemA",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v0",32),
                                               mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                               ln 4],@{theory}),
                                         mop(Snd,var("s0",@{typ "32 word \<times> state"})))]),
                                var("s",@{typ "32 word \<times> state"})),
                            apply
                              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                               ite(var_b"wback",
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[ite(var_b"increment",
                                                bop(Add,var_w("v",32),var_w("length",32)),
                                                bop(Sub,var_w("v",32),var_w("length",32))),
                                            var_w("n",4)],@{theory}),
                                      mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                   mop(Snd,var("s",@{typ "32 word \<times> state"})))))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreMultipleUserRegisters",
   close
     (tp[var_b"increment",var_b"wordhigher",var_w("n",4),var_w("registers",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            let'
              (tp[var_b"v",var("s",qTy)],
               apply
                 (call
                    ("CurrentModeIsUserOrSystem",@{typ "state \<Rightarrow> (bool \<times> state)"},
                     lu,@{theory}),
                  ite(var_b"v",
                      apply
                        (call
                           ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                            @{theory}),var("s",qTy)),var("s",qTy))),
               let'
                 (var("s",qTy),
                  ite(var_b"v",
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},
                                   ls"StoreMultipleUserRegisters",@{theory}),@{theory}),var("s",qTy))),
                      var("s",qTy)),
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     ite(var_b"increment",
                         apply
                           (call
                              ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               var_w("n",4),@{theory}),var("s",qTy)),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            apply
                              (call
                                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  var_w("n",4),@{theory}),var("s",qTy)),
                            tp[bop(Sub,var_w("v",32),
                                   bop(Mul,lw(4,32),
                                       mop(Cast w32,
                                           call
                                             ("BitCount",HOLogic.natT,var_w("registers",16),
                                              @{theory})))),var("s",qTy)])),
                     let'
                       (var("s",@{typ "32 word \<times> state"}),
                        mop(Snd,
                            apply
                              (forloop
                                 (tp[ln 0,ln 14,
                                     close
                                       (var_n"i",
                                        close
                                          (var("state",@{typ "32 word \<times> state"}),
                                           ite(bop(Bit,var_w("registers",16),var_n"i"),
                                               let'
                                                 (var("s",@{typ "32 word \<times> state"}),
                                                  let'
                                                    (tp[var_w("v0",32),
                                                        var("s",@{typ "32 word \<times> state"})],
                                                     cs(apply
                                                          (call
                                                             ("Rmode",
                                                              @{typ
                                                              "state \<Rightarrow>
                                                               (32 word \<times> state)"},
                                                              tp[mop(Cast w4,var_n"i"),lw(16,5)],
                                                              @{theory}),
                                                           mop(Snd,
                                                               var("state",
                                                                   @{typ "32 word \<times> state"}))),
                                                        [(tp[var_w("v",32),var("s3",qTy)],
                                                          tp[var_w("v",32),
                                                             mop(Fst,
                                                                 var("state",
                                                                     @{typ "32 word \<times> state"})),
                                                             var("s3",qTy)])],@{context}),
                                                     tp[mop(Fst,
                                                            var("s",@{typ "32 word \<times> state"})),
                                                        apply
                                                          (call
                                                             ("write'MemA",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var_w("v0",32),
                                                                 mop(Fst,
                                                                     var("state",
                                                                         @{typ
                                                                         "32 word \<times> state"})),
                                                                 ln 4],@{theory}),
                                                           mop(Snd,
                                                               var("s",
                                                                   @{typ "32 word \<times> state"})))]),
                                                  tp[lu,
                                                     bop(Add,
                                                         mop(Fst,
                                                             var("s",@{typ "32 word \<times> state"})),
                                                         lw(4,32)),
                                                     mop(Snd,
                                                         var("s",@{typ "32 word \<times> state"}))]),
                                               tp[lu,var("state",@{typ "32 word \<times> state"})])))]),
                               tp[ite(var_b"wordhigher",bop(Add,var_w("v",32),lw(4,32)),
                                      var_w("v",32)),var("s",qTy)])),
                        apply
                          (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                           ite(bop(Bit,var_w("registers",16),ln 15),
                               let'
                                 (tp[var_w("v0",32),var("s0",@{typ "32 word \<times> state"})],
                                  cs(apply
                                       (call
                                          ("PCStoreValue",
                                           @{typ "state \<Rightarrow> (32 word \<times> state)"},lu,
                                           @{theory}),
                                        mop(Snd,var("s",@{typ "32 word \<times> state"}))),
                                     [(tp[var_w("v",32),var("s3",qTy)],
                                       tp[var_w("v",32),
                                          mop(Fst,var("s",@{typ "32 word \<times> state"})),
                                          var("s3",qTy)])],@{context}),
                                  apply
                                    (call
                                       ("write'MemA",@{typ "state \<Rightarrow> state"},
                                        tp[var_w("v0",32),
                                           mop(Fst,var("s",@{typ "32 word \<times> state"})),ln 4],
                                        @{theory}),
                                     mop(Snd,var("s0",@{typ "32 word \<times> state"})))),
                               mop(Snd,var("s",@{typ "32 word \<times> state"}))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreDual",
   close
     (tp[var_b"add",var_b"index",var_b"wback",var_w("t",4),var_w("t2",4),var_w("n",4),
         var("m",@{typ offset2})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      cs(var("m",@{typ offset2}),
                         [(call("offset2.register_form2",@{typ offset2},var_w("m",4),@{theory}),
                           apply
                             (call
                                ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                 var_w("m",4),@{theory}),var("s",qTy))),
                          (call
                             ("offset2.immediate_form2",@{typ offset2},var_w("imm32",32),@{theory}),
                           tp[var_w("imm32",32),var("s",qTy)])],@{context}),
                      let'
                        (var_w("offset_addr",32),
                         ite(var_b"add",bop(Add,var_w("v",32),var_w("v0",32)),
                             bop(Sub,var_w("v",32),var_w("v0",32))),
                         let'
                           (var_w("address",32),
                            ite(var_b"index",var_w("offset_addr",32),var_w("v",32)),
                            let'
                              (var("s",qTy),
                               let'
                                 (tp[var_w("v",32),var("s",qTy)],
                                  apply
                                    (call
                                       ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                        var_w("t2",4),@{theory}),
                                     let'
                                       (tp[var_w("v",32),var("s",qTy)],
                                        apply
                                          (call
                                             ("R",
                                              @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                              var_w("t",4),@{theory}),var("s",qTy)),
                                        apply
                                          (call
                                             ("write'MemA",@{typ "state \<Rightarrow> state"},
                                              tp[var_w("v",32),var_w("address",32),ln 4],@{theory}),
                                           var("s",qTy)))),
                                  apply
                                    (call
                                       ("write'MemA",@{typ "state \<Rightarrow> state"},
                                        tp[var_w("v",32),bop(Add,var_w("address",32),lw(4,32)),ln 4],
                                        @{theory}),var("s",qTy))),
                               apply
                                 (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                  ite(var_b"wback",
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("offset_addr",32),var_w("n",4)],@{theory}),
                                         var("s",qTy)),var("s",qTy)))))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreExclusive",
   close
     (tp[var_w("d",4),var_w("t",4),var_w("n",4),var_w("imm32",32)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (var_w("v",32),bop(Add,var_w("v",32),var_w("imm32",32)),
                      apply
                        (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                         ite(call
                               ("ExclusiveMonitorsPass",HOLogic.boolT,tp[var_w("v",32),ln 4],
                                @{theory}),
                             apply
                               (call
                                  ("write'R",@{typ "state \<Rightarrow> state"},
                                   tp[lw(0,32),var_w("d",4)],@{theory}),
                                let'
                                  (tp[var_w("v0",32),var("s",qTy)],
                                   apply
                                     (call
                                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         var_w("t",4),@{theory}),var("s",qTy)),
                                   apply
                                     (call
                                        ("write'MemA",@{typ "state \<Rightarrow> state"},
                                         tp[var_w("v0",32),var_w("v",32),ln 4],@{theory}),
                                      var("s",qTy)))),
                             apply
                               (call
                                  ("write'R",@{typ "state \<Rightarrow> state"},
                                   tp[lw(1,32),var_w("d",4)],@{theory}),var("s",qTy)))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreExclusiveByte",
   close
     (tp[var_w("d",4),var_w("t",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   apply
                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      ite(call
                            ("ExclusiveMonitorsPass",HOLogic.boolT,tp[var_w("v",32),ln 1],@{theory}),
                          apply
                            (call
                               ("write'R",@{typ "state \<Rightarrow> state"},
                                tp[lw(0,32),var_w("d",4)],@{theory}),
                             let'
                               (tp[var_w("v0",32),var("s",qTy)],
                                apply
                                  (call
                                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                      var_w("t",4),@{theory}),var("s",qTy)),
                                apply
                                  (call
                                     ("write'MemA",@{typ "state \<Rightarrow> state"},
                                      tp[ex(var_w("v0",32),ln 7,ln 0,w8),var_w("v",32),ln 1],
                                      @{theory}),var("s",qTy)))),
                          apply
                            (call
                               ("write'R",@{typ "state \<Rightarrow> state"},
                                tp[lw(1,32),var_w("d",4)],@{theory}),var("s",qTy))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreExclusiveHalf",
   close
     (tp[var_w("d",4),var_w("t",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   apply
                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      ite(call
                            ("ExclusiveMonitorsPass",HOLogic.boolT,tp[var_w("v",32),ln 2],@{theory}),
                          apply
                            (call
                               ("write'R",@{typ "state \<Rightarrow> state"},
                                tp[lw(0,32),var_w("d",4)],@{theory}),
                             let'
                               (tp[var_w("v0",32),var("s",qTy)],
                                apply
                                  (call
                                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                      var_w("t",4),@{theory}),var("s",qTy)),
                                apply
                                  (call
                                     ("write'MemA",@{typ "state \<Rightarrow> state"},
                                      tp[ex(var_w("v0",32),ln 15,ln 0,w16),var_w("v",32),ln 2],
                                      @{theory}),var("s",qTy)))),
                          apply
                            (call
                               ("write'R",@{typ "state \<Rightarrow> state"},
                                tp[lw(1,32),var_w("d",4)],@{theory}),var("s",qTy))))),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreExclusiveDoubleword",
   close
     (tp[var_w("d",4),var_w("t",4),var_w("t2",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("NullCheckIfThumbEE",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  var_w("n",4),@{theory}),var("state",qTy)),
            ite(var_b"v",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("s",qTy)),
                   let'
                     (tp[var_w("v0",64),var("s",qTy)],
                      ite(apply
                            (call("BigEndian",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                             var("s",qTy)),
                          let'
                            (tp[var_w("v",32),var("s",qTy)],
                             apply
                               (call
                                  ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                   var_w("t",4),@{theory}),var("s",qTy)),
                             let'
                               (tp[var_w("v0",32),var("s",qTy)],
                                apply
                                  (call
                                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                      var_w("t2",4),@{theory}),var("s",qTy)),
                                tp[cc[var_w("v",32),var_w("v0",32)],var("s",qTy)])),
                          let'
                            (tp[var_w("v",32),var("s",qTy)],
                             apply
                               (call
                                  ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                   var_w("t2",4),@{theory}),var("s",qTy)),
                             let'
                               (tp[var_w("v0",32),var("s",qTy)],
                                apply
                                  (call
                                     ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                      var_w("t",4),@{theory}),var("s",qTy)),
                                tp[cc[var_w("v",32),var_w("v0",32)],var("s",qTy)]))),
                      apply
                        (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                         ite(call
                               ("ExclusiveMonitorsPass",HOLogic.boolT,tp[var_w("v",32),ln 8],
                                @{theory}),
                             apply
                               (call
                                  ("write'R",@{typ "state \<Rightarrow> state"},
                                   tp[lw(0,32),var_w("d",4)],@{theory}),
                                apply
                                  (call
                                     ("write'MemA",@{typ "state \<Rightarrow> state"},
                                      tp[var_w("v0",64),var_w("v",32),ln 8],@{theory}),var("s",qTy))),
                             apply
                               (call
                                  ("write'R",@{typ "state \<Rightarrow> state"},
                                   tp[lw(1,32),var_w("d",4)],@{theory}),var("s",qTy)))))),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ClearExclusive",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Swap",
   close
     (tp[var_b"b",var_w("t",4),var_w("t2",4),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",32),var("s",qTy)],
            apply
              (call
                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),@{theory}),
               var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               ite(var_b"b",
                   let'
                     (tp[var_w("v0",8),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (8 word \<times> state)"},
                            tp[var_w("v",32),ln 1],@{theory}),var("s",qTy)),
                      apply
                        (call
                           ("write'R",@{typ "state \<Rightarrow> state"},
                            tp[mop(Cast w32,var_w("v0",8)),var_w("t",4)],@{theory}),
                         let'
                           (tp[var_w("v0",32),var("s",qTy)],
                            apply
                              (call
                                 ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                  var_w("t2",4),@{theory}),var("s",qTy)),
                            apply
                              (call
                                 ("write'MemA",@{typ "state \<Rightarrow> state"},
                                  tp[ex(var_w("v0",32),ln 7,ln 0,w8),var_w("v",32),ln 1],@{theory}),
                               var("s",qTy))))),
                   let'
                     (tp[var_w("v0",32),var("s",qTy)],
                      apply
                        (call
                           ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                            tp[var_w("v",32),ln 4],@{theory}),var("s",qTy)),
                      let'
                        (tp[var_w("v",32),var("s",qTy)],
                         apply
                           (call
                              ("ROR",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                               tp[var_w("v0",32),
                                  bop(Mul,ln 8,
                                      mop(Cast HOLogic.natT,
                                          ex(var_w("v",32),ln 1,ln 0,(Word_Lib.mk_wordT 2))))],
                               @{theory}),
                            let'
                              (tp[var_w("v0",32),var("s",qTy)],
                               apply
                                 (call
                                    ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                     var_w("t2",4),@{theory}),var("s",qTy)),
                               apply
                                 (call
                                    ("write'MemA",@{typ "state \<Rightarrow> state"},
                                     tp[var_w("v0",32),var_w("v",32),ln 4],@{theory}),var("s",qTy)))),
                         apply
                           (call
                              ("write'R",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",32),var_w("t",4)],@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ChangeProcessorState",
   close
     (tp[var_b"enable",var_b"disable",var_b"affectA",var_b"affectI",var_b"affectF",
         var("changemode",@{typ "5 word option"})],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            apply
              (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
               ite(var_b"v",
                   let'
                     (var("v",@{typ PSR}),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                      let'
                        (var("s",@{typ "PSR \<times> state"}),
                         ite(var_b"enable",
                             let'
                               (var("s0",@{typ PSR}),
                                ite(var_b"affectA",
                                    rupd("PSR.A",tp[var("v",@{typ PSR}),lf],@{theory}),
                                    var("v",@{typ PSR})),
                                let'
                                  (var("s0",@{typ PSR}),
                                   ite(var_b"affectI",
                                       rupd("PSR.I",tp[var("s0",@{typ PSR}),lf],@{theory}),
                                       var("s0",@{typ PSR})),
                                   tp[ite(var_b"affectF",
                                          rupd("PSR.F",tp[var("s0",@{typ PSR}),lf],@{theory}),
                                          var("s0",@{typ PSR})),var("s",qTy)])),
                             tp[var("v",@{typ PSR}),var("s",qTy)]),
                         let'
                           (var("s",@{typ "PSR \<times> state"}),
                            ite(var_b"disable",
                                let'
                                  (var("s",@{typ "PSR \<times> state"}),
                                   ite(var_b"affectA",
                                       tp[rupd
                                            ("PSR.A",
                                             tp[mop(Fst,var("s",@{typ "PSR \<times> state"})),lt],
                                             @{theory}),
                                          mop(Snd,var("s",@{typ "PSR \<times> state"}))],
                                       var("s",@{typ "PSR \<times> state"})),
                                   let'
                                     (var("s",@{typ "PSR \<times> state"}),
                                      ite(var_b"affectI",
                                          tp[rupd
                                               ("PSR.I",
                                                tp[mop(Fst,var("s",@{typ "PSR \<times> state"})),lt],
                                                @{theory}),
                                             mop(Snd,var("s",@{typ "PSR \<times> state"}))],
                                          var("s",@{typ "PSR \<times> state"})),
                                      ite(var_b"affectF",
                                          tp[rupd
                                               ("PSR.F",
                                                tp[mop(Fst,var("s",@{typ "PSR \<times> state"})),lt],
                                                @{theory}),
                                             mop(Snd,var("s",@{typ "PSR \<times> state"}))],
                                          var("s",@{typ "PSR \<times> state"})))),
                                var("s",@{typ "PSR \<times> state"})),
                            let'
                              (var("s",@{typ "PSR \<times> state"}),
                               cs(var("changemode",@{typ "5 word option"}),
                                  [(mop(Some,var_w("mode",5)),
                                    tp[rupd
                                         ("PSR.M",
                                          tp[mop(Fst,var("s",@{typ "PSR \<times> state"})),
                                             var_w("mode",5)],@{theory}),
                                       mop(Snd,var("s",@{typ "PSR \<times> state"}))]),
                                   (lo (Word_Lib.mk_wordT 5),var("s",@{typ "PSR \<times> state"}))],
                                  @{context}),
                               let'
                                 (var("s1",qTy),
                                  apply
                                    (call
                                       ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                                        tp[call
                                             ("reg'PSR",w32,
                                              mop(Fst,var("s",@{typ "PSR \<times> state"})),
                                              @{theory}),lw(15,4),lf],@{theory}),
                                     mop(Snd,var("s",@{typ "PSR \<times> state"}))),
                                  ite(bop(And,
                                          eq(call
                                               ("PSR.M",(Word_Lib.mk_wordT 5),
                                                call
                                                  ("state.CPSR",@{typ PSR},var("s1",qTy),@{theory}),
                                                @{theory}),lw(26,5)),
                                          eq(apply
                                               (call
                                                  ("CurrentInstrSet",
                                                   @{typ "state \<Rightarrow> InstrSet"},lu,
                                                   @{theory}),var("s1",qTy)),
                                             lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                                      mop(Snd,
                                          apply
                                            (call
                                               ("raise'exception",
                                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                                call
                                                  ("exception.UNPREDICTABLE",@{typ exception},
                                                   ls"ChangeProcessorState",@{theory}),@{theory}),
                                             var("s1",qTy))),var("s1",qTy))))))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ExceptionReturn",
   close
     (var("state",qTy),
      let'
        (tp[var_b"v",var("s",qTy)],
         apply
           (call
              ("CurrentModeIsUserOrSystem",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
               @{theory}),var("state",qTy)),
         ite(bop(Or,var_b"v",
                 eq(apply
                      (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
                       var("s",qTy)),lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.UNPREDICTABLE",@{typ exception},ls"ExceptionReturn",@{theory}),
                       @{theory}),var("s",qTy))),
             let'
               (tp[var_b"v",var("s",qTy)],
                apply
                  (call
                     ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                      @{theory}),var("s",qTy)),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   ite(var_b"v",tp[call("state.ELR_hyp",w32,var("s",qTy),@{theory}),var("s",qTy)],
                       apply
                         (call
                            ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},lw(14,4),
                             @{theory}),var("s",qTy))),
                   let'
                     (tp[var("v0",@{typ PSR}),var("s",qTy)],
                      apply
                        (const("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},@{theory}),
                         var("s",qTy)),
                      let'
                        (var("s",qTy),
                         apply
                           (call
                              ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                               tp[call("reg'PSR",w32,var("v0",@{typ PSR}),@{theory}),lw(15,4),lt],
                               @{theory}),var("s",qTy)),
                         ite(bop(And,
                                 eq(call
                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),
                                       @{theory}),lw(26,5)),
                                 eq(apply
                                      (call
                                         ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},
                                          lu,@{theory}),var("s",qTy)),
                                    lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                             mop(Snd,
                                 apply
                                   (call
                                      ("raise'exception",
                                       @{typ "state \<Rightarrow> (unit \<times> state)"},
                                       call
                                         ("exception.UNPREDICTABLE",@{typ exception},
                                          ls"ExceptionReturn",@{theory}),@{theory}),var("s",qTy))),
                             apply
                               (call
                                  ("BranchWritePC",@{typ "state \<Rightarrow> state"},var_w("v",32),
                                   @{theory}),var("s",qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'HypervisorCall",
   close
     (var_w("imm16",16),
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            itb([(mop(Not,
                      apply
                        (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                         var("state",qTy))),tp[lt,var("state",qTy)]),
                 (apply
                    (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                     var("state",qTy)),tp[lt,var("state",qTy)])],
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},
                         lu,@{theory}),var("state",qTy)),tp[mop(Not,var_b"v"),var("s",qTy)])),
            itb([(var_b"v",
                  mop(Snd,
                      apply
                        (call
                           ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            call
                              ("exception.UNPREDICTABLE",@{typ exception},ls"HypervisorCall",
                               @{theory}),@{theory}),var("s",qTy)))),
                 (mop(Not,
                      call
                        ("SCR.HCE",HOLogic.boolT,
                         call
                           ("CP15.SCR",@{typ SCR},
                            call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                         @{theory})),
                  let'
                    (tp[var_b"v",var("s",qTy)],
                     apply
                       (call
                          ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                           @{theory}),var("s",qTy)),
                     ite(var_b"v",
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},ls"HypervisorCall",
                                      @{theory}),@{theory}),var("s",qTy))),
                         apply
                           (call
                              ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                               @{theory}),var("s",qTy)))))],
                apply
                  (call
                     ("CallHypervisor",@{typ "state \<Rightarrow> state"},var_w("imm16",16),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveToRegisterFromSpecial",
   close
     (tp[var_b"read_spsr",var_w("d",4)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"read_spsr",
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("CurrentModeIsUserOrSystem",
                         @{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                      var("state",qTy)),
                   ite(var_b"v",
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.UNPREDICTABLE",@{typ exception},
                                    ls"MoveToRegisterFromSpecial",@{theory}),@{theory}),var("s",qTy))),
                       let'
                         (tp[var("v",@{typ PSR}),var("s",qTy)],
                          apply
                            (const
                               ("SPSR",@{typ "state \<Rightarrow> (PSR \<times> state)"},@{theory}),
                             var("s",qTy)),
                          apply
                            (call
                               ("write'R",@{typ "state \<Rightarrow> state"},
                                tp[call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}),var_w("d",4)],
                                @{theory}),var("s",qTy))))),
                apply
                  (call
                     ("write'R",@{typ "state \<Rightarrow> state"},
                      tp[bop(BAnd,
                             call
                               ("reg'PSR",w32,
                                call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),@{theory}),
                             lw(4177462239,32)),var_w("d",4)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveToRegisterFromBankedOrSpecial",
   close
     (tp[var_b"read_spsr",var_w("SYSm",5),var_w("d",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            ite(mop(Not,var_b"v"),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             ls"MoveToRegisterFromBankedOrSpecial",@{theory}),@{theory}),
                       var("s",qTy))),
                let'
                  (var_w("v",5),
                   call
                     ("PSR.M",(Word_Lib.mk_wordT 5),
                      call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                   apply
                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      ite(var_b"read_spsr",
                          let'
                            (var("s",qTy),
                             apply
                               (call
                                  ("SPSRAccessValid",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("SYSm",5),var_w("v",5)],@{theory}),var("s",qTy)),
                             itb([(eq(var_w("SYSm",5),lw(14,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_fiq",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(16,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_irq",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(18,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_svc",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(20,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_abt",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(22,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_und",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(28,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_mon",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy))),
                                  (eq(var_w("SYSm",5),lw(30,5)),
                                   apply
                                     (call
                                        ("write'R",@{typ "state \<Rightarrow> state"},
                                         tp[call
                                              ("reg'PSR",w32,
                                               call
                                                 ("state.SPSR_hyp",@{typ PSR},var("s",qTy),@{theory}),
                                               @{theory}),var_w("d",4)],@{theory}),var("s",qTy)))],
                                 var("s",qTy))),
                          let'
                            (var("s",qTy),
                             apply
                               (call
                                  ("BankedRegisterAccessValid",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("SYSm",5),var_w("v",5)],@{theory}),var("s",qTy)),
                             itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(0,2)),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("Rmode",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            tp[bop(Add,
                                                   mop(Cast w4,
                                                       ex(var_w("SYSm",5),ln 2,ln 0,
                                                          (Word_Lib.mk_wordT 3))),lw(8,4)),lw(16,5)],
                                            @{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),var_w("d",4)],@{theory}),var("s",qTy)))),
                                  (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(1,2)),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("Rmode",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            tp[bop(Add,
                                                   mop(Cast w4,
                                                       ex(var_w("SYSm",5),ln 2,ln 0,
                                                          (Word_Lib.mk_wordT 3))),lw(8,4)),lw(17,5)],
                                            @{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'R",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),var_w("d",4)],@{theory}),var("s",qTy)))),
                                  (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(3,2)),
                                   itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                                         let'
                                           (tp[var_w("v",32),var("s",qTy)],
                                            apply
                                              (call
                                                 ("Rmode",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  tp[bop(Sub,lw(14,4),
                                                         mop(Cast w4,bop(Bit,var_w("SYSm",5),ln 0))),
                                                     lw(22,5)],@{theory}),var("s",qTy)),
                                            apply
                                              (call
                                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("v",32),var_w("d",4)],@{theory}),
                                               var("s",qTy)))),
                                        (bop(Bit,var_w("SYSm",5),ln 0),
                                         let'
                                           (tp[var_w("v",32),var("s",qTy)],
                                            apply
                                              (call
                                                 ("Rmode",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  tp[lw(13,4),lw(26,5)],@{theory}),var("s",qTy)),
                                            apply
                                              (call
                                                 ("write'R",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("v",32),var_w("d",4)],@{theory}),
                                               var("s",qTy))))],
                                       apply
                                         (call
                                            ("write'R",@{typ "state \<Rightarrow> state"},
                                             tp[call("state.ELR_hyp",w32,var("s",qTy),@{theory}),
                                                var_w("d",4)],@{theory}),var("s",qTy))))],
                                 let'
                                   (var_w("s0",5),
                                    bfi(ln 4,ln 4,mop(Cast w1,lt),
                                        bfi(ln 3,ln 3,
                                            mop(Cast w1,
                                                bop(And,bop(Bit,var_w("SYSm",5),ln 2),
                                                    bop(Bit,var_w("SYSm",5),ln 1))),
                                            bfi(ln 2,ln 2,
                                                mop(Cast w1,
                                                    bop(And,bop(Bit,var_w("SYSm",5),ln 2),
                                                        mop(Not,bop(Bit,var_w("SYSm",5),ln 1)))),
                                                bfi(ln 1,ln 1,mop(Cast w1,lt),
                                                    bfi(ln 0,ln 0,
                                                        mop(Cast w1,
                                                            bop(Or,bop(Bit,var_w("SYSm",5),ln 2),
                                                                bop(Bit,var_w("SYSm",5),ln 1))),
                                                        lx (Word_Lib.mk_wordT 5)))))),
                                    ite(eq(var_w("v",5),var_w("s0",5)),
                                        mop(Snd,
                                            apply
                                              (call
                                                 ("raise'exception",
                                                  @{typ "state \<Rightarrow> (unit \<times> state)"},
                                                  call
                                                    ("exception.UNPREDICTABLE",@{typ exception},
                                                     ls"MoveToRegisterFromBankedOrSpecial",@{theory}),
                                                  @{theory}),var("s",qTy))),
                                        let'
                                          (tp[var("v",@{typ "32 word \<times> 4 word"}),
                                              var("s",@{typ "5 word \<times> state"})],
                                           let'
                                             (tp[var_w("v",32),
                                                 var("s",@{typ "5 word \<times> state"})],
                                              let'
                                                (tp[var_w("v",32),var("s3",qTy)],
                                                 apply
                                                   (call
                                                      ("Rmode",
                                                       @{typ
                                                       "state \<Rightarrow> (32 word \<times> state)"},
                                                       tp[bop(Sub,lw(14,4),
                                                              mop(Cast w4,
                                                                  bop(Bit,var_w("SYSm",5),ln 0))),
                                                          var_w("s0",5)],@{theory}),var("s",qTy)),
                                                 tp[var_w("v",32),var_w("s0",5),var("s3",qTy)]),
                                              tp[tp[var_w("v",32),var_w("d",4)],
                                                 var("s",@{typ "5 word \<times> state"})]),
                                           apply
                                             (call
                                                ("write'R",@{typ "state \<Rightarrow> state"},
                                                 var("v",@{typ "32 word \<times> 4 word"}),@{theory}),
                                              mop(Snd,var("s",@{typ "5 word \<times> state"}))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveToSpecialFromImmediate",
   close
     (tp[var_b"write_spsr",var_w("imm32",32),var_w("mask",4)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"write_spsr",
                apply
                  (call
                     ("SPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                      tp[var_w("imm32",32),var_w("mask",4)],@{theory}),var("state",qTy)),
                let'
                  (var("s",qTy),
                   apply
                     (call
                        ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                         tp[var_w("imm32",32),var_w("mask",4),lf],@{theory}),var("state",qTy)),
                   ite(bop(And,
                           eq(call
                                ("PSR.M",(Word_Lib.mk_wordT 5),
                                 call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                              lw(26,5)),
                           eq(apply
                                (call
                                   ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                    @{theory}),var("s",qTy)),
                              lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.UNPREDICTABLE",@{typ exception},
                                    ls"MoveToSpecialFromImmediate",@{theory}),@{theory}),
                              var("s",qTy))),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveToSpecialFromRegister",
   close
     (tp[var_b"write_spsr",var_w("n",4),var_w("mask",4)],
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            ite(var_b"write_spsr",
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   apply
                     (call
                        ("SPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                         tp[var_w("v",32),var_w("mask",4)],@{theory}),var("s",qTy))),
                let'
                  (tp[var_w("v",32),var("s",qTy)],
                   apply
                     (call
                        ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("n",4),
                         @{theory}),var("state",qTy)),
                   let'
                     (var("s",qTy),
                      apply
                        (call
                           ("CPSRWriteByInstr",@{typ "state \<Rightarrow> state"},
                            tp[var_w("v",32),var_w("mask",4),lf],@{theory}),var("s",qTy)),
                      ite(bop(And,
                              eq(call
                                   ("PSR.M",(Word_Lib.mk_wordT 5),
                                    call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                                 lw(26,5)),
                              eq(apply
                                   (call
                                      ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                       @{theory}),var("s",qTy)),
                                 lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                          mop(Snd,
                              apply
                                (call
                                   ("raise'exception",
                                    @{typ "state \<Rightarrow> (unit \<times> state)"},
                                    call
                                      ("exception.UNPREDICTABLE",@{typ exception},
                                       ls"MoveToSpecialFromRegister",@{theory}),@{theory}),
                                 var("s",qTy))),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MoveToBankedOrSpecialRegister",
   close
     (tp[var_b"write_spsr",var_w("SYSm",5),var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                  @{theory}),var("state",qTy)),
            ite(mop(Not,var_b"v"),
                mop(Snd,
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             ls"MoveToBankedOrSpecialRegister",@{theory}),@{theory}),var("s",qTy))),
                let'
                  (var_w("v",5),
                   call
                     ("PSR.M",(Word_Lib.mk_wordT 5),
                      call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}),@{theory}),
                   apply
                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                      ite(var_b"write_spsr",
                          let'
                            (var("s",qTy),
                             apply
                               (call
                                  ("SPSRAccessValid",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("SYSm",5),var_w("v",5)],@{theory}),var("s",qTy)),
                             itb([(eq(var_w("SYSm",5),lw(14,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_fiq",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_fiq",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(16,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_irq",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_irq",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(18,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_svc",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_svc",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(20,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_abt",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_abt",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(22,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_und",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_und",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(28,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_mon",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_mon",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory}))),
                                  (eq(var_w("SYSm",5),lw(30,5)),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      let'
                                        (tp[var("v",@{typ "PSR \<times> 32 word"}),var("s",qTy)],
                                         let'
                                           (tp[var_w("v0",32),var("s0",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            tp[tp[call
                                                    ("state.SPSR_hyp",@{typ PSR},var("s",qTy),
                                                     @{theory}),var_w("v0",32)],var("s0",qTy)]),
                                         tp[call
                                              ("write'reg'PSR",@{typ PSR},
                                               var("v",@{typ "PSR \<times> 32 word"}),@{theory}),
                                            var("s",qTy)]),
                                      rupd
                                        ("state.SPSR_hyp",tp[var("s",qTy),var("v",@{typ PSR})],
                                         @{theory})))],var("s",qTy))),
                          let'
                            (var("s",qTy),
                             apply
                               (call
                                  ("BankedRegisterAccessValid",@{typ "state \<Rightarrow> state"},
                                   tp[var_w("SYSm",5),var_w("v",5)],@{theory}),var("s",qTy)),
                             itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(0,2)),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),
                                               bop(Add,
                                                   mop(Cast w4,
                                                       ex(var_w("SYSm",5),ln 2,ln 0,
                                                          (Word_Lib.mk_wordT 3))),lw(8,4)),lw(16,5)],
                                            @{theory}),var("s",qTy)))),
                                  (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(1,2)),
                                   let'
                                     (tp[var_w("v",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("R",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            var_w("n",4),@{theory}),var("s",qTy)),
                                      apply
                                        (call
                                           ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                            tp[var_w("v",32),
                                               bop(Add,
                                                   mop(Cast w4,
                                                       ex(var_w("SYSm",5),ln 2,ln 0,
                                                          (Word_Lib.mk_wordT 3))),lw(8,4)),lw(17,5)],
                                            @{theory}),var("s",qTy)))),
                                  (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(3,2)),
                                   itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                                         let'
                                           (tp[var_w("v",32),var("s",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            apply
                                              (call
                                                 ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("v",32),
                                                     bop(Sub,lw(14,4),
                                                         mop(Cast w4,bop(Bit,var_w("SYSm",5),ln 0))),
                                                     lw(22,5)],@{theory}),var("s",qTy)))),
                                        (bop(Bit,var_w("SYSm",5),ln 0),
                                         let'
                                           (tp[var_w("v",32),var("s",qTy)],
                                            apply
                                              (call
                                                 ("R",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  var_w("n",4),@{theory}),var("s",qTy)),
                                            apply
                                              (call
                                                 ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("v",32),lw(13,4),lw(26,5)],@{theory}),
                                               var("s",qTy))))],
                                       let'
                                         (tp[var_w("v",32),var("s",qTy)],
                                          apply
                                            (call
                                               ("R",
                                                @{typ
                                                "state \<Rightarrow> (32 word \<times> state)"},
                                                var_w("n",4),@{theory}),var("s",qTy)),
                                          rupd
                                            ("state.ELR_hyp",tp[var("s",qTy),var_w("v",32)],
                                             @{theory}))))],
                                 let'
                                   (var_w("s0",5),
                                    bfi(ln 4,ln 4,mop(Cast w1,lt),
                                        bfi(ln 3,ln 3,
                                            mop(Cast w1,
                                                bop(And,bop(Bit,var_w("SYSm",5),ln 2),
                                                    bop(Bit,var_w("SYSm",5),ln 1))),
                                            bfi(ln 2,ln 2,
                                                mop(Cast w1,
                                                    bop(And,bop(Bit,var_w("SYSm",5),ln 2),
                                                        mop(Not,bop(Bit,var_w("SYSm",5),ln 1)))),
                                                bfi(ln 1,ln 1,mop(Cast w1,lt),
                                                    bfi(ln 0,ln 0,
                                                        mop(Cast w1,
                                                            bop(Or,bop(Bit,var_w("SYSm",5),ln 2),
                                                                bop(Bit,var_w("SYSm",5),ln 1))),
                                                        lx (Word_Lib.mk_wordT 5)))))),
                                    ite(eq(var_w("v",5),var_w("s0",5)),
                                        mop(Snd,
                                            apply
                                              (call
                                                 ("raise'exception",
                                                  @{typ "state \<Rightarrow> (unit \<times> state)"},
                                                  call
                                                    ("exception.UNPREDICTABLE",@{typ exception},
                                                     ls"MoveToBankedOrSpecialRegister",@{theory}),
                                                  @{theory}),var("s",qTy))),
                                        let'
                                          (tp[var_w("v0",32),
                                              var("s2",@{typ "5 word \<times> state"})],
                                           let'
                                             (tp[var_w("v",32),var("s3",qTy)],
                                              apply
                                                (call
                                                   ("R",
                                                    @{typ
                                                    "state \<Rightarrow> (32 word \<times> state)"},
                                                    var_w("n",4),@{theory}),var("s",qTy)),
                                              tp[var_w("v",32),var_w("s0",5),var("s3",qTy)]),
                                           apply
                                             (call
                                                ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                                 tp[var_w("v0",32),
                                                    bop(Sub,lw(14,4),
                                                        mop(Cast w4,bop(Bit,var_w("SYSm",5),ln 0))),
                                                    var_w("s0",5)],@{theory}),
                                              mop(Snd,var("s2",@{typ "5 word \<times> state"}))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ReturnFromException",
   close
     (tp[var_b"increment",var_b"wordhigher",var_b"wback",var_w("n",4)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                   var("s",qTy)),
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},
                         lu,@{theory}),var("s",qTy)),
                   ite(bop(Or,mop(Not,var_b"v"),
                           eq(apply
                                (call
                                   ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                    @{theory}),var("s",qTy)),
                              lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                       mop(Snd,
                           apply
                             (call
                                ("raise'exception",
                                 @{typ "state \<Rightarrow> (unit \<times> state)"},
                                 call
                                   ("exception.UNPREDICTABLE",@{typ exception},
                                    ls"ReturnFromException",@{theory}),@{theory}),var("s",qTy))),
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("R",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                var_w("n",4),@{theory}),var("s",qTy)),
                          let'
                            (var_w("address",32),
                             ite(var_b"increment",var_w("v",32),bop(Sub,var_w("v",32),lw(8,32))),
                             let'
                               (var_w("address",32),
                                ite(var_b"wordhigher",bop(Add,var_w("address",32),lw(4,32)),
                                    var_w("address",32)),
                                let'
                                  (tp[var_w("v",32),var("s",qTy)],
                                   apply
                                     (call
                                        ("MemA",
                                         @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                         tp[var_w("address",32),ln 4],@{theory}),
                                      ite(var_b"wback",
                                          apply
                                            (call
                                               ("write'R",@{typ "state \<Rightarrow> state"},
                                                tp[ite(var_b"increment",
                                                       bop(Add,var_w("v",32),lw(8,32)),
                                                       bop(Sub,var_w("v",32),lw(8,32))),var_w("n",4)],
                                                @{theory}),var("s",qTy)),var("s",qTy))),
                                   let'
                                     (tp[var_w("v0",32),var("s",qTy)],
                                      apply
                                        (call
                                           ("MemA",
                                            @{typ "state \<Rightarrow> (32 word \<times> state)"},
                                            tp[bop(Add,var_w("address",32),lw(4,32)),ln 4],@{theory}),
                                         var("s",qTy)),
                                      let'
                                        (var("s",qTy),
                                         apply
                                           (call
                                              ("CPSRWriteByInstr",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[var_w("v0",32),lw(15,4),lt],@{theory}),
                                            var("s",qTy)),
                                         ite(bop(And,
                                                 eq(call
                                                      ("PSR.M",(Word_Lib.mk_wordT 5),
                                                       call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}),@{theory}),lw(26,5)),
                                                 bop(And,
                                                     call
                                                       ("PSR.J",HOLogic.boolT,
                                                        call
                                                          ("state.CPSR",@{typ PSR},var("s",qTy),
                                                           @{theory}),@{theory}),
                                                     call
                                                       ("PSR.T",HOLogic.boolT,
                                                        call
                                                          ("state.CPSR",@{typ PSR},var("s",qTy),
                                                           @{theory}),@{theory}))),
                                             mop(Snd,
                                                 apply
                                                   (call
                                                      ("raise'exception",
                                                       @{typ
                                                       "state \<Rightarrow> (unit \<times> state)"},
                                                       call
                                                         ("exception.UNPREDICTABLE",
                                                          @{typ exception},ls"ReturnFromException",
                                                          @{theory}),@{theory}),var("s",qTy))),
                                             apply
                                               (call
                                                  ("BranchWritePC",
                                                   @{typ "state \<Rightarrow> state"},var_w("v",32),
                                                   @{theory}),var("s",qTy))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SecureMonitorCall",
   close
     (var_w("imm4",4),
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            ite(apply
                  (call("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                   var("state",qTy)),
                apply
                  (call
                     ("CurrentModeIsNotUser",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,
                      @{theory}),var("state",qTy)),tp[lf,var("state",qTy)]),
            ite(var_b"v",
                let'
                  (tp[var_b"v",var("s",qTy)],
                   ite(apply
                         (call("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                          var("s",qTy)),
                       ite(mop(Not,
                               apply
                                 (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                  var("s",qTy))),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              apply
                                (call
                                   ("CurrentModeIsHyp",
                                    @{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                                 var("s",qTy)),
                              tp[bop(And,mop(Not,var_b"v"),
                                     call
                                       ("HCR.TSC",HOLogic.boolT,
                                        call
                                          ("CP15.HCR",@{typ HCR},
                                           call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),
                                           @{theory}),@{theory})),var("s",qTy)]),tp[lf,var("s",qTy)]),
                       tp[lf,var("s",qTy)]),
                   itb([(var_b"v",
                         apply
                           (call
                              ("TakeHypTrapException",@{typ "state \<Rightarrow> state"},lu,
                               @{theory}),
                            apply
                              (call
                                 ("WriteHSR",@{typ "state \<Rightarrow> state"},
                                  tp[lw(19,6),lw(0,25)],@{theory}),var("s",qTy)))),
                        (call
                           ("SCR.SCD",HOLogic.boolT,
                            call
                              ("CP15.SCR",@{typ SCR},
                               call("state.CP15",@{typ CP15},var("s",qTy),@{theory}),@{theory}),
                            @{theory}),
                         ite(apply
                               (call("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                var("s",qTy)),
                             mop(Snd,
                                 apply
                                   (call
                                      ("raise'exception",
                                       @{typ "state \<Rightarrow> (unit \<times> state)"},
                                       call
                                         ("exception.UNPREDICTABLE",@{typ exception},
                                          ls"SecureMonitorCall",@{theory}),@{theory}),var("s",qTy))),
                             apply
                               (call
                                  ("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,
                                   @{theory}),var("s",qTy))))],
                       apply
                         (call("TakeSMCException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                          var("s",qTy)))),
                apply
                  (call("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                   var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SupervisorCall",
   close
     (var_w("imm32",32),
      close
        (var("state",qTy),
         apply
           (call
              ("CallSupervisor",@{typ "state \<Rightarrow> state"},
               ex(var_w("imm32",32),ln 15,ln 0,w16),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'StoreReturnState",
   close
     (tp[var_b"increment",var_b"wordhigher",var_b"wback",var_w("mode",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("CurrentModeIsHyp",@{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            ite(var_b"v",
                apply
                  (call("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                   var("s",qTy)),
                let'
                  (tp[var_b"v",var("s",qTy)],
                   apply
                     (call
                        ("CurrentModeIsUserOrSystem",
                         @{typ "state \<Rightarrow> (bool \<times> state)"},lu,@{theory}),
                      var("s",qTy)),
                   itb([(bop(Or,var_b"v",
                             eq(apply
                                  (call
                                     ("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,
                                      @{theory}),var("s",qTy)),
                                lc("InstrSet_ThumbEE","InstrSet",@{theory}))),
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"StoreReturnState",@{theory}),@{theory}),var("s",qTy)))),
                        (eq(var_w("mode",5),lw(26,5)),
                         mop(Snd,
                             apply
                               (call
                                  ("raise'exception",
                                   @{typ "state \<Rightarrow> (unit \<times> state)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"StoreReturnState",@{theory}),@{theory}),var("s",qTy))))],
                       let'
                         (tp[var_w("v",32),var("s",qTy)],
                          apply
                            (call
                               ("Rmode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                                tp[lw(13,4),var_w("mode",5)],@{theory}),
                             ite(mop(Not,
                                     apply
                                       (call
                                          ("IsSecure",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                        var("s",qTy))),
                                 ite(bop(Or,eq(var_w("mode",5),lw(22,5)),
                                         bop(And,eq(var_w("mode",5),lw(17,5)),
                                             call
                                               ("NSACR.RFR",HOLogic.boolT,
                                                call
                                                  ("CP15.NSACR",@{typ NSACR},
                                                   call
                                                     ("state.CP15",@{typ CP15},var("s",qTy),
                                                      @{theory}),@{theory}),@{theory}))),
                                     mop(Snd,
                                         apply
                                           (call
                                              ("raise'exception",
                                               @{typ "state \<Rightarrow> (unit \<times> state)"},
                                               call
                                                 ("exception.UNPREDICTABLE",@{typ exception},
                                                  ls"StoreReturnState",@{theory}),@{theory}),
                                            var("s",qTy))),var("s",qTy)),var("s",qTy))),
                          let'
                            (var_w("address",32),
                             ite(var_b"increment",var_w("v",32),bop(Sub,var_w("v",32),lw(8,32))),
                             let'
                               (var_w("address",32),
                                ite(var_b"wordhigher",bop(Add,var_w("address",32),lw(4,32)),
                                    var_w("address",32)),
                                let'
                                  (var("s",qTy),
                                   let'
                                     (tp[var("v",@{typ PSR}),var("s",qTy)],
                                      apply
                                        (const
                                           ("SPSR",
                                            @{typ "state \<Rightarrow> (PSR \<times> state)"},
                                            @{theory}),
                                         let'
                                           (tp[var_w("v",32),var("s",qTy)],
                                            apply
                                              (const
                                                 ("LR",
                                                  @{typ
                                                  "state \<Rightarrow> (32 word \<times> state)"},
                                                  @{theory}),var("s",qTy)),
                                            apply
                                              (call
                                                 ("write'MemA",@{typ "state \<Rightarrow> state"},
                                                  tp[var_w("v",32),var_w("address",32),ln 4],
                                                  @{theory}),var("s",qTy)))),
                                      apply
                                        (call
                                           ("write'MemA",@{typ "state \<Rightarrow> state"},
                                            tp[call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}),
                                               bop(Add,var_w("address",32),lw(4,32)),ln 4],@{theory}),
                                         var("s",qTy))),
                                   apply
                                     (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
                                      ite(var_b"wback",
                                          apply
                                            (call
                                               ("write'Rmode",@{typ "state \<Rightarrow> state"},
                                                tp[ite(var_b"increment",
                                                       bop(Add,var_w("v",32),lw(8,32)),
                                                       bop(Sub,var_w("v",32),lw(8,32))),lw(13,4),
                                                   var_w("mode",5)],@{theory}),var("s",qTy)),
                                          var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Setend",
   close
     (var_b"set_bigend",
      close
        (var("state",qTy),
         apply
           (call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            rupd
              ("state.CPSR",
               tp[var("state",qTy),
                  rupd
                    ("PSR.E",
                     tp[call("state.CPSR",@{typ PSR},var("state",qTy),@{theory}),var_b"set_bigend"],
                     @{theory})],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Undefined",
   close
     (var_w("imm32",32),
      close
        (var("state",qTy),
         apply
           (call("TakeUndefInstrException",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'NoOperation",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Breakpoint",
   close
     (var_w("imm32",32),
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Debug",
   close
     (var_w("option",4),
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DataMemoryBarrier",
   close
     (var_w("option",4),
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DataSynchronizationBarrier",
   close
     (var_w("option",4),
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'InstructionSynchronizationBarrier",
   close
     (var_w("option",4),
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'PreloadData",
   close
     (tp[var_b"add",var_b"is_pldw",var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'PreloadDataLiteral",
   close
     (tp[var_b"add",var_w("imm32",32)],
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'PreloadInstruction",
   close
     (tp[var_b"add",var_w("n",4),var("m",@{typ offset1})],
      close
        (var("state",qTy),
         apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SendEvent",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'WaitForEvent",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'WaitForInterrupt",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Yield",
   close
     (var("state",qTy),
      apply(call("IncPC",@{typ "state \<Rightarrow> state"},lu,@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Run",
   close
     (var("v0",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("v0",@{typ instruction}),
            [(Term.Const(@{const_name "ClearExclusive"},@{typ instruction}),
              apply
                (const("dfn'ClearExclusive",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (Term.Const(@{const_name "NoOperation"},@{typ instruction}),
              apply
                (const("dfn'NoOperation",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.Divide",@{typ instruction},
                 var("v152",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),@{theory}),
              apply
                (call
                   ("dfn'Divide",@{typ "state \<Rightarrow> state"},
                    var("v152",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                    @{theory}),var("state",qTy))),
             (call
                ("instruction.IfThen",@{typ instruction},
                 var("v153",@{typ "4 word \<times> 4 word"}),@{theory}),
              apply
                (call
                   ("dfn'IfThen",@{typ "state \<Rightarrow> state"},
                    var("v153",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
             (call
                ("instruction.Swap",@{typ instruction},
                 var("v154",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),@{theory}),
              apply
                (call
                   ("dfn'Swap",@{typ "state \<Rightarrow> state"},
                    var("v154",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                    @{theory}),var("state",qTy))),
             (call("instruction.Undefined",@{typ instruction},var_w("v155",32),@{theory}),
              apply
                (call("dfn'Undefined",@{typ "state \<Rightarrow> state"},var_w("v155",32),@{theory}),
                 var("state",qTy))),
             (call("instruction.Branch",@{typ instruction},var("v1",@{typ Branch}),@{theory}),
              cs(var("v1",@{typ Branch}),
                 [(call("Branch.BranchExchange",@{typ Branch},var_w("v2",4),@{theory}),
                   apply
                     (call
                        ("dfn'BranchExchange",@{typ "state \<Rightarrow> state"},var_w("v2",4),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Branch.BranchLinkExchangeImmediate",@{typ Branch},
                      var("v3",@{typ "InstrSet \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BranchLinkExchangeImmediate",@{typ "state \<Rightarrow> state"},
                         var("v3",@{typ "InstrSet \<times> 32 word"}),@{theory}),var("state",qTy))),
                  (call("Branch.BranchLinkExchangeRegister",@{typ Branch},var_w("v4",4),@{theory}),
                   apply
                     (call
                        ("dfn'BranchLinkExchangeRegister",@{typ "state \<Rightarrow> state"},
                         var_w("v4",4),@{theory}),var("state",qTy))),
                  (call("Branch.BranchTarget",@{typ Branch},var_w("v5",32),@{theory}),
                   apply
                     (call
                        ("dfn'BranchTarget",@{typ "state \<Rightarrow> state"},var_w("v5",32),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Branch.CheckArray",@{typ Branch},var("v6",@{typ "4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CheckArray",@{typ "state \<Rightarrow> state"},
                         var("v6",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.CompareBranch",@{typ Branch},
                      var("v7",@{typ "bool \<times> 4 word \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CompareBranch",@{typ "state \<Rightarrow> state"},
                         var("v7",@{typ "bool \<times> 4 word \<times> 32 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.HandlerBranchLink",@{typ Branch},
                      var("v8",@{typ "bool \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'HandlerBranchLink",@{typ "state \<Rightarrow> state"},
                         var("v8",@{typ "bool \<times> 32 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.HandlerBranchLinkParameter",@{typ Branch},
                      var("v9",@{typ "32 word \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'HandlerBranchLinkParameter",@{typ "state \<Rightarrow> state"},
                         var("v9",@{typ "32 word \<times> 32 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.HandlerBranchParameter",@{typ Branch},
                      var("v10",@{typ "32 word \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'HandlerBranchParameter",@{typ "state \<Rightarrow> state"},
                         var("v10",@{typ "32 word \<times> 32 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.TableBranchByte",@{typ Branch},
                      var("v11",@{typ "bool \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TableBranchByte",@{typ "state \<Rightarrow> state"},
                         var("v11",@{typ "bool \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Data",@{typ instruction},var("v12",@{typ Data}),@{theory}),
              cs(var("v12",@{typ Data}),
                 [(call
                     ("Data.AddSub",@{typ Data},
                      var("v13",@{typ "bool \<times> 4 word \<times> 4 word \<times> 12 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'AddSub",@{typ "state \<Rightarrow> state"},
                         var("v13",@{typ "bool \<times> 4 word \<times> 4 word \<times> 12 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.ArithLogicImmediate",@{typ Data},
                      var("v14",
                          @{typ
                          "4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 12 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ArithLogicImmediate",@{typ "state \<Rightarrow> state"},
                         var("v14",
                             @{typ
                             "4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 12 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.CountLeadingZeroes",@{typ Data},
                      var("v15",@{typ "4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CountLeadingZeroes",@{typ "state \<Rightarrow> state"},
                         var("v15",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Data.Move",@{typ Data},
                      var("v16",@{typ "bool \<times> bool \<times> 4 word \<times> 12 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Move",@{typ "state \<Rightarrow> state"},
                         var("v16",@{typ "bool \<times> bool \<times> 4 word \<times> 12 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.MoveHalfword",@{typ Data},
                      var("v17",@{typ "bool \<times> 4 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveHalfword",@{typ "state \<Rightarrow> state"},
                         var("v17",@{typ "bool \<times> 4 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Data.Register",@{typ Data},
                      var("v18",
                          @{typ
                          "4 word \<times>
                           bool \<times>
                           4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Register",@{typ "state \<Rightarrow> state"},
                         var("v18",
                             @{typ
                             "4 word \<times>
                              bool \<times>
                              4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.RegisterShiftedRegister",@{typ Data},
                      var("v19",
                          @{typ
                          "4 word \<times>
                           bool \<times>
                           4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'RegisterShiftedRegister",@{typ "state \<Rightarrow> state"},
                         var("v19",
                             @{typ
                             "4 word \<times>
                              bool \<times>
                              4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.ShiftImmediate",@{typ Data},
                      var("v20",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ShiftImmediate",@{typ "state \<Rightarrow> state"},
                         var("v20",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.ShiftRegister",@{typ Data},
                      var("v21",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ShiftRegister",@{typ "state \<Rightarrow> state"},
                         var("v21",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Data.TestCompareImmediate",@{typ Data},
                      var("v22",@{typ "2 word \<times> 4 word \<times> 12 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TestCompareImmediate",@{typ "state \<Rightarrow> state"},
                         var("v22",@{typ "2 word \<times> 4 word \<times> 12 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Data.TestCompareRegister",@{typ Data},
                      var("v23",
                          @{typ
                          "2 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TestCompareRegister",@{typ "state \<Rightarrow> state"},
                         var("v23",
                             @{typ
                             "2 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.Hint",@{typ instruction},var("v24",@{typ Hint}),@{theory}),
              cs(var("v24",@{typ Hint}),
                 [(Term.Const(@{const_name "SendEvent"},@{typ Hint}),
                   apply
                     (const("dfn'SendEvent",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "WaitForEvent"},@{typ Hint}),
                   apply
                     (const("dfn'WaitForEvent",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "WaitForInterrupt"},@{typ Hint}),
                   apply
                     (const("dfn'WaitForInterrupt",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (Term.Const(@{const_name "Yield"},@{typ Hint}),
                   apply
                     (const("dfn'Yield",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (call("Hint.Breakpoint",@{typ Hint},var_w("v25",32),@{theory}),
                   apply
                     (call
                        ("dfn'Breakpoint",@{typ "state \<Rightarrow> state"},var_w("v25",32),
                         @{theory}),var("state",qTy))),
                  (call("Hint.DataMemoryBarrier",@{typ Hint},var_w("v26",4),@{theory}),
                   apply
                     (call
                        ("dfn'DataMemoryBarrier",@{typ "state \<Rightarrow> state"},var_w("v26",4),
                         @{theory}),var("state",qTy))),
                  (call("Hint.DataSynchronizationBarrier",@{typ Hint},var_w("v27",4),@{theory}),
                   apply
                     (call
                        ("dfn'DataSynchronizationBarrier",@{typ "state \<Rightarrow> state"},
                         var_w("v27",4),@{theory}),var("state",qTy))),
                  (call("Hint.Debug",@{typ Hint},var_w("v28",4),@{theory}),
                   apply
                     (call("dfn'Debug",@{typ "state \<Rightarrow> state"},var_w("v28",4),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Hint.InstructionSynchronizationBarrier",@{typ Hint},var_w("v29",4),@{theory}),
                   apply
                     (call
                        ("dfn'InstructionSynchronizationBarrier",@{typ "state \<Rightarrow> state"},
                         var_w("v29",4),@{theory}),var("state",qTy))),
                  (call
                     ("Hint.PreloadData",@{typ Hint},
                      var("v30",@{typ "bool \<times> bool \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'PreloadData",@{typ "state \<Rightarrow> state"},
                         var("v30",@{typ "bool \<times> bool \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Hint.PreloadDataLiteral",@{typ Hint},
                      var("v31",@{typ "bool \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'PreloadDataLiteral",@{typ "state \<Rightarrow> state"},
                         var("v31",@{typ "bool \<times> 32 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Hint.PreloadInstruction",@{typ Hint},
                      var("v32",@{typ "bool \<times> 4 word \<times> offset1"}),@{theory}),
                   apply
                     (call
                        ("dfn'PreloadInstruction",@{typ "state \<Rightarrow> state"},
                         var("v32",@{typ "bool \<times> 4 word \<times> offset1"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Load",@{typ instruction},var("v33",@{typ Load}),@{theory}),
              cs(var("v33",@{typ Load}),
                 [(call
                     ("Load.LoadByte",@{typ Load},
                      var("v34",
                          @{typ
                          "bool \<times>
                           bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadByte",@{typ "state \<Rightarrow> state"},
                         var("v34",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadByteLiteral",@{typ Load},
                      var("v35",@{typ "bool \<times> bool \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadByteLiteral",@{typ "state \<Rightarrow> state"},
                         var("v35",@{typ "bool \<times> bool \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadByteUnprivileged",@{typ Load},
                      var("v36",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadByteUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v36",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadDual",@{typ Load},
                      var("v37",
                          @{typ
                          "bool \<times>
                           bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadDual",@{typ "state \<Rightarrow> state"},
                         var("v37",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadDualLiteral",@{typ Load},
                      var("v38",@{typ "bool \<times> 4 word \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadDualLiteral",@{typ "state \<Rightarrow> state"},
                         var("v38",@{typ "bool \<times> 4 word \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadExclusive",@{typ Load},
                      var("v39",@{typ "4 word \<times> 4 word \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LoadExclusive",@{typ "state \<Rightarrow> state"},
                         var("v39",@{typ "4 word \<times> 4 word \<times> 32 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LoadExclusiveByte",@{typ Load},
                      var("v40",@{typ "4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LoadExclusiveByte",@{typ "state \<Rightarrow> state"},
                         var("v40",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadExclusiveDoubleword",@{typ Load},
                      var("v41",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LoadExclusiveDoubleword",@{typ "state \<Rightarrow> state"},
                         var("v41",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LoadExclusiveHalf",@{typ Load},
                      var("v42",@{typ "4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LoadExclusiveHalf",@{typ "state \<Rightarrow> state"},
                         var("v42",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadHalf",@{typ Load},
                      var("v43",
                          @{typ
                          "bool \<times>
                           bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadHalf",@{typ "state \<Rightarrow> state"},
                         var("v43",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadHalfLiteral",@{typ Load},
                      var("v44",@{typ "bool \<times> bool \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadHalfLiteral",@{typ "state \<Rightarrow> state"},
                         var("v44",@{typ "bool \<times> bool \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadHalfUnprivileged",@{typ Load},
                      var("v45",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadHalfUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v45",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadLiteral",@{typ Load},
                      var("v46",@{typ "bool \<times> 4 word \<times> 32 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LoadLiteral",@{typ "state \<Rightarrow> state"},
                         var("v46",@{typ "bool \<times> 4 word \<times> 32 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LoadMultiple",@{typ Load},
                      var("v47",
                          @{typ "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadMultiple",@{typ "state \<Rightarrow> state"},
                         var("v47",
                             @{typ
                             "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadMultipleExceptionReturn",@{typ Load},
                      var("v48",
                          @{typ "bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadMultipleExceptionReturn",@{typ "state \<Rightarrow> state"},
                         var("v48",
                             @{typ
                             "bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadMultipleUserRegisters",@{typ Load},
                      var("v49",@{typ "bool \<times> bool \<times> 4 word \<times> 15 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadMultipleUserRegisters",@{typ "state \<Rightarrow> state"},
                         var("v49",@{typ "bool \<times> bool \<times> 4 word \<times> 15 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadSignedByteUnprivileged",@{typ Load},
                      var("v50",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadSignedByteUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v50",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadUnprivileged",@{typ Load},
                      var("v51",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v51",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Load.LoadWord",@{typ Load},
                      var("v52",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LoadWord",@{typ "state \<Rightarrow> state"},
                         var("v52",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.Media",@{typ instruction},var("v53",@{typ Media}),@{theory}),
              cs(var("v53",@{typ Media}),
                 [(call
                     ("Media.BitFieldClearOrInsert",@{typ Media},
                      var("v54",@{typ "4 word \<times> 4 word \<times> nat \<times> nat"}),@{theory}),
                   apply
                     (call
                        ("dfn'BitFieldClearOrInsert",@{typ "state \<Rightarrow> state"},
                         var("v54",@{typ "4 word \<times> 4 word \<times> nat \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.BitFieldExtract",@{typ Media},
                      var("v55",
                          @{typ "bool \<times> 4 word \<times> 4 word \<times> nat \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BitFieldExtract",@{typ "state \<Rightarrow> state"},
                         var("v55",
                             @{typ "bool \<times> 4 word \<times> 4 word \<times> nat \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.ByteReverse",@{typ Media},var("v56",@{typ "4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ByteReverse",@{typ "state \<Rightarrow> state"},
                         var("v56",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Media.ByteReversePackedHalfword",@{typ Media},
                      var("v57",@{typ "4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ByteReversePackedHalfword",@{typ "state \<Rightarrow> state"},
                         var("v57",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Media.ByteReverseSignedHalfword",@{typ Media},
                      var("v58",@{typ "4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ByteReverseSignedHalfword",@{typ "state \<Rightarrow> state"},
                         var("v58",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Media.ExtendByte",@{typ Media},
                      var("v59",
                          @{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ExtendByte",@{typ "state \<Rightarrow> state"},
                         var("v59",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.ExtendByte16",@{typ Media},
                      var("v60",
                          @{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ExtendByte16",@{typ "state \<Rightarrow> state"},
                         var("v60",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.ExtendHalfword",@{typ Media},
                      var("v61",
                          @{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ExtendHalfword",@{typ "state \<Rightarrow> state"},
                         var("v61",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.PackHalfword",@{typ Media},
                      var("v62",
                          @{typ
                          "SRType \<times>
                           nat \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'PackHalfword",@{typ "state \<Rightarrow> state"},
                         var("v62",
                             @{typ
                             "SRType \<times>
                              nat \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.ReverseBits",@{typ Media},var("v63",@{typ "4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ReverseBits",@{typ "state \<Rightarrow> state"},
                         var("v63",@{typ "4 word \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Media.Saturate",@{typ Media},
                      var("v64",
                          @{typ
                          "SRType \<times>
                           nat \<times> nat \<times> bool \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Saturate",@{typ "state \<Rightarrow> state"},
                         var("v64",
                             @{typ
                             "SRType \<times>
                              nat \<times> nat \<times> bool \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.Saturate16",@{typ Media},
                      var("v65",@{typ "nat \<times> bool \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Saturate16",@{typ "state \<Rightarrow> state"},
                         var("v65",@{typ "nat \<times> bool \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.SaturatingAddSubtract",@{typ Media},
                      var("v66",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SaturatingAddSubtract",@{typ "state \<Rightarrow> state"},
                         var("v66",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Media.SelectBytes",@{typ Media},
                      var("v67",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SelectBytes",@{typ "state \<Rightarrow> state"},
                         var("v67",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Multiply",@{typ instruction},var("v68",@{typ Multiply}),@{theory}),
              cs(var("v68",@{typ Multiply}),
                 [(call
                     ("Multiply.Multiply32",@{typ Multiply},
                      var("v69",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Multiply32",@{typ "state \<Rightarrow> state"},
                         var("v69",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.MultiplyAccumulate",@{typ Multiply},
                      var("v70",
                          @{typ
                          "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MultiplyAccumulate",@{typ "state \<Rightarrow> state"},
                         var("v70",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.MultiplyAccumulateAccumulate",@{typ Multiply},
                      var("v71",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MultiplyAccumulateAccumulate",@{typ "state \<Rightarrow> state"},
                         var("v71",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.MultiplyLong",@{typ Multiply},
                      var("v72",
                          @{typ
                          "bool \<times>
                           bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MultiplyLong",@{typ "state \<Rightarrow> state"},
                         var("v72",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.MultiplySubtract",@{typ Multiply},
                      var("v73",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MultiplySubtract",@{typ "state \<Rightarrow> state"},
                         var("v73",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.Signed16Multiply32Accumulate",@{typ Multiply},
                      var("v74",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Signed16Multiply32Accumulate",@{typ "state \<Rightarrow> state"},
                         var("v74",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.Signed16Multiply32Result",@{typ Multiply},
                      var("v75",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Signed16Multiply32Result",@{typ "state \<Rightarrow> state"},
                         var("v75",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.Signed16Multiply64Accumulate",@{typ Multiply},
                      var("v76",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Signed16Multiply64Accumulate",@{typ "state \<Rightarrow> state"},
                         var("v76",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.Signed16x32Multiply32Accumulate",@{typ Multiply},
                      var("v77",
                          @{typ
                          "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Signed16x32Multiply32Accumulate",@{typ "state \<Rightarrow> state"},
                         var("v77",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.Signed16x32Multiply32Result",@{typ Multiply},
                      var("v78",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'Signed16x32Multiply32Result",@{typ "state \<Rightarrow> state"},
                         var("v78",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.SignedMostSignificantMultiply",@{typ Multiply},
                      var("v79",
                          @{typ
                          "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedMostSignificantMultiply",@{typ "state \<Rightarrow> state"},
                         var("v79",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.SignedMostSignificantMultiplySubtract",@{typ Multiply},
                      var("v80",
                          @{typ
                          "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedMostSignificantMultiplySubtract",
                         @{typ "state \<Rightarrow> state"},
                         var("v80",
                             @{typ
                             "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.SignedMultiplyDual",@{typ Multiply},
                      var("v81",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedMultiplyDual",@{typ "state \<Rightarrow> state"},
                         var("v81",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Multiply.SignedMultiplyLongDual",@{typ Multiply},
                      var("v82",
                          @{typ
                          "bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedMultiplyLongDual",@{typ "state \<Rightarrow> state"},
                         var("v82",
                             @{typ
                             "bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.SIMD",@{typ instruction},var("v83",@{typ SIMD}),@{theory}),
              cs(var("v83",@{typ SIMD}),
                 [(call
                     ("SIMD.SignedAddSub16",@{typ SIMD},
                      var("v84",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v84",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.SignedAddSub8",@{typ SIMD},
                      var("v85",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v85",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.SignedHalvingAddSub16",@{typ SIMD},
                      var("v86",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedHalvingAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v86",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.SignedHalvingAddSub8",@{typ SIMD},
                      var("v87",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedHalvingAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v87",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.SignedSaturatingAddSub16",@{typ SIMD},
                      var("v88",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedSaturatingAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v88",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.SignedSaturatingAddSub8",@{typ SIMD},
                      var("v89",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SignedSaturatingAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v89",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedAddSub16",@{typ SIMD},
                      var("v90",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v90",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedAddSub8",@{typ SIMD},
                      var("v91",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v91",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedHalvingAddSub16",@{typ SIMD},
                      var("v92",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedHalvingAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v92",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedHalvingAddSub8",@{typ SIMD},
                      var("v93",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedHalvingAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v93",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedSaturatingAddSub16",@{typ SIMD},
                      var("v94",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedSaturatingAddSub16",@{typ "state \<Rightarrow> state"},
                         var("v94",@{typ "2 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedSaturatingAddSub8",@{typ SIMD},
                      var("v95",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedSaturatingAddSub8",@{typ "state \<Rightarrow> state"},
                         var("v95",@{typ "bool \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("SIMD.UnsignedSumAbsoluteDifferences",@{typ SIMD},
                      var("v96",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'UnsignedSumAbsoluteDifferences",@{typ "state \<Rightarrow> state"},
                         var("v96",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.Store",@{typ instruction},var("v97",@{typ Store}),@{theory}),
              cs(var("v97",@{typ Store}),
                 [(call
                     ("Store.StoreByte",@{typ Store},
                      var("v98",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreByte",@{typ "state \<Rightarrow> state"},
                         var("v98",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreByteUnprivileged",@{typ Store},
                      var("v99",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreByteUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v99",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreDual",@{typ Store},
                      var("v100",
                          @{typ
                          "bool \<times>
                           bool \<times>
                           bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreDual",@{typ "state \<Rightarrow> state"},
                         var("v100",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreExclusive",@{typ Store},
                      var("v101",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreExclusive",@{typ "state \<Rightarrow> state"},
                         var("v101",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreExclusiveByte",@{typ Store},
                      var("v102",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'StoreExclusiveByte",@{typ "state \<Rightarrow> state"},
                         var("v102",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.StoreExclusiveDoubleword",@{typ Store},
                      var("v103",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreExclusiveDoubleword",@{typ "state \<Rightarrow> state"},
                         var("v103",@{typ "4 word \<times> 4 word \<times> 4 word \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreExclusiveHalf",@{typ Store},
                      var("v104",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'StoreExclusiveHalf",@{typ "state \<Rightarrow> state"},
                         var("v104",@{typ "4 word \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.StoreHalf",@{typ Store},
                      var("v105",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreHalf",@{typ "state \<Rightarrow> state"},
                         var("v105",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreHalfUnprivileged",@{typ Store},
                      var("v106",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreHalfUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v106",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreMultiple",@{typ Store},
                      var("v107",
                          @{typ "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreMultiple",@{typ "state \<Rightarrow> state"},
                         var("v107",
                             @{typ
                             "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreMultipleUserRegisters",@{typ Store},
                      var("v108",@{typ "bool \<times> bool \<times> 4 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreMultipleUserRegisters",@{typ "state \<Rightarrow> state"},
                         var("v108",@{typ "bool \<times> bool \<times> 4 word \<times> 16 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreUnprivileged",@{typ Store},
                      var("v109",
                          @{typ
                          "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreUnprivileged",@{typ "state \<Rightarrow> state"},
                         var("v109",
                             @{typ
                             "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("Store.StoreWord",@{typ Store},
                      var("v110",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreWord",@{typ "state \<Rightarrow> state"},
                         var("v110",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"}),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.System",@{typ instruction},var("v111",@{typ System}),@{theory}),
              cs(var("v111",@{typ System}),
                 [(Term.Const(@{const_name "ExceptionReturn"},@{typ System}),
                   apply
                     (const("dfn'ExceptionReturn",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.ChangeProcessorState",@{typ System},
                      var("v112",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> bool \<times> bool \<times> 5 word option"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ChangeProcessorState",@{typ "state \<Rightarrow> state"},
                         var("v112",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> bool \<times> bool \<times> 5 word option"}),
                         @{theory}),var("state",qTy))),
                  (call("System.EnterxLeavex",@{typ System},var_b"v113",@{theory}),
                   apply
                     (call
                        ("dfn'EnterxLeavex",@{typ "state \<Rightarrow> state"},var_b"v113",@{theory}),
                      var("state",qTy))),
                  (call("System.HypervisorCall",@{typ System},var_w("v114",16),@{theory}),
                   apply
                     (call
                        ("dfn'HypervisorCall",@{typ "state \<Rightarrow> state"},var_w("v114",16),
                         @{theory}),var("state",qTy))),
                  (call
                     ("System.MoveToBankedOrSpecialRegister",@{typ System},
                      var("v115",@{typ "bool \<times> 5 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveToBankedOrSpecialRegister",@{typ "state \<Rightarrow> state"},
                         var("v115",@{typ "bool \<times> 5 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.MoveToRegisterFromBankedOrSpecial",@{typ System},
                      var("v116",@{typ "bool \<times> 5 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveToRegisterFromBankedOrSpecial",@{typ "state \<Rightarrow> state"},
                         var("v116",@{typ "bool \<times> 5 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.MoveToRegisterFromSpecial",@{typ System},
                      var("v117",@{typ "bool \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveToRegisterFromSpecial",@{typ "state \<Rightarrow> state"},
                         var("v117",@{typ "bool \<times> 4 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("System.MoveToSpecialFromImmediate",@{typ System},
                      var("v118",@{typ "bool \<times> 32 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveToSpecialFromImmediate",@{typ "state \<Rightarrow> state"},
                         var("v118",@{typ "bool \<times> 32 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.MoveToSpecialFromRegister",@{typ System},
                      var("v119",@{typ "bool \<times> 4 word \<times> 4 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MoveToSpecialFromRegister",@{typ "state \<Rightarrow> state"},
                         var("v119",@{typ "bool \<times> 4 word \<times> 4 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.ReturnFromException",@{typ System},
                      var("v120",@{typ "bool \<times> bool \<times> bool \<times> 4 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ReturnFromException",@{typ "state \<Rightarrow> state"},
                         var("v120",@{typ "bool \<times> bool \<times> bool \<times> 4 word"}),
                         @{theory}),var("state",qTy))),
                  (call("System.SecureMonitorCall",@{typ System},var_w("v121",4),@{theory}),
                   apply
                     (call
                        ("dfn'SecureMonitorCall",@{typ "state \<Rightarrow> state"},var_w("v121",4),
                         @{theory}),var("state",qTy))),
                  (call("System.Setend",@{typ System},var_b"v122",@{theory}),
                   apply
                     (call("dfn'Setend",@{typ "state \<Rightarrow> state"},var_b"v122",@{theory}),
                      var("state",qTy))),
                  (call
                     ("System.StoreReturnState",@{typ System},
                      var("v123",@{typ "bool \<times> bool \<times> bool \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'StoreReturnState",@{typ "state \<Rightarrow> state"},
                         var("v123",@{typ "bool \<times> bool \<times> bool \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call("System.SupervisorCall",@{typ System},var_w("v124",32),@{theory}),
                   apply
                     (call
                        ("dfn'SupervisorCall",@{typ "state \<Rightarrow> state"},var_w("v124",32),
                         @{theory}),var("state",qTy)))],@{context})),
             (call("instruction.VFP",@{typ instruction},var("v125",@{typ VFP}),@{theory}),
              cs(var("v125",@{typ VFP}),
                 [(call
                     ("VFP.vabs",@{typ VFP},
                      var("v126",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vabs",@{typ "state \<Rightarrow> state"},
                         var("v126",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vadd",@{typ VFP},
                      var("v127",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vadd",@{typ "state \<Rightarrow> state"},
                         var("v127",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vcmp",@{typ VFP},
                      var("v128",@{typ "bool \<times> 5 word \<times> 5 word option"}),@{theory}),
                   apply
                     (call
                        ("dfn'vcmp",@{typ "state \<Rightarrow> state"},
                         var("v128",@{typ "bool \<times> 5 word \<times> 5 word option"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vcvt_float",@{typ VFP},
                      var("v129",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vcvt_float",@{typ "state \<Rightarrow> state"},
                         var("v129",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vcvt_from_integer",@{typ VFP},
                      var("v130",@{typ "bool \<times> bool \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vcvt_from_integer",@{typ "state \<Rightarrow> state"},
                         var("v130",@{typ "bool \<times> bool \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vcvt_to_integer",@{typ VFP},
                      var("v131",
                          @{typ "bool \<times> bool \<times> bool \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vcvt_to_integer",@{typ "state \<Rightarrow> state"},
                         var("v131",
                             @{typ
                             "bool \<times> bool \<times> bool \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vdiv",@{typ VFP},
                      var("v132",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vdiv",@{typ "state \<Rightarrow> state"},
                         var("v132",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vfma_vfms",@{typ VFP},
                      var("v133",
                          @{typ
                          "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vfma_vfms",@{typ "state \<Rightarrow> state"},
                         var("v133",
                             @{typ
                             "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vfnma_vfnms",@{typ VFP},
                      var("v134",
                          @{typ
                          "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vfnma_vfnms",@{typ "state \<Rightarrow> state"},
                         var("v134",
                             @{typ
                             "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vldm",@{typ VFP},
                      var("v135",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vldm",@{typ "state \<Rightarrow> state"},
                         var("v135",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vldr",@{typ VFP},
                      var("v136",
                          @{typ
                          "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vldr",@{typ "state \<Rightarrow> state"},
                         var("v136",
                             @{typ
                             "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vmla_vmls",@{typ VFP},
                      var("v137",
                          @{typ
                          "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vmla_vmls",@{typ "state \<Rightarrow> state"},
                         var("v137",
                             @{typ
                             "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vmov",@{typ VFP},
                      var("v138",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vmov",@{typ "state \<Rightarrow> state"},
                         var("v138",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vmov_double",@{typ VFP},
                      var("v139",@{typ "bool \<times> 4 word \<times> 4 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vmov_double",@{typ "state \<Rightarrow> state"},
                         var("v139",@{typ "bool \<times> 4 word \<times> 4 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vmov_imm",@{typ VFP},
                      var("v140",@{typ "bool \<times> 5 word \<times> 64 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vmov_imm",@{typ "state \<Rightarrow> state"},
                         var("v140",@{typ "bool \<times> 5 word \<times> 64 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vmov_single",@{typ VFP},
                      var("v141",@{typ "bool \<times> 4 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vmov_single",@{typ "state \<Rightarrow> state"},
                         var("v141",@{typ "bool \<times> 4 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vmov_two_singles",@{typ VFP},
                      var("v142",@{typ "bool \<times> 4 word \<times> 4 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vmov_two_singles",@{typ "state \<Rightarrow> state"},
                         var("v142",@{typ "bool \<times> 4 word \<times> 4 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call("VFP.vmrs",@{typ VFP},var_w("v143",4),@{theory}),
                   apply
                     (call("dfn'vmrs",@{typ "state \<Rightarrow> state"},var_w("v143",4),@{theory}),
                      var("state",qTy))),
                  (call("VFP.vmsr",@{typ VFP},var_w("v144",4),@{theory}),
                   apply
                     (call("dfn'vmsr",@{typ "state \<Rightarrow> state"},var_w("v144",4),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vmul",@{typ VFP},
                      var("v145",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vmul",@{typ "state \<Rightarrow> state"},
                         var("v145",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vneg",@{typ VFP},
                      var("v146",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vneg",@{typ "state \<Rightarrow> state"},
                         var("v146",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vneg_mul",@{typ VFP},
                      var("v147",
                          @{typ
                          "bool \<times> VFPNegMul \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vneg_mul",@{typ "state \<Rightarrow> state"},
                         var("v147",
                             @{typ
                             "bool \<times>
                              VFPNegMul \<times> 5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vsqrt",@{typ VFP},
                      var("v148",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'vsqrt",@{typ "state \<Rightarrow> state"},
                         var("v148",@{typ "bool \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("VFP.vstm",@{typ VFP},
                      var("v149",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vstm",@{typ "state \<Rightarrow> state"},
                         var("v149",
                             @{typ
                             "bool \<times>
                              bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vstr",@{typ VFP},
                      var("v150",
                          @{typ
                          "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vstr",@{typ "state \<Rightarrow> state"},
                         var("v150",
                             @{typ
                             "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("VFP.vsub",@{typ VFP},
                      var("v151",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'vsub",@{typ "state \<Rightarrow> state"},
                         var("v151",@{typ "bool \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy)))],@{context}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Fetch",
   close
     (var("state",qTy),
      let'
        (var("v",@{typ InstrSet}),
         apply
           (call("CurrentInstrSet",@{typ "state \<Rightarrow> InstrSet"},lu,@{theory}),
            var("state",qTy)),
         itb([(bop(Or,eq(var("v",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",@{theory})),
                   eq(call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                      lc("ARMv4","Architecture",@{theory}))),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.Encoding",tp[var("state",qTy),lc("Encoding_ARM","Encoding",@{theory})],
                     @{theory}),
                  let'
                    (tp[var_w("v",32),var("s",qTy)],
                     apply
                       (call
                          ("MemA",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                           tp[apply
                                (call
                                   ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),
                                    @{theory}),lc("RName_PC","RName",@{theory})),ln 4],@{theory}),
                        var("s",qTy)),
                     tp[call("MachineCode.ARM",@{typ MachineCode},var_w("v",32),@{theory}),
                        var("s",qTy)]))),
              (eq(var("v",@{typ InstrSet}),lc("InstrSet_Jazelle","InstrSet",@{theory})),
               tp[call("MachineCode.BadCode",@{typ MachineCode},ls"Fetch",@{theory}),
                  var("state",qTy)])],
             let'
               (var_w("v0",32),
                apply
                  (call("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("state",qTy),@{theory}),
                   lc("RName_PC","RName",@{theory})),
                let'
                  (tp[var_w("v1",16),var("s",qTy)],
                   apply
                     (call
                        ("MemA",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                         tp[var_w("v0",32),ln 2],@{theory}),var("state",qTy)),
                   ite(bop(And,eq(ex(var_w("v1",16),ln 15,ln 13,(Word_Lib.mk_wordT 3)),lw(7,3)),
                           mop(Not,eq(ex(var_w("v1",16),ln 12,ln 11,(Word_Lib.mk_wordT 2)),lw(0,2)))),
                       let'
                         (tp[var_w("v2",16),var("s",qTy)],
                          apply
                            (call
                               ("MemA",@{typ "state \<Rightarrow> (16 word \<times> state)"},
                                tp[bop(Add,var_w("v0",32),lw(2,32)),ln 2],@{theory}),
                             rupd
                               ("state.Encoding",
                                tp[var("s",qTy),lc("Encoding_Thumb2","Encoding",@{theory})],
                                @{theory})),
                          tp[call
                               ("MachineCode.Thumb2",@{typ MachineCode},
                                tp[var_w("v1",16),var_w("v2",16)],@{theory}),var("s",qTy)]),
                       let'
                         (var("s",qTy),
                          rupd
                            ("state.Encoding",
                             tp[var("s",qTy),lc("Encoding_Thumb","Encoding",@{theory})],@{theory}),
                          tp[ite(bop(Or,
                                     eq(var("v",@{typ InstrSet}),
                                        lc("InstrSet_Thumb","InstrSet",@{theory})),
                                     mop(Not,
                                         apply
                                           (call
                                              ("HaveThumbEE",@{typ "state \<Rightarrow> bool"},lu,
                                               @{theory}),var("s",qTy)))),
                                 call
                                   ("MachineCode.Thumb",@{typ MachineCode},var_w("v1",16),@{theory}),
                                 call
                                   ("MachineCode.ThumbEE",@{typ MachineCode},var_w("v1",16),
                                    @{theory})),var("s",qTy)]))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Do",
   close
     (tp[var_w("cond",4),var_b"defined"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            let'
              (var("s",qTy),
               rupd("state.CurrentCondition",tp[var("state",qTy),var_w("cond",4)],@{theory}),
               tp[apply
                    (call("ConditionPassed",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                     var("s",qTy)),var("s",qTy)]),
            tp[bop(And,var_b"v",var_b"defined"),
               rupd
                 ("state.undefined",tp[var("s",qTy),bop(And,var_b"v",mop(Not,var_b"defined"))],
                  @{theory})]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Skip",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         ite(call("state.undefined",HOLogic.boolT,var("state",qTy),@{theory}),
             call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}),
             Term.Const(@{const_name "NoOperation"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UndefinedARM",
   close
     (var_w("cond",4),
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            let'
              (var("s",qTy),
               rupd("state.CurrentCondition",tp[var("state",qTy),var_w("cond",4)],@{theory}),
               tp[apply
                    (call("ConditionPassed",@{typ "state \<Rightarrow> bool"},lu,@{theory}),
                     var("s",qTy)),var("s",qTy)]),
            tp[ite(var_b"v",call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}),
                   Term.Const(@{const_name "NoOperation"},@{typ instruction})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UndefinedThumb",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",4),var("s",qTy)],
            apply
              (call
                 ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("UndefinedARM",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                  var_w("v",4),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DECODE_UNPREDICTABLE",
   close
     (tp[var("mc",@{typ MachineCode}),var_s"s"],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                   call
                     ("exception.UNPREDICTABLE",@{typ exception},
                      cc[ls"Decode ",
                         cs(var("mc",@{typ MachineCode}),
                            [(call("MachineCode.ARM",@{typ MachineCode},var_w("opc",32),@{theory}),
                              cc[mop(Cast(@{typ string}),
                                     mop(Cast(@{typ "bool list"}),var_w("opc",32))),ls"; ARM; "]),
                             (call("MachineCode.Thumb",@{typ MachineCode},var_w("opc",16),@{theory}),
                              cc[mop(Cast(@{typ string}),
                                     mop(Cast(@{typ "bool list"}),var_w("opc",16))),ls"; Thumb; "]),
                             (call
                                ("MachineCode.ThumbEE",@{typ MachineCode},var_w("opc",16),@{theory}),
                              cc[mop(Cast(@{typ string}),
                                     mop(Cast(@{typ "bool list"}),var_w("opc",16))),ls"; ThumbEE; "]),
                             (call
                                ("MachineCode.Thumb2",@{typ MachineCode},
                                 tp[var_w("opc1",16),var_w("opc2",16)],@{theory}),
                              cc[mop(Cast(@{typ string}),
                                     mop(Cast(@{typ "bool list"}),var_w("opc1",16))),ls", ",
                                 mop(Cast(@{typ string}),
                                     mop(Cast(@{typ "bool list"}),var_w("opc2",16))),ls"; Thumb2; "]),
                             (call("MachineCode.BadCode",@{typ MachineCode},var_s"x",@{theory}),
                              var_s"x")],@{context}),var_s"s"],@{theory}),@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeHint",
   close
     (tp[var_w("cond",4),var_w("op",8)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 eq(call("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                    lc("ARMv6T2","Architecture",@{theory})),
                 bop(And,eq(ex(var_w("op",8),ln 7,ln 4,w4),lw(15,4)),
                     bop(And,
                         eq(call("state.Encoding",@{typ Encoding},var("state",qTy),@{theory}),
                            lc("Encoding_ARM","Encoding",@{theory})),
                         eq(call
                              ("state.Architecture",@{typ Architecture},var("state",qTy),@{theory}),
                            lc("ARMv6K","Architecture",@{theory}))))),
             tp[Term.Const(@{const_name "NoOperation"},@{typ instruction}),var("state",qTy)],
             let'
               (tp[var_b"v",var("s",qTy)],
                apply
                  (call
                     ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                      tp[var_w("cond",4),
                         bop(Or,
                             bop(Ge,
                                 apply
                                   (call
                                      ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                                    var("state",qTy)),ln 7),
                             bop(And,
                                 eq(call
                                      ("state.Encoding",@{typ Encoding},var("state",qTy),@{theory}),
                                    lc("Encoding_ARM","Encoding",@{theory})),
                                 eq(call
                                      ("state.Architecture",@{typ Architecture},var("state",qTy),
                                       @{theory}),lc("ARMv6K","Architecture",@{theory}))))],
                      @{theory}),var("state",qTy)),
                tp[ite(var_b"v",
                       let'
                         (tp[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                             var_b"b'1",var_b"b'0"],
                          call
                            ("boolify'8",
                             @{typ
                             "bool \<times>
                              bool \<times>
                              bool \<times>
                              bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                             var_w("op",8),@{theory}),
                          itb([(bop(And,mop(Not,var_b"b'7"),
                                    bop(And,mop(Not,var_b"b'6"),
                                        bop(And,mop(Not,var_b"b'5"),
                                            bop(And,mop(Not,var_b"b'4"),
                                                bop(And,mop(Not,var_b"b'3"),
                                                    bop(And,mop(Not,var_b"b'2"),
                                                        bop(And,mop(Not,var_b"b'1"),var_b"b'0"))))))),
                                call
                                  ("instruction.Hint",@{typ instruction},
                                   Term.Const(@{const_name "Yield"},@{typ Hint}),@{theory})),
                               (bop(And,mop(Not,var_b"b'7"),
                                    bop(And,mop(Not,var_b"b'6"),
                                        bop(And,mop(Not,var_b"b'5"),
                                            bop(And,mop(Not,var_b"b'4"),
                                                bop(And,mop(Not,var_b"b'3"),
                                                    bop(And,mop(Not,var_b"b'2"),
                                                        bop(And,var_b"b'1",mop(Not,var_b"b'0")))))))),
                                call
                                  ("instruction.Hint",@{typ instruction},
                                   Term.Const(@{const_name "WaitForEvent"},@{typ Hint}),@{theory})),
                               (bop(And,mop(Not,var_b"b'7"),
                                    bop(And,mop(Not,var_b"b'6"),
                                        bop(And,mop(Not,var_b"b'5"),
                                            bop(And,mop(Not,var_b"b'4"),
                                                bop(And,mop(Not,var_b"b'3"),
                                                    bop(And,mop(Not,var_b"b'2"),
                                                        bop(And,var_b"b'1",var_b"b'0"))))))),
                                call
                                  ("instruction.Hint",@{typ instruction},
                                   Term.Const(@{const_name "WaitForInterrupt"},@{typ Hint}),
                                   @{theory})),
                               (bop(And,mop(Not,var_b"b'7"),
                                    bop(And,mop(Not,var_b"b'6"),
                                        bop(And,mop(Not,var_b"b'5"),
                                            bop(And,mop(Not,var_b"b'4"),
                                                bop(And,mop(Not,var_b"b'3"),
                                                    bop(And,var_b"b'2",
                                                        bop(And,mop(Not,var_b"b'1"),
                                                            mop(Not,var_b"b'0")))))))),
                                call
                                  ("instruction.Hint",@{typ instruction},
                                   Term.Const(@{const_name "SendEvent"},@{typ Hint}),@{theory})),
                               (bop(And,var_b"b'7",
                                    bop(And,var_b"b'6",bop(And,var_b"b'5",var_b"b'4"))),
                                call
                                  ("instruction.Hint",@{typ instruction},
                                   call
                                     ("Hint.Debug",@{typ Hint},
                                      mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                      @{theory}),@{theory}))],
                              Term.Const(@{const_name "NoOperation"},@{typ instruction}))),
                       apply
                         (call("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                          var("s",qTy))),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeParallelAdditionSubtraction",
   close
     (tp[var_w("op1",2),var_w("op2",3),var_w("U",1),var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],
      ite(eq(var_w("U",1),lw(1,1)),
          let'
            (tp[var_w("v#0",2),var_b"v#1",var_b"v#2",var_b"v#3"],
             tp[var_w("op1",2),
                call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("op2",3),@{theory})],
             cs(tp[var_w("v#0",2),var_b"v#1",var_b"v#2",var_b"v#3"],
                [(tp[var_w("v",2),lf,var_b"x'1",var_b"x'0"],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),lt,lt,lt],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),lt,lf,lf],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),var_b"v0",var_b"v1",var_b"v2"],
                  call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))],@{context})),
          let'
            (tp[var_w("v#4",2),var_b"v#5",var_b"v#6",var_b"v#7"],
             tp[var_w("op1",2),
                call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("op2",3),@{theory})],
             cs(tp[var_w("v#4",2),var_b"v#5",var_b"v#6",var_b"v#7"],
                [(tp[var_w("v",2),lf,var_b"x'1",var_b"x'0"],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),lt,lt,lt],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),lt,lf,lf],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory})),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],@{theory}),@{theory}))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))),
                 (tp[var_w("v",2),var_b"v0",var_b"v1",var_b"v2"],
                  call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeVFP",
   close
     (var_w("w",32),
      close
        (var("state",qTy),
         let'
           (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",
               var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
               var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
            call
              ("boolify'28",
               @{typ
               "bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
               ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),@{theory}),
            itb([(var_b"b'25",
                  ite(bop(And,var_b"b'27",
                          bop(And,var_b"b'26",
                              bop(And,mop(Not,var_b"b'24"),
                                  bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9"))))),
                      itb([(bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'4")),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("op2",1),mop(Cast w1,ll[var_b"b'6"]),
                                     let'
                                       (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                        let'
                                          (var_w("Vd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                           let'
                                             (var_w("Vn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                                 let'
                                                   (var_b"dp_operation",
                                                    eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                    let'
                                                      (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                       ite(var_b"dp_operation",
                                                           tp[cc[var_w("D",1),var_w("Vd",4)],
                                                              cc[var_w("N",1),var_w("Vn",4)],
                                                              cc[var_w("M",1),var_w("Vm",4)]],
                                                           tp[cc[var_w("Vd",4),var_w("D",1)],
                                                              cc[var_w("Vn",4),var_w("N",1)],
                                                              cc[var_w("Vm",4),var_w("M",1)]]),
                                                       tp[tp[mop(Not,
                                                                 eq(call
                                                                      ("state.VFPExtension",
                                                                       @{typ VFPExtension},
                                                                       var("state",qTy),@{theory}),
                                                                    lc("NoVFP","VFPExtension",
                                                                       @{theory}))),
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                cs(mop(Cast (Word_Lib.mk_wordT 2),
                                                                       ll[var_b"b'21",var_b"b'20"]),
                                                                   [(var_w("v",2),
                                                                     itb([(eq(var_w("v",2),lw(0,2)),
                                                                           call
                                                                             ("VFP.vmla_vmls",
                                                                              @{typ VFP},
                                                                              tp[var_b"dp_operation",
                                                                                 eq(var_w("op2",1),
                                                                                    lw(0,1)),
                                                                                 var_w("d",5),
                                                                                 var_w("n",5),
                                                                                 var_w("m",5)],
                                                                              @{theory})),
                                                                          (eq(var_w("v",2),lw(1,2)),
                                                                           call
                                                                             ("VFP.vneg_mul",
                                                                              @{typ VFP},
                                                                              tp[var_b"dp_operation",
                                                                                 ite(eq(var_w("op2",1),
                                                                                        lw(1,1)),
                                                                                     lc("VFPNegMul_VNMLA",
                                                                                        "VFPNegMul",
                                                                                        @{theory}),
                                                                                     lc("VFPNegMul_VNMLS",
                                                                                        "VFPNegMul",
                                                                                        @{theory})),
                                                                                 var_w("d",5),
                                                                                 var_w("n",5),
                                                                                 var_w("m",5)],
                                                                              @{theory})),
                                                                          (eq(var_w("v",2),lw(2,2)),
                                                                           ite(eq(var_w("op2",1),
                                                                                  lw(1,1)),
                                                                               call
                                                                                 ("VFP.vneg_mul",
                                                                                  @{typ VFP},
                                                                                  tp[var_b"dp_operation",
                                                                                     lc("VFPNegMul_VNMUL",
                                                                                        "VFPNegMul",
                                                                                        @{theory}),
                                                                                     var_w("d",5),
                                                                                     var_w("n",5),
                                                                                     var_w("m",5)],
                                                                                  @{theory}),
                                                                               call
                                                                                 ("VFP.vmul",
                                                                                  @{typ VFP},
                                                                                  tp[var_b"dp_operation",
                                                                                     var_w("d",5),
                                                                                     var_w("n",5),
                                                                                     var_w("m",5)],
                                                                                  @{theory}))),
                                                                          (eq(var_w("v",2),lw(3,2)),
                                                                           ite(eq(var_w("op2",1),
                                                                                  lw(1,1)),
                                                                               call
                                                                                 ("VFP.vsub",
                                                                                  @{typ VFP},
                                                                                  tp[var_b"dp_operation",
                                                                                     var_w("d",5),
                                                                                     var_w("n",5),
                                                                                     var_w("m",5)],
                                                                                  @{theory}),
                                                                               call
                                                                                 ("VFP.vadd",
                                                                                  @{typ VFP},
                                                                                  tp[var_b"dp_operation",
                                                                                     var_w("d",5),
                                                                                     var_w("n",5),
                                                                                     var_w("m",5)],
                                                                                  @{theory})))],
                                                                         lx @{typ VFP}))],@{context}),
                                                                @{theory})],var("state",qTy)])))))))))),
                           (bop(And,var_b"b'23",
                                bop(And,mop(Not,var_b"b'21"),
                                    bop(And,mop(Not,var_b"b'20"),
                                        bop(And,mop(Not,var_b"b'6"),mop(Not,var_b"b'4"))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                     let'
                                       (var_w("Vd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Vn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_b"dp_operation",
                                                 eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                 let'
                                                   (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                    ite(var_b"dp_operation",
                                                        tp[cc[var_w("D",1),var_w("Vd",4)],
                                                           cc[var_w("N",1),var_w("Vn",4)],
                                                           cc[var_w("M",1),var_w("Vm",4)]],
                                                        tp[cc[var_w("Vd",4),var_w("D",1)],
                                                           cc[var_w("Vn",4),var_w("N",1)],
                                                           cc[var_w("Vm",4),var_w("M",1)]]),
                                                    tp[tp[mop(Not,
                                                              eq(call
                                                                   ("state.VFPExtension",
                                                                    @{typ VFPExtension},
                                                                    var("state",qTy),@{theory}),
                                                                 lc("NoVFP","VFPExtension",@{theory}))),
                                                          call
                                                            ("instruction.VFP",@{typ instruction},
                                                             call
                                                               ("VFP.vdiv",@{typ VFP},
                                                                tp[var_b"dp_operation",var_w("d",5),
                                                                   var_w("n",5),var_w("m",5)],
                                                                @{theory}),@{theory})],
                                                       var("state",qTy)]))))))))),
                           (bop(And,var_b"b'23",
                                bop(And,mop(Not,var_b"b'21"),
                                    bop(And,var_b"b'20",mop(Not,var_b"b'4")))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                     let'
                                       (var_w("Vd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Vn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_b"dp_operation",
                                                 eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                 let'
                                                   (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                    ite(var_b"dp_operation",
                                                        tp[cc[var_w("D",1),var_w("Vd",4)],
                                                           cc[var_w("N",1),var_w("Vn",4)],
                                                           cc[var_w("M",1),var_w("Vm",4)]],
                                                        tp[cc[var_w("Vd",4),var_w("D",1)],
                                                           cc[var_w("Vn",4),var_w("N",1)],
                                                           cc[var_w("Vm",4),var_w("M",1)]]),
                                                    tp[tp[eq(call
                                                               ("state.VFPExtension",
                                                                @{typ VFPExtension},
                                                                var("state",qTy),@{theory}),
                                                             lc("VFPv4","VFPExtension",@{theory})),
                                                          call
                                                            ("instruction.VFP",@{typ instruction},
                                                             call
                                                               ("VFP.vfnma_vfnms",@{typ VFP},
                                                                tp[var_b"dp_operation",
                                                                   eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                      lw(0,1)),var_w("d",5),
                                                                   var_w("n",5),var_w("m",5)],
                                                                @{theory}),@{theory})],
                                                       var("state",qTy)]))))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                     let'
                                       (var_w("Vd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Vn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_b"dp_operation",
                                                 eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                 let'
                                                   (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                    ite(var_b"dp_operation",
                                                        tp[cc[var_w("D",1),var_w("Vd",4)],
                                                           cc[var_w("N",1),var_w("Vn",4)],
                                                           cc[var_w("M",1),var_w("Vm",4)]],
                                                        tp[cc[var_w("Vd",4),var_w("D",1)],
                                                           cc[var_w("Vn",4),var_w("N",1)],
                                                           cc[var_w("Vm",4),var_w("M",1)]]),
                                                    tp[tp[eq(call
                                                               ("state.VFPExtension",
                                                                @{typ VFPExtension},
                                                                var("state",qTy),@{theory}),
                                                             lc("VFPv4","VFPExtension",@{theory})),
                                                          call
                                                            ("instruction.VFP",@{typ instruction},
                                                             call
                                                               ("VFP.vfma_vfms",@{typ VFP},
                                                                tp[var_b"dp_operation",
                                                                   eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                      lw(0,1)),var_w("d",5),
                                                                   var_w("n",5),var_w("m",5)],
                                                                @{theory}),@{theory})],
                                                       var("state",qTy)]))))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,mop(Not,var_b"b'16"),
                                                        bop(And,mop(Not,var_b"b'7"),
                                                            bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_b"single_register",
                                           eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                           let'
                                             (tp[var_w("d",5),var_w("m",5)],
                                              ite(var_b"single_register",
                                                  tp[cc[var_w("Vd",4),var_w("D",1)],
                                                     cc[var_w("Vm",4),var_w("M",1)]],
                                                  tp[cc[var_w("D",1),var_w("Vd",4)],
                                                     cc[var_w("M",1),var_w("Vm",4)]]),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vmov",@{typ VFP},
                                                          tp[var_b"single_register",var_w("d",5),
                                                             var_w("m",5)],@{theory}),@{theory})],
                                                 var("state",qTy)]))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,mop(Not,var_b"b'16"),
                                                        bop(And,var_b"b'7",
                                                            bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_b"dp_operation",
                                           eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                           let'
                                             (tp[var_w("d",5),var_w("m",5)],
                                              ite(var_b"dp_operation",
                                                  tp[cc[var_w("D",1),var_w("Vd",4)],
                                                     cc[var_w("M",1),var_w("Vm",4)]],
                                                  tp[cc[var_w("Vd",4),var_w("D",1)],
                                                     cc[var_w("Vm",4),var_w("M",1)]]),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vabs",@{typ VFP},
                                                          tp[var_b"dp_operation",var_w("d",5),
                                                             var_w("m",5)],@{theory}),@{theory})],
                                                 var("state",qTy)]))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,var_b"b'16",
                                                        bop(And,mop(Not,var_b"b'7"),
                                                            bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_b"dp_operation",
                                           eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                           let'
                                             (tp[var_w("d",5),var_w("m",5)],
                                              ite(var_b"dp_operation",
                                                  tp[cc[var_w("D",1),var_w("Vd",4)],
                                                     cc[var_w("M",1),var_w("Vm",4)]],
                                                  tp[cc[var_w("Vd",4),var_w("D",1)],
                                                     cc[var_w("Vm",4),var_w("M",1)]]),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vneg",@{typ VFP},
                                                          tp[var_b"dp_operation",var_w("d",5),
                                                             var_w("m",5)],@{theory}),@{theory})],
                                                 var("state",qTy)]))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,var_b"b'16",
                                                        bop(And,var_b"b'7",
                                                            bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_b"dp_operation",
                                           eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                           let'
                                             (tp[var_w("d",5),var_w("m",5)],
                                              ite(var_b"dp_operation",
                                                  tp[cc[var_w("D",1),var_w("Vd",4)],
                                                     cc[var_w("M",1),var_w("Vm",4)]],
                                                  tp[cc[var_w("Vd",4),var_w("D",1)],
                                                     cc[var_w("Vm",4),var_w("M",1)]]),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vsqrt",@{typ VFP},
                                                          tp[var_b"dp_operation",var_w("d",5),
                                                             var_w("m",5)],@{theory}),@{theory})],
                                                 var("state",qTy)]))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,var_b"b'18",
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,mop(Not,var_b"b'16"),
                                                        bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                            let'
                                              (var_b"dp_operation",
                                               eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                               let'
                                                 (tp[var_w("d",5),var_w("m",5)],
                                                  ite(var_b"dp_operation",
                                                      tp[cc[var_w("D",1),var_w("Vd",4)],
                                                         cc[var_w("M",1),var_w("Vm",4)]],
                                                      tp[cc[var_w("Vd",4),var_w("D",1)],
                                                         cc[var_w("Vm",4),var_w("M",1)]]),
                                                  tp[tp[mop(Not,
                                                            eq(call
                                                                 ("state.VFPExtension",
                                                                  @{typ VFPExtension},
                                                                  var("state",qTy),@{theory}),
                                                               lc("NoVFP","VFPExtension",@{theory}))),
                                                        call
                                                          ("instruction.VFP",@{typ instruction},
                                                           call
                                                             ("VFP.vcmp",@{typ VFP},
                                                              tp[var_b"dp_operation",var_w("d",5),
                                                                 mop(Some,var_w("m",5))],@{theory}),
                                                           @{theory})],var("state",qTy)])),
                                            tp[tp[lf,
                                                  call
                                                    ("instruction.Undefined",@{typ instruction},
                                                     lw(0,32),@{theory})],var("state",qTy)])))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,var_b"b'18",
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,var_b"b'16",
                                                        bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Vd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                  ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                      let'
                                        (var_b"dp_operation",
                                         eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                         tp[tp[mop(Not,
                                                   eq(call
                                                        ("state.VFPExtension",@{typ VFPExtension},
                                                         var("state",qTy),@{theory}),
                                                      lc("NoVFP","VFPExtension",@{theory}))),
                                               call
                                                 ("instruction.VFP",@{typ instruction},
                                                  call
                                                    ("VFP.vcmp",@{typ VFP},
                                                     tp[var_b"dp_operation",
                                                        ite(var_b"dp_operation",
                                                            cc[var_w("D",1),var_w("Vd",4)],
                                                            cc[var_w("Vd",4),var_w("D",1)]),
                                                        lo (Word_Lib.mk_wordT 5)],@{theory}),
                                                  @{theory})],var("state",qTy)]),
                                      tp[tp[lf,
                                            call
                                              ("instruction.Undefined",@{typ instruction},lw(0,32),
                                               @{theory})],var("state",qTy)])))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,var_b"b'18",
                                                bop(And,var_b"b'17",
                                                    bop(And,var_b"b'16",
                                                        bop(And,var_b"b'7",
                                                            bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_b"double_to_single",
                                           eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                           let'
                                             (tp[var_w("d",5),var_w("m",5)],
                                              ite(var_b"double_to_single",
                                                  tp[cc[var_w("Vd",4),var_w("D",1)],
                                                     cc[var_w("M",1),var_w("Vm",4)]],
                                                  tp[cc[var_w("D",1),var_w("Vd",4)],
                                                     cc[var_w("Vm",4),var_w("M",1)]]),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vcvt_float",@{typ VFP},
                                                          tp[var_b"double_to_single",var_w("d",5),
                                                             var_w("m",5)],@{theory}),@{theory})],
                                                 var("state",qTy)]))))))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,var_b"b'19",
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,mop(Not,var_b"b'16"),
                                                        bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Vd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                  let'
                                    (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                     tp[tp[mop(Not,
                                               eq(call
                                                    ("state.VFPExtension",@{typ VFPExtension},
                                                     var("state",qTy),@{theory}),
                                                  lc("NoVFP","VFPExtension",@{theory}))),
                                           call
                                             ("instruction.VFP",@{typ instruction},
                                              call
                                                ("VFP.vcvt_from_integer",@{typ VFP},
                                                 tp[var_b"dp_operation",
                                                    eq(mop(Cast w1,ll[var_b"b'7"]),lw(0,1)),
                                                    ite(var_b"dp_operation",
                                                        cc[var_w("D",1),var_w("Vd",4)],
                                                        cc[var_w("Vd",4),var_w("D",1)]),
                                                    cc[mop(Cast w4,
                                                           ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                              var_b"b'0"]),
                                                       mop(Cast w1,ll[var_b"b'5"])]],@{theory}),
                                              @{theory})],var("state",qTy)])))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,var_b"b'19",
                                            bop(And,var_b"b'18",
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))),
                            let'
                              (var_w("Vm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                     tp[tp[mop(Not,
                                               eq(call
                                                    ("state.VFPExtension",@{typ VFPExtension},
                                                     var("state",qTy),@{theory}),
                                                  lc("NoVFP","VFPExtension",@{theory}))),
                                           call
                                             ("instruction.VFP",@{typ instruction},
                                              call
                                                ("VFP.vcvt_to_integer",@{typ VFP},
                                                 tp[var_b"dp_operation",
                                                    eq(mop(Cast w1,ll[var_b"b'16"]),lw(0,1)),
                                                    eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                    cc[mop(Cast w4,
                                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                              var_b"b'12"]),
                                                       mop(Cast w1,ll[var_b"b'22"])],
                                                    ite(var_b"dp_operation",
                                                        cc[var_w("M",1),var_w("Vm",4)],
                                                        cc[var_w("Vm",4),var_w("M",1)])],@{theory}),
                                              @{theory})],var("state",qTy)])))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'21",
                                    bop(And,var_b"b'20",
                                        bop(And,mop(Not,var_b"b'6"),mop(Not,var_b"b'4"))))),
                            let'
                              (var_w("Vd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                  let'
                                    (var_b"single_register",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                     tp[tp[bop(In,
                                               call
                                                 ("state.VFPExtension",@{typ VFPExtension},
                                                  var("state",qTy),@{theory}),
                                               sl[lc("VFPv3","VFPExtension",@{theory}),
                                                  lc("VFPv4","VFPExtension",@{theory})]),
                                           call
                                             ("instruction.VFP",@{typ instruction},
                                              call
                                                ("VFP.vmov_imm",@{typ VFP},
                                                 tp[var_b"single_register",
                                                    ite(var_b"single_register",
                                                        cc[var_w("Vd",4),var_w("D",1)],
                                                        cc[var_w("D",1),var_w("Vd",4)]),
                                                    call
                                                      ("VFPExpandImm",w64,
                                                       tp[cc[mop(Cast w4,
                                                                 ll[var_b"b'19",var_b"b'18",
                                                                    var_b"b'17",var_b"b'16"]),
                                                             mop(Cast w4,
                                                                 ll[var_b"b'3",var_b"b'2",
                                                                    var_b"b'1",var_b"b'0"])],
                                                          var_b"single_register"],@{theory})],
                                                 @{theory}),@{theory})],var("state",qTy)])))),
                           (bop(And,mop(Not,var_b"b'23"),
                                bop(And,mop(Not,var_b"b'22"),
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,mop(Not,var_b"b'8"),var_b"b'4")))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               ite(eq(var_w("Rt",4),lw(15,4)),
                                   apply
                                     (call
                                        ("raise'exception",
                                         @{typ
                                         "state \<Rightarrow>
                                          ((bool \<times> instruction) \<times> state)"},
                                         call
                                           ("exception.UNPREDICTABLE",@{typ exception},
                                            ls"DecodeVFP: vmov_single",@{theory}),@{theory}),
                                      var("state",qTy)),
                                   tp[tp[mop(Not,
                                             eq(call
                                                  ("state.VFPExtension",@{typ VFPExtension},
                                                   var("state",qTy),@{theory}),
                                                lc("NoVFP","VFPExtension",@{theory}))),
                                         call
                                           ("instruction.VFP",@{typ instruction},
                                            call
                                              ("VFP.vmov_single",@{typ VFP},
                                               tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                  var_w("Rt",4),
                                                  cc[mop(Cast w4,
                                                         ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                            var_b"b'16"]),
                                                     mop(Cast w1,ll[var_b"b'7"])]],@{theory}),
                                            @{theory})],var("state",qTy)]))),
                           (bop(And,var_b"b'23",
                                bop(And,var_b"b'22",
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'19"),
                                            bop(And,mop(Not,var_b"b'18"),
                                                bop(And,mop(Not,var_b"b'17"),
                                                    bop(And,var_b"b'16",
                                                        bop(And,mop(Not,var_b"b'8"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               itb([(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                     tp[tp[mop(Not,
                                               eq(call
                                                    ("state.VFPExtension",@{typ VFPExtension},
                                                     var("state",qTy),@{theory}),
                                                  lc("NoVFP","VFPExtension",@{theory}))),
                                           call
                                             ("instruction.VFP",@{typ instruction},
                                              call("VFP.vmrs",@{typ VFP},var_w("Rt",4),@{theory}),
                                              @{theory})],var("state",qTy)]),
                                    (eq(var_w("Rt",4),lw(15,4)),
                                     apply
                                       (call
                                          ("raise'exception",
                                           @{typ
                                           "state \<Rightarrow>
                                            ((bool \<times> instruction) \<times> state)"},
                                           call
                                             ("exception.UNPREDICTABLE",@{typ exception},
                                              ls"DecodeVFP: msr",@{theory}),@{theory}),
                                        var("state",qTy)))],
                                   tp[tp[mop(Not,
                                             eq(call
                                                  ("state.VFPExtension",@{typ VFPExtension},
                                                   var("state",qTy),@{theory}),
                                                lc("NoVFP","VFPExtension",@{theory}))),
                                         call
                                           ("instruction.VFP",@{typ instruction},
                                            call("VFP.vmsr",@{typ VFP},var_w("Rt",4),@{theory}),
                                            @{theory})],var("state",qTy)])))],
                          tp[tp[lf,
                                call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory})],
                             var("state",qTy)]),
                      tp[tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory})],
                         var("state",qTy)])),
                 (bop(And,var_b"b'27",
                      bop(And,var_b"b'26",
                          bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9")))),
                  itb([(bop(And,mop(Not,var_b"b'24"),var_b"b'23"),
                        let'
                          (var_w("imm8",8),
                           mop(Cast w8,
                               ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                  var_b"b'1",var_b"b'0"]),
                           let'
                             (var_w("Vd",4),
                              mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                    let'
                                      (var_b"single_regs",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                       let'
                                         (var_b"wback",eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                          let'
                                            (tp[var_w("d",5),var_n"regs"],
                                             ite(var_b"single_regs",
                                                 tp[cc[var_w("Vd",4),var_w("D",1)],
                                                    mop(Cast HOLogic.natT,var_w("imm8",8))],
                                                 tp[cc[var_w("D",1),var_w("Vd",4)],
                                                    bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),
                                                        ln 2)]),
                                             ite(bop(Or,eq(var_n"regs",ln 0),
                                                     bop(Or,
                                                         bop(Gt,
                                                             bop(Add,
                                                                 mop(Cast HOLogic.natT,var_w("d",5)),
                                                                 var_n"regs"),ln 32),
                                                         bop(Or,
                                                             bop(And,var_b"wback",
                                                                 eq(var_w("Rn",4),lw(15,4))),
                                                             bop(And,mop(Not,var_b"single_regs"),
                                                                 bop(Or,bop(Gt,var_n"regs",ln 16),
                                                                     bop(Bit,var_w("imm8",8),ln 0)))))),
                                                 apply
                                                   (call
                                                      ("raise'exception",
                                                       @{typ
                                                       "state \<Rightarrow>
                                                        ((bool \<times> instruction) \<times> state)"},
                                                       call
                                                         ("exception.UNPREDICTABLE",
                                                          @{typ exception},ls"DecodeVFP: vpop",
                                                          @{theory}),@{theory}),var("state",qTy)),
                                                 tp[tp[mop(Not,
                                                           eq(call
                                                                ("state.VFPExtension",
                                                                 @{typ VFPExtension},
                                                                 var("state",qTy),@{theory}),
                                                              lc("NoVFP","VFPExtension",@{theory}))),
                                                       ite(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                           call
                                                             ("instruction.VFP",@{typ instruction},
                                                              call
                                                                ("VFP.vldm",@{typ VFP},
                                                                 tp[var_b"single_regs",lt,
                                                                    var_b"wback",var_w("d",5),
                                                                    var_w("Rn",4),var_w("imm8",8)],
                                                                 @{theory}),@{theory}),
                                                           call
                                                             ("instruction.VFP",@{typ instruction},
                                                              call
                                                                ("VFP.vstm",@{typ VFP},
                                                                 tp[var_b"single_regs",lt,
                                                                    var_b"wback",var_w("d",5),
                                                                    var_w("Rn",4),var_w("imm8",8)],
                                                                 @{theory}),@{theory}))],
                                                    var("state",qTy)]))))))))),
                       (bop(And,var_b"b'24",bop(And,mop(Not,var_b"b'23"),var_b"b'21")),
                        let'
                          (var_w("imm8",8),
                           mop(Cast w8,
                               ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                  var_b"b'1",var_b"b'0"]),
                           let'
                             (var_w("Vd",4),
                              mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                    let'
                                      (var_b"single_regs",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                       let'
                                         (tp[var_w("d",5),var_n"regs"],
                                          ite(var_b"single_regs",
                                              tp[cc[var_w("Vd",4),var_w("D",1)],
                                                 mop(Cast HOLogic.natT,var_w("imm8",8))],
                                              tp[cc[var_w("D",1),var_w("Vd",4)],
                                                 bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)]),
                                          ite(bop(Or,eq(var_n"regs",ln 0),
                                                  bop(Or,
                                                      bop(Gt,
                                                          bop(Add,
                                                              mop(Cast HOLogic.natT,var_w("d",5)),
                                                              var_n"regs"),ln 32),
                                                      bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                          bop(And,mop(Not,var_b"single_regs"),
                                                              bop(Or,bop(Gt,var_n"regs",ln 16),
                                                                  bop(Bit,var_w("imm8",8),ln 0)))))),
                                              apply
                                                (call
                                                   ("raise'exception",
                                                    @{typ
                                                    "state \<Rightarrow>
                                                     ((bool \<times> instruction) \<times> state)"},
                                                    call
                                                      ("exception.UNPREDICTABLE",@{typ exception},
                                                       ls"DecodeVFP: vpop",@{theory}),@{theory}),
                                                 var("state",qTy)),
                                              tp[tp[mop(Not,
                                                        eq(call
                                                             ("state.VFPExtension",
                                                              @{typ VFPExtension},var("state",qTy),
                                                              @{theory}),
                                                           lc("NoVFP","VFPExtension",@{theory}))),
                                                    ite(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        call
                                                          ("instruction.VFP",@{typ instruction},
                                                           call
                                                             ("VFP.vldm",@{typ VFP},
                                                              tp[var_b"single_regs",lf,lt,
                                                                 var_w("d",5),var_w("Rn",4),
                                                                 var_w("imm8",8)],@{theory}),
                                                           @{theory}),
                                                        call
                                                          ("instruction.VFP",@{typ instruction},
                                                           call
                                                             ("VFP.vstm",@{typ VFP},
                                                              tp[var_b"single_regs",lf,lt,
                                                                 var_w("d",5),var_w("Rn",4),
                                                                 var_w("imm8",8)],@{theory}),
                                                           @{theory}))],var("state",qTy)])))))))),
                       (bop(And,var_b"b'24",mop(Not,var_b"b'21")),
                        let'
                          (var_w("Vd",4),
                           mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                 let'
                                   (var_b"single_reg",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                    let'
                                      (var_b"add",eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                       let'
                                         (var_w("imm32",32),
                                          mop(Cast w32,
                                              cc[mop(Cast w8,
                                                     ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                        var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 lw(0,2)]),
                                          let'
                                            (var_w("d",5),
                                             ite(var_b"single_reg",cc[var_w("Vd",4),var_w("D",1)],
                                                 cc[var_w("D",1),var_w("Vd",4)]),
                                             tp[tp[mop(Not,
                                                       eq(call
                                                            ("state.VFPExtension",
                                                             @{typ VFPExtension},var("state",qTy),
                                                             @{theory}),
                                                          lc("NoVFP","VFPExtension",@{theory}))),
                                                   ite(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                       call
                                                         ("instruction.VFP",@{typ instruction},
                                                          call
                                                            ("VFP.vldr",@{typ VFP},
                                                             tp[var_b"single_reg",var_b"add",
                                                                var_w("d",5),var_w("Rn",4),
                                                                var_w("imm32",32)],@{theory}),
                                                          @{theory}),
                                                       call
                                                         ("instruction.VFP",@{typ instruction},
                                                          call
                                                            ("VFP.vstr",@{typ VFP},
                                                             tp[var_b"single_reg",var_b"add",
                                                                var_w("d",5),var_w("Rn",4),
                                                                var_w("imm32",32)],@{theory}),
                                                          @{theory}))],var("state",qTy)])))))))),
                       (bop(And,mop(Not,var_b"b'24"),
                            bop(And,mop(Not,var_b"b'23"),
                                bop(And,var_b"b'22",
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,mop(Not,var_b"b'8"),
                                            bop(And,mop(Not,var_b"b'7"),
                                                bop(And,mop(Not,var_b"b'6"),var_b"b'4"))))))),
                        let'
                          (var_w("Rt",4),
                           mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                           let'
                             (var_w("Rt2",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("m",5),
                                 cc[mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    mop(Cast w1,ll[var_b"b'5"])],
                                 let'
                                   (var_b"to_arm_registers",
                                    eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                    ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                            bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                                bop(Or,eq(var_w("m",5),lw(31,5)),
                                                    bop(And,var_b"to_arm_registers",
                                                        eq(var_w("Rt",4),var_w("Rt2",4)))))),
                                        apply
                                          (call
                                             ("raise'exception",
                                              @{typ
                                              "state \<Rightarrow>
                                               ((bool \<times> instruction) \<times> state)"},
                                              call
                                                ("exception.UNPREDICTABLE",@{typ exception},
                                                 ls"DecodeVFP: vmov_two_singles",@{theory}),
                                              @{theory}),var("state",qTy)),
                                        tp[tp[mop(Not,
                                                  eq(call
                                                       ("state.VFPExtension",@{typ VFPExtension},
                                                        var("state",qTy),@{theory}),
                                                     lc("NoVFP","VFPExtension",@{theory}))),
                                              call
                                                ("instruction.VFP",@{typ instruction},
                                                 call
                                                   ("VFP.vmov_two_singles",@{typ VFP},
                                                    tp[var_b"to_arm_registers",var_w("Rt",4),
                                                       var_w("Rt2",4),var_w("m",5)],@{theory}),
                                                 @{theory})],var("state",qTy)])))))),
                       (bop(And,mop(Not,var_b"b'24"),
                            bop(And,mop(Not,var_b"b'23"),
                                bop(And,var_b"b'22",
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,var_b"b'8",
                                            bop(And,mop(Not,var_b"b'7"),
                                                bop(And,mop(Not,var_b"b'6"),var_b"b'4"))))))),
                        let'
                          (var_w("Rt",4),
                           mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                           let'
                             (var_w("Rt2",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_b"to_arm_registers",eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                 ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                         bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                             bop(And,var_b"to_arm_registers",
                                                 eq(var_w("Rt",4),var_w("Rt2",4))))),
                                     apply
                                       (call
                                          ("raise'exception",
                                           @{typ
                                           "state \<Rightarrow>
                                            ((bool \<times> instruction) \<times> state)"},
                                           call
                                             ("exception.UNPREDICTABLE",@{typ exception},
                                              ls"DecodeVFP: vmov_double",@{theory}),@{theory}),
                                        var("state",qTy)),
                                     tp[tp[mop(Not,
                                               eq(call
                                                    ("state.VFPExtension",@{typ VFPExtension},
                                                     var("state",qTy),@{theory}),
                                                  lc("NoVFP","VFPExtension",@{theory}))),
                                           call
                                             ("instruction.VFP",@{typ instruction},
                                              call
                                                ("VFP.vmov_double",@{typ VFP},
                                                 tp[var_b"to_arm_registers",var_w("Rt",4),
                                                    var_w("Rt2",4),
                                                    cc[mop(Cast w1,ll[var_b"b'5"]),
                                                       mop(Cast w4,
                                                           ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                              var_b"b'0"])]],@{theory}),@{theory})],
                                        var("state",qTy)])))))],
                      tp[tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory})],
                         var("state",qTy)]))],
                tp[tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory})],
                   var("state",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeARM",
   close
     (var_w("w",32),
      close
        (var("state",qTy),
         let'
           (var("mc",@{typ MachineCode}),
            call("MachineCode.ARM",@{typ MachineCode},var_w("w",32),@{theory}),
            let'
              (var_w("cond",4),ex(var_w("w",32),ln 31,ln 28,w4),
               ite(eq(var_w("cond",4),lw(15,4)),
                   let'
                     (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                         var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                         var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                         var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                         var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
                      call
                        ("boolify'28",
                         @{typ
                         "bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                         ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),@{theory}),
                      itb([(var_b"b'26",
                            itb([(var_b"b'21",
                                  itb([(bop(And,mop(Not,var_b"b'27"),
                                            bop(And,mop(Not,var_b"b'25"),
                                                bop(And,var_b"b'24",
                                                    bop(And,mop(Not,var_b"b'23"),
                                                        bop(And,var_b"b'22",
                                                            bop(And,var_b"b'20",mop(Not,var_b"b'7"))))))),
                                        itb([(bop(And,mop(Not,var_b"b'6"),
                                                  bop(And,mop(Not,var_b"b'5"),var_b"b'4")),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[lw(14,4),
                                                          bop(In,
                                                              call
                                                                ("state.Architecture",
                                                                 @{typ Architecture},
                                                                 var("state",qTy),@{theory}),
                                                              sl[lc("ARMv6K","Architecture",
                                                                    @{theory}),
                                                                 lc("ARMv7_A","Architecture",
                                                                    @{theory}),
                                                                 lc("ARMv7_R","Architecture",
                                                                    @{theory})])],@{theory}),
                                                    var("state",qTy)),
                                                 tp[ite(var_b"v",
                                                        Term.Const
                                                          (@{const_name "ClearExclusive"},
                                                           @{typ instruction}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)])),
                                             (bop(And,var_b"b'19",
                                                  bop(And,var_b"b'18",
                                                      bop(And,var_b"b'17",
                                                          bop(And,var_b"b'16",
                                                              bop(And,var_b"b'15",
                                                                  bop(And,var_b"b'14",
                                                                      bop(And,var_b"b'13",
                                                                          bop(And,var_b"b'12",
                                                                              bop(And,
                                                                                  mop(Not,
                                                                                      var_b"b'11"),
                                                                                  bop(And,
                                                                                      mop(Not,
                                                                                          var_b"b'10"),
                                                                                      bop(And,
                                                                                          mop(Not,
                                                                                              var_b"b'9"),
                                                                                          bop(And,
                                                                                              mop(Not,
                                                                                                  var_b"b'8"),
                                                                                              bop(And,
                                                                                                  var_b"b'6",
                                                                                                  bop(And,
                                                                                                      mop(Not,
                                                                                                          var_b"b'5"),
                                                                                                      mop(Not,
                                                                                                          var_b"b'4"))))))))))))))),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[lw(14,4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 7)],@{theory}),var("state",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.DataSynchronizationBarrier",
                                                              @{typ Hint},
                                                              mop(Cast w4,
                                                                  ll[var_b"b'3",var_b"b'2",
                                                                     var_b"b'1",var_b"b'0"]),
                                                              @{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)])),
                                             (bop(And,var_b"b'6",
                                                  bop(And,mop(Not,var_b"b'5"),var_b"b'4")),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[lw(14,4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 7)],@{theory}),var("state",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.DataMemoryBarrier",@{typ Hint},
                                                              mop(Cast w4,
                                                                  ll[var_b"b'3",var_b"b'2",
                                                                     var_b"b'1",var_b"b'0"]),
                                                              @{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)])),
                                             (bop(And,var_b"b'6",
                                                  bop(And,var_b"b'5",mop(Not,var_b"b'4"))),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[lw(14,4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 7)],@{theory}),var("state",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.InstructionSynchronizationBarrier",
                                                              @{typ Hint},
                                                              mop(Cast w4,
                                                                  ll[var_b"b'3",var_b"b'2",
                                                                     var_b"b'1",var_b"b'0"]),
                                                              @{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)])),
                                             (bop(Ge,
                                                  apply
                                                    (call
                                                       ("ArchVersion",
                                                        @{typ "state \<Rightarrow> nat"},lu,
                                                        @{theory}),var("state",qTy)),ln 5),
                                              tp[call
                                                   ("instruction.Undefined",@{typ instruction},
                                                    lw(0,32),@{theory}),var("state",qTy)])],
                                            tp[lx @{typ instruction},
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),ls""],@{theory}),
                                                  var("state",qTy))])),
                                       (bop(Ge,
                                            apply
                                              (call
                                                 ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                  @{theory}),var("state",qTy)),ln 5),
                                        tp[call
                                             ("instruction.Undefined",@{typ instruction},lw(0,32),
                                              @{theory}),var("state",qTy)])],
                                      tp[lx @{typ instruction},
                                         apply
                                           (call
                                              ("DECODE_UNPREDICTABLE",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[var("mc",@{typ MachineCode}),ls""],@{theory}),
                                            var("state",qTy))])),
                                 (bop(And,mop(Not,var_b"b'27"),var_b"b'20"),
                                  itb([(bop(And,mop(Not,var_b"b'25"),
                                            bop(And,mop(Not,var_b"b'24"),var_b"b'22")),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[lw(14,4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 7)],
                                                 @{theory}),var("state",qTy)),
                                           tp[ite(var_b"v",
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     call
                                                       ("Hint.PreloadInstruction",@{typ Hint},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"]),
                                                           call
                                                             ("offset1.immediate_form1",
                                                              @{typ offset1},
                                                              mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 12),
                                                                      ll[var_b"b'11",var_b"b'10",
                                                                         var_b"b'9",var_b"b'8",
                                                                         var_b"b'7",var_b"b'6",
                                                                         var_b"b'5",var_b"b'4",
                                                                         var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"])),
                                                              @{theory})],@{theory}),@{theory}),
                                                  apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy))),var("s",qTy)])),
                                       (bop(And,var_b"b'25",
                                            bop(And,mop(Not,var_b"b'24"),
                                                bop(And,var_b"b'22",mop(Not,var_b"b'4")))),
                                        let'
                                          (var_w("Rm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[lw(14,4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 7)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (tp[var("shift_t",@{typ SRType}),
                                                           var_n"shift_n"],
                                                        call
                                                          ("DecodeImmShift",
                                                           @{typ "SRType \<times> nat"},
                                                           tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                  ll[var_b"b'6",var_b"b'5"]),
                                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                                  ll[var_b"b'11",var_b"b'10",
                                                                     var_b"b'9",var_b"b'8",
                                                                     var_b"b'7"])],@{theory}),
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadInstruction",@{typ Hint},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"]),
                                                                 call
                                                                   ("offset1.register_form1",
                                                                    @{typ offset1},
                                                                    tp[var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],@{theory})],
                                                              @{theory}),@{theory})),
                                                     ite(eq(var_w("Rm",4),lw(15,4)),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"PreloadInstruction (register)"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))),
                                       (bop(And,mop(Not,var_b"b'25"),
                                            bop(And,var_b"b'24",
                                                bop(And,var_b"b'19",
                                                    bop(And,var_b"b'18",
                                                        bop(And,var_b"b'17",var_b"b'16"))))),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[lw(14,4),
                                                    apply
                                                      (call
                                                         ("HaveDSPSupport",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("state",qTy))],@{theory}),
                                              var("state",qTy)),
                                           tp[ite(var_b"v",
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     call
                                                       ("Hint.PreloadDataLiteral",@{typ Hint},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           mop(Cast w32,
                                                               mop(Cast (Word_Lib.mk_wordT 12),
                                                                   ll[var_b"b'11",var_b"b'10",
                                                                      var_b"b'9",var_b"b'8",
                                                                      var_b"b'7",var_b"b'6",
                                                                      var_b"b'5",var_b"b'4",
                                                                      var_b"b'3",var_b"b'2",
                                                                      var_b"b'1",var_b"b'0"]))],
                                                        @{theory}),@{theory}),
                                                  apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy))),var("s",qTy)])),
                                       (bop(And,mop(Not,var_b"b'25"),var_b"b'24"),
                                        let'
                                          (var_w("R",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[lw(14,4),
                                                       bop(Or,
                                                           bop(And,eq(var_w("R",1),lw(1,1)),
                                                               bop(And,
                                                                   bop(Ge,
                                                                       apply
                                                                         (call
                                                                            ("ArchVersion",
                                                                             @{typ
                                                                             "state \<Rightarrow>
                                                                              nat"},lu,@{theory}),
                                                                          var("state",qTy)),ln 7),
                                                                   bop(In,
                                                                       lc("Extension_Multiprocessing",
                                                                          "Extensions",@{theory}),
                                                                       call
                                                                         ("state.Extensions",
                                                                          @{typ "Extensions set"},
                                                                          var("state",qTy),@{theory})))),
                                                           bop(And,eq(var_w("R",1),lw(0,1)),
                                                               apply
                                                                 (call
                                                                    ("HaveDSPSupport",
                                                                     @{typ
                                                                     "state \<Rightarrow> bool"},lu,
                                                                     @{theory}),var("state",qTy))))],
                                                    @{theory}),var("state",qTy)),
                                              tp[ite(var_b"v",
                                                     call
                                                       ("instruction.Hint",@{typ instruction},
                                                        call
                                                          ("Hint.PreloadData",@{typ Hint},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),eq(var_w("R",1),lw(0,1)),
                                                              mop(Cast w4,
                                                                  ll[var_b"b'19",var_b"b'18",
                                                                     var_b"b'17",var_b"b'16"]),
                                                              call
                                                                ("offset1.immediate_form1",
                                                                 @{typ offset1},
                                                                 mop(Cast w32,
                                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8",
                                                                            var_b"b'7",var_b"b'6",
                                                                            var_b"b'5",var_b"b'4",
                                                                            var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"])),
                                                                 @{theory})],@{theory}),@{theory}),
                                                     apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                                       (bop(And,var_b"b'25",bop(And,var_b"b'24",mop(Not,var_b"b'4"))),
                                        let'
                                          (var_w("Rm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("R",1),mop(Cast w1,ll[var_b"b'22"]),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[lw(14,4),
                                                             bop(Or,
                                                                 bop(And,eq(var_w("R",1),lw(1,1)),
                                                                     bop(And,
                                                                         bop(Ge,
                                                                             apply
                                                                               (call
                                                                                  ("ArchVersion",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    nat"},lu,
                                                                                   @{theory}),
                                                                                var("state",qTy)),
                                                                             ln 7),
                                                                         bop(In,
                                                                             lc("Extension_Multiprocessing",
                                                                                "Extensions",
                                                                                @{theory}),
                                                                             call
                                                                               ("state.Extensions",
                                                                                @{typ
                                                                                "Extensions set"},
                                                                                var("state",qTy),
                                                                                @{theory})))),
                                                                 bop(And,eq(var_w("R",1),lw(0,1)),
                                                                     apply
                                                                       (call
                                                                          ("HaveDSPSupport",
                                                                           @{typ
                                                                           "state \<Rightarrow> bool"},
                                                                           lu,@{theory}),
                                                                        var("state",qTy))))],
                                                          @{theory}),var("state",qTy)),
                                                    ite(var_b"v",
                                                        let'
                                                          (var_b"is_pldw",eq(var_w("R",1),lw(0,1)),
                                                           tp[let'
                                                                (tp[var("shift_t",@{typ SRType}),
                                                                    var_n"shift_n"],
                                                                 call
                                                                   ("DecodeImmShift",
                                                                    @{typ "SRType \<times> nat"},
                                                                    tp[mop(Cast
                                                                             (Word_Lib.mk_wordT 2),
                                                                           ll[var_b"b'6",var_b"b'5"]),
                                                                       mop(Cast
                                                                             (Word_Lib.mk_wordT 5),
                                                                           ll[var_b"b'11",
                                                                              var_b"b'10",
                                                                              var_b"b'9",var_b"b'8",
                                                                              var_b"b'7"])],
                                                                    @{theory}),
                                                                 call
                                                                   ("instruction.Hint",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Hint.PreloadData",
                                                                       @{typ Hint},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'23"]),
                                                                             lw(1,1)),
                                                                          var_b"is_pldw",
                                                                          var_w("Rn",4),
                                                                          call
                                                                            ("offset1.register_form1",
                                                                             @{typ offset1},
                                                                             tp[var_w("Rm",4),
                                                                                var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n"],
                                                                             @{theory})],@{theory}),
                                                                    @{theory})),
                                                              ite(bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                      bop(And,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          var_b"is_pldw")),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "PreloadData (register)"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))]),
                                                        tp[apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           var("s",qTy)])))))),
                                       (bop(Ge,
                                            apply
                                              (call
                                                 ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                  @{theory}),var("state",qTy)),ln 5),
                                        tp[call
                                             ("instruction.Undefined",@{typ instruction},lw(0,32),
                                              @{theory}),var("state",qTy)])],
                                      tp[lx @{typ instruction},
                                         apply
                                           (call
                                              ("DECODE_UNPREDICTABLE",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[var("mc",@{typ MachineCode}),ls""],@{theory}),
                                            var("state",qTy))])),
                                 (bop(Ge,
                                      apply
                                        (call
                                           ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                            @{theory}),var("state",qTy)),ln 5),
                                  tp[call
                                       ("instruction.Undefined",@{typ instruction},lw(0,32),
                                        @{theory}),var("state",qTy)])],
                                tp[lx @{typ instruction},
                                   apply
                                     (call
                                        ("DECODE_UNPREDICTABLE",@{typ "state \<Rightarrow> state"},
                                         tp[var("mc",@{typ MachineCode}),ls""],@{theory}),
                                      var("state",qTy))])),
                           (bop(And,mop(Not,var_b"b'27"),
                                bop(And,mop(Not,var_b"b'25"),
                                    bop(And,var_b"b'24",
                                        bop(And,mop(Not,var_b"b'23"),
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,mop(Not,var_b"b'20"),
                                                        bop(And,var_b"b'16",
                                                            bop(And,mop(Not,var_b"b'7"),
                                                                bop(And,mop(Not,var_b"b'6"),
                                                                    bop(And,mop(Not,var_b"b'5"),
                                                                        mop(Not,var_b"b'4")))))))))))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[lw(14,4),
                                        bop(Ge,
                                            apply
                                              (call
                                                 ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                  @{theory}),var("state",qTy)),ln 6)],@{theory}),
                                  var("state",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.System",@{typ instruction},
                                         call
                                           ("System.Setend",@{typ System},
                                            eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),@{theory}),
                                         @{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)])),
                           (bop(And,mop(Not,var_b"b'27"),
                                bop(And,mop(Not,var_b"b'25"),
                                    bop(And,var_b"b'24",
                                        bop(And,mop(Not,var_b"b'23"),
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,mop(Not,var_b"b'20"),
                                                        bop(And,mop(Not,var_b"b'16"),
                                                            mop(Not,var_b"b'5"))))))))),
                            let'
                              (var_w("mode",5),
                               mop(Cast (Word_Lib.mk_wordT 5),
                                   ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("F",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("I",1),mop(Cast w1,ll[var_b"b'7"]),
                                     let'
                                       (var_w("A",1),mop(Cast w1,ll[var_b"b'8"]),
                                        let'
                                          (var_w("M",1),mop(Cast w1,ll[var_b"b'17"]),
                                           let'
                                             (var_w("imod",2),
                                              mop(Cast (Word_Lib.mk_wordT 2),
                                                  ll[var_b"b'19",var_b"b'18"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[lw(14,4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 6)],@{theory}),var("state",qTy)),
                                                 ite(var_b"v",
                                                     tp[call
                                                          ("instruction.System",@{typ instruction},
                                                           call
                                                             ("System.ChangeProcessorState",
                                                              @{typ System},
                                                              tp[eq(var_w("imod",2),lw(2,2)),
                                                                 eq(var_w("imod",2),lw(3,2)),
                                                                 eq(var_w("A",1),lw(1,1)),
                                                                 eq(var_w("I",1),lw(1,1)),
                                                                 eq(var_w("F",1),lw(1,1)),
                                                                 ite(eq(var_w("M",1),lw(1,1)),
                                                                     mop(Some,var_w("mode",5)),
                                                                     lo (Word_Lib.mk_wordT 5))],
                                                              @{theory}),@{theory}),
                                                        ite(bop(Or,
                                                                bop(And,
                                                                    mop(Not,
                                                                        eq(var_w("mode",5),lw(0,5))),
                                                                    eq(var_w("M",1),lw(0,1))),
                                                                bop(Or,
                                                                    eq(bop(Bit,var_w("imod",2),ln 1),
                                                                       eq(cc[var_w("A",1),
                                                                             var_w("I",1),
                                                                             var_w("F",1)],lw(0,3))),
                                                                    bop(Or,
                                                                        bop(And,
                                                                            eq(var_w("imod",2),
                                                                               lw(0,2)),
                                                                            eq(var_w("M",1),lw(0,1))),
                                                                        eq(var_w("imod",2),lw(1,2))))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"ChangeProcessorState"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))))),
                           (bop(And,var_b"b'27",
                                bop(And,mop(Not,var_b"b'25"),
                                    bop(And,var_b"b'22",mop(Not,var_b"b'20")))),
                            let'
                              (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[lw(14,4),
                                           bop(Ge,
                                               apply
                                                 (call
                                                    ("ArchVersion",@{typ "state \<Rightarrow> nat"},
                                                     lu,@{theory}),var("state",qTy)),ln 6)],
                                        @{theory}),var("state",qTy)),
                                  tp[ite(var_b"v",
                                         call
                                           ("instruction.System",@{typ instruction},
                                            call
                                              ("System.StoreReturnState",@{typ System},
                                               tp[eq(var_w("U",1),lw(1,1)),
                                                  eq(mop(Cast w1,ll[var_b"b'24"]),var_w("U",1)),
                                                  eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                  mop(Cast (Word_Lib.mk_wordT 5),
                                                      ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])],@{theory}),
                                            @{theory}),
                                         apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy))),var("s",qTy)]))),
                           (bop(And,var_b"b'27",
                                bop(And,mop(Not,var_b"b'25"),
                                    bop(And,mop(Not,var_b"b'22"),var_b"b'20"))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               let'
                                 (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[lw(14,4),
                                              bop(Ge,
                                                  apply
                                                    (call
                                                       ("ArchVersion",
                                                        @{typ "state \<Rightarrow> nat"},lu,
                                                        @{theory}),var("state",qTy)),ln 6)],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.ReturnFromException",@{typ System},
                                                  tp[eq(var_w("U",1),lw(1,1)),
                                                     eq(mop(Cast w1,ll[var_b"b'24"]),var_w("U",1)),
                                                     eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                     var_w("Rn",4)],@{theory}),@{theory}),
                                            ite(eq(var_w("Rn",4),lw(15,4)),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"ReturnFromException"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'27",var_b"b'25"),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[lw(14,4),
                                        bop(Ge,
                                            apply
                                              (call
                                                 ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                  @{theory}),var("state",qTy)),ln 5)],@{theory}),
                                  var("state",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.Branch",@{typ instruction},
                                         call
                                           ("Branch.BranchLinkExchangeImmediate",@{typ Branch},
                                            tp[lc("InstrSet_Thumb","InstrSet",@{theory}),
                                               mop(SE w32,
                                                   cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                          ll[var_b"b'23",var_b"b'22",var_b"b'21",
                                                             var_b"b'20",var_b"b'19",var_b"b'18",
                                                             var_b"b'17",var_b"b'16",var_b"b'15",
                                                             var_b"b'14",var_b"b'13",var_b"b'12",
                                                             var_b"b'11",var_b"b'10",var_b"b'9",
                                                             var_b"b'8",var_b"b'7",var_b"b'6",
                                                             var_b"b'5",var_b"b'4",var_b"b'3",
                                                             var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                      mop(Cast w1,ll[var_b"b'24"]),lw(0,1)])],
                                            @{theory}),@{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)])),
                           (bop(Ge,
                                apply
                                  (call("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,@{theory}),
                                   var("state",qTy)),ln 5),
                            tp[call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}),
                               var("state",qTy)])],
                          tp[lx @{typ instruction},
                             apply
                               (call
                                  ("DECODE_UNPREDICTABLE",@{typ "state \<Rightarrow> state"},
                                   tp[var("mc",@{typ MachineCode}),ls""],@{theory}),var("state",qTy))])),
                   let'
                     (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                         var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                         var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                         var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                         var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
                      call
                        ("boolify'28",
                         @{typ
                         "bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times>
                          bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                         ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),@{theory}),
                      itb([(var_b"b'26",
                            itb([(bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'22",
                                                      bop(And,var_b"b'21",
                                                          bop(And,var_b"b'20",
                                                              bop(And,var_b"b'7",
                                                                  bop(And,var_b"b'6",
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     let'
                                       (var("s",qTy),
                                        rupd
                                          ("state.CurrentCondition",
                                           tp[var("state",qTy),var_w("cond",4)],@{theory}),
                                        tp[apply
                                             (call
                                                ("ConditionPassed",
                                                 @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                              var("s",qTy)),var("s",qTy)]),
                                     tp[ite(var_b"v",
                                            call
                                              ("instruction.Undefined",@{typ instruction},
                                               mop(Cast w32,
                                                   cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                          ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                             var_b"b'16",var_b"b'15",var_b"b'14",
                                                             var_b"b'13",var_b"b'12",var_b"b'11",
                                                             var_b"b'10",var_b"b'9",var_b"b'8"]),
                                                      mop(Cast w4,
                                                          ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                             var_b"b'0"])]),@{theory}),
                                            Term.Const
                                              (@{const_name "NoOperation"},@{typ instruction})),
                                        var("s",qTy)])),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,mop(Not,var_b"b'25"),
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'21",mop(Not,var_b"b'20"))))),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"add",
                                                        eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                        let'
                                                          (var("m",@{typ offset1}),
                                                           call
                                                             ("offset1.immediate_form1",
                                                              @{typ offset1},
                                                              mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 12),
                                                                      ll[var_b"b'11",var_b"b'10",
                                                                         var_b"b'9",var_b"b'8",
                                                                         var_b"b'7",var_b"b'6",
                                                                         var_b"b'5",var_b"b'4",
                                                                         var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"])),
                                                              @{theory}),
                                                           ite(eq(var_w("B",1),lw(1,1)),
                                                               call
                                                                 ("instruction.Store",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Store.StoreByteUnprivileged",
                                                                     @{typ Store},
                                                                     tp[var_b"add",lt,var_w("Rt",4),
                                                                        var_w("Rn",4),
                                                                        var("m",@{typ offset1})],
                                                                     @{theory}),@{theory}),
                                                               call
                                                                 ("instruction.Store",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Store.StoreUnprivileged",
                                                                     @{typ Store},
                                                                     tp[var_b"add",lt,var_w("Rt",4),
                                                                        var_w("Rn",4),
                                                                        var("m",@{typ offset1})],
                                                                     @{theory}),@{theory})))),
                                                     ite(bop(Or,
                                                             bop(And,eq(var_w("B",1),lw(1,1)),
                                                                 eq(var_w("Rt",4),lw(15,4))),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rn",4),var_w("Rt",4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"StoreUnprivileged (immediate)"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,mop(Not,var_b"b'25"),mop(Not,var_b"b'20"))),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),lt],@{theory}),
                                                    var("state",qTy)),
                                                 ite(var_b"v",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        tp[let'
                                                             (var_b"add",
                                                              eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),
                                                              let'
                                                                (var_b"index",
                                                                 eq(var_w("P",1),lw(1,1)),
                                                                 let'
                                                                   (var("m",@{typ offset1}),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory}),
                                                                    ite(eq(var_w("B",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Store",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Store.StoreByte",
                                                                              @{typ Store},
                                                                              tp[var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Store",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Store.StoreWord",
                                                                              @{typ Store},
                                                                              tp[var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}))))),
                                                           ite(bop(Or,
                                                                   bop(And,eq(var_w("B",1),lw(1,1)),
                                                                       eq(var_w("Rt",4),lw(15,4))),
                                                                   bop(And,var_b"wback",
                                                                       bop(Or,
                                                                           eq(var_w("Rn",4),lw(15,4)),
                                                                           eq(var_w("Rn",4),
                                                                              var_w("Rt",4))))),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"Store (immediate)"],
                                                                     @{theory}),var("s",qTy)),
                                                               var("s",qTy))]),
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,mop(Not,var_b"b'25"),
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'21",var_b"b'20")))),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[let'
                                                    (var_b"add",
                                                     eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                     let'
                                                       (var("m",@{typ offset1}),
                                                        call
                                                          ("offset1.immediate_form1",@{typ offset1},
                                                           mop(Cast w32,
                                                               mop(Cast (Word_Lib.mk_wordT 12),
                                                                   ll[var_b"b'11",var_b"b'10",
                                                                      var_b"b'9",var_b"b'8",
                                                                      var_b"b'7",var_b"b'6",
                                                                      var_b"b'5",var_b"b'4",
                                                                      var_b"b'3",var_b"b'2",
                                                                      var_b"b'1",var_b"b'0"])),
                                                           @{theory}),
                                                        ite(eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadByteUnprivileged",
                                                                  @{typ Load},
                                                                  tp[var_b"add",lt,var_w("Rt",4),
                                                                     var_w("Rn",4),
                                                                     var("m",@{typ offset1})],
                                                                  @{theory}),@{theory}),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadUnprivileged",
                                                                  @{typ Load},
                                                                  tp[var_b"add",lt,var_w("Rt",4),
                                                                     var_w("Rn",4),
                                                                     var("m",@{typ offset1})],
                                                                  @{theory}),@{theory})))),
                                                  ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              eq(var_w("Rn",4),var_w("Rt",4)))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"LoadUnprivileged (immediate)"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,mop(Not,var_b"b'25"),
                                          bop(And,var_b"b'20",
                                              bop(And,var_b"b'19",
                                                  bop(And,var_b"b'18",
                                                      bop(And,var_b"b'17",var_b"b'16")))))),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[let'
                                                    (var_b"add",
                                                     eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                     let'
                                                       (var_w("imm32",32),
                                                        mop(Cast w32,
                                                            mop(Cast (Word_Lib.mk_wordT 12),
                                                                ll[var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8",var_b"b'7",
                                                                   var_b"b'6",var_b"b'5",var_b"b'4",
                                                                   var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"])),
                                                        ite(eq(var_w("B",1),lw(1,1)),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadByteLiteral",
                                                                  @{typ Load},
                                                                  tp[lt,var_b"add",var_w("Rt",4),
                                                                     var_w("imm32",32)],@{theory}),
                                                               @{theory}),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadLiteral",@{typ Load},
                                                                  tp[var_b"add",var_w("Rt",4),
                                                                     var_w("imm32",32)],@{theory}),
                                                               @{theory})))),
                                                  ite(bop(And,eq(var_w("B",1),lw(1,1)),
                                                          eq(var_w("Rt",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"LoadByte (literal)"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,mop(Not,var_b"b'25"),var_b"b'20")),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),lt],@{theory}),
                                                    var("state",qTy)),
                                                 ite(var_b"v",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        tp[let'
                                                             (var_b"add",
                                                              eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),
                                                              let'
                                                                (var_b"index",
                                                                 eq(var_w("P",1),lw(1,1)),
                                                                 let'
                                                                   (var("m",@{typ offset1}),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory}),
                                                                    ite(eq(var_w("B",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadByte",
                                                                              @{typ Load},
                                                                              tp[lt,var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadWord",
                                                                              @{typ Load},
                                                                              tp[var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}))))),
                                                           ite(bop(Or,
                                                                   bop(And,eq(var_w("B",1),lw(1,1)),
                                                                       eq(var_w("Rt",4),lw(15,4))),
                                                                   bop(And,var_b"wback",
                                                                       eq(var_w("Rn",4),
                                                                          var_w("Rt",4)))),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "LoadWord/Byte (immediate)"],
                                                                     @{theory}),var("s",qTy)),
                                                               var("s",qTy))]),
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'21",
                                                  bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),lt],@{theory}),
                                                    var("state",qTy)),
                                                 ite(var_b"v",
                                                     tp[let'
                                                          (var_b"add",
                                                           eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           let'
                                                             (tp[var("shift_t",@{typ SRType}),
                                                                 var_n"shift_n"],
                                                              call
                                                                ("DecodeImmShift",
                                                                 @{typ "SRType \<times> nat"},
                                                                 tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                        ll[var_b"b'6",var_b"b'5"]),
                                                                    mop(Cast (Word_Lib.mk_wordT 5),
                                                                        ll[var_b"b'11",var_b"b'10",
                                                                           var_b"b'9",var_b"b'8",
                                                                           var_b"b'7"])],@{theory}),
                                                              let'
                                                                (var("m",@{typ offset1}),
                                                                 call
                                                                   ("offset1.register_form1",
                                                                    @{typ offset1},
                                                                    tp[var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],@{theory}),
                                                                 ite(eq(var_w("B",1),lw(1,1)),
                                                                     call
                                                                       ("instruction.Store",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Store.StoreByteUnprivileged",
                                                                           @{typ Store},
                                                                           tp[var_b"add",lt,
                                                                              var_w("Rt",4),
                                                                              var_w("Rn",4),
                                                                              var("m",@{typ offset1})],
                                                                           @{theory}),@{theory}),
                                                                     call
                                                                       ("instruction.Store",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Store.StoreUnprivileged",
                                                                           @{typ Store},
                                                                           tp[var_b"add",lt,
                                                                              var_w("Rt",4),
                                                                              var_w("Rn",4),
                                                                              var("m",@{typ offset1})],
                                                                           @{theory}),@{theory}))))),
                                                        ite(bop(Or,
                                                                bop(And,eq(var_w("B",1),lw(1,1)),
                                                                    eq(var_w("Rt",4),lw(15,4))),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rn",4),
                                                                           var_w("Rt",4)),
                                                                        bop(Or,
                                                                            eq(var_w("Rm",4),
                                                                               lw(15,4)),
                                                                            bop(And,
                                                                                bop(Lt,
                                                                                    apply
                                                                                      (call
                                                                                         ("ArchVersion",
                                                                                          @{typ
                                                                                          "state \<Rightarrow>
                                                                                           nat"},lu,
                                                                                          @{theory}),
                                                                                       var("s",qTy)),
                                                                                    ln 6),
                                                                                eq(var_w("Rm",4),
                                                                                   var_w("Rn",4))))))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"StoreUnprivileged (regiser)"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("cond",4),lt],@{theory}),
                                                       var("state",qTy)),
                                                    ite(var_b"v",
                                                        let'
                                                          (var_b"wback",
                                                           bop(Or,eq(var_w("P",1),lw(0,1)),
                                                               eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                  lw(1,1))),
                                                           tp[let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var_b"index",
                                                                    eq(var_w("P",1),lw(1,1)),
                                                                    let'
                                                                      (tp[var("shift_t",
                                                                              @{typ SRType}),
                                                                          var_n"shift_n"],
                                                                       call
                                                                         ("DecodeImmShift",
                                                                          @{typ
                                                                          "SRType \<times> nat"},
                                                                          tp[mop(Cast
                                                                                   (Word_Lib.mk_wordT 2),
                                                                                 ll[var_b"b'6",
                                                                                    var_b"b'5"]),
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7"])],
                                                                          @{theory}),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.register_form1",
                                                                             @{typ offset1},
                                                                             tp[var_w("Rm",4),
                                                                                var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n"],
                                                                             @{theory}),
                                                                          ite(eq(var_w("B",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Store",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Store.StoreByte",
                                                                                    @{typ Store},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    @{theory}),
                                                                                 @{theory}),
                                                                              call
                                                                                ("instruction.Store",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Store.StoreWord",
                                                                                    @{typ Store},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    @{theory}),
                                                                                 @{theory})))))),
                                                              ite(bop(Or,
                                                                      bop(And,
                                                                          eq(var_w("B",1),lw(1,1)),
                                                                          eq(var_w("Rt",4),lw(15,4))),
                                                                      bop(Or,
                                                                          eq(var_w("Rm",4),lw(15,4)),
                                                                          bop(Or,
                                                                              bop(And,var_b"wback",
                                                                                  bop(Or,
                                                                                      eq(var_w("Rn",4),
                                                                                         lw(15,4)),
                                                                                      eq(var_w("Rn",4),
                                                                                         var_w("Rt",4)))),
                                                                              bop(And,
                                                                                  bop(Lt,
                                                                                      apply
                                                                                        (call
                                                                                           ("ArchVersion",
                                                                                            @{typ
                                                                                            "state \<Rightarrow>
                                                                                             nat"},
                                                                                            lu,
                                                                                            @{theory}),
                                                                                         var("s",qTy)),
                                                                                      ln 6),
                                                                                  bop(And,
                                                                                      var_b"wback",
                                                                                      eq(var_w("Rm",4),
                                                                                         var_w("Rn",4))))))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"Store (regiser)"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))]),
                                                        tp[apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           var("s",qTy)])))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'21",
                                                  bop(And,var_b"b'20",mop(Not,var_b"b'4")))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"add",
                                                        eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                        let'
                                                          (tp[var("shift_t",@{typ SRType}),
                                                              var_n"shift_n"],
                                                           call
                                                             ("DecodeImmShift",
                                                              @{typ "SRType \<times> nat"},
                                                              tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                     ll[var_b"b'6",var_b"b'5"]),
                                                                 mop(Cast (Word_Lib.mk_wordT 5),
                                                                     ll[var_b"b'11",var_b"b'10",
                                                                        var_b"b'9",var_b"b'8",
                                                                        var_b"b'7"])],@{theory}),
                                                           let'
                                                             (var("m",@{typ offset1}),
                                                              call
                                                                ("offset1.register_form1",
                                                                 @{typ offset1},
                                                                 tp[var_w("Rm",4),
                                                                    var("shift_t",@{typ SRType}),
                                                                    var_n"shift_n"],@{theory}),
                                                              ite(eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                     lw(1,1)),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadByteUnprivileged",
                                                                        @{typ Load},
                                                                        tp[var_b"add",lt,
                                                                           var_w("Rt",4),
                                                                           var_w("Rn",4),
                                                                           var("m",@{typ offset1})],
                                                                        @{theory}),@{theory}),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadUnprivileged",
                                                                        @{typ Load},
                                                                        tp[var_b"add",lt,
                                                                           var_w("Rt",4),
                                                                           var_w("Rn",4),
                                                                           var("m",@{typ offset1})],
                                                                        @{theory}),@{theory}))))),
                                                     ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,
                                                                     eq(var_w("Rn",4),var_w("Rt",4)),
                                                                     bop(Or,
                                                                         eq(var_w("Rm",4),lw(15,4)),
                                                                         bop(And,
                                                                             bop(Lt,
                                                                                 apply
                                                                                   (call
                                                                                      ("ArchVersion",
                                                                                       @{typ
                                                                                       "state \<Rightarrow>
                                                                                        nat"},lu,
                                                                                       @{theory}),
                                                                                    var("s",qTy)),
                                                                                 ln 6),
                                                                             eq(var_w("Rm",4),
                                                                                var_w("Rn",4))))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadUnprivileged (regiser)"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",bop(And,var_b"b'20",mop(Not,var_b"b'4")))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("cond",4),lt],@{theory}),
                                                       var("state",qTy)),
                                                    ite(var_b"v",
                                                        let'
                                                          (var_b"wback",
                                                           bop(Or,eq(var_w("P",1),lw(0,1)),
                                                               eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                  lw(1,1))),
                                                           tp[let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var_b"index",
                                                                    eq(var_w("P",1),lw(1,1)),
                                                                    let'
                                                                      (tp[var("shift_t",
                                                                              @{typ SRType}),
                                                                          var_n"shift_n"],
                                                                       call
                                                                         ("DecodeImmShift",
                                                                          @{typ
                                                                          "SRType \<times> nat"},
                                                                          tp[mop(Cast
                                                                                   (Word_Lib.mk_wordT 2),
                                                                                 ll[var_b"b'6",
                                                                                    var_b"b'5"]),
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7"])],
                                                                          @{theory}),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.register_form1",
                                                                             @{typ offset1},
                                                                             tp[var_w("Rm",4),
                                                                                var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n"],
                                                                             @{theory}),
                                                                          ite(eq(var_w("B",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadByte",
                                                                                    @{typ Load},
                                                                                    tp[lt,
                                                                                       var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    @{theory}),
                                                                                 @{theory}),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadWord",
                                                                                    @{typ Load},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    @{theory}),
                                                                                 @{theory})))))),
                                                              ite(bop(Or,
                                                                      bop(And,
                                                                          eq(var_w("B",1),lw(1,1)),
                                                                          eq(var_w("Rt",4),lw(15,4))),
                                                                      bop(Or,
                                                                          eq(var_w("Rm",4),lw(15,4)),
                                                                          bop(Or,
                                                                              bop(And,var_b"wback",
                                                                                  bop(Or,
                                                                                      eq(var_w("Rn",4),
                                                                                         lw(15,4)),
                                                                                      eq(var_w("Rn",4),
                                                                                         var_w("Rt",4)))),
                                                                              bop(And,
                                                                                  bop(Lt,
                                                                                      apply
                                                                                        (call
                                                                                           ("ArchVersion",
                                                                                            @{typ
                                                                                            "state \<Rightarrow>
                                                                                             nat"},
                                                                                            lu,
                                                                                            @{theory}),
                                                                                         var("s",qTy)),
                                                                                      ln 6),
                                                                                  bop(And,
                                                                                      var_b"wback",
                                                                                      eq(var_w("Rm",4),
                                                                                         var_w("Rn",4))))))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "LoadWord/Byte (regiser)"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))]),
                                                        tp[apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           var("s",qTy)])))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,mop(Not,var_b"b'23"),var_b"b'4")))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("DecodeParallelAdditionSubtraction",
                                                        @{typ instruction},
                                                        tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                               ll[var_b"b'21",var_b"b'20"]),
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'7",var_b"b'6",var_b"b'5"]),
                                                           mop(Cast w1,ll[var_b"b'22"]),
                                                           var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],
                                                        @{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls
                                                                   "Parallel addition and subtraction"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'20"),
                                                              bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("tb",1),mop(Cast w1,ll[var_b"b'6"]),
                                        let'
                                          (var_w("Rd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 6)],@{theory}),var("state",qTy)),
                                                 ite(var_b"v",
                                                     tp[let'
                                                          (tp[var("shift_t",@{typ SRType}),
                                                              var_n"shift_n"],
                                                           call
                                                             ("DecodeImmShift",
                                                              @{typ "SRType \<times> nat"},
                                                              tp[cc[var_w("tb",1),lw(0,1)],
                                                                 mop(Cast (Word_Lib.mk_wordT 5),
                                                                     ll[var_b"b'11",var_b"b'10",
                                                                        var_b"b'9",var_b"b'8",
                                                                        var_b"b'7"])],@{theory}),
                                                           call
                                                             ("instruction.Media",
                                                              @{typ instruction},
                                                              call
                                                                ("Media.PackHalfword",@{typ Media},
                                                                 tp[var("shift_t",@{typ SRType}),
                                                                    var_n"shift_n",
                                                                    eq(var_w("tb",1),lw(1,1)),
                                                                    var_w("Rd",4),var_w("Rn",4),
                                                                    var_w("Rm",4)],@{theory}),
                                                              @{theory})),
                                                        ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    eq(var_w("Rm",4),lw(15,4)))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"PackHalfword"],@{theory}),
                                                               var("s",qTy)),var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'20"),
                                                              bop(And,var_b"b'7",
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Media",@{typ instruction},
                                                        call
                                                          ("Media.SelectBytes",@{typ Media},
                                                           tp[var_w("Rd",4),var_w("Rn",4),
                                                              var_w("Rm",4)],@{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"SelectBytes"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'21",
                                                      bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("sat_imm",5),
                                           mop(Cast (Word_Lib.mk_wordT 5),
                                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                  var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"unsigned",
                                                        eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                        let'
                                                          (tp[var("shift_t",@{typ SRType}),
                                                              var_n"shift_n"],
                                                           call
                                                             ("DecodeImmShift",
                                                              @{typ "SRType \<times> nat"},
                                                              tp[cc[mop(Cast w1,ll[var_b"b'6"]),
                                                                    lw(0,1)],
                                                                 mop(Cast (Word_Lib.mk_wordT 5),
                                                                     ll[var_b"b'11",var_b"b'10",
                                                                        var_b"b'9",var_b"b'8",
                                                                        var_b"b'7"])],@{theory}),
                                                           call
                                                             ("instruction.Media",
                                                              @{typ instruction},
                                                              call
                                                                ("Media.Saturate",@{typ Media},
                                                                 tp[var("shift_t",@{typ SRType}),
                                                                    var_n"shift_n",
                                                                    ite(var_b"unsigned",
                                                                        mop(Cast HOLogic.natT,
                                                                            var_w("sat_imm",5)),
                                                                        bop(Add,
                                                                            mop(Cast HOLogic.natT,
                                                                                var_w("sat_imm",5)),
                                                                            ln 1)),var_b"unsigned",
                                                                    var_w("Rd",4),var_w("Rn",4)],
                                                                 @{theory}),@{theory}))),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             eq(var_w("Rn",4),lw(15,4))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"Saturate"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'21",
                                                      bop(And,mop(Not,var_b"b'20"),
                                                          bop(And,mop(Not,var_b"b'7"),
                                                              bop(And,mop(Not,var_b"b'6"),
                                                                  bop(And,var_b"b'5",var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("sat_imm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"unsigned",
                                                        eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                        call
                                                          ("instruction.Media",@{typ instruction},
                                                           call
                                                             ("Media.Saturate16",@{typ Media},
                                                              tp[ite(var_b"unsigned",
                                                                     mop(Cast HOLogic.natT,
                                                                         var_w("sat_imm",4)),
                                                                     bop(Add,
                                                                         mop(Cast HOLogic.natT,
                                                                             var_w("sat_imm",4)),
                                                                         ln 1)),var_b"unsigned",
                                                                 var_w("Rd",4),var_w("Rn",4)],
                                                              @{theory}),@{theory})),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             eq(var_w("Rn",4),lw(15,4))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"Saturate16"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'21"),
                                                      bop(And,mop(Not,var_b"b'20"),
                                                          bop(And,mop(Not,var_b"b'7"),
                                                              bop(And,var_b"b'6",
                                                                  bop(And,var_b"b'5",var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ExtendByte16",@{typ Media},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("Rd",4),
                                                           mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"]),
                                                           var_w("Rm",4),
                                                           mop(Cast HOLogic.natT,
                                                               cc[mop(Cast (Word_Lib.mk_wordT 2),
                                                                      ll[var_b"b'11",var_b"b'10"]),
                                                                  lw(0,3)])],@{theory}),@{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ExtendByte16"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'21",
                                                      bop(And,mop(Not,var_b"b'20"),
                                                          bop(And,mop(Not,var_b"b'7"),
                                                              bop(And,var_b"b'6",
                                                                  bop(And,var_b"b'5",var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ExtendByte",@{typ Media},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("Rd",4),
                                                           mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"]),
                                                           var_w("Rm",4),
                                                           mop(Cast HOLogic.natT,
                                                               cc[mop(Cast (Word_Lib.mk_wordT 2),
                                                                      ll[var_b"b'11",var_b"b'10"]),
                                                                  lw(0,3)])],@{theory}),@{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ExtendByte"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'21",
                                                      bop(And,var_b"b'20",
                                                          bop(And,mop(Not,var_b"b'7"),
                                                              bop(And,var_b"b'6",
                                                                  bop(And,var_b"b'5",var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ExtendHalfword",@{typ Media},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("Rd",4),
                                                           mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"]),
                                                           var_w("Rm",4),
                                                           mop(Cast HOLogic.natT,
                                                               cc[mop(Cast (Word_Lib.mk_wordT 2),
                                                                      ll[var_b"b'11",var_b"b'10"]),
                                                                  lw(0,3)])],@{theory}),@{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ExtendHalfword"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,var_b"b'21",
                                                          bop(And,var_b"b'20",
                                                              bop(And,mop(Not,var_b"b'7"),
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ByteReverse",@{typ Media},
                                                        tp[var_w("Rd",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ByteReverse"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,var_b"b'21",
                                                          bop(And,var_b"b'20",
                                                              bop(And,var_b"b'7",
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ByteReversePackedHalfword",
                                                        @{typ Media},
                                                        tp[var_w("Rd",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ByteReversePackedHalfword"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'22",
                                                      bop(And,var_b"b'21",
                                                          bop(And,var_b"b'20",
                                                              bop(And,var_b"b'7",
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ByteReverseSignedHalfword",
                                                        @{typ Media},
                                                        tp[var_w("Rd",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ByteReverseSignedHalfword"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,mop(Not,var_b"b'24"),
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'22",
                                                      bop(And,var_b"b'21",
                                                          bop(And,var_b"b'20",
                                                              bop(And,mop(Not,var_b"b'7"),
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,var_b"b'5",var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Media",@{typ instruction},
                                                     call
                                                       ("Media.ReverseBits",@{typ Media},
                                                        tp[var_w("Rd",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"ReverseBits"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'20"),
                                                              bop(And,mop(Not,var_b"b'7"),var_b"b'4")))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                        let'
                                          (var_w("Rd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Multiply",@{typ instruction},
                                                        call
                                                          ("Multiply.SignedMultiplyDual",
                                                           @{typ Multiply},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                              eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                              var_w("Rd",4),var_w("Rn",4),
                                                              var_w("Rm",4),
                                                              mop(Cast w4,
                                                                  ll[var_b"b'15",var_b"b'14",
                                                                     var_b"b'13",var_b"b'12"])],
                                                           @{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"SignedMultiplyDual"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,var_b"b'22",
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'20"),
                                                              bop(And,mop(Not,var_b"b'7"),var_b"b'4")))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                        let'
                                          (var_w("RdLo",4),
                                           mop(Cast w4,
                                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                           let'
                                             (var_w("RdHi",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 6)],@{theory}),var("state",qTy)),
                                                 ite(var_b"v",
                                                     tp[call
                                                          ("instruction.Multiply",
                                                           @{typ instruction},
                                                           call
                                                             ("Multiply.SignedMultiplyLongDual",
                                                              @{typ Multiply},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                    lw(1,1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                    lw(1,1)),var_w("RdHi",4),
                                                                 var_w("RdLo",4),var_w("Rn",4),
                                                                 var_w("Rm",4)],@{theory}),@{theory}),
                                                        ite(bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                                bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rn",4),lw(15,4)),
                                                                        eq(var_w("Rm",4),lw(15,4))))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"SignedMultiplyLongDual"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,var_b"b'22",
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,var_b"b'20",
                                                              bop(And,mop(Not,var_b"b'7"),
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                        let'
                                          (var_w("Rd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Multiply",@{typ instruction},
                                                        call
                                                          ("Multiply.SignedMostSignificantMultiply",
                                                           @{typ Multiply},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                              var_w("Rd",4),var_w("Rn",4),
                                                              var_w("Rm",4),
                                                              mop(Cast w4,
                                                                  ll[var_b"b'15",var_b"b'14",
                                                                     var_b"b'13",var_b"b'12"])],
                                                           @{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"SignedMostSignificantMultiply"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,var_b"b'22",
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,var_b"b'20",
                                                              bop(And,var_b"b'7",
                                                                  bop(And,var_b"b'6",var_b"b'4"))))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                        let'
                                          (var_w("Ra",4),
                                           mop(Cast w4,
                                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                           let'
                                             (var_w("Rd",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("state",qTy)),
                                                              ln 6)],@{theory}),var("state",qTy)),
                                                 ite(var_b"v",
                                                     tp[call
                                                          ("instruction.Multiply",
                                                           @{typ instruction},
                                                           call
                                                             ("Multiply.SignedMostSignificantMultiplySubtract",
                                                              @{typ Multiply},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                    lw(1,1)),var_w("Rd",4),
                                                                 var_w("Rn",4),var_w("Rm",4),
                                                                 var_w("Ra",4)],@{theory}),@{theory}),
                                                        ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rm",4),lw(15,4)),
                                                                        eq(var_w("Ra",4),lw(15,4))))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "SignedMostSignificantMultiplySubtract"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,var_b"b'23",
                                                  bop(And,mop(Not,var_b"b'22"),
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'20"),
                                                              bop(And,mop(Not,var_b"b'7"),
                                                                  bop(And,mop(Not,var_b"b'6"),
                                                                      bop(And,mop(Not,var_b"b'5"),
                                                                          var_b"b'4")))))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                        let'
                                          (var_w("Rd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("state",qTy)),
                                                           ln 6)],@{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.SIMD",@{typ instruction},
                                                        call
                                                          ("SIMD.UnsignedSumAbsoluteDifferences",
                                                           @{typ SIMD},
                                                           tp[var_w("Rd",4),var_w("Rn",4),
                                                              var_w("Rm",4),
                                                              mop(Cast w4,
                                                                  ll[var_b"b'15",var_b"b'14",
                                                                     var_b"b'13",var_b"b'12"])],
                                                           @{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"UnsignedSumAbsoluteDifferences"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'21",
                                                      bop(And,var_b"b'6",
                                                          bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               let'
                                                 (var_n"lsbit",
                                                  mop(Cast HOLogic.natT,
                                                      mop(Cast (Word_Lib.mk_wordT 5),
                                                          ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                             var_b"b'8",var_b"b'7"])),
                                                  let'
                                                    (var_n"widthminus1",
                                                     mop(Cast HOLogic.natT,
                                                         mop(Cast (Word_Lib.mk_wordT 5),
                                                             ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                                var_b"b'17",var_b"b'16"])),
                                                     tp[call
                                                          ("instruction.Media",@{typ instruction},
                                                           call
                                                             ("Media.BitFieldExtract",@{typ Media},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                    lw(1,1)),var_w("Rd",4),
                                                                 var_w("Rn",4),var_n"lsbit",
                                                                 var_n"widthminus1"],@{theory}),
                                                           @{theory}),
                                                        ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Lt,ln 31,
                                                                        bop(Add,var_n"lsbit",
                                                                            var_n"widthminus1")))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"BitFieldExtract"],@{theory}),
                                                               var("s",qTy)),var("s",qTy))])),
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'27"),
                                      bop(And,var_b"b'25",
                                          bop(And,var_b"b'24",
                                              bop(And,var_b"b'23",
                                                  bop(And,var_b"b'22",
                                                      bop(And,mop(Not,var_b"b'21"),
                                                          bop(And,mop(Not,var_b"b'6"),
                                                              bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(Ge,
                                                     apply
                                                       (call
                                                          ("ArchVersion",
                                                           @{typ "state \<Rightarrow> nat"},lu,
                                                           @{theory}),var("state",qTy)),ln 6)],
                                              @{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            let'
                                              (var_n"lsbit",
                                               mop(Cast HOLogic.natT,
                                                   mop(Cast (Word_Lib.mk_wordT 5),
                                                       ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                          var_b"b'8",var_b"b'7"])),
                                               let'
                                                 (var_n"msbit",
                                                  mop(Cast HOLogic.natT,
                                                      mop(Cast (Word_Lib.mk_wordT 5),
                                                          ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                             var_b"b'17",var_b"b'16"])),
                                                  tp[call
                                                       ("instruction.Media",@{typ instruction},
                                                        call
                                                          ("Media.BitFieldClearOrInsert",
                                                           @{typ Media},
                                                           tp[var_w("Rd",4),
                                                              mop(Cast w4,
                                                                  ll[var_b"b'3",var_b"b'2",
                                                                     var_b"b'1",var_b"b'0"]),
                                                              var_n"lsbit",var_n"msbit"],@{theory}),
                                                        @{theory}),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Lt,var_n"msbit",var_n"lsbit")),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"BitFieldClearOrInsert"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))])),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))),
                                 (bop(And,var_b"b'27",bop(And,var_b"b'25",var_b"b'24")),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                     tp[ite(var_b"v",
                                            call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.SupervisorCall",@{typ System},
                                                  mop(SE w32,
                                                      mop(Cast (Word_Lib.mk_wordT 24),
                                                          ll[var_b"b'23",var_b"b'22",var_b"b'21",
                                                             var_b"b'20",var_b"b'19",var_b"b'18",
                                                             var_b"b'17",var_b"b'16",var_b"b'15",
                                                             var_b"b'14",var_b"b'13",var_b"b'12",
                                                             var_b"b'11",var_b"b'10",var_b"b'9",
                                                             var_b"b'8",var_b"b'7",var_b"b'6",
                                                             var_b"b'5",var_b"b'4",var_b"b'3",
                                                             var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                  @{theory}),@{theory}),
                                            apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy))),var("s",qTy)])),
                                 (bop(And,var_b"b'27",
                                      bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9"))),
                                  let'
                                    (tp[var("v",@{typ "bool \<times> instruction"}),var("s",qTy)],
                                     apply
                                       (call
                                          ("DecodeVFP",
                                           @{typ
                                           "state \<Rightarrow>
                                            ((bool \<times> instruction) \<times> state)"},
                                           var_w("w",32),@{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"defined",var("i",@{typ instruction})],
                                        var("v",@{typ "bool \<times> instruction"}),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),var_b"defined"],@{theory}),
                                              var("s",qTy)),
                                           tp[ite(var_b"v",var("i",@{typ instruction}),
                                                  apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy))),var("s",qTy)]))))],
                                apply
                                  (call
                                     ("UndefinedARM",
                                      @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                      var_w("cond",4),@{theory}),var("state",qTy)))),
                           (var_b"b'27",
                            itb([(bop(And,mop(Not,var_b"b'25"),
                                      bop(And,var_b"b'22",mop(Not,var_b"b'20"))),
                                  let'
                                    (var_w("registers",16),
                                     mop(Cast w16,
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                            var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                            var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreMultipleUserRegisters",
                                                           @{typ Store},
                                                           tp[eq(var_w("U",1),lw(1,1)),
                                                              eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                 var_w("U",1)),var_w("Rn",4),
                                                              var_w("registers",16)],@{theory}),
                                                        @{theory}),
                                                     ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                             bop(Lt,
                                                                 call
                                                                   ("BitCount",HOLogic.natT,
                                                                    var_w("registers",16),@{theory}),
                                                                 ln 1)),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"StoreMultipleUserRegisters"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'25"),
                                      bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))),
                                  let'
                                    (var_w("registers",16),
                                     mop(Cast w16,
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                            var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                            var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Store",@{typ instruction},
                                                     call
                                                       ("Store.StoreMultiple",@{typ Store},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'24"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                           var_w("Rn",4),var_w("registers",16)],
                                                        @{theory}),@{theory}),
                                                  ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                          bop(Lt,
                                                              call
                                                                ("BitCount",HOLogic.natT,
                                                                 var_w("registers",16),@{theory}),
                                                              ln 1)),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreMultiple"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,mop(Not,var_b"b'25"),
                                      bop(And,var_b"b'22",bop(And,var_b"b'20",mop(Not,var_b"b'15")))),
                                  let'
                                    (var_w("registers",15),
                                     mop(Cast (Word_Lib.mk_wordT 15),
                                         ll[var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                            var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                            var_b"b'0"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadMultipleUserRegisters",
                                                           @{typ Load},
                                                           tp[eq(var_w("U",1),lw(1,1)),
                                                              eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                 var_w("U",1)),var_w("Rn",4),
                                                              var_w("registers",15)],@{theory}),
                                                        @{theory}),
                                                     ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                             bop(Lt,
                                                                 call
                                                                   ("BitCount",HOLogic.natT,
                                                                    var_w("registers",15),@{theory}),
                                                                 ln 1)),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadMultipleUserRegisters"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'25"),
                                      bop(And,var_b"b'22",bop(And,var_b"b'20",var_b"b'15"))),
                                  let'
                                    (var_w("registers",15),
                                     mop(Cast (Word_Lib.mk_wordT 15),
                                         ll[var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                            var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                            var_b"b'0"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  let'
                                                    (var_b"wback",
                                                     eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                     tp[call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadMultipleExceptionReturn",
                                                              @{typ Load},
                                                              tp[eq(var_w("U",1),lw(1,1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                    var_w("U",1)),var_b"wback",
                                                                 var_w("Rn",4),var_w("registers",15)],
                                                              @{theory}),@{theory}),
                                                        ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                bop(And,var_b"wback",
                                                                    bop(And,
                                                                        bop(Bit,
                                                                            var_w("registers",15),
                                                                            mop(Cast HOLogic.natT,
                                                                                var_w("Rn",4))),
                                                                        bop(Ge,
                                                                            apply
                                                                              (call
                                                                                 ("ArchVersion",
                                                                                  @{typ
                                                                                  "state \<Rightarrow>
                                                                                   nat"},lu,
                                                                                  @{theory}),
                                                                               var("s",qTy)),ln 7)))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"LoadMultipleExceptionReturn"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))]),
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                 (bop(And,mop(Not,var_b"b'25"),
                                      bop(And,mop(Not,var_b"b'22"),var_b"b'20")),
                                  let'
                                    (var_w("registers",16),
                                     mop(Cast w16,
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                            var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                            var_b"b'2",var_b"b'1",var_b"b'0"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               let'
                                                 (var_b"wback",
                                                  eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                  tp[call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadMultiple",@{typ Load},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),
                                                              eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                 lw(1,1)),var_b"wback",
                                                              var_w("Rn",4),var_w("registers",16)],
                                                           @{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                             bop(Or,
                                                                 bop(Lt,
                                                                     call
                                                                       ("BitCount",HOLogic.natT,
                                                                        var_w("registers",16),
                                                                        @{theory}),ln 1),
                                                                 bop(And,var_b"wback",
                                                                     bop(And,
                                                                         bop(Bit,
                                                                             var_w("registers",16),
                                                                             mop(Cast HOLogic.natT,
                                                                                 var_w("Rn",4))),
                                                                         bop(Ge,
                                                                             apply
                                                                               (call
                                                                                  ("ArchVersion",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    nat"},lu,
                                                                                   @{theory}),
                                                                                var("s",qTy)),ln 7))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadMultiple"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))]),
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                 (bop(And,var_b"b'25",mop(Not,var_b"b'24")),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                     tp[ite(var_b"v",
                                            call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchTarget",@{typ Branch},
                                                  mop(SE w32,
                                                      cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                             ll[var_b"b'23",var_b"b'22",var_b"b'21",
                                                                var_b"b'20",var_b"b'19",var_b"b'18",
                                                                var_b"b'17",var_b"b'16",var_b"b'15",
                                                                var_b"b'14",var_b"b'13",var_b"b'12",
                                                                var_b"b'11",var_b"b'10",var_b"b'9",
                                                                var_b"b'8",var_b"b'7",var_b"b'6",
                                                                var_b"b'5",var_b"b'4",var_b"b'3",
                                                                var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                         lw(0,2)]),@{theory}),@{theory}),
                                            apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy))),var("s",qTy)])),
                                 (bop(And,var_b"b'25",var_b"b'24"),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                     tp[ite(var_b"v",
                                            call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchLinkExchangeImmediate",
                                                  @{typ Branch},
                                                  tp[lc("InstrSet_ARM","InstrSet",@{theory}),
                                                     mop(SE w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                                ll[var_b"b'23",var_b"b'22",
                                                                   var_b"b'21",var_b"b'20",
                                                                   var_b"b'19",var_b"b'18",
                                                                   var_b"b'17",var_b"b'16",
                                                                   var_b"b'15",var_b"b'14",
                                                                   var_b"b'13",var_b"b'12",
                                                                   var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8",var_b"b'7",
                                                                   var_b"b'6",var_b"b'5",var_b"b'4",
                                                                   var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"]),lw(0,2)])],@{theory}),
                                               @{theory}),
                                            apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy))),var("s",qTy)]))],
                                apply
                                  (call
                                     ("UndefinedARM",
                                      @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                      var_w("cond",4),@{theory}),var("state",qTy)))),
                           (var_b"b'25",
                            itb([(bop(And,var_b"b'24",
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 apply
                                                   (call
                                                      ("HaveThumb2",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("state",qTy))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Data",@{typ instruction},
                                                  call
                                                    ("Data.MoveHalfword",@{typ Data},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                        var_w("Rd",4),
                                                        cc[mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"]),
                                                           mop(Cast (Word_Lib.mk_wordT 12),
                                                               ll[var_b"b'11",var_b"b'10",
                                                                  var_b"b'9",var_b"b'8",var_b"b'7",
                                                                  var_b"b'6",var_b"b'5",var_b"b'4",
                                                                  var_b"b'3",var_b"b'2",var_b"b'1",
                                                                  var_b"b'0"])]],@{theory}),
                                                  @{theory}),
                                               ite(eq(var_w("Rd",4),lw(15,4)),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveTopHalfword"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))),
                                 (bop(And,var_b"b'24",
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'22"),
                                              bop(And,var_b"b'21",
                                                  bop(And,mop(Not,var_b"b'20"),
                                                      bop(And,mop(Not,var_b"b'19"),
                                                          bop(And,mop(Not,var_b"b'18"),
                                                              bop(And,mop(Not,var_b"b'17"),
                                                                  mop(Not,var_b"b'16"))))))))),
                                  apply
                                    (call
                                       ("DecodeHint",
                                        @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                        tp[var_w("cond",4),
                                           mop(Cast w8,
                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                  var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                        @{theory}),var("state",qTy))),
                                 (bop(And,var_b"b'24",
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,var_b"b'21",mop(Not,var_b"b'20")))),
                                  let'
                                    (var_w("mask",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            let'
                                              (tp[var_w("v",32),var("s",qTy)],
                                               apply
                                                 (call
                                                    ("ARMExpandImm",
                                                     @{typ
                                                     "state \<Rightarrow> (32 word \<times> state)"},
                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                         ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                            var_b"b'8",var_b"b'7",var_b"b'6",
                                                            var_b"b'5",var_b"b'4",var_b"b'3",
                                                            var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                     @{theory}),
                                                  ite(eq(var_w("mask",4),lw(0,4)),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MoveToSpecialFromImmediate"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))),
                                               tp[call
                                                    ("instruction.System",@{typ instruction},
                                                     call
                                                       ("System.MoveToSpecialFromImmediate",
                                                        @{typ System},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("v",32),var_w("mask",4)],@{theory}),
                                                     @{theory}),var("s",qTy)]),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))],
                                let'
                                  (var_w("imm12",12),
                                   mop(Cast (Word_Lib.mk_wordT 12),
                                       ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                          var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                          var_b"b'1",var_b"b'0"]),
                                   let'
                                     (var_w("Rd",4),
                                      mop(Cast w4,
                                          ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                      let'
                                        (var_w("Rn",4),
                                         mop(Cast w4,
                                             ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                         let'
                                           (var_w("opc",4),
                                            mop(Cast w4,
                                                ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                            let'
                                              (tp[var_b"v",var("s",qTy)],
                                               apply
                                                 (call
                                                    ("Do",
                                                     @{typ
                                                     "state \<Rightarrow> (bool \<times> state)"},
                                                     tp[var_w("cond",4),lt],@{theory}),
                                                  var("state",qTy)),
                                               tp[ite(var_b"v",
                                                      let'
                                                        (var_b"setflags",
                                                         eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                         let'
                                                           (tp[var_b"b'3",var_b"b'2",var_b"b'1",
                                                               var_b"b'0"],
                                                            call
                                                              ("boolify'4",
                                                               @{typ
                                                               "bool \<times>
                                                                bool \<times> bool \<times> bool"},
                                                               var_w("opc",4),@{theory}),
                                                            ite(var_b"b'3",
                                                                itb([(bop(And,var_b"b'2",var_b"b'0"),
                                                                      call
                                                                        ("instruction.Data",
                                                                         @{typ instruction},
                                                                         call
                                                                           ("Data.Move",@{typ Data},
                                                                            tp[var_b"setflags",
                                                                               mop(Cast
                                                                                     HOLogic.boolT,
                                                                                   mop(Cast w1,
                                                                                       ll[var_b"b'1"])),
                                                                               var_w("Rd",4),
                                                                               var_w("imm12",12)],
                                                                            @{theory}),@{theory})),
                                                                     (mop(Not,var_b"b'2"),
                                                                      call
                                                                        ("instruction.Data",
                                                                         @{typ instruction},
                                                                         call
                                                                           ("Data.TestCompareImmediate",
                                                                            @{typ Data},
                                                                            tp[mop(Cast
                                                                                     (Word_Lib.mk_wordT 2),
                                                                                   ll[var_b"b'1",
                                                                                      var_b"b'0"]),
                                                                               var_w("Rn",4),
                                                                               var_w("imm12",12)],
                                                                            @{theory}),@{theory}))],
                                                                    call
                                                                      ("instruction.Data",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Data.ArithLogicImmediate",
                                                                          @{typ Data},
                                                                          tp[var_w("opc",4),
                                                                             var_b"setflags",
                                                                             var_w("Rd",4),
                                                                             var_w("Rn",4),
                                                                             var_w("imm12",12)],
                                                                          @{theory}),@{theory})),
                                                                call
                                                                  ("instruction.Data",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Data.ArithLogicImmediate",
                                                                      @{typ Data},
                                                                      tp[var_w("opc",4),
                                                                         var_b"setflags",
                                                                         var_w("Rd",4),
                                                                         var_w("Rn",4),
                                                                         var_w("imm12",12)],
                                                                      @{theory}),@{theory})))),
                                                      apply
                                                        (call
                                                           ("Skip",
                                                            @{typ "state \<Rightarrow> instruction"},
                                                            lu,@{theory}),var("s",qTy))),
                                                  var("s",qTy)]))))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,var_b"b'9",
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),
                                                            mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("cond",4),
                                           apply
                                             (call
                                                ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("state",qTy))],@{theory}),
                                     var("state",qTy)),
                                  ite(var_b"v",
                                      tp[call
                                           ("instruction.System",@{typ instruction},
                                            call
                                              ("System.MoveToRegisterFromBankedOrSpecial",
                                               @{typ System},
                                               tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                  cc[mop(Cast w1,ll[var_b"b'8"]),
                                                     mop(Cast w4,
                                                         ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                            var_b"b'16"])],var_w("Rd",4)],@{theory}),
                                            @{theory}),
                                         ite(eq(var_w("Rd",4),lw(15,4)),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"MoveToRegisterFromBankedOrSpecial"],
                                                   @{theory}),var("s",qTy)),var("s",qTy))],
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)])))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,mop(Not,var_b"b'9"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),
                                                            mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                  ite(var_b"v",
                                      tp[call
                                           ("instruction.System",@{typ instruction},
                                            call
                                              ("System.MoveToRegisterFromSpecial",@{typ System},
                                               tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                  var_w("Rd",4)],@{theory}),@{theory}),
                                         ite(eq(var_w("Rd",4),lw(15,4)),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"MoveToRegisterFromSpecial"],@{theory}),
                                                var("s",qTy)),var("s",qTy))],
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)])))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,var_b"b'9",
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),
                                                            mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("cond",4),
                                           apply
                                             (call
                                                ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("state",qTy))],@{theory}),
                                     var("state",qTy)),
                                  ite(var_b"v",
                                      tp[call
                                           ("instruction.System",@{typ instruction},
                                            call
                                              ("System.MoveToBankedOrSpecialRegister",@{typ System},
                                               tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                  cc[mop(Cast w1,ll[var_b"b'8"]),
                                                     mop(Cast w4,
                                                         ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                            var_b"b'16"])],var_w("Rn",4)],@{theory}),
                                            @{theory}),
                                         ite(bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)]),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"MoveToBankedOrSpecialRegister"],@{theory}),
                                                var("s",qTy)),var("s",qTy))],
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)])))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,mop(Not,var_b"b'9"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),
                                                            mop(Not,var_b"b'4"))))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("mask",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.MoveToSpecialFromRegister",@{typ System},
                                                  tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                     var_w("Rn",4),var_w("mask",4)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                    eq(var_w("mask",4),lw(0,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"MoveToSpecialFromRegister"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("cond",4),
                                        mop(Not,
                                            eq(call
                                                 ("state.Architecture",@{typ Architecture},
                                                  var("state",qTy),@{theory}),
                                               lc("ARMv4","Architecture",@{theory})))],@{theory}),
                                  var("state",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.Branch",@{typ instruction},
                                         call
                                           ("Branch.BranchExchange",@{typ Branch},
                                            mop(Cast w4,
                                                ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                            @{theory}),@{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)])),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              bop(Ge,
                                                  apply
                                                    (call
                                                       ("ArchVersion",
                                                        @{typ "state \<Rightarrow> nat"},lu,
                                                        @{theory}),var("state",qTy)),ln 5)],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Data",@{typ instruction},
                                               call
                                                 ("Data.CountLeadingZeroes",@{typ Data},
                                                  tp[var_w("Rd",4),var_w("Rm",4)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                    eq(var_w("Rm",4),lw(15,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"CountLeadingZeroes"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,var_b"b'5",var_b"b'4")))))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("cond",4),
                                           bop(Ge,
                                               apply
                                                 (call
                                                    ("ArchVersion",@{typ "state \<Rightarrow> nat"},
                                                     lu,@{theory}),var("state",qTy)),ln 5)],
                                        @{theory}),var("state",qTy)),
                                  ite(var_b"v",
                                      tp[call
                                           ("instruction.Branch",@{typ instruction},
                                            call
                                              ("Branch.BranchLinkExchangeRegister",@{typ Branch},
                                               var_w("Rm",4),@{theory}),@{theory}),
                                         ite(eq(var_w("Rm",4),lw(15,4)),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"BranchLinkExchangeRegister"],@{theory}),
                                                var("s",qTy)),var("s",qTy))],
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)])))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'20"),
                                        bop(And,mop(Not,var_b"b'7"),
                                            bop(And,var_b"b'6",
                                                bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 apply
                                                   (call
                                                      ("HaveDSPSupport",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("state",qTy))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Media",@{typ instruction},
                                                  call
                                                    ("Media.SaturatingAddSubtract",@{typ Media},
                                                     tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                            ll[var_b"b'22",var_b"b'21"]),
                                                        var_w("Rd",4),var_w("Rm",4),var_w("Rn",4)],
                                                     @{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                           eq(var_w("Rm",4),lw(15,4)))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"SaturatingAddSubtract"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,var_b"b'6",
                                                        bop(And,var_b"b'5",var_b"b'4")))))))),
                            ite(bop(Ge,
                                    apply
                                      (call
                                         ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                          @{theory}),var("state",qTy)),ln 5),
                                tp[call
                                     ("instruction.Hint",@{typ instruction},
                                      call
                                        ("Hint.Breakpoint",@{typ Hint},
                                         mop(Cast w32,
                                             cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                    ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                       var_b"b'16",var_b"b'15",var_b"b'14",
                                                       var_b"b'13",var_b"b'12",var_b"b'11",
                                                       var_b"b'10",var_b"b'9",var_b"b'8"]),
                                                mop(Cast w4,
                                                    ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])]),
                                         @{theory}),@{theory}),
                                   rupd
                                     ("state.CurrentCondition",
                                      tp[ite(mop(Not,eq(var_w("cond",4),lw(14,4))),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),ls"Breakpoint"],
                                                   @{theory}),var("state",qTy)),var("state",qTy)),
                                         var_w("cond",4)],@{theory})],
                                let'
                                  (tp[var_b"v",var("s",qTy)],
                                   apply
                                     (call
                                        ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                         tp[var_w("cond",4),lf],@{theory}),var("state",qTy)),
                                   tp[ite(var_b"v",
                                          call
                                            ("instruction.Undefined",@{typ instruction},lw(0,32),
                                             @{theory}),
                                          Term.Const(@{const_name "NoOperation"},@{typ instruction})),
                                      var("s",qTy)]))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,var_b"b'6",
                                                        bop(And,var_b"b'5",var_b"b'4")))))))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("cond",4),
                                        apply
                                          (call
                                             ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,
                                              @{theory}),var("state",qTy))],@{theory}),
                                  var("state",qTy)),
                               ite(var_b"v",
                                   tp[call
                                        ("instruction.System",@{typ instruction},
                                         call
                                           ("System.HypervisorCall",@{typ System},
                                            cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                   ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                      var_b"b'16",var_b"b'15",var_b"b'14",
                                                      var_b"b'13",var_b"b'12",var_b"b'11",
                                                      var_b"b'10",var_b"b'9",var_b"b'8"]),
                                               mop(Cast w4,
                                                   ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                            @{theory}),@{theory}),
                                      ite(mop(Not,eq(var_w("cond",4),lw(14,4))),
                                          apply
                                            (call
                                               ("DECODE_UNPREDICTABLE",
                                                @{typ "state \<Rightarrow> state"},
                                                tp[var("mc",@{typ MachineCode}),ls"HypervisorCall"],
                                                @{theory}),var("s",qTy)),var("s",qTy))],
                                   tp[apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy)),var("s",qTy)]))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'7"),
                                                    bop(And,var_b"b'6",
                                                        bop(And,var_b"b'5",var_b"b'4")))))))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("cond",4),
                                        apply
                                          (call
                                             ("HaveSecurityExt",@{typ "state \<Rightarrow> bool"},
                                              lu,@{theory}),var("state",qTy))],@{theory}),
                                  var("state",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.System",@{typ instruction},
                                         call
                                           ("System.SecureMonitorCall",@{typ System},
                                            mop(Cast w4,
                                                ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                            @{theory}),@{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)])),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Ra",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    apply
                                                      (call
                                                         ("HaveDSPSupport",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("state",qTy))],@{theory}),
                                              var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.Signed16Multiply32Accumulate",
                                                        @{typ Multiply},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                           var_w("Rd",4),var_w("Rn",4),
                                                           var_w("Rm",4),var_w("Ra",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                  eq(var_w("Ra",4),lw(15,4))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"Signed16Multiply32Accumulate"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4")))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Ra",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    apply
                                                      (call
                                                         ("HaveDSPSupport",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("state",qTy))],@{theory}),
                                              var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.Signed16x32Multiply32Accumulate",
                                                        @{typ Multiply},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                           var_w("Rd",4),var_w("Rn",4),
                                                           var_w("Rm",4),var_w("Ra",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                  eq(var_w("Ra",4),lw(15,4))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"Signed16x32Multiply32Accumulate"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,var_b"b'5",mop(Not,var_b"b'4")))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 apply
                                                   (call
                                                      ("HaveDSPSupport",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("state",qTy))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Multiply",@{typ instruction},
                                                  call
                                                    ("Multiply.Signed16x32Multiply32Result",
                                                     @{typ Multiply},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                        var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],
                                                     @{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                           eq(var_w("Rm",4),lw(15,4)))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"Signed16x32Multiply32Result"],
                                                         @{theory}),var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("RdLo",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("RdHi",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    apply
                                                      (call
                                                         ("HaveDSPSupport",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("state",qTy))],@{theory}),
                                              var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.Signed16Multiply64Accumulate",
                                                        @{typ Multiply},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                           var_w("RdHi",4),var_w("RdLo",4),
                                                           var_w("Rn",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                          bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  eq(var_w("Rm",4),lw(15,4))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"Signed16Multiply64Accumulate"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 apply
                                                   (call
                                                      ("HaveDSPSupport",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("state",qTy))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Multiply",@{typ instruction},
                                                  call
                                                    ("Multiply.Signed16Multiply32Result",
                                                     @{typ Multiply},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'6"]),lw(1,1)),
                                                        eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                        var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],
                                                     @{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                           eq(var_w("Rm",4),lw(15,4)))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"Signed16Multiply32Result"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,mop(Not,var_b"b'19"),
                                                    bop(And,mop(Not,var_b"b'18"),
                                                        bop(And,mop(Not,var_b"b'17"),
                                                            bop(And,mop(Not,var_b"b'16"),
                                                                bop(And,mop(Not,var_b"b'15"),
                                                                    bop(And,mop(Not,var_b"b'14"),
                                                                        bop(And,
                                                                            mop(Not,var_b"b'13"),
                                                                            bop(And,
                                                                                mop(Not,var_b"b'12"),
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'11"),
                                                                                    bop(And,
                                                                                        mop(Not,
                                                                                            var_b"b'10"),
                                                                                        bop(And,
                                                                                            mop(Not,
                                                                                                var_b"b'9"),
                                                                                            bop(And,
                                                                                                mop(Not,
                                                                                                    var_b"b'8"),
                                                                                                bop(And,
                                                                                                    mop(Not,
                                                                                                        var_b"b'7"),
                                                                                                    bop(And,
                                                                                                        var_b"b'6",
                                                                                                        bop(And,
                                                                                                            var_b"b'5",
                                                                                                            bop(And,
                                                                                                                mop(Not,
                                                                                                                    var_b"b'4"),
                                                                                                                bop(And,
                                                                                                                    var_b"b'3",
                                                                                                                    bop(And,
                                                                                                                        var_b"b'2",
                                                                                                                        bop(And,
                                                                                                                            var_b"b'1",
                                                                                                                            mop(Not,
                                                                                                                                var_b"b'0"))))))))))))))))))))))))),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("cond",4),
                                        apply
                                          (call
                                             ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},lu,
                                              @{theory}),var("state",qTy))],@{theory}),
                                  var("state",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.System",@{typ instruction},
                                         Term.Const(@{const_name "ExceptionReturn"},@{typ System}),
                                         @{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)])),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'7")))),
                            tp[call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}),
                               var("state",qTy)]),
                           (mop(Not,var_b"b'4"),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("opc",4),
                                        mop(Cast w4,
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           tp[ite(var_b"v",
                                                  let'
                                                    (var_b"setflags",
                                                     eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                     let'
                                                       (tp[var("shift_t",@{typ SRType}),
                                                           var_n"shift_n"],
                                                        call
                                                          ("DecodeImmShift",
                                                           @{typ "SRType \<times> nat"},
                                                           tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                  ll[var_b"b'6",var_b"b'5"]),
                                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                                  ll[var_b"b'11",var_b"b'10",
                                                                     var_b"b'9",var_b"b'8",
                                                                     var_b"b'7"])],@{theory}),
                                                        itb([(eq(ex(var_w("opc",4),ln 3,ln 2,
                                                                    (Word_Lib.mk_wordT 2)),lw(2,2)),
                                                              call
                                                                ("instruction.Data",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Data.TestCompareRegister",
                                                                    @{typ Data},
                                                                    tp[ex(var_w("opc",4),ln 1,ln 0,
                                                                          (Word_Lib.mk_wordT 2)),
                                                                       var_w("Rn",4),var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],@{theory}),
                                                                 @{theory})),
                                                             (bop(In,var_w("opc",4),
                                                                  sl[lw(13,4),lw(15,4)]),
                                                              call
                                                                ("instruction.Data",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Data.ShiftImmediate",
                                                                    @{typ Data},
                                                                    tp[bop(Bit,var_w("opc",4),ln 1),
                                                                       var_b"setflags",
                                                                       var_w("Rd",4),var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],@{theory}),
                                                                 @{theory}))],
                                                            call
                                                              ("instruction.Data",
                                                               @{typ instruction},
                                                               call
                                                                 ("Data.Register",@{typ Data},
                                                                  tp[var_w("opc",4),var_b"setflags",
                                                                     var_w("Rd",4),var_w("Rn",4),
                                                                     var_w("Rm",4),
                                                                     var("shift_t",@{typ SRType}),
                                                                     var_n"shift_n"],@{theory}),
                                                               @{theory})))),
                                                  apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy))),var("s",qTy)])))))),
                           (bop(And,mop(Not,var_b"b'7"),var_b"b'4"),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rs",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("opc",4),
                                           mop(Cast w4,
                                               ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"setflags",
                                                        eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        let'
                                                          (var("shift_t",@{typ SRType}),
                                                           call
                                                             ("DecodeRegShift",@{typ SRType},
                                                              mop(Cast (Word_Lib.mk_wordT 2),
                                                                  ll[var_b"b'6",var_b"b'5"]),
                                                              @{theory}),
                                                           ite(bop(Or,eq(var_w("opc",4),lw(13,4)),
                                                                   eq(var_w("opc",4),lw(15,4))),
                                                               call
                                                                 ("instruction.Data",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Data.ShiftRegister",
                                                                     @{typ Data},
                                                                     tp[bop(Bit,var_w("opc",4),ln 1),
                                                                        var_b"setflags",
                                                                        var_w("Rd",4),var_w("Rm",4),
                                                                        var("shift_t",@{typ SRType}),
                                                                        var_w("Rs",4)],@{theory}),
                                                                  @{theory}),
                                                               call
                                                                 ("instruction.Data",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Data.RegisterShiftedRegister",
                                                                     @{typ Data},
                                                                     tp[var_w("opc",4),
                                                                        var_b"setflags",
                                                                        var_w("Rd",4),var_w("Rn",4),
                                                                        var_w("Rm",4),
                                                                        var("shift_t",@{typ SRType}),
                                                                        var_w("Rs",4)],@{theory}),
                                                                  @{theory})))),
                                                     ite(bop(Or,
                                                             bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                 mop(Not,
                                                                     eq(ex(var_w("opc",4),ln 3,ln 2,
                                                                           (Word_Lib.mk_wordT 2)),
                                                                        lw(2,2)))),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                     eq(var_w("Rs",4),lw(15,4))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"RegisterShiftedRegister"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'7",
                                            bop(And,mop(Not,var_b"b'6"),
                                                bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Ra",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("A",1),mop(Cast w1,ll[var_b"b'21"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"setflags",
                                                        eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        ite(eq(var_w("A",1),lw(1,1)),
                                                            call
                                                              ("instruction.Multiply",
                                                               @{typ instruction},
                                                               call
                                                                 ("Multiply.MultiplyAccumulate",
                                                                  @{typ Multiply},
                                                                  tp[var_b"setflags",var_w("Rd",4),
                                                                     var_w("Rn",4),var_w("Rm",4),
                                                                     var_w("Ra",4)],@{theory}),
                                                               @{theory}),
                                                            call
                                                              ("instruction.Multiply",
                                                               @{typ instruction},
                                                               call
                                                                 ("Multiply.Multiply32",
                                                                  @{typ Multiply},
                                                                  tp[var_b"setflags",var_w("Rd",4),
                                                                     var_w("Rn",4),var_w("Rm",4)],
                                                                  @{theory}),@{theory}))),
                                                     ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                     bop(Or,
                                                                         bop(And,
                                                                             eq(var_w("A",1),lw(1,1)),
                                                                             eq(var_w("Ra",4),
                                                                                lw(15,4))),
                                                                         bop(And,
                                                                             bop(Lt,
                                                                                 apply
                                                                                   (call
                                                                                      ("ArchVersion",
                                                                                       @{typ
                                                                                       "state \<Rightarrow>
                                                                                        nat"},lu,
                                                                                       @{theory}),
                                                                                    var("s",qTy)),
                                                                                 ln 6),
                                                                             eq(var_w("Rd",4),
                                                                                var_w("Rn",4))))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"Multiply"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("RdLo",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("RdHi",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(Ge,
                                                        apply
                                                          (call
                                                             ("ArchVersion",
                                                              @{typ "state \<Rightarrow> nat"},lu,
                                                              @{theory}),var("state",qTy)),ln 6)],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.MultiplyAccumulateAccumulate",
                                                        @{typ Multiply},
                                                        tp[var_w("RdHi",4),var_w("RdLo",4),
                                                           var_w("Rn",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                          bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                      eq(var_w("RdHi",4),
                                                                         var_w("RdLo",4)))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MultiplyAccumulateAccumulate"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("Ra",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    apply
                                                      (call
                                                         ("HaveThumb2",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("state",qTy))],@{theory}),
                                              var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.MultiplySubtract",@{typ Multiply},
                                                        tp[var_w("Rd",4),var_w("Rn",4),
                                                           var_w("Rm",4),var_w("Ra",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                  eq(var_w("Ra",4),lw(15,4))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MultiplySubtract"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,var_b"b'23",
                                    bop(And,var_b"b'7",
                                        bop(And,mop(Not,var_b"b'6"),
                                            bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (var_w("RdLo",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("RdHi",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.Multiply",@{typ instruction},
                                                     call
                                                       ("Multiply.MultiplyLong",@{typ Multiply},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                           var_w("RdHi",4),var_w("RdLo",4),
                                                           var_w("Rn",4),var_w("Rm",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                          bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                              bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("RdHi",4),
                                                                             var_w("RdLo",4)),
                                                                          bop(And,
                                                                              bop(Lt,
                                                                                  apply
                                                                                    (call
                                                                                       ("ArchVersion",
                                                                                        @{typ
                                                                                        "state \<Rightarrow>
                                                                                         nat"},lu,
                                                                                        @{theory}),
                                                                                     var("s",qTy)),
                                                                                  ln 6),
                                                                              bop(Or,
                                                                                  eq(var_w("RdHi",4),
                                                                                     var_w("Rn",4)),
                                                                                  eq(var_w("RdLo",4),
                                                                                     var_w("Rn",4))))))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MultiplyLong"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'21"),
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,var_b"b'7",
                                                bop(And,mop(Not,var_b"b'6"),
                                                    bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))),
                            let'
                              (var_w("Rt2",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Swap",@{typ instruction},
                                                  tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                     var_w("Rt",4),var_w("Rt2",4),var_w("Rn",4)],
                                                  @{theory}),
                                               ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   eq(var_w("Rn",4),var_w("Rt",4)),
                                                                   eq(var_w("Rn",4),var_w("Rt2",4)))))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),ls"Swap"],
                                                         @{theory}),var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(Ge,
                                                     apply
                                                       (call
                                                          ("ArchVersion",
                                                           @{typ "state \<Rightarrow> nat"},lu,
                                                           @{theory}),var("state",qTy)),ln 6)],
                                              @{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Store",@{typ instruction},
                                                  call
                                                    ("Store.StoreExclusive",@{typ Store},
                                                     tp[var_w("Rd",4),var_w("Rt",4),var_w("Rn",4),
                                                        lw(0,32)],@{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   eq(var_w("Rd",4),var_w("Rn",4)),
                                                                   eq(var_w("Rd",4),var_w("Rt",4)))))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreExclusive"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,var_b"b'20",
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              bop(Ge,
                                                  apply
                                                    (call
                                                       ("ArchVersion",
                                                        @{typ "state \<Rightarrow> nat"},lu,
                                                        @{theory}),var("state",qTy)),ln 6)],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Load",@{typ instruction},
                                               call
                                                 ("Load.LoadExclusive",@{typ Load},
                                                  tp[var_w("Rt",4),var_w("Rn",4),lw(0,32)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                    eq(var_w("Rn",4),lw(15,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadExclusive"],@{theory}),var("s",qTy)),
                                                var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(In,
                                                     call
                                                       ("state.Architecture",@{typ Architecture},
                                                        var("state",qTy),@{theory}),
                                                     sl[lc("ARMv6K","Architecture",@{theory}),
                                                        lc("ARMv7_A","Architecture",@{theory}),
                                                        lc("ARMv7_R","Architecture",@{theory})])],
                                              @{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            let'
                                              (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                               tp[call
                                                    ("instruction.Store",@{typ instruction},
                                                     call
                                                       ("Store.StoreExclusiveDoubleword",
                                                        @{typ Store},
                                                        tp[var_w("Rd",4),var_w("Rt",4),
                                                           var_w("Rt2",4),var_w("Rn",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                              bop(Or,eq(var_w("Rt",4),lw(14,4)),
                                                                  bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("Rd",4),
                                                                             var_w("Rn",4)),
                                                                          bop(Or,
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rt",4)),
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rt2",4)))))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreExclusiveDoubleword"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))]),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",
                                            bop(And,var_b"b'20",
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              bop(In,
                                                  call
                                                    ("state.Architecture",@{typ Architecture},
                                                     var("state",qTy),@{theory}),
                                                  sl[lc("ARMv6K","Architecture",@{theory}),
                                                     lc("ARMv7_A","Architecture",@{theory}),
                                                     lc("ARMv7_R","Architecture",@{theory})])],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Load",@{typ instruction},
                                               call
                                                 ("Load.LoadExclusiveDoubleword",@{typ Load},
                                                  tp[var_w("Rt",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                                     var_w("Rn",4)],@{theory}),@{theory}),
                                            ite(bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                    bop(Or,eq(var_w("Rt",4),lw(14,4)),
                                                        eq(var_w("Rn",4),lw(15,4)))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadExclusiveDoubleword"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,var_b"b'22",
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(In,
                                                     call
                                                       ("state.Architecture",@{typ Architecture},
                                                        var("state",qTy),@{theory}),
                                                     sl[lc("ARMv6K","Architecture",@{theory}),
                                                        lc("ARMv7_A","Architecture",@{theory}),
                                                        lc("ARMv7_R","Architecture",@{theory})])],
                                              @{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Store",@{typ instruction},
                                                  call
                                                    ("Store.StoreExclusiveByte",@{typ Store},
                                                     tp[var_w("Rd",4),var_w("Rt",4),var_w("Rn",4)],
                                                     @{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   eq(var_w("Rd",4),var_w("Rn",4)),
                                                                   eq(var_w("Rd",4),var_w("Rt",4)))))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreExclusiveByte"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,var_b"b'22",
                                        bop(And,mop(Not,var_b"b'21"),
                                            bop(And,var_b"b'20",
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              bop(In,
                                                  call
                                                    ("state.Architecture",@{typ Architecture},
                                                     var("state",qTy),@{theory}),
                                                  sl[lc("ARMv6K","Architecture",@{theory}),
                                                     lc("ARMv7_A","Architecture",@{theory}),
                                                     lc("ARMv7_R","Architecture",@{theory})])],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Load",@{typ instruction},
                                               call
                                                 ("Load.LoadExclusiveByte",@{typ Load},
                                                  tp[var_w("Rt",4),var_w("Rn",4)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                    eq(var_w("Rn",4),lw(15,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadExclusiveByte"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,mop(Not,var_b"b'20"),
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(In,
                                                     call
                                                       ("state.Architecture",@{typ Architecture},
                                                        var("state",qTy),@{theory}),
                                                     sl[lc("ARMv6K","Architecture",@{theory}),
                                                        lc("ARMv7_A","Architecture",@{theory}),
                                                        lc("ARMv7_R","Architecture",@{theory})])],
                                              @{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Store",@{typ instruction},
                                                  call
                                                    ("Store.StoreExclusiveHalf",@{typ Store},
                                                     tp[var_w("Rd",4),var_w("Rt",4),var_w("Rn",4)],
                                                     @{theory}),@{theory}),
                                               ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   eq(var_w("Rd",4),var_w("Rn",4)),
                                                                   eq(var_w("Rd",4),var_w("Rt",4)))))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreExclusiveHalf"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'24",
                                bop(And,var_b"b'23",
                                    bop(And,var_b"b'22",
                                        bop(And,var_b"b'21",
                                            bop(And,var_b"b'20",
                                                bop(And,var_b"b'7",
                                                    bop(And,mop(Not,var_b"b'6"),
                                                        bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              bop(In,
                                                  call
                                                    ("state.Architecture",@{typ Architecture},
                                                     var("state",qTy),@{theory}),
                                                  sl[lc("ARMv6K","Architecture",@{theory}),
                                                     lc("ARMv7_A","Architecture",@{theory}),
                                                     lc("ARMv7_R","Architecture",@{theory})])],
                                           @{theory}),var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Load",@{typ instruction},
                                               call
                                                 ("Load.LoadExclusiveHalf",@{typ Load},
                                                  tp[var_w("Rt",4),var_w("Rn",4)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                    eq(var_w("Rn",4),lw(15,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadExclusiveHalf"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'22"),
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,var_b"b'7",
                                                bop(And,mop(Not,var_b"b'6"),
                                                    bop(And,var_b"b'5",var_b"b'4"))))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 apply
                                                   (call
                                                      ("HaveThumb2",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("state",qTy))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.Store",@{typ instruction},
                                                  call
                                                    ("Store.StoreHalfUnprivileged",@{typ Store},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),lt,
                                                        var_w("Rt",4),var_w("Rn",4),
                                                        call
                                                          ("offset2.register_form2",@{typ offset2},
                                                           var_w("Rm",4),@{theory})],@{theory}),
                                                  @{theory}),
                                               ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),var_w("Rt",4)),
                                                               eq(var_w("Rm",4),lw(15,4))))),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreHalfUnprivileged"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,mop(Not,var_b"b'22"),
                                bop(And,mop(Not,var_b"b'20"),
                                    bop(And,var_b"b'7",
                                        bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'5",var_b"b'4"))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               let'
                                                 (var_b"wback",
                                                  bop(Or,eq(var_w("P",1),lw(0,1)),
                                                      eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                  tp[call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreHalf",@{typ Store},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),eq(var_w("P",1),lw(1,1)),
                                                              var_b"wback",var_w("Rt",4),
                                                              var_w("Rn",4),
                                                              call
                                                                ("offset1.register_form1",
                                                                 @{typ offset1},
                                                                 tp[var_w("Rm",4),
                                                                    lc("SRType_LSL","SRType",
                                                                       @{theory}),ln 0],@{theory})],
                                                           @{theory}),@{theory}),
                                                     ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                 bop(Or,
                                                                     bop(And,var_b"wback",
                                                                         bop(Or,
                                                                             eq(var_w("Rn",4),
                                                                                lw(15,4)),
                                                                             eq(var_w("Rn",4),
                                                                                var_w("Rt",4)))),
                                                                     bop(And,
                                                                         bop(Lt,
                                                                             apply
                                                                               (call
                                                                                  ("ArchVersion",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    nat"},lu,
                                                                                   @{theory}),
                                                                                var("s",qTy)),ln 6),
                                                                         bop(And,var_b"wback",
                                                                             eq(var_w("Rm",4),
                                                                                var_w("Rn",4))))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"StoreHalf"],@{theory}),
                                                            var("s",qTy)),var("s",qTy))]),
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'22"),
                                    bop(And,var_b"b'21",
                                        bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(And,
                                                           bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                               eq(var_w("S",1),lw(1,1))),
                                                           apply
                                                             (call
                                                                ("HaveThumb2",
                                                                 @{typ "state \<Rightarrow> bool"},
                                                                 lu,@{theory}),var("state",qTy)))],
                                                    @{theory}),var("state",qTy)),
                                              ite(var_b"v",
                                                  tp[let'
                                                       (var_b"add",
                                                        eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                        let'
                                                          (var("m",@{typ offset2}),
                                                           call
                                                             ("offset2.register_form2",
                                                              @{typ offset2},var_w("Rm",4),@{theory}),
                                                           ite(eq(var_w("H",1),lw(1,1)),
                                                               call
                                                                 ("instruction.Load",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Load.LoadHalfUnprivileged",
                                                                     @{typ Load},
                                                                     tp[eq(var_w("S",1),lw(0,1)),
                                                                        var_b"add",lt,var_w("Rt",4),
                                                                        var_w("Rn",4),
                                                                        var("m",@{typ offset2})],
                                                                     @{theory}),@{theory}),
                                                               call
                                                                 ("instruction.Load",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Load.LoadSignedByteUnprivileged",
                                                                     @{typ Load},
                                                                     tp[var_b"add",lt,var_w("Rt",4),
                                                                        var_w("Rn",4),
                                                                        var("m",@{typ offset2})],
                                                                     @{theory}),@{theory})))),
                                                     ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,
                                                                     eq(var_w("Rn",4),var_w("Rt",4)),
                                                                     eq(var_w("Rm",4),lw(15,4))))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadHalf/Byte (unprivileged)"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,mop(Not,var_b"b'22"),
                                bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                     let'
                                       (var_w("Rt",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("cond",4),
                                                          bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                              eq(var_w("S",1),lw(1,1)))],@{theory}),
                                                    var("state",qTy)),
                                                 ite(var_b"v",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        tp[let'
                                                             (var_b"index",eq(var_w("P",1),lw(1,1)),
                                                              let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var_b"unsigned",
                                                                    eq(var_w("S",1),lw(0,1)),
                                                                    let'
                                                                      (var("m",@{typ offset1}),
                                                                       call
                                                                         ("offset1.register_form1",
                                                                          @{typ offset1},
                                                                          tp[var_w("Rm",4),
                                                                             lc("SRType_LSL",
                                                                                "SRType",@{theory}),
                                                                             ln 0],@{theory}),
                                                                       ite(eq(var_w("H",1),lw(1,1)),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadHalf",
                                                                                 @{typ Load},
                                                                                 tp[var_b"unsigned",
                                                                                    var_b"add",
                                                                                    var_b"index",
                                                                                    var_b"wback",
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset1})],
                                                                                 @{theory}),
                                                                              @{theory}),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadByte",
                                                                                 @{typ Load},
                                                                                 tp[var_b"unsigned",
                                                                                    var_b"add",
                                                                                    var_b"index",
                                                                                    var_b"wback",
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset1})],
                                                                                 @{theory}),
                                                                              @{theory})))))),
                                                           ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rm",4),lw(15,4)),
                                                                       bop(And,
                                                                           bop(Lt,
                                                                               apply
                                                                                 (call
                                                                                    ("ArchVersion",
                                                                                     @{typ
                                                                                     "state \<Rightarrow>
                                                                                      nat"},lu,
                                                                                     @{theory}),
                                                                                  var("s",qTy)),ln 6),
                                                                           bop(And,var_b"wback",
                                                                               eq(var_w("Rm",4),
                                                                                  var_w("Rn",4)))))),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"LoadHalf/Byte"],@{theory}),
                                                                  var("s",qTy)),var("s",qTy))]),
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)]))))))))),
                           (bop(And,mop(Not,var_b"b'22"),
                                bop(And,mop(Not,var_b"b'20"),
                                    bop(And,var_b"b'7",bop(And,var_b"b'6",var_b"b'4")))),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       apply
                                                         (call
                                                            ("HaveDSPSupport",
                                                             @{typ "state \<Rightarrow> bool"},lu,
                                                             @{theory}),var("state",qTy))],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  let'
                                                    (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(var_w("W",1),lw(1,1))),
                                                        let'
                                                          (var_b"store",
                                                           eq(mop(Cast w1,ll[var_b"b'5"]),lw(1,1)),
                                                           tp[let'
                                                                (var_b"index",
                                                                 eq(var_w("P",1),lw(1,1)),
                                                                 let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var("m",@{typ offset2}),
                                                                       call
                                                                         ("offset2.register_form2",
                                                                          @{typ offset2},
                                                                          var_w("Rm",4),@{theory}),
                                                                       ite(var_b"store",
                                                                           call
                                                                             ("instruction.Store",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Store.StoreDual",
                                                                                 @{typ Store},
                                                                                 tp[var_b"add",
                                                                                    var_b"index",
                                                                                    var_b"wback",
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rt2",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset2})],
                                                                                 @{theory}),
                                                                              @{theory}),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadDual",
                                                                                 @{typ Load},
                                                                                 tp[var_b"add",
                                                                                    var_b"index",
                                                                                    var_b"wback",
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rt2",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset2})],
                                                                                 @{theory}),
                                                                              @{theory}))))),
                                                              ite(bop(Or,
                                                                      bop(Bit,var_w("Rt",4),ln 0),
                                                                      bop(Or,
                                                                          bop(And,
                                                                              eq(var_w("P",1),
                                                                                 lw(0,1)),
                                                                              eq(var_w("W",1),
                                                                                 lw(1,1))),
                                                                          bop(Or,
                                                                              eq(var_w("Rt2",4),
                                                                                 lw(15,4)),
                                                                              bop(Or,
                                                                                  eq(var_w("Rm",4),
                                                                                     lw(15,4)),
                                                                                  bop(Or,
                                                                                      bop(And,
                                                                                          mop(Not,
                                                                                              var_b"store"),
                                                                                          bop(Or,
                                                                                              eq(var_w("Rm",4),
                                                                                                 var_w("Rt",4)),
                                                                                              eq(var_w("Rm",4),
                                                                                                 var_w("Rt2",4)))),
                                                                                      bop(Or,
                                                                                          bop(And,
                                                                                              var_b"wback",
                                                                                              bop(Or,
                                                                                                  eq(var_w("Rn",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  bop(Or,
                                                                                                      eq(var_w("Rn",4),
                                                                                                         var_w("Rt",4)),
                                                                                                      eq(var_w("Rn",4),
                                                                                                         var_w("Rt2",4))))),
                                                                                          bop(And,
                                                                                              bop(Lt,
                                                                                                  apply
                                                                                                    (call
                                                                                                       ("ArchVersion",
                                                                                                        @{typ
                                                                                                        "state \<Rightarrow>
                                                                                                         nat"},
                                                                                                        lu,
                                                                                                        @{theory}),
                                                                                                     var("s",
                                                                                                         qTy)),
                                                                                                  ln
                                                                                                   6),
                                                                                              bop(And,
                                                                                                  var_b"wback",
                                                                                                  eq(var_w("Rm",4),
                                                                                                     var_w("Rn",4)))))))))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "Load/StoreDual (register)"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))]))),
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,var_b"b'22",
                                bop(And,mop(Not,var_b"b'20"),
                                    bop(And,var_b"b'19",
                                        bop(And,var_b"b'18",
                                            bop(And,var_b"b'17",
                                                bop(And,var_b"b'16",
                                                    bop(And,var_b"b'7",
                                                        bop(And,var_b"b'6",
                                                            bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("cond",4),
                                           apply
                                             (call
                                                ("HaveDSPSupport",@{typ "state \<Rightarrow> bool"},
                                                 lu,@{theory}),var("state",qTy))],@{theory}),
                                     var("state",qTy)),
                                  ite(var_b"v",
                                      let'
                                        (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                         tp[call
                                              ("instruction.Load",@{typ instruction},
                                               call
                                                 ("Load.LoadDualLiteral",@{typ Load},
                                                  tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                     var_w("Rt",4),var_w("Rt2",4),
                                                     mop(Cast w32,
                                                         cc[mop(Cast w4,
                                                                ll[var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8"]),
                                                            mop(Cast w4,
                                                                ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"])])],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                    eq(var_w("Rt2",4),lw(15,4))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadDual (literal)"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))]),
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)])))),
                           (bop(And,var_b"b'22",
                                bop(And,mop(Not,var_b"b'20"),
                                    bop(And,var_b"b'7",bop(And,var_b"b'6",var_b"b'4")))),
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       apply
                                                         (call
                                                            ("HaveDSPSupport",
                                                             @{typ "state \<Rightarrow> bool"},lu,
                                                             @{theory}),var("state",qTy))],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  let'
                                                    (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(var_w("W",1),lw(1,1))),
                                                        tp[let'
                                                             (var_b"index",eq(var_w("P",1),lw(1,1)),
                                                              let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var("m",@{typ offset2}),
                                                                    call
                                                                      ("offset2.immediate_form2",
                                                                       @{typ offset2},
                                                                       mop(Cast w32,
                                                                           cc[mop(Cast w4,
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10",
                                                                                     var_b"b'9",
                                                                                     var_b"b'8"]),
                                                                              mop(Cast w4,
                                                                                  ll[var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"])]),
                                                                       @{theory}),
                                                                    ite(eq(var_w("S",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Store",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Store.StoreDual",
                                                                              @{typ Store},
                                                                              tp[var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rt2",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset2})],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadDual",
                                                                              @{typ Load},
                                                                              tp[var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rt2",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset2})],
                                                                              @{theory}),@{theory}))))),
                                                           ite(bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                                   bop(Or,
                                                                       bop(And,
                                                                           eq(var_w("P",1),lw(0,1)),
                                                                           eq(var_w("W",1),lw(1,1))),
                                                                       bop(Or,
                                                                           bop(And,var_b"wback",
                                                                               bop(Or,
                                                                                   bop(And,
                                                                                       eq(var_w("S",1),
                                                                                          lw(1,1)),
                                                                                       eq(var_w("Rn",4),
                                                                                          lw(15,4))),
                                                                                   bop(Or,
                                                                                       eq(var_w("Rn",4),
                                                                                          var_w("Rt",4)),
                                                                                       eq(var_w("Rn",4),
                                                                                          var_w("Rt2",4))))),
                                                                           eq(var_w("Rt2",4),
                                                                              lw(15,4))))),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "Load/StoreDual (immediate)"],
                                                                     @{theory}),var("s",qTy)),
                                                               var("s",qTy))])),
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,var_b"b'22",
                                    bop(And,var_b"b'21",
                                        bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))))),
                            let'
                              (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("cond",4),
                                                    bop(And,
                                                        bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                            eq(var_w("S",1),lw(1,1))),
                                                        apply
                                                          (call
                                                             ("HaveThumb2",
                                                              @{typ "state \<Rightarrow> bool"},lu,
                                                              @{theory}),var("state",qTy)))],
                                                 @{theory}),var("state",qTy)),
                                           ite(var_b"v",
                                               tp[let'
                                                    (var_b"add",
                                                     eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                     let'
                                                       (var("m",@{typ offset2}),
                                                        call
                                                          ("offset2.immediate_form2",@{typ offset2},
                                                           mop(Cast w32,
                                                               cc[mop(Cast w4,
                                                                      ll[var_b"b'11",var_b"b'10",
                                                                         var_b"b'9",var_b"b'8"]),
                                                                  mop(Cast w4,
                                                                      ll[var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"])]),
                                                           @{theory}),
                                                        ite(eq(var_w("H",1),lw(1,1)),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadHalfUnprivileged",
                                                                  @{typ Load},
                                                                  tp[eq(var_w("S",1),lw(0,1)),
                                                                     var_b"add",lt,var_w("Rt",4),
                                                                     var_w("Rn",4),
                                                                     var("m",@{typ offset2})],
                                                                  @{theory}),@{theory}),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadSignedByteUnprivileged",
                                                                  @{typ Load},
                                                                  tp[var_b"add",lt,var_w("Rt",4),
                                                                     var_w("Rn",4),
                                                                     var("m",@{typ offset2})],
                                                                  @{theory}),@{theory})))),
                                                  ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              eq(var_w("Rn",4),var_w("Rt",4)))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"LoadHalf/Byte (unprivileged)"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                           (bop(And,var_b"b'22",
                                bop(And,var_b"b'20",
                                    bop(And,var_b"b'19",
                                        bop(And,var_b"b'18",
                                            bop(And,var_b"b'17",
                                                bop(And,var_b"b'16",bop(And,var_b"b'7",var_b"b'4"))))))),
                            let'
                              (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),
                                                 bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                     eq(var_w("S",1),lw(1,1)))],@{theory}),
                                           var("state",qTy)),
                                        ite(var_b"v",
                                            tp[let'
                                                 (var_b"add",
                                                  eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                  let'
                                                    (var_b"unsigned",eq(var_w("S",1),lw(0,1)),
                                                     let'
                                                       (var_w("imm32",32),
                                                        mop(Cast w32,
                                                            cc[mop(Cast w4,
                                                                   ll[var_b"b'11",var_b"b'10",
                                                                      var_b"b'9",var_b"b'8"]),
                                                               mop(Cast w4,
                                                                   ll[var_b"b'3",var_b"b'2",
                                                                      var_b"b'1",var_b"b'0"])]),
                                                        ite(eq(var_w("H",1),lw(1,1)),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadHalfLiteral",
                                                                  @{typ Load},
                                                                  tp[var_b"unsigned",var_b"add",
                                                                     var_w("Rt",4),var_w("imm32",32)],
                                                                  @{theory}),@{theory}),
                                                            call
                                                              ("instruction.Load",
                                                               @{typ instruction},
                                                               call
                                                                 ("Load.LoadByteLiteral",
                                                                  @{typ Load},
                                                                  tp[var_b"unsigned",var_b"add",
                                                                     var_w("Rt",4),var_w("imm32",32)],
                                                                  @{theory}),@{theory}))))),
                                               ite(eq(var_w("Rt",4),lw(15,4)),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadHalf/Byte (literal)"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)])))))),
                           (bop(And,var_b"b'22",bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))),
                            let'
                              (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("cond",4),
                                                       bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                           eq(var_w("S",1),lw(1,1)))],@{theory}),
                                                 var("state",qTy)),
                                              ite(var_b"v",
                                                  let'
                                                    (var_b"wback",
                                                     bop(Or,eq(var_w("P",1),lw(0,1)),
                                                         eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                     tp[let'
                                                          (var_b"index",eq(var_w("P",1),lw(1,1)),
                                                           let'
                                                             (var_b"add",
                                                              eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),
                                                              let'
                                                                (var_b"unsigned",
                                                                 eq(var_w("S",1),lw(0,1)),
                                                                 let'
                                                                   (var("m",@{typ offset1}),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           cc[mop(Cast w4,
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10",
                                                                                     var_b"b'9",
                                                                                     var_b"b'8"]),
                                                                              mop(Cast w4,
                                                                                  ll[var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"])]),
                                                                       @{theory}),
                                                                    ite(eq(var_w("H",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadHalf",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",
                                                                                 var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadByte",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",
                                                                                 var_b"add",
                                                                                 var_b"index",
                                                                                 var_b"wback",
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory})))))),
                                                        ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                bop(And,var_b"wback",
                                                                    eq(var_w("Rn",4),var_w("Rt",4)))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"LoadHalf/Byte (immediate)"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))]),
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))),
                           (bop(And,mop(Not,var_b"b'24"),
                                bop(And,var_b"b'22",
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,var_b"b'7",
                                                bop(And,mop(Not,var_b"b'6"),
                                                    bop(And,var_b"b'5",var_b"b'4"))))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("cond",4),
                                              apply
                                                (call
                                                   ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("state",qTy))],@{theory}),
                                        var("state",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.Store",@{typ instruction},
                                               call
                                                 ("Store.StoreHalfUnprivileged",@{typ Store},
                                                  tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),lt,
                                                     var_w("Rt",4),var_w("Rn",4),
                                                     call
                                                       ("offset2.immediate_form2",@{typ offset2},
                                                        mop(Cast w32,
                                                            cc[mop(Cast w4,
                                                                   ll[var_b"b'11",var_b"b'10",
                                                                      var_b"b'9",var_b"b'8"]),
                                                               mop(Cast w4,
                                                                   ll[var_b"b'3",var_b"b'2",
                                                                      var_b"b'1",var_b"b'0"])]),
                                                        @{theory})],@{theory}),@{theory}),
                                            ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                    bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                        eq(var_w("Rn",4),var_w("Rt",4)))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"StoreHalf (immediate)"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)]))))),
                           (bop(And,var_b"b'22",
                                bop(And,mop(Not,var_b"b'20"),
                                    bop(And,var_b"b'7",
                                        bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'5",var_b"b'4"))))),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("cond",4),lt],@{theory}),var("state",qTy)),
                                        ite(var_b"v",
                                            let'
                                              (var_b"wback",
                                               bop(Or,eq(var_w("P",1),lw(0,1)),
                                                   eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                               tp[call
                                                    ("instruction.Store",@{typ instruction},
                                                     call
                                                       ("Store.StoreHalf",@{typ Store},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           eq(var_w("P",1),lw(1,1)),var_b"wback",
                                                           var_w("Rt",4),var_w("Rn",4),
                                                           call
                                                             ("offset1.immediate_form1",
                                                              @{typ offset1},
                                                              mop(Cast w32,
                                                                  cc[mop(Cast w4,
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8"]),
                                                                     mop(Cast w4,
                                                                         ll[var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"])]),
                                                              @{theory})],@{theory}),@{theory}),
                                                  ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(And,var_b"wback",
                                                              bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  eq(var_w("Rn",4),var_w("Rt",4))))),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreHalf (immediate)"],@{theory}),
                                                         var("s",qTy)),var("s",qTy))]),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))))],
                          apply
                            (call
                               ("UndefinedARM",
                                @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                var_w("cond",4),@{theory}),var("state",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeThumb",
   close
     (var_w("h",16),
      close
        (var("state",qTy),
         let'
           (var("mc",@{typ MachineCode}),
            call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory}),
            let'
              (tp[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                  var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                  var_b"b'2",var_b"b'1",var_b"b'0"],
               call
                 ("boolify'16",
                  @{typ
                  "bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                  var_w("h",16),@{theory}),
               itb([(var_b"b'13",
                     itb([(var_b"b'15",
                           itb([(bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       tp[ite(var_b"v",
                                              call
                                                ("instruction.Data",@{typ instruction},
                                                 call
                                                   ("Data.ArithLogicImmediate",@{typ Data},
                                                    tp[lw(4,4),lf,
                                                       mop(Cast w4,
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                                       ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                           lw(13,4),lw(15,4)),
                                                       cc[lw(15,4),
                                                          mop(Cast w8,
                                                              ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                 var_b"b'4",var_b"b'3",var_b"b'2",
                                                                 var_b"b'1",var_b"b'0"])]],@{theory}),
                                                 @{theory}),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,mop(Not,var_b"b'10"),
                                                 bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       tp[ite(var_b"v",
                                              call
                                                ("instruction.Data",@{typ instruction},
                                                 call
                                                   ("Data.ArithLogicImmediate",@{typ Data},
                                                    tp[ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                           lw(2,4),lw(4,4)),lf,lw(13,4),lw(13,4),
                                                       cc[lw(30,5),
                                                          mop(Cast (Word_Lib.mk_wordT 7),
                                                              ll[var_b"b'6",var_b"b'5",var_b"b'4",
                                                                 var_b"b'3",var_b"b'2",var_b"b'1",
                                                                 var_b"b'0"])]],@{theory}),@{theory}),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",bop(And,mop(Not,var_b"b'10"),var_b"b'8"))),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[lw(14,4),
                                             apply
                                               (call
                                                  ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                   lu,@{theory}),var("state",qTy))],@{theory}),
                                       var("state",qTy)),
                                    ite(var_b"v",
                                        tp[call
                                             ("instruction.Branch",@{typ instruction},
                                              call
                                                ("Branch.CompareBranch",@{typ Branch},
                                                 tp[eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                    mop(Cast w4,
                                                        mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                    mop(Cast w32,
                                                        cc[mop(Cast w1,ll[var_b"b'9"]),
                                                           mop(Cast (Word_Lib.mk_wordT 5),
                                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                  var_b"b'4",var_b"b'3"]),lw(0,1)])],
                                                 @{theory}),@{theory}),
                                           ite(apply
                                                 (call
                                                    ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                     lu,@{theory}),var("s",qTy)),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"CompareBranch"],@{theory}),var("s",qTy)),
                                               var("s",qTy))],
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,mop(Not,var_b"b'10"),
                                                 bop(And,var_b"b'9",
                                                     bop(And,mop(Not,var_b"b'8"),mop(Not,var_b"b'6"))))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),
                                                bop(Ge,
                                                    apply
                                                      (call
                                                         ("ArchVersion",
                                                          @{typ "state \<Rightarrow> nat"},lu,
                                                          @{theory}),var("s",qTy)),ln 6)],@{theory}),
                                          var("s",qTy)),
                                       tp[ite(var_b"v",
                                              call
                                                ("instruction.Media",@{typ instruction},
                                                 call
                                                   ("Media.ExtendHalfword",@{typ Media},
                                                    tp[eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                       mop(Cast w4,
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                       lw(15,4),
                                                       mop(Cast w4,
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                                       ln 0],@{theory}),@{theory}),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,mop(Not,var_b"b'10"),
                                                 bop(And,var_b"b'9",
                                                     bop(And,mop(Not,var_b"b'8"),var_b"b'6")))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),
                                                bop(Ge,
                                                    apply
                                                      (call
                                                         ("ArchVersion",
                                                          @{typ "state \<Rightarrow> nat"},lu,
                                                          @{theory}),var("s",qTy)),ln 6)],@{theory}),
                                          var("s",qTy)),
                                       tp[ite(var_b"v",
                                              call
                                                ("instruction.Media",@{typ instruction},
                                                 call
                                                   ("Media.ExtendByte",@{typ Media},
                                                    tp[eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                       mop(Cast w4,
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                       lw(15,4),
                                                       mop(Cast w4,
                                                           mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                                       ln 0],@{theory}),@{theory}),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,var_b"b'10",mop(Not,var_b"b'9"))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       ite(var_b"v",
                                           let'
                                             (var_w("registers",16),
                                              cc[lw(0,1),mop(Cast w1,ll[var_b"b'8"]),lw(0,6),
                                                 mop(Cast w8,
                                                     ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                        var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                              tp[call
                                                   ("instruction.Store",@{typ instruction},
                                                    call
                                                      ("Store.StoreMultiple",@{typ Store},
                                                       tp[lf,lt,lt,lw(13,4),var_w("registers",16)],
                                                       @{theory}),@{theory}),
                                                 ite(bop(Lt,
                                                         call
                                                           ("BitCount",HOLogic.natT,
                                                            var_w("registers",16),@{theory}),ln 1),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"StoreMultiple"],@{theory}),
                                                        var("s",qTy)),var("s",qTy))]),
                                           tp[apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy)),var("s",qTy)])))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,var_b"b'10",
                                                 bop(And,var_b"b'9",
                                                     bop(And,mop(Not,var_b"b'8"),
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[lw(14,4),
                                             bop(Ge,
                                                 apply
                                                   (call
                                                      ("ArchVersion",
                                                       @{typ "state \<Rightarrow> nat"},lu,@{theory}),
                                                    var("state",qTy)),ln 6)],@{theory}),
                                       var("state",qTy)),
                                    ite(var_b"v",
                                        tp[call
                                             ("instruction.System",@{typ instruction},
                                              call
                                                ("System.Setend",@{typ System},
                                                 eq(mop(Cast w1,ll[var_b"b'3"]),lw(1,1)),@{theory}),
                                              @{theory}),
                                           ite(apply
                                                 (call
                                                    ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                     lu,@{theory}),var("s",qTy)),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),ls"Setend"],
                                                     @{theory}),var("s",qTy)),var("s",qTy))],
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,mop(Not,var_b"b'11"),
                                             bop(And,var_b"b'10",
                                                 bop(And,var_b"b'9",
                                                     bop(And,mop(Not,var_b"b'8"),
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",var_b"b'5")))))))),
                                 let'
                                   (var_w("F",1),mop(Cast w1,ll[var_b"b'0"]),
                                    let'
                                      (var_w("I",1),mop(Cast w1,ll[var_b"b'1"]),
                                       let'
                                         (var_w("A",1),mop(Cast w1,ll[var_b"b'2"]),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[lw(14,4),
                                                      bop(Ge,
                                                          apply
                                                            (call
                                                               ("ArchVersion",
                                                                @{typ "state \<Rightarrow> nat"},lu,
                                                                @{theory}),var("state",qTy)),ln 6)],
                                                   @{theory}),var("state",qTy)),
                                             ite(var_b"v",
                                                 tp[let'
                                                      (var_b"enable",
                                                       eq(mop(Cast w1,ll[var_b"b'4"]),lw(0,1)),
                                                       call
                                                         ("instruction.System",@{typ instruction},
                                                          call
                                                            ("System.ChangeProcessorState",
                                                             @{typ System},
                                                             tp[var_b"enable",
                                                                mop(Not,var_b"enable"),
                                                                eq(var_w("A",1),lw(1,1)),
                                                                eq(var_w("I",1),lw(1,1)),
                                                                eq(var_w("F",1),lw(1,1)),
                                                                lo (Word_Lib.mk_wordT 5)],@{theory}),
                                                          @{theory})),
                                                    ite(bop(Or,
                                                            eq(cc[var_w("A",1),var_w("I",1),
                                                                  var_w("F",1)],lw(0,3)),
                                                            apply
                                                              (call
                                                                 ("InITBlock",
                                                                  @{typ "state \<Rightarrow> bool"},
                                                                  lu,@{theory}),var("s",qTy))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"ChangeProcessorState"],@{theory}),
                                                           var("s",qTy)),var("s",qTy))],
                                                 tp[apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,var_b"b'11",
                                             bop(And,mop(Not,var_b"b'10"),
                                                 bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                                 let'
                                   (var_w("Rd",3),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    let'
                                      (var_w("Rm",3),
                                       mop(Cast (Word_Lib.mk_wordT 3),
                                           ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                                       let'
                                         (tp[var_w("v",4),var("s",qTy)],
                                          apply
                                            (call
                                               ("ThumbCondition",
                                                @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                                lu,@{theory}),var("state",qTy)),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[var_w("v",4),
                                                      bop(Ge,
                                                          apply
                                                            (call
                                                               ("ArchVersion",
                                                                @{typ "state \<Rightarrow> nat"},lu,
                                                                @{theory}),var("s",qTy)),ln 6)],
                                                   @{theory}),var("s",qTy)),
                                             tp[ite(var_b"v",
                                                    cs(mop(Cast (Word_Lib.mk_wordT 2),
                                                           ll[var_b"b'7",var_b"b'6"]),
                                                       [(var_w("v",2),
                                                         itb([(eq(var_w("v",2),lw(0,2)),
                                                               call
                                                                 ("instruction.Media",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Media.ByteReverse",
                                                                     @{typ Media},
                                                                     tp[mop(Cast w4,var_w("Rd",3)),
                                                                        mop(Cast w4,var_w("Rm",3))],
                                                                     @{theory}),@{theory})),
                                                              (eq(var_w("v",2),lw(1,2)),
                                                               call
                                                                 ("instruction.Media",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Media.ByteReversePackedHalfword",
                                                                     @{typ Media},
                                                                     tp[mop(Cast w4,var_w("Rd",3)),
                                                                        mop(Cast w4,var_w("Rm",3))],
                                                                     @{theory}),@{theory})),
                                                              (eq(var_w("v",2),lw(3,2)),
                                                               call
                                                                 ("instruction.Media",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Media.ByteReverseSignedHalfword",
                                                                     @{typ Media},
                                                                     tp[mop(Cast w4,var_w("Rd",3)),
                                                                        mop(Cast w4,var_w("Rm",3))],
                                                                     @{theory}),@{theory}))],
                                                             call
                                                               ("instruction.Undefined",
                                                                @{typ instruction},lw(0,32),
                                                                @{theory})))],@{context}),
                                                    apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy))),var("s",qTy)]))))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,var_b"b'11",
                                             bop(And,var_b"b'10",mop(Not,var_b"b'9"))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       ite(var_b"v",
                                           let'
                                             (var_w("registers",16),
                                              cc[mop(Cast w1,ll[var_b"b'8"]),lw(0,7),
                                                 mop(Cast w8,
                                                     ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                        var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                              tp[call
                                                   ("instruction.Load",@{typ instruction},
                                                    call
                                                      ("Load.LoadMultiple",@{typ Load},
                                                       tp[lt,lf,lt,lw(13,4),var_w("registers",16)],
                                                       @{theory}),@{theory}),
                                                 ite(bop(Or,
                                                         bop(Lt,
                                                             call
                                                               ("BitCount",HOLogic.natT,
                                                                var_w("registers",16),@{theory}),
                                                             ln 1),
                                                         bop(And,
                                                             bop(Bit,var_w("registers",16),ln 15),
                                                             bop(And,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)),
                                                                 mop(Not,
                                                                     apply
                                                                       (call
                                                                          ("LastInITBlock",
                                                                           @{typ
                                                                           "state \<Rightarrow> bool"},
                                                                           lu,@{theory}),
                                                                        var("s",qTy)))))),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"LoadMultiple"],@{theory}),
                                                        var("s",qTy)),var("s",qTy))]),
                                           tp[apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy)),var("s",qTy)])))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,var_b"b'11",
                                             bop(And,var_b"b'10",
                                                 bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[lw(14,4),
                                             bop(Ge,
                                                 apply
                                                   (call
                                                      ("ArchVersion",
                                                       @{typ "state \<Rightarrow> nat"},lu,@{theory}),
                                                    var("state",qTy)),ln 5)],@{theory}),
                                       var("state",qTy)),
                                    tp[ite(var_b"v",
                                           call
                                             ("instruction.Hint",@{typ instruction},
                                              call
                                                ("Hint.Breakpoint",@{typ Hint},
                                                 mop(Cast w32,
                                                     mop(Cast w8,
                                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                            var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"])),@{theory}),
                                              @{theory}),
                                           apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy))),var("s",qTy)])),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,var_b"b'11",
                                             bop(And,var_b"b'10",
                                                 bop(And,var_b"b'9",
                                                     bop(And,var_b"b'8",
                                                         bop(And,mop(Not,var_b"b'3"),
                                                             bop(And,mop(Not,var_b"b'2"),
                                                                 bop(And,mop(Not,var_b"b'1"),
                                                                     mop(Not,var_b"b'0")))))))))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    apply
                                      (call
                                         ("DecodeHint",
                                          @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                          tp[var_w("v",4),
                                             mop(Cast w8,
                                                 mop(Cast w4,
                                                     ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]))],
                                          @{theory}),var("s",qTy)))),
                                (bop(And,mop(Not,var_b"b'14"),
                                     bop(And,var_b"b'12",
                                         bop(And,var_b"b'11",
                                             bop(And,var_b"b'10",bop(And,var_b"b'9",var_b"b'8"))))),
                                 let'
                                   (var_w("mask",4),
                                    mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    let'
                                      (var_w("firstcond",4),
                                       mop(Cast w4,ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[lw(14,4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("state",qTy))],@{theory}),
                                             var("state",qTy)),
                                          ite(var_b"v",
                                              tp[call
                                                   ("instruction.IfThen",@{typ instruction},
                                                    tp[var_w("firstcond",4),var_w("mask",4)],
                                                    @{theory}),
                                                 ite(bop(Or,eq(var_w("firstcond",4),lw(15,4)),
                                                         bop(Or,
                                                             bop(And,
                                                                 eq(var_w("firstcond",4),lw(14,4)),
                                                                 mop(Not,
                                                                     eq(call
                                                                          ("BitCount",HOLogic.natT,
                                                                           var_w("mask",4),@{theory}),
                                                                        ln 1))),
                                                             apply
                                                               (call
                                                                  ("InITBlock",
                                                                   @{typ "state \<Rightarrow> bool"},
                                                                   lu,@{theory}),var("s",qTy)))),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"IfThen"],@{theory}),var("s",qTy)),
                                                     var("s",qTy))],
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                (bop(And,var_b"b'14",
                                     bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       ite(var_b"v",
                                           tp[call
                                                ("instruction.Branch",@{typ instruction},
                                                 call
                                                   ("Branch.BranchTarget",@{typ Branch},
                                                    mop(SE w32,
                                                        cc[mop(Cast (Word_Lib.mk_wordT 11),
                                                               ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                                  var_b"b'7",var_b"b'6",var_b"b'5",
                                                                  var_b"b'4",var_b"b'3",var_b"b'2",
                                                                  var_b"b'1",var_b"b'0"]),lw(0,1)]),
                                                    @{theory}),@{theory}),
                                              ite(bop(And,
                                                      apply
                                                        (call
                                                           ("InITBlock",
                                                            @{typ "state \<Rightarrow> bool"},lu,
                                                            @{theory}),var("s",qTy)),
                                                      mop(Not,
                                                          apply
                                                            (call
                                                               ("LastInITBlock",
                                                                @{typ "state \<Rightarrow> bool"},
                                                                lu,@{theory}),var("s",qTy)))),
                                                  apply
                                                    (call
                                                       ("DECODE_UNPREDICTABLE",
                                                        @{typ "state \<Rightarrow> state"},
                                                        tp[var("mc",@{typ MachineCode}),
                                                           ls"BranchTarget"],@{theory}),var("s",qTy)),
                                                  var("s",qTy))],
                                           tp[apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy)),var("s",qTy)]))))],
                               apply
                                 (call
                                    ("UndefinedThumb",
                                     @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                                     @{theory}),var("state",qTy)))),
                          (bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 tp[ite(var_b"v",
                                        call
                                          ("instruction.Data",@{typ instruction},
                                           call
                                             ("Data.Move",@{typ Data},
                                              tp[mop(Not,
                                                     apply
                                                       (call
                                                          ("InITBlock",
                                                           @{typ "state \<Rightarrow> bool"},lu,
                                                           @{theory}),var("s",qTy))),lf,
                                                 mop(Cast w4,
                                                     mop(Cast (Word_Lib.mk_wordT 3),
                                                         ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                                 mop(Cast (Word_Lib.mk_wordT 12),
                                                     mop(Cast w8,
                                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                            var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"]))],@{theory}),
                                           @{theory}),
                                        apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                          (bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 tp[ite(var_b"v",
                                        call
                                          ("instruction.Data",@{typ instruction},
                                           call
                                             ("Data.TestCompareImmediate",@{typ Data},
                                              tp[lw(2,2),
                                                 mop(Cast w4,
                                                     mop(Cast (Word_Lib.mk_wordT 3),
                                                         ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                                 mop(Cast (Word_Lib.mk_wordT 12),
                                                     mop(Cast w8,
                                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                            var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"]))],@{theory}),
                                           @{theory}),
                                        apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                          (bop(And,mop(Not,var_b"b'14"),var_b"b'12"),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 ite(var_b"v",
                                     let'
                                       (var_w("d",4),
                                        mop(Cast w4,
                                            mop(Cast (Word_Lib.mk_wordT 3),
                                                ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.ArithLogicImmediate",@{typ Data},
                                                 tp[ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                        lw(2,4),lw(4,4)),
                                                    mop(Not,
                                                        apply
                                                          (call
                                                             ("InITBlock",
                                                              @{typ "state \<Rightarrow> bool"},lu,
                                                              @{theory}),var("s",qTy))),
                                                    var_w("d",4),var_w("d",4),
                                                    mop(Cast (Word_Lib.mk_wordT 12),
                                                        mop(Cast w8,
                                                            ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                               var_b"b'4",var_b"b'3",var_b"b'2",
                                                               var_b"b'1",var_b"b'0"]))],@{theory}),
                                              @{theory}),var("s",qTy)]),
                                     tp[apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy)),var("s",qTy)])))),
                          (bop(And,var_b"b'14",mop(Not,var_b"b'12")),
                           let'
                             (var_w("Rt",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                              let'
                                (var_w("Rn",3),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       tp[ite(var_b"v",
                                              let'
                                                (var("m",@{typ offset1}),
                                                 call
                                                   ("offset1.immediate_form1",@{typ offset1},
                                                    mop(Cast w32,
                                                        cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                               ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                                  var_b"b'7",var_b"b'6"]),lw(0,2)]),
                                                    @{theory}),
                                                 ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                     call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadWord",@{typ Load},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}),
                                                     call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreWord",@{typ Store},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}))),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))))),
                          (bop(And,var_b"b'14",var_b"b'12"),
                           let'
                             (var_w("Rt",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                              let'
                                (var_w("Rn",3),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       tp[ite(var_b"v",
                                              let'
                                                (var("m",@{typ offset1}),
                                                 call
                                                   ("offset1.immediate_form1",@{typ offset1},
                                                    mop(Cast w32,
                                                        mop(Cast (Word_Lib.mk_wordT 5),
                                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                               var_b"b'7",var_b"b'6"])),@{theory}),
                                                 ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                     call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadByte",@{typ Load},
                                                           tp[lt,lt,lt,lf,
                                                              mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}),
                                                     call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreByte",@{typ Store},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}))),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)])))))],
                         apply
                           (call
                              ("UndefinedThumb",
                               @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                               @{theory}),var("state",qTy)))),
                    (var_b"b'15",
                     itb([(bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                           let'
                             (var_w("Rt",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                              let'
                                (var_w("Rn",3),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                       tp[ite(var_b"v",
                                              let'
                                                (var("m",@{typ offset1}),
                                                 call
                                                   ("offset1.immediate_form1",@{typ offset1},
                                                    mop(Cast w32,
                                                        cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                               ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                                  var_b"b'7",var_b"b'6"]),lw(0,1)]),
                                                    @{theory}),
                                                 ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                     call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadHalf",@{typ Load},
                                                           tp[lt,lt,lt,lf,
                                                              mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}),
                                                     call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreHalf",@{typ Store},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              mop(Cast w4,var_w("Rn",3)),
                                                              var("m",@{typ offset1})],@{theory}),
                                                        @{theory}))),
                                              apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy))),var("s",qTy)]))))),
                          (bop(And,mop(Not,var_b"b'14"),var_b"b'12"),
                           let'
                             (var_w("Rt",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'10",var_b"b'9",var_b"b'8"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                    tp[ite(var_b"v",
                                           let'
                                             (var("m",@{typ offset1}),
                                              call
                                                ("offset1.immediate_form1",@{typ offset1},
                                                 mop(Cast w32,
                                                     cc[mop(Cast w8,
                                                            ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                               var_b"b'4",var_b"b'3",var_b"b'2",
                                                               var_b"b'1",var_b"b'0"]),lw(0,2)]),
                                                 @{theory}),
                                              ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                  call
                                                    ("instruction.Load",@{typ instruction},
                                                     call
                                                       ("Load.LoadWord",@{typ Load},
                                                        tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                           lw(13,4),var("m",@{typ offset1})],
                                                        @{theory}),@{theory}),
                                                  call
                                                    ("instruction.Store",@{typ instruction},
                                                     call
                                                       ("Store.StoreWord",@{typ Store},
                                                        tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                           lw(13,4),var("m",@{typ offset1})],
                                                        @{theory}),@{theory}))),
                                           apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy))),var("s",qTy)])))),
                          (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 ite(var_b"v",
                                     let'
                                       (var_w("registers",16),
                                        mop(Cast w16,
                                            mop(Cast w8,
                                                ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                   var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])),
                                        tp[call
                                             ("instruction.Store",@{typ instruction},
                                              call
                                                ("Store.StoreMultiple",@{typ Store},
                                                 tp[lt,lf,lt,
                                                    mop(Cast w4,
                                                        mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                                    var_w("registers",16)],@{theory}),@{theory}),
                                           ite(bop(Lt,
                                                   call
                                                     ("BitCount",HOLogic.natT,var_w("registers",16),
                                                      @{theory}),ln 1),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"StoreMultiple"],@{theory}),var("s",qTy)),
                                               var("s",qTy))]),
                                     tp[apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy)),var("s",qTy)])))),
                          (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                           let'
                             (var_w("Rn",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'10",var_b"b'9",var_b"b'8"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                    ite(var_b"v",
                                        let'
                                          (var_w("registers",16),
                                           mop(Cast w16,
                                               mop(Cast w8,
                                                   ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                      var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])),
                                           tp[call
                                                ("instruction.Load",@{typ instruction},
                                                 call
                                                   ("Load.LoadMultiple",@{typ Load},
                                                    tp[lt,lf,
                                                       mop(Not,
                                                           bop(Bit,var_w("registers",16),
                                                               mop(Cast HOLogic.natT,var_w("Rn",3)))),
                                                       mop(Cast w4,var_w("Rn",3)),
                                                       var_w("registers",16)],@{theory}),@{theory}),
                                              ite(bop(Lt,
                                                      call
                                                        ("BitCount",HOLogic.natT,
                                                         var_w("registers",16),@{theory}),ln 1),
                                                  apply
                                                    (call
                                                       ("DECODE_UNPREDICTABLE",
                                                        @{typ "state \<Rightarrow> state"},
                                                        tp[var("mc",@{typ MachineCode}),
                                                           ls"LoadMultiple"],@{theory}),var("s",qTy)),
                                                  var("s",qTy))]),
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))))),
                          (bop(And,var_b"b'14",
                               bop(And,var_b"b'12",
                                   bop(And,var_b"b'11",
                                       bop(And,var_b"b'10",bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 tp[ite(var_b"v",
                                        call
                                          ("instruction.Undefined",@{typ instruction},
                                           mop(Cast w32,
                                               mop(Cast w8,
                                                   ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                      var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])),
                                           @{theory}),
                                        apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                          (bop(And,var_b"b'14",
                               bop(And,var_b"b'12",
                                   bop(And,var_b"b'11",
                                       bop(And,var_b"b'10",bop(And,var_b"b'9",var_b"b'8"))))),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 tp[ite(var_b"v",
                                        call
                                          ("instruction.System",@{typ instruction},
                                           call
                                             ("System.SupervisorCall",@{typ System},
                                              mop(Cast w32,
                                                  mop(Cast w8,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                         var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])),@{theory}),
                                           @{theory}),
                                        apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                          (bop(And,var_b"b'14",var_b"b'12"),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              apply
                                (call
                                   ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                    tp[mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                       lt],@{theory}),var("state",qTy)),
                              ite(var_b"v",
                                  tp[call
                                       ("instruction.Branch",@{typ instruction},
                                        call
                                          ("Branch.BranchTarget",@{typ Branch},
                                           mop(SE w32,
                                               cc[mop(Cast w8,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                         var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"]),lw(0,1)]),@{theory}),
                                        @{theory}),
                                     ite(apply
                                           (call
                                              ("InITBlock",@{typ "state \<Rightarrow> bool"},lu,
                                               @{theory}),var("s",qTy)),
                                         apply
                                           (call
                                              ("DECODE_UNPREDICTABLE",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[var("mc",@{typ MachineCode}),ls"BranchTarget"],
                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                  tp[apply
                                       (call
                                          ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                           @{theory}),var("s",qTy)),var("s",qTy)])))],
                         apply
                           (call
                              ("UndefinedThumb",
                               @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                               @{theory}),var("state",qTy)))),
                    (bop(And,mop(Not,var_b"b'14"),
                         bop(And,var_b"b'12",bop(And,var_b"b'11",mop(Not,var_b"b'10")))),
                     let'
                       (tp[var_w("v",4),var("s",qTy)],
                        apply
                          (call
                             ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                              lu,@{theory}),var("state",qTy)),
                        let'
                          (tp[var_b"v",var("s",qTy)],
                           apply
                             (call
                                ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                           tp[ite(var_b"v",
                                  call
                                    ("instruction.Data",@{typ instruction},
                                     call
                                       ("Data.Register",@{typ Data},
                                        tp[ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),lw(2,4),
                                               lw(4,4)),
                                           mop(Not,
                                               apply
                                                 (call
                                                    ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                     lu,@{theory}),var("s",qTy))),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'8",var_b"b'7",var_b"b'6"])),
                                           lc("SRType_LSL","SRType",@{theory}),ln 0],@{theory}),
                                     @{theory}),
                                  apply
                                    (call
                                       ("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                                     var("s",qTy))),var("s",qTy)]))),
                    (bop(And,mop(Not,var_b"b'14"),
                         bop(And,var_b"b'12",bop(And,var_b"b'11",var_b"b'10"))),
                     let'
                       (tp[var_w("v",4),var("s",qTy)],
                        apply
                          (call
                             ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                              lu,@{theory}),var("state",qTy)),
                        let'
                          (tp[var_b"v",var("s",qTy)],
                           apply
                             (call
                                ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                           tp[ite(var_b"v",
                                  call
                                    ("instruction.Data",@{typ instruction},
                                     call
                                       ("Data.ArithLogicImmediate",@{typ Data},
                                        tp[ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),lw(2,4),
                                               lw(4,4)),
                                           mop(Not,
                                               apply
                                                 (call
                                                    ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                     lu,@{theory}),var("s",qTy))),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                           mop(Cast (Word_Lib.mk_wordT 12),
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'8",var_b"b'7",var_b"b'6"]))],@{theory}),
                                     @{theory}),
                                  apply
                                    (call
                                       ("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                                     var("s",qTy))),var("s",qTy)]))),
                    (mop(Not,var_b"b'14"),
                     let'
                       (tp[var_w("v",4),var("s",qTy)],
                        apply
                          (call
                             ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                              lu,@{theory}),var("state",qTy)),
                        let'
                          (tp[var_b"v",var("s",qTy)],
                           apply
                             (call
                                ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                           tp[ite(var_b"v",
                                  let'
                                    (tp[var("shift_t",@{typ SRType}),var_n"shift_n"],
                                     call
                                       ("DecodeImmShift",@{typ "SRType \<times> nat"},
                                        tp[mop(Cast (Word_Lib.mk_wordT 2),
                                               ll[var_b"b'12",var_b"b'11"]),
                                           mop(Cast (Word_Lib.mk_wordT 5),
                                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                  var_b"b'6"])],@{theory}),
                                     call
                                       ("instruction.Data",@{typ instruction},
                                        call
                                          ("Data.ShiftImmediate",@{typ Data},
                                           tp[lf,
                                              mop(Not,
                                                  apply
                                                    (call
                                                       ("InITBlock",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy))),
                                              mop(Cast w4,
                                                  mop(Cast (Word_Lib.mk_wordT 3),
                                                      ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                              mop(Cast w4,
                                                  mop(Cast (Word_Lib.mk_wordT 3),
                                                      ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                              var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
                                        @{theory})),
                                  apply
                                    (call
                                       ("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                                     var("s",qTy))),var("s",qTy)]))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),mop(Not,var_b"b'10")))),
                     let'
                       (var_w("Ry",3),
                        mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                        let'
                          (var_w("Rx",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                           let'
                             (var_w("opc",4),
                              mop(Cast w4,ll[var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                    ite(var_b"v",
                                        itb([(eq(var_w("opc",4),lw(0,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(1,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(5,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(6,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(12,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(14,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.Register",@{typ Data},
                                                          tp[var_w("opc",4),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory}),
                                                             ln 0],@{theory}),@{theory}),
                                                    var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(2,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.ShiftRegister",@{typ Data},
                                                          tp[lf,
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             call
                                                               ("DecodeRegShift",@{typ SRType},
                                                                mop(Cast (Word_Lib.mk_wordT 2),
                                                                    bop(Sub,var_w("opc",4),lw(2,4))),
                                                                @{theory}),
                                                             mop(Cast w4,var_w("Rx",3))],@{theory}),
                                                       @{theory}),var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(3,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.ShiftRegister",@{typ Data},
                                                          tp[lf,
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             call
                                                               ("DecodeRegShift",@{typ SRType},
                                                                mop(Cast (Word_Lib.mk_wordT 2),
                                                                    bop(Sub,var_w("opc",4),lw(2,4))),
                                                                @{theory}),
                                                             mop(Cast w4,var_w("Rx",3))],@{theory}),
                                                       @{theory}),var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(4,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.ShiftRegister",@{typ Data},
                                                          tp[lf,
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             call
                                                               ("DecodeRegShift",@{typ SRType},
                                                                mop(Cast (Word_Lib.mk_wordT 2),
                                                                    bop(Sub,var_w("opc",4),lw(2,4))),
                                                                @{theory}),
                                                             mop(Cast w4,var_w("Rx",3))],@{theory}),
                                                       @{theory}),var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(7,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 tp[call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.ShiftRegister",@{typ Data},
                                                          tp[lf,
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("InITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy))),
                                                             var_w("d",4),var_w("d",4),
                                                             lc("SRType_ROR","SRType",@{theory}),
                                                             mop(Cast w4,var_w("Rx",3))],@{theory}),
                                                       @{theory}),var("s",qTy)])),
                                             (eq(var_w("opc",4),lw(8,4)),
                                              tp[call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.TestCompareRegister",@{typ Data},
                                                       tp[ex(var_w("opc",4),ln 1,ln 0,
                                                             (Word_Lib.mk_wordT 2)),
                                                          mop(Cast w4,var_w("Ry",3)),
                                                          mop(Cast w4,var_w("Rx",3)),
                                                          lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                       @{theory}),@{theory}),var("s",qTy)]),
                                             (eq(var_w("opc",4),lw(10,4)),
                                              tp[call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.TestCompareRegister",@{typ Data},
                                                       tp[ex(var_w("opc",4),ln 1,ln 0,
                                                             (Word_Lib.mk_wordT 2)),
                                                          mop(Cast w4,var_w("Ry",3)),
                                                          mop(Cast w4,var_w("Rx",3)),
                                                          lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                       @{theory}),@{theory}),var("s",qTy)]),
                                             (eq(var_w("opc",4),lw(11,4)),
                                              tp[call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.TestCompareRegister",@{typ Data},
                                                       tp[ex(var_w("opc",4),ln 1,ln 0,
                                                             (Word_Lib.mk_wordT 2)),
                                                          mop(Cast w4,var_w("Ry",3)),
                                                          mop(Cast w4,var_w("Rx",3)),
                                                          lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                       @{theory}),@{theory}),var("s",qTy)]),
                                             (eq(var_w("opc",4),lw(9,4)),
                                              tp[call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.ArithLogicImmediate",@{typ Data},
                                                       tp[lw(3,4),
                                                          mop(Not,
                                                              apply
                                                                (call
                                                                   ("InITBlock",
                                                                    @{typ
                                                                    "state \<Rightarrow> bool"},lu,
                                                                    @{theory}),var("s",qTy))),
                                                          mop(Cast w4,var_w("Ry",3)),
                                                          mop(Cast w4,var_w("Rx",3)),lw(0,12)],
                                                       @{theory}),@{theory}),var("s",qTy)]),
                                             (eq(var_w("opc",4),lw(13,4)),
                                              let'
                                                (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                 let'
                                                   (var_w("n",4),mop(Cast w4,var_w("Rx",3)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       let'
                                                         (var("s0",qTy),
                                                          ite(bop(And,
                                                                  bop(Lt,
                                                                      apply
                                                                        (call
                                                                           ("ArchVersion",
                                                                            @{typ
                                                                            "state \<Rightarrow> nat"},
                                                                            lu,@{theory}),
                                                                         var("s",qTy)),ln 6),
                                                                  eq(var_w("d",4),var_w("n",4))),
                                                              apply
                                                                (call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "state \<Rightarrow> state"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"Multiply"],@{theory}),
                                                                 var("s",qTy)),var("s",qTy)),
                                                          tp[apply
                                                               (call
                                                                  ("InITBlock",
                                                                   @{typ "state \<Rightarrow> bool"},
                                                                   lu,@{theory}),var("s0",qTy)),
                                                             var("s0",qTy)]),
                                                       tp[call
                                                            ("instruction.Multiply",
                                                             @{typ instruction},
                                                             call
                                                               ("Multiply.Multiply32",
                                                                @{typ Multiply},
                                                                tp[mop(Not,var_b"v"),var_w("d",4),
                                                                   var_w("n",4),var_w("d",4)],
                                                                @{theory}),@{theory}),var("s",qTy)])))),
                                             (eq(var_w("opc",4),lw(15,4)),
                                              tp[call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.ShiftImmediate",@{typ Data},
                                                       tp[lt,
                                                          mop(Not,
                                                              apply
                                                                (call
                                                                   ("InITBlock",
                                                                    @{typ
                                                                    "state \<Rightarrow> bool"},lu,
                                                                    @{theory}),var("s",qTy))),
                                                          mop(Cast w4,var_w("Ry",3)),
                                                          mop(Cast w4,var_w("Rx",3)),
                                                          lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                       @{theory}),@{theory}),var("s",qTy)])],
                                            lx(@{typ "instruction \<times> state"})),
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",
                                     bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                     let'
                       (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                        let'
                          (var_w("DN",1),mop(Cast w1,ll[var_b"b'7"]),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),
                                          bop(Or,mop(Msb,var_w("Rm",4)),
                                              bop(Or,eq(var_w("DN",1),lw(1,1)),
                                                  apply
                                                    (call
                                                       ("HaveThumb2",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy))))],@{theory}),
                                    var("s",qTy)),
                                 ite(var_b"v",
                                     let'
                                       (var_w("d",4),
                                        cc[var_w("DN",1),
                                           mop(Cast (Word_Lib.mk_wordT 3),
                                               ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.Register",@{typ Data},
                                                 tp[lw(4,4),lf,var_w("d",4),var_w("d",4),
                                                    var_w("Rm",4),
                                                    lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                 @{theory}),@{theory}),
                                           ite(bop(Or,
                                                   bop(And,eq(var_w("d",4),lw(15,4)),
                                                       eq(var_w("Rm",4),lw(15,4))),
                                                   bop(And,eq(var_w("d",4),lw(15,4)),
                                                       bop(And,
                                                           apply
                                                             (call
                                                                ("InITBlock",
                                                                 @{typ "state \<Rightarrow> bool"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           mop(Not,
                                                               apply
                                                                 (call
                                                                    ("LastInITBlock",
                                                                     @{typ
                                                                     "state \<Rightarrow> bool"},lu,
                                                                     @{theory}),var("s",qTy)))))),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),ls"ADD"],
                                                     @{theory}),var("s",qTy)),var("s",qTy))]),
                                     tp[apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy)),var("s",qTy)])))))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,var_b"b'8",
                                             bop(And,mop(Not,var_b"b'7"),mop(Not,var_b"b'6")))))))),
                     apply
                       (call
                          ("raise'exception",
                           @{typ "state \<Rightarrow> (instruction \<times> state)"},
                           call
                             ("exception.UNPREDICTABLE",@{typ exception},ls"Thumb: 010001 0100 _",
                              @{theory}),@{theory}),var("state",qTy))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",bop(And,mop(Not,var_b"b'9"),var_b"b'8"))))),
                     let'
                       (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                        let'
                          (tp[var_w("v",4),var("s",qTy)],
                           apply
                             (call
                                ("ThumbCondition",
                                 @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                              var("state",qTy)),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              apply
                                (call
                                   ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                    tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                              ite(var_b"v",
                                  let'
                                    (var_w("n",4),
                                     cc[mop(Cast w1,ll[var_b"b'7"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                     tp[call
                                          ("instruction.Data",@{typ instruction},
                                           call
                                             ("Data.TestCompareRegister",@{typ Data},
                                              tp[lw(2,2),var_w("n",4),var_w("Rm",4),
                                                 lc("SRType_LSL","SRType",@{theory}),ln 0],@{theory}),
                                           @{theory}),
                                        ite(bop(Or,
                                                bop(And,bop(Ult,var_w("n",4),lw(8,4)),
                                                    bop(Ult,var_w("Rm",4),lw(8,4))),
                                                bop(Or,eq(var_w("n",4),lw(15,4)),
                                                    eq(var_w("Rm",4),lw(15,4)))),
                                            apply
                                              (call
                                                 ("DECODE_UNPREDICTABLE",
                                                  @{typ "state \<Rightarrow> state"},
                                                  tp[var("mc",@{typ MachineCode}),ls"CMP"],@{theory}),
                                               var("s",qTy)),var("s",qTy))]),
                                  tp[apply
                                       (call
                                          ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                           @{theory}),var("s",qTy)),var("s",qTy)]))))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                     let'
                       (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                        let'
                          (var_w("D",1),mop(Cast w1,ll[var_b"b'7"]),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),
                                          bop(Or,mop(Msb,var_w("Rm",4)),
                                              bop(Or,eq(var_w("D",1),lw(1,1)),
                                                  bop(Ge,
                                                      apply
                                                        (call
                                                           ("ArchVersion",
                                                            @{typ "state \<Rightarrow> nat"},lu,
                                                            @{theory}),var("s",qTy)),ln 6)))],
                                       @{theory}),var("s",qTy)),
                                 ite(var_b"v",
                                     let'
                                       (var_w("d",4),
                                        cc[var_w("D",1),
                                           mop(Cast (Word_Lib.mk_wordT 3),
                                               ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.ShiftImmediate",@{typ Data},
                                                 tp[lf,lf,var_w("d",4),var_w("Rm",4),
                                                    lc("SRType_LSL","SRType",@{theory}),ln 0],
                                                 @{theory}),@{theory}),
                                           ite(bop(And,eq(var_w("d",4),lw(15,4)),
                                                   bop(And,
                                                       apply
                                                         (call
                                                            ("InITBlock",
                                                             @{typ "state \<Rightarrow> bool"},lu,
                                                             @{theory}),var("s",qTy)),
                                                       mop(Not,
                                                           apply
                                                             (call
                                                                ("LastInITBlock",
                                                                 @{typ "state \<Rightarrow> bool"},
                                                                 lu,@{theory}),var("s",qTy))))),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),ls"MOV"],
                                                     @{theory}),var("s",qTy)),var("s",qTy))]),
                                     tp[apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy)),var("s",qTy)])))))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",
                                     bop(And,var_b"b'9",bop(And,var_b"b'8",mop(Not,var_b"b'7"))))))),
                     let'
                       (tp[var_w("v",4),var("s",qTy)],
                        apply
                          (call
                             ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                              lu,@{theory}),var("state",qTy)),
                        let'
                          (tp[var_b"v",var("s",qTy)],
                           apply
                             (call
                                ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                           ite(var_b"v",
                               tp[call
                                    ("instruction.Branch",@{typ instruction},
                                     call
                                       ("Branch.BranchExchange",@{typ Branch},
                                        mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                                        @{theory}),@{theory}),
                                  ite(bop(And,
                                          apply
                                            (call
                                               ("InITBlock",@{typ "state \<Rightarrow> bool"},lu,
                                                @{theory}),var("s",qTy)),
                                          mop(Not,
                                              apply
                                                (call
                                                   ("LastInITBlock",
                                                    @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                                 var("s",qTy)))),
                                      apply
                                        (call
                                           ("DECODE_UNPREDICTABLE",
                                            @{typ "state \<Rightarrow> state"},
                                            tp[var("mc",@{typ MachineCode}),ls"BranchExchange"],
                                            @{theory}),var("s",qTy)),var("s",qTy))],
                               tp[apply
                                    (call
                                       ("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                                     var("s",qTy)),var("s",qTy)])))),
                    (bop(And,var_b"b'14",
                         bop(And,mop(Not,var_b"b'12"),
                             bop(And,mop(Not,var_b"b'11"),
                                 bop(And,var_b"b'10",
                                     bop(And,var_b"b'9",bop(And,var_b"b'8",var_b"b'7")))))),
                     let'
                       (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                        let'
                          (tp[var_w("v",4),var("s",qTy)],
                           apply
                             (call
                                ("ThumbCondition",
                                 @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                              var("state",qTy)),
                           let'
                             (tp[var_b"v",var("s",qTy)],
                              apply
                                (call
                                   ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                    tp[var_w("v",4),
                                       bop(Ge,
                                           apply
                                             (call
                                                ("ArchVersion",@{typ "state \<Rightarrow> nat"},lu,
                                                 @{theory}),var("s",qTy)),ln 5)],@{theory}),
                                 var("s",qTy)),
                              ite(var_b"v",
                                  tp[call
                                       ("instruction.Branch",@{typ instruction},
                                        call
                                          ("Branch.BranchLinkExchangeRegister",@{typ Branch},
                                           var_w("Rm",4),@{theory}),@{theory}),
                                     ite(bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                             bop(And,
                                                 apply
                                                   (call
                                                      ("InITBlock",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy)),
                                                 mop(Not,
                                                     apply
                                                       (call
                                                          ("LastInITBlock",
                                                           @{typ "state \<Rightarrow> bool"},lu,
                                                           @{theory}),var("s",qTy))))),
                                         apply
                                           (call
                                              ("DECODE_UNPREDICTABLE",
                                               @{typ "state \<Rightarrow> state"},
                                               tp[var("mc",@{typ MachineCode}),
                                                  ls"BranchLinkExchangeRegister"],@{theory}),
                                            var("s",qTy)),var("s",qTy))],
                                  tp[apply
                                       (call
                                          ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                           @{theory}),var("s",qTy)),var("s",qTy)]))))),
                    (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                     let'
                       (tp[var_w("v",4),var("s",qTy)],
                        apply
                          (call
                             ("ThumbCondition",@{typ "state \<Rightarrow> (4 word \<times> state)"},
                              lu,@{theory}),var("state",qTy)),
                        let'
                          (tp[var_b"v",var("s",qTy)],
                           apply
                             (call
                                ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                           tp[ite(var_b"v",
                                  call
                                    ("instruction.Load",@{typ instruction},
                                     call
                                       ("Load.LoadLiteral",@{typ Load},
                                        tp[lt,
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                           mop(Cast w32,
                                               cc[mop(Cast w8,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                         var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"]),lw(0,2)])],
                                        @{theory}),@{theory}),
                                  apply
                                    (call
                                       ("Skip",@{typ "state \<Rightarrow> instruction"},lu,@{theory}),
                                     var("s",qTy))),var("s",qTy)]))),
                    (bop(And,var_b"b'14",var_b"b'12"),
                     let'
                       (var_w("Rt",3),
                        mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                        let'
                          (var_w("Rn",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                           let'
                             (tp[var_w("v",4),var("s",qTy)],
                              apply
                                (call
                                   ("ThumbCondition",
                                    @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                    @{theory}),var("state",qTy)),
                              let'
                                (tp[var_b"v",var("s",qTy)],
                                 apply
                                   (call
                                      ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                       tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                 tp[ite(var_b"v",
                                        let'
                                          (var("m",@{typ offset1}),
                                           call
                                             ("offset1.register_form1",@{typ offset1},
                                              tp[mop(Cast w4,
                                                     mop(Cast (Word_Lib.mk_wordT 3),
                                                         ll[var_b"b'8",var_b"b'7",var_b"b'6"])),
                                                 lc("SRType_LSL","SRType",@{theory}),ln 0],@{theory}),
                                           cs(mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9"]),
                                              [(var_w("v",3),
                                                itb([(eq(var_w("v",3),lw(0,3)),
                                                      call
                                                        ("instruction.Store",@{typ instruction},
                                                         call
                                                           ("Store.StoreWord",@{typ Store},
                                                            tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(1,3)),
                                                      call
                                                        ("instruction.Store",@{typ instruction},
                                                         call
                                                           ("Store.StoreHalf",@{typ Store},
                                                            tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(2,3)),
                                                      call
                                                        ("instruction.Store",@{typ instruction},
                                                         call
                                                           ("Store.StoreByte",@{typ Store},
                                                            tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(3,3)),
                                                      call
                                                        ("instruction.Load",@{typ instruction},
                                                         call
                                                           ("Load.LoadByte",@{typ Load},
                                                            tp[lf,lt,lt,lf,
                                                               mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(4,3)),
                                                      call
                                                        ("instruction.Load",@{typ instruction},
                                                         call
                                                           ("Load.LoadWord",@{typ Load},
                                                            tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(5,3)),
                                                      call
                                                        ("instruction.Load",@{typ instruction},
                                                         call
                                                           ("Load.LoadHalf",@{typ Load},
                                                            tp[lt,lt,lt,lf,
                                                               mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(6,3)),
                                                      call
                                                        ("instruction.Load",@{typ instruction},
                                                         call
                                                           ("Load.LoadByte",@{typ Load},
                                                            tp[lt,lt,lt,lf,
                                                               mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory})),
                                                     (eq(var_w("v",3),lw(7,3)),
                                                      call
                                                        ("instruction.Load",@{typ instruction},
                                                         call
                                                           ("Load.LoadHalf",@{typ Load},
                                                            tp[lf,lt,lt,lf,
                                                               mop(Cast w4,var_w("Rt",3)),
                                                               mop(Cast w4,var_w("Rn",3)),
                                                               var("m",@{typ offset1})],@{theory}),
                                                         @{theory}))],lx @{typ instruction}))],
                                              @{context})),
                                        apply
                                          (call
                                             ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                              @{theory}),var("s",qTy))),var("s",qTy)])))))],
                   apply
                     (call
                        ("UndefinedThumb",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                         lu,@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeThumbEE",
   close
     (var_w("h",16),
      close
        (var("state",qTy),
         let'
           (var("mc",@{typ MachineCode}),
            call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory}),
            let'
              (tp[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                  var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                  var_b"b'2",var_b"b'1",var_b"b'0"],
               call
                 ("boolify'16",
                  @{typ
                  "bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                  var_w("h",16),@{theory}),
               ite(bop(And,var_b"b'14",mop(Not,var_b"b'13")),
                   itb([(bop(And,mop(Not,var_b"b'15"),var_b"b'12"),
                         let'
                           (var_w("Rt",3),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rn",3),
                               mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                               let'
                                 (tp[var_w("v",4),var("s",qTy)],
                                  apply
                                    (call
                                       ("ThumbCondition",
                                        @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                        @{theory}),var("state",qTy)),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                     ite(var_b"v",
                                         let'
                                           (var_w("m",4),
                                            mop(Cast w4,
                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                    ll[var_b"b'8",var_b"b'7",var_b"b'6"])),
                                            let'
                                              (var("m1",@{typ offset1}),
                                               call
                                                 ("offset1.register_form1",@{typ offset1},
                                                  tp[var_w("m",4),
                                                     lc("SRType_LSL","SRType",@{theory}),ln 1],
                                                  @{theory}),
                                               let'
                                                 (var("m2",@{typ offset1}),
                                                  call
                                                    ("offset1.register_form1",@{typ offset1},
                                                     tp[var_w("m",4),
                                                        lc("SRType_LSL","SRType",@{theory}),ln 2],
                                                     @{theory}),
                                                  cs(mop(Cast (Word_Lib.mk_wordT 3),
                                                         ll[var_b"b'11",var_b"b'10",var_b"b'9"]),
                                                     [(var_w("v",3),
                                                       itb([(eq(var_w("v",3),lw(0,3)),
                                                             tp[call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreWord",
                                                                      @{typ Store},
                                                                      tp[lt,lt,lf,
                                                                         mop(Cast w4,var_w("Rt",3)),
                                                                         mop(Cast w4,var_w("Rn",3)),
                                                                         var("m2",@{typ offset1})],
                                                                      @{theory}),@{theory}),
                                                                var("s",qTy)]),
                                                            (eq(var_w("v",3),lw(1,3)),
                                                             tp[call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreHalf",
                                                                      @{typ Store},
                                                                      tp[lt,lt,lf,
                                                                         mop(Cast w4,var_w("Rt",3)),
                                                                         mop(Cast w4,var_w("Rn",3)),
                                                                         var("m1",@{typ offset1})],
                                                                      @{theory}),@{theory}),
                                                                var("s",qTy)]),
                                                            (eq(var_w("v",3),lw(4,3)),
                                                             tp[call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadWord",@{typ Load},
                                                                      tp[lt,lt,lf,
                                                                         mop(Cast w4,var_w("Rt",3)),
                                                                         mop(Cast w4,var_w("Rn",3)),
                                                                         var("m2",@{typ offset1})],
                                                                      @{theory}),@{theory}),
                                                                var("s",qTy)]),
                                                            (eq(var_w("v",3),lw(5,3)),
                                                             tp[call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadHalf",@{typ Load},
                                                                      tp[lt,lt,lt,lf,
                                                                         mop(Cast w4,var_w("Rt",3)),
                                                                         mop(Cast w4,var_w("Rn",3)),
                                                                         var("m1",@{typ offset1})],
                                                                      @{theory}),@{theory}),
                                                                var("s",qTy)]),
                                                            (eq(var_w("v",3),lw(7,3)),
                                                             tp[call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadHalf",@{typ Load},
                                                                      tp[lf,lt,lt,lf,
                                                                         mop(Cast w4,var_w("Rt",3)),
                                                                         mop(Cast w4,var_w("Rn",3)),
                                                                         var("m1",@{typ offset1})],
                                                                      @{theory}),@{theory}),
                                                                var("s",qTy)])],
                                                           apply
                                                             (call
                                                                ("DecodeThumb",
                                                                 @{typ
                                                                 "state \<Rightarrow>
                                                                  (instruction \<times> state)"},
                                                                 var_w("h",16),@{theory}),
                                                              var("s",qTy))))],@{context})))),
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,mop(Not,var_b"b'11"),
                                     bop(And,mop(Not,var_b"b'10"),
                                         bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                         let'
                           (tp[var_w("v",4),var("s",qTy)],
                            apply
                              (call
                                 ("ThumbCondition",
                                  @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                               var("state",qTy)),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                               ite(var_b"v",
                                   tp[call
                                        ("instruction.Branch",@{typ instruction},
                                         call
                                           ("Branch.HandlerBranchParameter",@{typ Branch},
                                            tp[mop(Cast w32,
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'7",var_b"b'6",var_b"b'5"])),
                                               mop(Cast w32,
                                                   cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                          ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                             var_b"b'1",var_b"b'0"]),lw(0,5)])],
                                            @{theory}),@{theory}),
                                      ite(bop(And,
                                              apply
                                                (call
                                                   ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              mop(Not,
                                                  apply
                                                    (call
                                                       ("LastInITBlock",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy)))),
                                          apply
                                            (call
                                               ("DECODE_UNPREDICTABLE",
                                                @{typ "state \<Rightarrow> state"},
                                                tp[var("mc",@{typ MachineCode}),
                                                   ls"HandlerBranchParameter"],@{theory}),
                                             var("s",qTy)),var("s",qTy))],
                                   tp[apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy)),var("s",qTy)])))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,mop(Not,var_b"b'11"),
                                     bop(And,mop(Not,var_b"b'10"),
                                         bop(And,mop(Not,var_b"b'9"),var_b"b'8"))))),
                         tp[call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory}),
                            var("state",qTy)]),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,mop(Not,var_b"b'11"),
                                     bop(And,mop(Not,var_b"b'10"),var_b"b'9")))),
                         let'
                           (tp[var_w("v",4),var("s",qTy)],
                            apply
                              (call
                                 ("ThumbCondition",
                                  @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                               var("state",qTy)),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                               ite(var_b"v",
                                   tp[call
                                        ("instruction.Branch",@{typ instruction},
                                         call
                                           ("Branch.HandlerBranchLink",@{typ Branch},
                                            tp[eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                               mop(Cast w32,
                                                   cc[mop(Cast w8,
                                                          ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                             var_b"b'4",var_b"b'3",var_b"b'2",
                                                             var_b"b'1",var_b"b'0"]),lw(0,5)])],
                                            @{theory}),@{theory}),
                                      ite(bop(And,
                                              apply
                                                (call
                                                   ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              mop(Not,
                                                  apply
                                                    (call
                                                       ("LastInITBlock",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy)))),
                                          apply
                                            (call
                                               ("DECODE_UNPREDICTABLE",
                                                @{typ "state \<Rightarrow> state"},
                                                tp[var("mc",@{typ MachineCode}),
                                                   ls"HandlerBranchLink"],@{theory}),var("s",qTy)),
                                          var("s",qTy))],
                                   tp[apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy)),var("s",qTy)])))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),bop(And,mop(Not,var_b"b'11"),var_b"b'10"))),
                         let'
                           (tp[var_w("v",4),var("s",qTy)],
                            apply
                              (call
                                 ("ThumbCondition",
                                  @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                               var("state",qTy)),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                               ite(var_b"v",
                                   tp[call
                                        ("instruction.Branch",@{typ instruction},
                                         call
                                           ("Branch.HandlerBranchLinkParameter",@{typ Branch},
                                            tp[mop(Cast w32,
                                                   mop(Cast (Word_Lib.mk_wordT 5),
                                                       ll[var_b"b'9",var_b"b'8",var_b"b'7",
                                                          var_b"b'6",var_b"b'5"])),
                                               mop(Cast w32,
                                                   cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                          ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                             var_b"b'1",var_b"b'0"]),lw(0,5)])],
                                            @{theory}),@{theory}),
                                      ite(bop(And,
                                              apply
                                                (call
                                                   ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy)),
                                              mop(Not,
                                                  apply
                                                    (call
                                                       ("LastInITBlock",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy)))),
                                          apply
                                            (call
                                               ("DECODE_UNPREDICTABLE",
                                                @{typ "state \<Rightarrow> state"},
                                                tp[var("mc",@{typ MachineCode}),
                                                   ls"HandlerBranchLinkParameter"],@{theory}),
                                             var("s",qTy)),var("s",qTy))],
                                   tp[apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy)),var("s",qTy)])))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,var_b"b'11",
                                     bop(And,mop(Not,var_b"b'10"),mop(Not,var_b"b'9"))))),
                         let'
                           (tp[var_w("v",4),var("s",qTy)],
                            apply
                              (call
                                 ("ThumbCondition",
                                  @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                               var("state",qTy)),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.Load",@{typ instruction},
                                         call
                                           ("Load.LoadWord",@{typ Load},
                                            tp[lf,lt,lf,
                                               mop(Cast w4,
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                               mop(Cast w4,
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                               call
                                                 ("offset1.immediate_form1",@{typ offset1},
                                                  mop(Cast w32,
                                                      cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                             ll[var_b"b'8",var_b"b'7",var_b"b'6"]),
                                                         lw(0,2)]),@{theory})],@{theory}),@{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)]))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,var_b"b'11",
                                     bop(And,mop(Not,var_b"b'10"),
                                         bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                            let'
                              (tp[var_w("v",4),var("s",qTy)],
                               apply
                                 (call
                                    ("ThumbCondition",
                                     @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                     @{theory}),var("state",qTy)),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                  ite(var_b"v",
                                      let'
                                        (var_w("n",4),
                                         cc[mop(Cast w1,ll[var_b"b'7"]),
                                            mop(Cast (Word_Lib.mk_wordT 3),
                                                ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                         tp[call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.CheckArray",@{typ Branch},
                                                  tp[var_w("Rm",4),var_w("n",4)],@{theory}),
                                               @{theory}),
                                            ite(bop(Or,eq(var_w("n",4),lw(15,4)),
                                                    bop(In,var_w("Rm",4),sl[lw(13,4),lw(15,4)])),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),ls"CheckArray"],
                                                      @{theory}),var("s",qTy)),var("s",qTy))]),
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)]))))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),
                                 bop(And,var_b"b'11",
                                     bop(And,mop(Not,var_b"b'10"),bop(And,var_b"b'9",var_b"b'8"))))),
                         let'
                           (tp[var_w("v",4),var("s",qTy)],
                            apply
                              (call
                                 ("ThumbCondition",
                                  @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,@{theory}),
                               var("state",qTy)),
                            let'
                              (tp[var_b"v",var("s",qTy)],
                               apply
                                 (call
                                    ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                     tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                               tp[ite(var_b"v",
                                      call
                                        ("instruction.Load",@{typ instruction},
                                         call
                                           ("Load.LoadWord",@{typ Load},
                                            tp[lt,lt,lf,
                                               mop(Cast w4,
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                               lw(10,4),
                                               call
                                                 ("offset1.immediate_form1",@{typ offset1},
                                                  mop(Cast w32,
                                                      cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                             ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                var_b"b'4",var_b"b'3"]),lw(0,2)]),
                                                  @{theory})],@{theory}),@{theory}),
                                      apply
                                        (call
                                           ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                            @{theory}),var("s",qTy))),var("s",qTy)]))),
                        (bop(And,var_b"b'15",
                             bop(And,mop(Not,var_b"b'12"),bop(And,var_b"b'11",var_b"b'10"))),
                         let'
                           (var_w("Rt",3),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (tp[var_w("v",4),var("s",qTy)],
                               apply
                                 (call
                                    ("ThumbCondition",
                                     @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                     @{theory}),var("state",qTy)),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[var_w("v",4),lt],@{theory}),var("s",qTy)),
                                  tp[ite(var_b"v",
                                         let'
                                           (var("m",@{typ offset1}),
                                            call
                                              ("offset1.immediate_form1",@{typ offset1},
                                               mop(Cast w32,
                                                   cc[mop(Cast (Word_Lib.mk_wordT 6),
                                                          ll[var_b"b'8",var_b"b'7",var_b"b'6",
                                                             var_b"b'5",var_b"b'4",var_b"b'3"]),
                                                      lw(0,2)]),@{theory}),
                                            ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),
                                                call
                                                  ("instruction.Store",@{typ instruction},
                                                   call
                                                     ("Store.StoreWord",@{typ Store},
                                                      tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                         lw(9,4),var("m",@{typ offset1})],@{theory}),
                                                   @{theory}),
                                                call
                                                  ("instruction.Load",@{typ instruction},
                                                   call
                                                     ("Load.LoadWord",@{typ Load},
                                                      tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                         lw(9,4),var("m",@{typ offset1})],@{theory}),
                                                   @{theory}))),
                                         apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy))),var("s",qTy)]))))],
                       apply
                         (call
                            ("DecodeThumb",
                             @{typ "state \<Rightarrow> (instruction \<times> state)"},
                             mop(Cast w16,
                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                    var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                    var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                    var_b"b'0"]),@{theory}),var("state",qTy))),
                   apply
                     (call
                        ("DecodeThumb",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                         mop(Cast w16,
                             ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                                var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory}),
                      var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("DecodeThumb2",
   close
     (var("h",@{typ "16 word \<times> 16 word"}),
      close
        (var("state",qTy),
         let'
           (var("mc",@{typ MachineCode}),
            call
              ("MachineCode.Thumb2",@{typ MachineCode},var("h",@{typ "16 word \<times> 16 word"}),
               @{theory}),
            let'
              (tp[tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",
                     var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                     var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"],var_b"b'15",var_b"b'14",
                  var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                  var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
               tp[call
                    ("boolify'16",
                     @{typ
                     "bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                     mop(Fst,var("h",@{typ "16 word \<times> 16 word"})),@{theory}),
                  call
                    ("boolify'16",
                     @{typ
                     "bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times>
                      bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                     mop(Snd,var("h",@{typ "16 word \<times> 16 word"})),@{theory})],
               itb([(var_b"b'27",
                     itb([(var_b"b'28",
                           itb([(var_b"b'25",
                                 ite(bop(And,var_b"b'31",
                                         bop(And,var_b"b'30",
                                             bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                                     itb([(bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",
                                                               bop(And,var_b"b'12",
                                                                   bop(And,mop(Not,var_b"b'7"),
                                                                       bop(And,mop(Not,var_b"b'6"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'5"),
                                                                               mop(Not,var_b"b'4")))))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Data",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Data.ShiftRegister",
                                                                       @{typ Data},
                                                                       tp[lf,
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'20"]),
                                                                             lw(1,1)),var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          call
                                                                            ("DecodeRegShift",
                                                                             @{typ SRType},
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 2),
                                                                                 ll[var_b"b'22",
                                                                                    var_b"b'21"]),
                                                                             @{theory}),
                                                                          var_w("Rm",4)],@{theory}),
                                                                    @{theory}),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rn",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Shift (register)"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",
                                                               bop(And,var_b"b'12",var_b"b'7")))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[let'
                                                                   (tp[var_b"args0",var_n"args4"],
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'20"]),
                                                                          lw(1,1)),
                                                                       mop(Cast HOLogic.natT,
                                                                           cc[mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'5",
                                                                                     var_b"b'4"]),
                                                                              lw(0,3)])],
                                                                    cs(mop(Cast
                                                                             (Word_Lib.mk_wordT 2),
                                                                           ll[var_b"b'22",
                                                                              var_b"b'21"]),
                                                                       [(var_w("v",2),
                                                                         itb([(eq(var_w("v",2),
                                                                                  lw(0,2)),
                                                                               call
                                                                                 ("instruction.Media",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Media.ExtendHalfword",
                                                                                     @{typ Media},
                                                                                     tp[var_b"args0",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var_n"args4"],
                                                                                     @{theory}),
                                                                                  @{theory})),
                                                                              (eq(var_w("v",2),
                                                                                  lw(1,2)),
                                                                               call
                                                                                 ("instruction.Media",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Media.ExtendByte16",
                                                                                     @{typ Media},
                                                                                     tp[var_b"args0",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var_n"args4"],
                                                                                     @{theory}),
                                                                                  @{theory})),
                                                                              (eq(var_w("v",2),
                                                                                  lw(2,2)),
                                                                               call
                                                                                 ("instruction.Media",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Media.ExtendByte",
                                                                                     @{typ Media},
                                                                                     tp[var_b"args0",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var_n"args4"],
                                                                                     @{theory}),
                                                                                  @{theory})),
                                                                              (eq(var_w("v",2),
                                                                                  lw(3,2)),
                                                                               call
                                                                                 ("instruction.Undefined",
                                                                                  @{typ instruction},
                                                                                  lw(0,32),@{theory}))],
                                                                             lx @{typ instruction}))],
                                                                       @{context})),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             eq(var_w("Rn",4),
                                                                                lw(13,4)),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Extend (register)"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",
                                                               bop(And,var_b"b'12",
                                                                   mop(Not,var_b"b'7"))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("DecodeParallelAdditionSubtraction",
                                                                    @{typ instruction},
                                                                    tp[bop(Add,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 2),
                                                                               ll[var_b"b'5",
                                                                                  var_b"b'4"]),
                                                                           lw(1,2)),
                                                                       cs(mop(Cast
                                                                                (Word_Lib.mk_wordT 3),
                                                                              ll[var_b"b'22",
                                                                                 var_b"b'21",
                                                                                 var_b"b'20"]),
                                                                          [(var_w("v",3),
                                                                            itb([(eq(var_w("v",3),
                                                                                     lw(1,3)),
                                                                                  lw(0,3)),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(2,3)),
                                                                                  lw(1,3)),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(6,3)),
                                                                                  lw(2,3)),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(5,3)),
                                                                                  lw(3,3)),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(0,3)),
                                                                                  lw(4,3)),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(4,3)),
                                                                                  lw(7,3))],lw(5,3)))],
                                                                          @{context}),
                                                                       mop(Cast w1,ll[var_b"b'6"]),
                                                                       var_w("Rd",4),var_w("Rn",4),
                                                                       var_w("Rm",4)],@{theory}),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rn",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "Parallel addition and subtraction"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,mop(Not,var_b"b'21"),
                                                           bop(And,mop(Not,var_b"b'20"),
                                                               bop(And,var_b"b'15",
                                                                   bop(And,var_b"b'14",
                                                                       bop(And,var_b"b'13",
                                                                           bop(And,var_b"b'12",
                                                                               bop(And,var_b"b'7",
                                                                                   mop(Not,
                                                                                       var_b"b'6"))))))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Media",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Media.SaturatingAddSubtract",
                                                                       @{typ Media},
                                                                       tp[mop(Rev,
                                                                              mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'5",
                                                                                     var_b"b'4"])),
                                                                          var_w("Rd",4),
                                                                          var_w("Rm",4),
                                                                          var_w("Rn",4)],@{theory}),
                                                                    @{theory}),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rn",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "SaturatingAddSubtract"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,mop(Not,var_b"b'21"),
                                                           bop(And,var_b"b'20",
                                                               bop(And,var_b"b'15",
                                                                   bop(And,var_b"b'14",
                                                                       bop(And,var_b"b'13",
                                                                           bop(And,var_b"b'12",
                                                                               bop(And,var_b"b'7",
                                                                                   mop(Not,
                                                                                       var_b"b'6"))))))))))),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[cs(mop(Cast (Word_Lib.mk_wordT 2),
                                                                     ll[var_b"b'5",var_b"b'4"]),
                                                                 [(var_w("v",2),
                                                                   itb([(eq(var_w("v",2),lw(0,2)),
                                                                         call
                                                                           ("instruction.Media",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Media.ByteReverse",
                                                                               @{typ Media},
                                                                               tp[var_w("Rd",4),
                                                                                  var_w("Rm",4)],
                                                                               @{theory}),@{theory})),
                                                                        (eq(var_w("v",2),lw(1,2)),
                                                                         call
                                                                           ("instruction.Media",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Media.ByteReversePackedHalfword",
                                                                               @{typ Media},
                                                                               tp[var_w("Rd",4),
                                                                                  var_w("Rm",4)],
                                                                               @{theory}),@{theory})),
                                                                        (eq(var_w("v",2),lw(2,2)),
                                                                         call
                                                                           ("instruction.Media",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Media.ReverseBits",
                                                                               @{typ Media},
                                                                               tp[var_w("Rd",4),
                                                                                  var_w("Rm",4)],
                                                                               @{theory}),@{theory})),
                                                                        (eq(var_w("v",2),lw(3,2)),
                                                                         call
                                                                           ("instruction.Media",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Media.ByteReverseSignedHalfword",
                                                                               @{typ Media},
                                                                               tp[var_w("Rd",4),
                                                                                  var_w("Rm",4)],
                                                                               @{theory}),@{theory}))],
                                                                       lx @{typ instruction}))],
                                                                 @{context}),
                                                              ite(bop(Or,
                                                                      mop(Not,
                                                                          eq(mop(Cast w4,
                                                                                 ll[var_b"b'19",
                                                                                    var_b"b'18",
                                                                                    var_b"b'17",
                                                                                    var_b"b'16"]),
                                                                             var_w("Rm",4))),
                                                                      bop(Or,
                                                                          bop(In,var_w("Rd",4),
                                                                              sl[lw(13,4),lw(15,4)]),
                                                                          bop(In,var_w("Rm",4),
                                                                              sl[lw(13,4),lw(15,4)]))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"Reverses"],@{theory}),
                                                                     var("s",qTy)),var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,var_b"b'21",
                                                           bop(And,mop(Not,var_b"b'20"),
                                                               bop(And,var_b"b'15",
                                                                   bop(And,var_b"b'14",
                                                                       bop(And,var_b"b'13",
                                                                           bop(And,var_b"b'12",
                                                                               bop(And,var_b"b'7",
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'6"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'5"),
                                                                                           mop(Not,
                                                                                               var_b"b'4"))))))))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Media",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Media.SelectBytes",
                                                                       @{typ Media},
                                                                       tp[var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          var_w("Rm",4)],@{theory}),
                                                                    @{theory}),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rn",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"SelectBytes"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,var_b"b'21",
                                                           bop(And,var_b"b'20",
                                                               bop(And,var_b"b'15",
                                                                   bop(And,var_b"b'14",
                                                                       bop(And,var_b"b'13",
                                                                           bop(And,var_b"b'12",
                                                                               bop(And,var_b"b'7",
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'6"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'5"),
                                                                                           mop(Not,
                                                                                               var_b"b'4"))))))))))))),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[call
                                                                ("instruction.Data",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Data.CountLeadingZeroes",
                                                                    @{typ Data},
                                                                    tp[var_w("Rd",4),var_w("Rm",4)],
                                                                    @{theory}),@{theory}),
                                                              ite(bop(Or,
                                                                      mop(Not,
                                                                          eq(mop(Cast w4,
                                                                                 ll[var_b"b'19",
                                                                                    var_b"b'18",
                                                                                    var_b"b'17",
                                                                                    var_b"b'16"]),
                                                                             var_w("Rm",4))),
                                                                      bop(Or,
                                                                          bop(In,var_w("Rd",4),
                                                                              sl[lw(13,4),lw(15,4)]),
                                                                          bop(In,var_w("Rm",4),
                                                                              sl[lw(13,4),lw(15,4)]))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"CountLeadingZeroes"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'7"),mop(Not,var_b"b'6")))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (var_w("Ra",4),
                                                       mop(Cast w4,
                                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                              var_b"b'12"]),
                                                       let'
                                                         (tp[var_w("v",4),var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("ThumbCondition",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (4 word \<times> state)"},lu,
                                                                @{theory}),var("state",qTy)),
                                                          let'
                                                            (tp[var_b"v",var("s",qTy)],
                                                             apply
                                                               (call
                                                                  ("Do",
                                                                   @{typ
                                                                   "state \<Rightarrow>
                                                                    (bool \<times> state)"},
                                                                   tp[var_w("v",4),
                                                                      apply
                                                                        (call
                                                                           ("HaveThumb2",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy))],@{theory}),
                                                                var("s",qTy)),
                                                             ite(var_b"v",
                                                                 let'
                                                                   (var("s",qTy),
                                                                    ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rm",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    eq(var_w("Ra",4),
                                                                                       lw(13,4))))),
                                                                        apply
                                                                          (call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "state \<Rightarrow>
                                                                               state"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "Multiplies and absolute difference"],
                                                                              @{theory}),
                                                                           var("s",qTy)),
                                                                        var("s",qTy)),
                                                                    cs(tp[mop(Cast
                                                                                (Word_Lib.mk_wordT 3),
                                                                              ll[var_b"b'22",
                                                                                 var_b"b'21",
                                                                                 var_b"b'20"]),
                                                                          var_w("Ra",4),
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'5"]),
                                                                             lw(1,1)),
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'4"]),
                                                                             lw(1,1))],
                                                                       [(tp[var_w("v",3),
                                                                            var_w("v0",4),lf,lt],
                                                                         itb([(bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(0,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[lx @{typ instruction},
                                                                                  apply
                                                                                    (call
                                                                                       ("DECODE_UNPREDICTABLE",
                                                                                        @{typ
                                                                                        "state \<Rightarrow>
                                                                                         state"},
                                                                                        tp[var("mc",
                                                                                               @{typ MachineCode}),
                                                                                           ls
                                                                                            "MultiplySubtract"],
                                                                                        @{theory}),
                                                                                     var("s",qTy))]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(0,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.MultiplySubtract",
                                                                                        @{typ Multiply},
                                                                                        tp[var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(1,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(1,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(2,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(3,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(3,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(4,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(5,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMostSignificantMultiply",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(6,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[lx @{typ instruction},
                                                                                  apply
                                                                                    (call
                                                                                       ("DECODE_UNPREDICTABLE",
                                                                                        @{typ
                                                                                        "state \<Rightarrow>
                                                                                         state"},
                                                                                        tp[var("mc",
                                                                                               @{typ MachineCode}),
                                                                                           ls
                                                                                            "SignedMostSignificantMultiplySubtract"],
                                                                                        @{theory}),
                                                                                     var("s",qTy))])],
                                                                             tp[ite(eq(var_w("v",3),
                                                                                       lw(6,3)),
                                                                                    call
                                                                                      ("instruction.Multiply",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                          @{typ Multiply},
                                                                                          tp[lt,
                                                                                             var_w("Rd",4),
                                                                                             var_w("Rn",4),
                                                                                             var_w("Rm",4),
                                                                                             var_w("Ra",4)],
                                                                                          @{theory}),
                                                                                       @{theory}),
                                                                                    call
                                                                                      ("instruction.Undefined",
                                                                                       @{typ instruction},
                                                                                       lw(0,32),
                                                                                       @{theory})),
                                                                                var("s",qTy)])),
                                                                        (tp[var_w("v",3),
                                                                            var_w("v0",4),lf,lf],
                                                                         itb([(bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(0,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Multiply32",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(0,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.MultiplyAccumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(1,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(1,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(2,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(3,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(3,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(4,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(5,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMostSignificantMultiply",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(6,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[lx @{typ instruction},
                                                                                  apply
                                                                                    (call
                                                                                       ("DECODE_UNPREDICTABLE",
                                                                                        @{typ
                                                                                        "state \<Rightarrow>
                                                                                         state"},
                                                                                        tp[var("mc",
                                                                                               @{typ MachineCode}),
                                                                                           ls
                                                                                            "SignedMostSignificantMultiplySubtract"],
                                                                                        @{theory}),
                                                                                     var("s",qTy))])],
                                                                             tp[itb([(eq(var_w("v",3),
                                                                                         lw(6,3)),
                                                                                      call
                                                                                        ("instruction.Multiply",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                            @{typ Multiply},
                                                                                            tp[lf,
                                                                                               var_w("Rd",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4),
                                                                                               var_w("Ra",4)],
                                                                                            @{theory}),
                                                                                         @{theory})),
                                                                                     (eq(var_w("v",3),
                                                                                         lw(7,3)),
                                                                                      call
                                                                                        ("instruction.SIMD",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("SIMD.UnsignedSumAbsoluteDifferences",
                                                                                            @{typ SIMD},
                                                                                            tp[var_w("Rd",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4),
                                                                                               var_w("Ra",4)],
                                                                                            @{theory}),
                                                                                         @{theory}))],
                                                                                    call
                                                                                      ("instruction.Undefined",
                                                                                       @{typ instruction},
                                                                                       lw(0,32),
                                                                                       @{theory})),
                                                                                var("s",qTy)])),
                                                                        (tp[var_w("v",3),
                                                                            var_w("v0",4),lf,
                                                                            var_b"round"],
                                                                         itb([(bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(1,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"round",
                                                                                           lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(1,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"round",
                                                                                           lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(2,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lf,
                                                                                           var_b"round",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(3,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"round",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(3,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"round",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(4,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMultiplyDual",
                                                                                        @{typ Multiply},
                                                                                        tp[lt,
                                                                                           var_b"round",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (eq(var_w("v",3),
                                                                                  lw(5,3)),
                                                                               tp[call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.SignedMostSignificantMultiply",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"round",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}),
                                                                                  var("s",qTy)]),
                                                                              (bop(And,
                                                                                   eq(var_w("v",3),
                                                                                      lw(6,3)),
                                                                                   eq(var_w("v0",4),
                                                                                      lw(15,4))),
                                                                               tp[lx @{typ instruction},
                                                                                  apply
                                                                                    (call
                                                                                       ("DECODE_UNPREDICTABLE",
                                                                                        @{typ
                                                                                        "state \<Rightarrow>
                                                                                         state"},
                                                                                        tp[var("mc",
                                                                                               @{typ MachineCode}),
                                                                                           ls
                                                                                            "SignedMostSignificantMultiplySubtract"],
                                                                                        @{theory}),
                                                                                     var("s",qTy))])],
                                                                             tp[ite(eq(var_w("v",3),
                                                                                       lw(6,3)),
                                                                                    call
                                                                                      ("instruction.Multiply",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                          @{typ Multiply},
                                                                                          tp[var_b"round",
                                                                                             var_w("Rd",4),
                                                                                             var_w("Rn",4),
                                                                                             var_w("Rm",4),
                                                                                             var_w("Ra",4)],
                                                                                          @{theory}),
                                                                                       @{theory}),
                                                                                    call
                                                                                      ("instruction.Undefined",
                                                                                       @{typ instruction},
                                                                                       lw(0,32),
                                                                                       @{theory})),
                                                                                var("s",qTy)])),
                                                                        (tp[var_w("v",3),
                                                                            var_w("v0",4),var_b"v1",
                                                                            var_b"v2"],
                                                                         tp[itb([(bop(And,
                                                                                      eq(var_w("v",3),
                                                                                         lw(1,3)),
                                                                                      eq(var_w("v0",4),
                                                                                         lw(15,4))),
                                                                                  call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Result",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"v2",
                                                                                           var_b"v1",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory}),
                                                                                     @{theory})),
                                                                                 (eq(var_w("v",3),
                                                                                     lw(1,3)),
                                                                                  call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Signed16Multiply32Accumulate",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"v2",
                                                                                           var_b"v1",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var_w("Ra",4)],
                                                                                        @{theory}),
                                                                                     @{theory}))],
                                                                                call
                                                                                  ("instruction.Undefined",
                                                                                   @{typ instruction},
                                                                                   lw(0,32),
                                                                                   @{theory})),
                                                                            var("s",qTy)])],
                                                                       @{context})),
                                                                 tp[apply
                                                                      (call
                                                                         ("Skip",
                                                                          @{typ
                                                                          "state \<Rightarrow>
                                                                           instruction"},lu,
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy)])))))))),
                                          (bop(And,var_b"b'24",
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,var_b"b'20",
                                                           bop(And,var_b"b'7",
                                                               bop(And,var_b"b'6",
                                                                   bop(And,var_b"b'5",var_b"b'4"))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   bop(Or,
                                                                       apply
                                                                         (call
                                                                            ("HaveVirtExt",
                                                                             @{typ
                                                                             "state \<Rightarrow>
                                                                              bool"},lu,@{theory}),
                                                                          var("s",qTy)),
                                                                       eq(call
                                                                            ("state.Architecture",
                                                                             @{typ Architecture},
                                                                             var("s",qTy),@{theory}),
                                                                          lc("ARMv7_R",
                                                                             "Architecture",
                                                                             @{theory})))],@{theory}),
                                                             var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Divide",
                                                                    @{typ instruction},
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'21"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       var_w("Rn",4),var_w("Rm",4)],
                                                                    @{theory}),
                                                                 ite(bop(Or,
                                                                         bop(In,var_w("Rd",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rn",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Divide"],@{theory}),
                                                                        var("s",qTy)),var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))))),
                                          (bop(And,var_b"b'24",var_b"b'23"),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("RdHi",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                           var_b"b'8"]),
                                                    let'
                                                      (var_w("RdLo",4),
                                                       mop(Cast w4,
                                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                              var_b"b'12"]),
                                                       let'
                                                         (tp[var_w("v",4),var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("ThumbCondition",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (4 word \<times> state)"},lu,
                                                                @{theory}),var("state",qTy)),
                                                          let'
                                                            (tp[var_b"v",var("s",qTy)],
                                                             apply
                                                               (call
                                                                  ("Do",
                                                                   @{typ
                                                                   "state \<Rightarrow>
                                                                    (bool \<times> state)"},
                                                                   tp[var_w("v",4),
                                                                      apply
                                                                        (call
                                                                           ("HaveThumb2",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy))],@{theory}),
                                                                var("s",qTy)),
                                                             ite(var_b"v",
                                                                 tp[let'
                                                                      (tp[tp[var_b"b'6",var_b"b'5",
                                                                             var_b"b'4"],var_b"b'3",
                                                                          var_b"b'2",var_b"b'1",
                                                                          var_b"b'0"],
                                                                       tp[call
                                                                            ("boolify'3",
                                                                             @{typ
                                                                             "bool \<times>
                                                                              bool \<times> bool"},
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 3),
                                                                                 ll[var_b"b'22",
                                                                                    var_b"b'21",
                                                                                    var_b"b'20"]),
                                                                             @{theory}),
                                                                          call
                                                                            ("boolify'4",
                                                                             @{typ
                                                                             "bool \<times>
                                                                              bool \<times>
                                                                              bool \<times> bool"},
                                                                             mop(Cast w4,
                                                                                 ll[var_b"b'7",
                                                                                    var_b"b'6",
                                                                                    var_b"b'5",
                                                                                    var_b"b'4"]),
                                                                             @{theory})],
                                                                       itb([(bop(And,
                                                                                 mop(Not,var_b"b'4"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'3"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'2"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'1"),
                                                                                             mop(Not,
                                                                                                 var_b"b'0"))))),
                                                                             call
                                                                               ("instruction.Multiply",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Multiply.MultiplyLong",
                                                                                   @{typ Multiply},
                                                                                   tp[eq(mop(Cast w1,
                                                                                             ll[var_b"b'6"]),
                                                                                         lw(1,1)),
                                                                                      eq(mop(Cast w1,
                                                                                             ll[var_b"b'5"]),
                                                                                         lw(0,1)),
                                                                                      lf,
                                                                                      var_w("RdHi",4),
                                                                                      var_w("RdLo",4),
                                                                                      var_w("Rn",4),
                                                                                      var_w("Rm",4)],
                                                                                   @{theory}),
                                                                                @{theory})),
                                                                            (bop(And,var_b"b'6",
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             var_b"b'3",
                                                                                             mop(Not,
                                                                                                 var_b"b'2"))))),
                                                                             call
                                                                               ("instruction.Multiply",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Multiply.Signed16Multiply64Accumulate",
                                                                                   @{typ Multiply},
                                                                                   tp[eq(mop(Cast w1,
                                                                                             ll[var_b"b'0"]),
                                                                                         lw(1,1)),
                                                                                      eq(mop(Cast w1,
                                                                                             ll[var_b"b'1"]),
                                                                                         lw(1,1)),
                                                                                      var_w("RdHi",4),
                                                                                      var_w("RdLo",4),
                                                                                      var_w("Rn",4),
                                                                                      var_w("Rm",4)],
                                                                                   @{theory}),
                                                                                @{theory})),
                                                                            (bop(And,var_b"b'6",
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         var_b"b'3",
                                                                                         bop(And,
                                                                                             var_b"b'2",
                                                                                             mop(Not,
                                                                                                 var_b"b'1"))))),
                                                                             call
                                                                               ("instruction.Multiply",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Multiply.SignedMultiplyLongDual",
                                                                                   @{typ Multiply},
                                                                                   tp[eq(mop(Cast w1,
                                                                                             ll[var_b"b'4"]),
                                                                                         lw(1,1)),
                                                                                      eq(mop(Cast w1,
                                                                                             ll[var_b"b'0"]),
                                                                                         lw(1,1)),
                                                                                      var_w("RdHi",4),
                                                                                      var_w("RdLo",4),
                                                                                      var_w("Rn",4),
                                                                                      var_w("Rm",4)],
                                                                                   @{theory}),
                                                                                @{theory})),
                                                                            (bop(And,var_b"b'6",
                                                                                 bop(And,var_b"b'5",
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'3"),
                                                                                             bop(And,
                                                                                                 var_b"b'2",
                                                                                                 bop(And,
                                                                                                     var_b"b'1",
                                                                                                     mop(Not,
                                                                                                         var_b"b'0"))))))),
                                                                             call
                                                                               ("instruction.Multiply",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Multiply.MultiplyAccumulateAccumulate",
                                                                                   @{typ Multiply},
                                                                                   tp[var_w("RdHi",4),
                                                                                      var_w("RdLo",4),
                                                                                      var_w("Rn",4),
                                                                                      var_w("Rm",4)],
                                                                                   @{theory}),
                                                                                @{theory}))],
                                                                           call
                                                                             ("instruction.Undefined",
                                                                              @{typ instruction},
                                                                              lw(0,32),@{theory}))),
                                                                    ite(bop(Or,
                                                                            bop(In,var_w("RdLo",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("RdHi",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rn",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    bop(Or,
                                                                                        bop(In,
                                                                                            var_w("Rm",4),
                                                                                            sl[lw(13,
                                                                                                  4),
                                                                                               lw(15,
                                                                                                  4)]),
                                                                                        eq(var_w("RdHi",4),
                                                                                           var_w("RdLo",4)))))),
                                                                        apply
                                                                          (call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "state \<Rightarrow>
                                                                               state"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "Long multiply, long multiply accumulate"],
                                                                              @{theory}),
                                                                           var("s",qTy)),
                                                                        var("s",qTy))],
                                                                 tp[apply
                                                                      (call
                                                                         ("Skip",
                                                                          @{typ
                                                                          "state \<Rightarrow>
                                                                           instruction"},lu,
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy)]))))))))],
                                         apply
                                           (call
                                              ("UndefinedThumb",
                                               @{typ
                                               "state \<Rightarrow> (instruction \<times> state)"},
                                               lu,@{theory}),var("state",qTy))),
                                     apply
                                       (call
                                          ("UndefinedThumb",
                                           @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                           lu,@{theory}),var("state",qTy)))),
                                (var_b"b'22",
                                 itb([(var_b"b'20",
                                       ite(bop(And,var_b"b'31",
                                               bop(And,var_b"b'30",
                                                   bop(And,var_b"b'29",
                                                       bop(And,mop(Not,var_b"b'26"),
                                                           bop(And,mop(Not,var_b"b'24"),
                                                               mop(Not,var_b"b'21")))))),
                                           itb([(bop(And,var_b"b'19",
                                                     bop(And,var_b"b'18",
                                                         bop(And,var_b"b'17",var_b"b'16"))),
                                                 let'
                                                   (var_w("Rt",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadLiteral",
                                                                       @{typ Load},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'23"]),
                                                                             lw(1,1)),var_w("Rt",4),
                                                                          mop(Cast w32,
                                                                              mop(Cast
                                                                                    (Word_Lib.mk_wordT 12),
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10",
                                                                                     var_b"b'9",
                                                                                     var_b"b'8",
                                                                                     var_b"b'7",
                                                                                     var_b"b'6",
                                                                                     var_b"b'5",
                                                                                     var_b"b'4",
                                                                                     var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"]))],
                                                                       @{theory}),@{theory}),
                                                                 ite(bop(And,
                                                                         eq(var_w("Rt",4),lw(15,4)),
                                                                         bop(And,
                                                                             apply
                                                                               (call
                                                                                  ("InITBlock",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    bool"},lu,
                                                                                   @{theory}),
                                                                                var("s",qTy)),
                                                                             mop(Not,
                                                                                 apply
                                                                                   (call
                                                                                      ("LastInITBlock",
                                                                                       @{typ
                                                                                       "state \<Rightarrow>
                                                                                        bool"},lu,
                                                                                       @{theory}),
                                                                                    var("s",qTy))))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"LoadLiteral"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))),
                                                (var_b"b'23",
                                                 let'
                                                   (var_w("Rt",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadWord",@{typ Load},
                                                                       tp[lt,lt,lf,var_w("Rt",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'19",
                                                                                 var_b"b'18",
                                                                                 var_b"b'17",
                                                                                 var_b"b'16"]),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 12),
                                                                                     ll[var_b"b'11",
                                                                                        var_b"b'10",
                                                                                        var_b"b'9",
                                                                                        var_b"b'8",
                                                                                        var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             @{theory})],@{theory}),
                                                                    @{theory}),
                                                                 ite(bop(And,
                                                                         eq(var_w("Rt",4),lw(15,4)),
                                                                         bop(And,
                                                                             apply
                                                                               (call
                                                                                  ("InITBlock",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    bool"},lu,
                                                                                   @{theory}),
                                                                                var("s",qTy)),
                                                                             mop(Not,
                                                                                 apply
                                                                                   (call
                                                                                      ("LastInITBlock",
                                                                                       @{typ
                                                                                       "state \<Rightarrow>
                                                                                        bool"},lu,
                                                                                       @{theory}),
                                                                                    var("s",qTy))))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"LoadWord"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))),
                                                (bop(And,mop(Not,var_b"b'23"),
                                                     bop(And,var_b"b'11",
                                                         bop(And,var_b"b'10",
                                                             bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                                 let'
                                                   (var_w("Rt",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadUnprivileged",
                                                                       @{typ Load},
                                                                       tp[lt,lf,var_w("Rt",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'19",
                                                                                 var_b"b'18",
                                                                                 var_b"b'17",
                                                                                 var_b"b'16"]),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 mop(Cast w8,
                                                                                     ll[var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             @{theory})],@{theory}),
                                                                    @{theory}),
                                                                 ite(bop(In,var_w("Rt",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"LoadUnprivileged"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)]))))),
                                                (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                                 let'
                                                   (var_w("Rn",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                           var_b"b'16"]),
                                                    let'
                                                      (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                                       let'
                                                         (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                                          let'
                                                            (var_w("Rt",4),
                                                             mop(Cast w4,
                                                                 ll[var_b"b'15",var_b"b'14",
                                                                    var_b"b'13",var_b"b'12"]),
                                                             let'
                                                               (tp[var_w("v",4),var("s",qTy)],
                                                                apply
                                                                  (call
                                                                     ("ThumbCondition",
                                                                      @{typ
                                                                      "state \<Rightarrow>
                                                                       (4 word \<times> state)"},lu,
                                                                      @{theory}),var("state",qTy)),
                                                                let'
                                                                  (tp[var_b"v",var("s",qTy)],
                                                                   apply
                                                                     (call
                                                                        ("Do",
                                                                         @{typ
                                                                         "state \<Rightarrow>
                                                                          (bool \<times> state)"},
                                                                         tp[var_w("v",4),
                                                                            bop(And,
                                                                                bop(Or,
                                                                                    eq(var_w("P",1),
                                                                                       lw(1,1)),
                                                                                    eq(var_w("W",1),
                                                                                       lw(1,1))),
                                                                                apply
                                                                                  (call
                                                                                     ("HaveThumb2",
                                                                                      @{typ
                                                                                      "state \<Rightarrow>
                                                                                       bool"},lu,
                                                                                      @{theory}),
                                                                                   var("s",qTy)))],
                                                                         @{theory}),var("s",qTy)),
                                                                   ite(var_b"v",
                                                                       let'
                                                                         (var_b"wback",
                                                                          eq(var_w("W",1),lw(1,1)),
                                                                          tp[call
                                                                               ("instruction.Load",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Load.LoadWord",
                                                                                   @{typ Load},
                                                                                   tp[eq(mop(Cast w1,
                                                                                             ll[var_b"b'9"]),
                                                                                         lw(1,1)),
                                                                                      eq(var_w("P",1),
                                                                                         lw(1,1)),
                                                                                      var_b"wback",
                                                                                      var_w("Rt",4),
                                                                                      var_w("Rn",4),
                                                                                      call
                                                                                        ("offset1.immediate_form1",
                                                                                         @{typ offset1},
                                                                                         mop(Cast
                                                                                               w32,
                                                                                             mop(Cast
                                                                                                   w8,
                                                                                                 ll[var_b"b'7",
                                                                                                    var_b"b'6",
                                                                                                    var_b"b'5",
                                                                                                    var_b"b'4",
                                                                                                    var_b"b'3",
                                                                                                    var_b"b'2",
                                                                                                    var_b"b'1",
                                                                                                    var_b"b'0"])),
                                                                                         @{theory})],
                                                                                   @{theory}),
                                                                                @{theory}),
                                                                             ite(bop(Or,
                                                                                     bop(And,
                                                                                         var_b"wback",
                                                                                         eq(var_w("Rn",4),
                                                                                            var_w("Rt",4))),
                                                                                     bop(And,
                                                                                         eq(var_w("Rt",4),
                                                                                            lw(15,4)),
                                                                                         bop(And,
                                                                                             apply
                                                                                               (call
                                                                                                  ("InITBlock",
                                                                                                   @{typ
                                                                                                   "state \<Rightarrow>
                                                                                                    bool"},
                                                                                                   lu,
                                                                                                   @{theory}),
                                                                                                var("s",
                                                                                                    qTy)),
                                                                                             mop(Not,
                                                                                                 apply
                                                                                                   (call
                                                                                                      ("LastInITBlock",
                                                                                                       @{typ
                                                                                                       "state \<Rightarrow>
                                                                                                        bool"},
                                                                                                       lu,
                                                                                                       @{theory}),
                                                                                                    var("s",
                                                                                                        qTy)))))),
                                                                                 apply
                                                                                   (call
                                                                                      ("DECODE_UNPREDICTABLE",
                                                                                       @{typ
                                                                                       "state \<Rightarrow>
                                                                                        state"},
                                                                                       tp[var("mc",
                                                                                              @{typ MachineCode}),
                                                                                          ls
                                                                                           "LoadWord"],
                                                                                       @{theory}),
                                                                                    var("s",qTy)),
                                                                                 var("s",qTy))]),
                                                                       tp[apply
                                                                            (call
                                                                               ("Skip",
                                                                                @{typ
                                                                                "state \<Rightarrow>
                                                                                 instruction"},lu,
                                                                                @{theory}),
                                                                             var("s",qTy)),
                                                                          var("s",qTy)])))))))),
                                                (bop(And,mop(Not,var_b"b'23"),
                                                     bop(And,mop(Not,var_b"b'11"),
                                                         bop(And,mop(Not,var_b"b'10"),
                                                             bop(And,mop(Not,var_b"b'9"),
                                                                 bop(And,mop(Not,var_b"b'8"),
                                                                     bop(And,mop(Not,var_b"b'7"),
                                                                         mop(Not,var_b"b'6"))))))),
                                                 let'
                                                   (var_w("Rm",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                           var_b"b'0"]),
                                                    let'
                                                      (var_w("Rt",4),
                                                       mop(Cast w4,
                                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                              var_b"b'12"]),
                                                       let'
                                                         (tp[var_w("v",4),var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("ThumbCondition",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (4 word \<times> state)"},lu,
                                                                @{theory}),var("state",qTy)),
                                                          let'
                                                            (tp[var_b"v",var("s",qTy)],
                                                             apply
                                                               (call
                                                                  ("Do",
                                                                   @{typ
                                                                   "state \<Rightarrow>
                                                                    (bool \<times> state)"},
                                                                   tp[var_w("v",4),
                                                                      apply
                                                                        (call
                                                                           ("HaveThumb2",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy))],@{theory}),
                                                                var("s",qTy)),
                                                             ite(var_b"v",
                                                                 tp[call
                                                                      ("instruction.Load",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Load.LoadWord",
                                                                          @{typ Load},
                                                                          tp[lt,lt,lf,var_w("Rt",4),
                                                                             mop(Cast w4,
                                                                                 ll[var_b"b'19",
                                                                                    var_b"b'18",
                                                                                    var_b"b'17",
                                                                                    var_b"b'16"]),
                                                                             call
                                                                               ("offset1.register_form1",
                                                                                @{typ offset1},
                                                                                tp[var_w("Rm",4),
                                                                                   lc("SRType_LSL",
                                                                                      "SRType",
                                                                                      @{theory}),
                                                                                   mop(Cast
                                                                                         HOLogic.natT,
                                                                                       mop(Cast
                                                                                             (Word_Lib.mk_wordT 2),
                                                                                           ll[var_b"b'5",
                                                                                              var_b"b'4"]))],
                                                                                @{theory})],
                                                                          @{theory}),@{theory}),
                                                                    ite(bop(Or,
                                                                            bop(And,
                                                                                eq(var_w("Rt",4),
                                                                                   lw(15,4)),
                                                                                bop(And,
                                                                                    apply
                                                                                      (call
                                                                                         ("InITBlock",
                                                                                          @{typ
                                                                                          "state \<Rightarrow>
                                                                                           bool"},
                                                                                          lu,
                                                                                          @{theory}),
                                                                                       var("s",qTy)),
                                                                                    mop(Not,
                                                                                        apply
                                                                                          (call
                                                                                             ("LastInITBlock",
                                                                                              @{typ
                                                                                              "state \<Rightarrow>
                                                                                               bool"},
                                                                                              lu,
                                                                                              @{theory}),
                                                                                           var("s",
                                                                                               qTy))))),
                                                                            bop(In,var_w("Rm",4),
                                                                                sl[lw(13,4),lw(15,4)])),
                                                                        apply
                                                                          (call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "state \<Rightarrow>
                                                                               state"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls"LoadWord"],
                                                                              @{theory}),
                                                                           var("s",qTy)),
                                                                        var("s",qTy))],
                                                                 tp[apply
                                                                      (call
                                                                         ("Skip",
                                                                          @{typ
                                                                          "state \<Rightarrow>
                                                                           instruction"},lu,
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy)]))))))],
                                               apply
                                                 (call
                                                    ("UndefinedThumb",
                                                     @{typ
                                                     "state \<Rightarrow>
                                                      (instruction \<times> state)"},lu,@{theory}),
                                                  var("state",qTy))),
                                           apply
                                             (call
                                                ("UndefinedThumb",
                                                 @{typ
                                                 "state \<Rightarrow> (instruction \<times> state)"},
                                                 lu,@{theory}),var("state",qTy)))),
                                      (bop(And,var_b"b'31",
                                           bop(And,var_b"b'30",
                                               bop(And,var_b"b'29",
                                                   bop(And,mop(Not,var_b"b'26"),
                                                       bop(And,mop(Not,var_b"b'24"),
                                                           mop(Not,var_b"b'21")))))),
                                       itb([(bop(And,mop(Not,var_b"b'23"),
                                                 bop(And,mop(Not,var_b"b'11"),
                                                     bop(And,mop(Not,var_b"b'10"),
                                                         bop(And,mop(Not,var_b"b'9"),
                                                             bop(And,mop(Not,var_b"b'8"),
                                                                 bop(And,mop(Not,var_b"b'7"),
                                                                     mop(Not,var_b"b'6"))))))),
                                             let'
                                               (var_w("Rn",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                       var_b"b'16"]),
                                                let'
                                                  (var_w("Rm",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                          var_b"b'0"]),
                                                   let'
                                                     (var_w("Rt",4),
                                                      mop(Cast w4,
                                                          ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                             var_b"b'12"]),
                                                      let'
                                                        (tp[var_w("v",4),var("s",qTy)],
                                                         apply
                                                           (call
                                                              ("ThumbCondition",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (4 word \<times> state)"},lu,
                                                               @{theory}),var("state",qTy)),
                                                         let'
                                                           (tp[var_b"v",var("s",qTy)],
                                                            apply
                                                              (call
                                                                 ("Do",
                                                                  @{typ
                                                                  "state \<Rightarrow>
                                                                   (bool \<times> state)"},
                                                                  tp[var_w("v",4),
                                                                     bop(And,
                                                                         mop(Not,
                                                                             eq(var_w("Rn",4),
                                                                                lw(15,4))),
                                                                         apply
                                                                           (call
                                                                              ("HaveThumb2",
                                                                               @{typ
                                                                               "state \<Rightarrow>
                                                                                bool"},lu,@{theory}),
                                                                            var("s",qTy)))],
                                                                  @{theory}),var("s",qTy)),
                                                            ite(var_b"v",
                                                                tp[call
                                                                     ("instruction.Store",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Store.StoreWord",
                                                                         @{typ Store},
                                                                         tp[lt,lt,lf,var_w("Rt",4),
                                                                            var_w("Rn",4),
                                                                            call
                                                                              ("offset1.register_form1",
                                                                               @{typ offset1},
                                                                               tp[var_w("Rm",4),
                                                                                  lc("SRType_LSL",
                                                                                     "SRType",
                                                                                     @{theory}),
                                                                                  mop(Cast
                                                                                        HOLogic.natT,
                                                                                      mop(Cast
                                                                                            (Word_Lib.mk_wordT 2),
                                                                                          ll[var_b"b'5",
                                                                                             var_b"b'4"]))],
                                                                               @{theory})],@{theory}),
                                                                      @{theory}),
                                                                   ite(bop(Or,
                                                                           eq(var_w("Rt",4),lw(15,4)),
                                                                           bop(In,var_w("Rm",4),
                                                                               sl[lw(13,4),lw(15,4)])),
                                                                       apply
                                                                         (call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "state \<Rightarrow>
                                                                              state"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls"Store (register)"],
                                                                             @{theory}),var("s",qTy)),
                                                                       var("s",qTy))],
                                                                tp[apply
                                                                     (call
                                                                        ("Skip",
                                                                         @{typ
                                                                         "state \<Rightarrow>
                                                                          instruction"},lu,@{theory}),
                                                                      var("s",qTy)),var("s",qTy)]))))))),
                                            (bop(And,mop(Not,var_b"b'23"),
                                                 bop(And,var_b"b'11",
                                                     bop(And,var_b"b'10",
                                                         bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                             let'
                                               (var_w("Rn",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                       var_b"b'16"]),
                                                let'
                                                  (var_w("Rt",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                          var_b"b'12"]),
                                                   let'
                                                     (tp[var_w("v",4),var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("ThumbCondition",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (4 word \<times> state)"},lu,@{theory}),
                                                         var("state",qTy)),
                                                      let'
                                                        (tp[var_b"v",var("s",qTy)],
                                                         apply
                                                           (call
                                                              ("Do",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (bool \<times> state)"},
                                                               tp[var_w("v",4),
                                                                  bop(And,
                                                                      mop(Not,
                                                                          eq(var_w("Rn",4),lw(15,4))),
                                                                      apply
                                                                        (call
                                                                           ("HaveThumb2",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy)))],@{theory}),
                                                            var("s",qTy)),
                                                         ite(var_b"v",
                                                             tp[call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreUnprivileged",
                                                                      @{typ Store},
                                                                      tp[lt,lf,var_w("Rt",4),
                                                                         var_w("Rn",4),
                                                                         call
                                                                           ("offset1.immediate_form1",
                                                                            @{typ offset1},
                                                                            mop(Cast w32,
                                                                                mop(Cast w8,
                                                                                    ll[var_b"b'7",
                                                                                       var_b"b'6",
                                                                                       var_b"b'5",
                                                                                       var_b"b'4",
                                                                                       var_b"b'3",
                                                                                       var_b"b'2",
                                                                                       var_b"b'1",
                                                                                       var_b"b'0"])),
                                                                            @{theory})],@{theory}),
                                                                   @{theory}),
                                                                ite(bop(In,var_w("Rt",4),
                                                                        sl[lw(13,4),lw(15,4)]),
                                                                    apply
                                                                      (call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "state \<Rightarrow> state"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"StoreUnprivileged"],
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy))],
                                                             tp[apply
                                                                  (call
                                                                     ("Skip",
                                                                      @{typ
                                                                      "state \<Rightarrow>
                                                                       instruction"},lu,@{theory}),
                                                                   var("s",qTy)),var("s",qTy)])))))),
                                            (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                             let'
                                               (var_w("Rn",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                       var_b"b'16"]),
                                                let'
                                                  (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                                   let'
                                                     (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                                      let'
                                                        (var_w("Rt",4),
                                                         mop(Cast w4,
                                                             ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                                var_b"b'12"]),
                                                         let'
                                                           (tp[var_w("v",4),var("s",qTy)],
                                                            apply
                                                              (call
                                                                 ("ThumbCondition",
                                                                  @{typ
                                                                  "state \<Rightarrow>
                                                                   (4 word \<times> state)"},lu,
                                                                  @{theory}),var("state",qTy)),
                                                            let'
                                                              (tp[var_b"v",var("s",qTy)],
                                                               apply
                                                                 (call
                                                                    ("Do",
                                                                     @{typ
                                                                     "state \<Rightarrow>
                                                                      (bool \<times> state)"},
                                                                     tp[var_w("v",4),
                                                                        bop(And,
                                                                            mop(Not,
                                                                                eq(var_w("Rn",4),
                                                                                   lw(15,4))),
                                                                            bop(And,
                                                                                bop(Or,
                                                                                    eq(var_w("P",1),
                                                                                       lw(1,1)),
                                                                                    eq(var_w("W",1),
                                                                                       lw(1,1))),
                                                                                apply
                                                                                  (call
                                                                                     ("HaveThumb2",
                                                                                      @{typ
                                                                                      "state \<Rightarrow>
                                                                                       bool"},lu,
                                                                                      @{theory}),
                                                                                   var("s",qTy))))],
                                                                     @{theory}),var("s",qTy)),
                                                               ite(var_b"v",
                                                                   let'
                                                                     (var_b"wback",
                                                                      eq(var_w("W",1),lw(1,1)),
                                                                      tp[call
                                                                           ("instruction.Store",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Store.StoreWord",
                                                                               @{typ Store},
                                                                               tp[eq(mop(Cast w1,
                                                                                         ll[var_b"b'9"]),
                                                                                     lw(1,1)),
                                                                                  eq(var_w("P",1),
                                                                                     lw(1,1)),
                                                                                  var_b"wback",
                                                                                  var_w("Rt",4),
                                                                                  var_w("Rn",4),
                                                                                  call
                                                                                    ("offset1.immediate_form1",
                                                                                     @{typ offset1},
                                                                                     mop(Cast w32,
                                                                                         mop(Cast w8,
                                                                                             ll[var_b"b'7",
                                                                                                var_b"b'6",
                                                                                                var_b"b'5",
                                                                                                var_b"b'4",
                                                                                                var_b"b'3",
                                                                                                var_b"b'2",
                                                                                                var_b"b'1",
                                                                                                var_b"b'0"])),
                                                                                     @{theory})],
                                                                               @{theory}),@{theory}),
                                                                         ite(bop(Or,
                                                                                 eq(var_w("Rt",4),
                                                                                    lw(15,4)),
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     eq(var_w("Rn",4),
                                                                                        var_w("Rt",4)))),
                                                                             apply
                                                                               (call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "state \<Rightarrow>
                                                                                    state"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "Store (immediate)"],
                                                                                   @{theory}),
                                                                                var("s",qTy)),
                                                                             var("s",qTy))]),
                                                                   tp[apply
                                                                        (call
                                                                           ("Skip",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             instruction"},lu,
                                                                            @{theory}),var("s",qTy)),
                                                                      var("s",qTy)])))))))),
                                            (var_b"b'23",
                                             let'
                                               (var_w("Rn",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                       var_b"b'16"]),
                                                let'
                                                  (var_w("Rt",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                          var_b"b'12"]),
                                                   let'
                                                     (tp[var_w("v",4),var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("ThumbCondition",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (4 word \<times> state)"},lu,@{theory}),
                                                         var("state",qTy)),
                                                      let'
                                                        (tp[var_b"v",var("s",qTy)],
                                                         apply
                                                           (call
                                                              ("Do",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (bool \<times> state)"},
                                                               tp[var_w("v",4),
                                                                  bop(And,
                                                                      mop(Not,
                                                                          eq(var_w("Rn",4),lw(15,4))),
                                                                      apply
                                                                        (call
                                                                           ("HaveThumb2",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy)))],@{theory}),
                                                            var("s",qTy)),
                                                         ite(var_b"v",
                                                             tp[call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreWord",
                                                                      @{typ Store},
                                                                      tp[lt,lt,lf,var_w("Rt",4),
                                                                         var_w("Rn",4),
                                                                         call
                                                                           ("offset1.immediate_form1",
                                                                            @{typ offset1},
                                                                            mop(Cast w32,
                                                                                mop(Cast
                                                                                      (Word_Lib.mk_wordT 12),
                                                                                    ll[var_b"b'11",
                                                                                       var_b"b'10",
                                                                                       var_b"b'9",
                                                                                       var_b"b'8",
                                                                                       var_b"b'7",
                                                                                       var_b"b'6",
                                                                                       var_b"b'5",
                                                                                       var_b"b'4",
                                                                                       var_b"b'3",
                                                                                       var_b"b'2",
                                                                                       var_b"b'1",
                                                                                       var_b"b'0"])),
                                                                            @{theory})],@{theory}),
                                                                   @{theory}),
                                                                ite(eq(var_w("Rt",4),lw(15,4)),
                                                                    apply
                                                                      (call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "state \<Rightarrow> state"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"Store (immediate)"],
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy))],
                                                             tp[apply
                                                                  (call
                                                                     ("Skip",
                                                                      @{typ
                                                                      "state \<Rightarrow>
                                                                       instruction"},lu,@{theory}),
                                                                   var("s",qTy)),var("s",qTy)]))))))],
                                           apply
                                             (call
                                                ("UndefinedThumb",
                                                 @{typ
                                                 "state \<Rightarrow> (instruction \<times> state)"},
                                                 lu,@{theory}),var("state",qTy))))],
                                     apply
                                       (call
                                          ("UndefinedThumb",
                                           @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                           lu,@{theory}),var("state",qTy)))),
                                (var_b"b'20",
                                 ite(bop(And,var_b"b'31",
                                         bop(And,var_b"b'30",
                                             bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                                     itb([(bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'21",
                                                   bop(And,var_b"b'19",
                                                       bop(And,var_b"b'18",
                                                           bop(And,var_b"b'17",
                                                               bop(And,var_b"b'16",
                                                                   bop(And,var_b"b'15",
                                                                       bop(And,var_b"b'14",
                                                                           bop(And,var_b"b'13",
                                                                               var_b"b'12"))))))))),
                                           tp[lx @{typ instruction},
                                              apply
                                                (call
                                                   ("DECODE_UNPREDICTABLE",
                                                    @{typ "state \<Rightarrow> state"},
                                                    tp[var("mc",@{typ MachineCode}),
                                                       ls"PreloadDataLiteral"],@{theory}),
                                                 var("state",qTy))]),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'19",
                                                   bop(And,var_b"b'18",
                                                       bop(And,var_b"b'17",
                                                           bop(And,var_b"b'16",
                                                               bop(And,var_b"b'15",
                                                                   bop(And,var_b"b'14",
                                                                       bop(And,var_b"b'13",
                                                                           var_b"b'12")))))))),
                                           let'
                                             (tp[var_w("v",4),var("s",qTy)],
                                              apply
                                                (call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "state \<Rightarrow> (4 word \<times> state)"},
                                                    lu,@{theory}),var("state",qTy)),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("v",4),
                                                          apply
                                                            (call
                                                               ("HaveThumb2",
                                                                @{typ "state \<Rightarrow> bool"},
                                                                lu,@{theory}),var("s",qTy))],
                                                       @{theory}),var("s",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadDataLiteral",@{typ Hint},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 mop(Cast w32,
                                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8",
                                                                            var_b"b'7",var_b"b'6",
                                                                            var_b"b'5",var_b"b'4",
                                                                            var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"]))],
                                                              @{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'21"),
                                                   bop(And,var_b"b'19",
                                                       bop(And,var_b"b'18",
                                                           bop(And,var_b"b'17",
                                                               bop(And,var_b"b'16",
                                                                   bop(And,var_b"b'15",
                                                                       bop(And,var_b"b'14",
                                                                           bop(And,var_b"b'13",
                                                                               var_b"b'12"))))))))),
                                           let'
                                             (tp[var_w("v",4),var("s",qTy)],
                                              apply
                                                (call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "state \<Rightarrow> (4 word \<times> state)"},
                                                    lu,@{theory}),var("state",qTy)),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("v",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("s",qTy)),ln 7)],
                                                       @{theory}),var("s",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadInstruction",@{typ Hint},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),lw(15,4),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    @{theory})],@{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                                          (bop(And,var_b"b'24",
                                               bop(And,var_b"b'23",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'15",
                                                           bop(And,var_b"b'14",
                                                               bop(And,var_b"b'13",var_b"b'12")))))),
                                           let'
                                             (tp[var_w("v",4),var("s",qTy)],
                                              apply
                                                (call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "state \<Rightarrow> (4 word \<times> state)"},
                                                    lu,@{theory}),var("state",qTy)),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("v",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("s",qTy)),ln 7)],
                                                       @{theory}),var("s",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadInstruction",@{typ Hint},
                                                              tp[lt,
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"]),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    @{theory})],@{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,var_b"b'23",
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",var_b"b'12"))))),
                                           let'
                                             (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                              let'
                                                (tp[var_w("v",4),var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "state \<Rightarrow> (4 word \<times> state)"},
                                                       lu,@{theory}),var("state",qTy)),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("v",4),
                                                             ite(eq(var_w("W",1),lw(1,1)),
                                                                 apply
                                                                   (call
                                                                      ("HaveMPExt",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)),
                                                                 apply
                                                                   (call
                                                                      ("HaveThumb2",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)))],
                                                          @{theory}),var("s",qTy)),
                                                    tp[ite(var_b"v",
                                                           call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadData",@{typ Hint},
                                                                 tp[lt,eq(var_w("W",1),lw(1,1)),
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory})],@{theory}),
                                                              @{theory}),
                                                           apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy))),
                                                       var("s",qTy)])))),
                                          (bop(And,var_b"b'24",
                                               bop(And,var_b"b'21",
                                                   bop(And,var_b"b'19",
                                                       bop(And,var_b"b'18",
                                                           bop(And,var_b"b'17",
                                                               bop(And,var_b"b'16",
                                                                   bop(And,var_b"b'15",
                                                                       bop(And,var_b"b'14",
                                                                           bop(And,var_b"b'13",
                                                                               var_b"b'12"))))))))),
                                           tp[Term.Const
                                                (@{const_name "NoOperation"},@{typ instruction}),
                                              var("state",qTy)]),
                                          (bop(And,var_b"b'19",
                                               bop(And,var_b"b'18",bop(And,var_b"b'17",var_b"b'16"))),
                                           let'
                                             (var_w("Rt",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                              let'
                                                (tp[var_w("v",4),var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "state \<Rightarrow> (4 word \<times> state)"},
                                                       lu,@{theory}),var("state",qTy)),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("v",4),
                                                             apply
                                                               (call
                                                                  ("HaveThumb2",
                                                                   @{typ "state \<Rightarrow> bool"},
                                                                   lu,@{theory}),var("s",qTy))],
                                                          @{theory}),var("s",qTy)),
                                                    ite(var_b"v",
                                                        tp[let'
                                                             (var_w("imm32",32),
                                                              mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 12),
                                                                      ll[var_b"b'11",var_b"b'10",
                                                                         var_b"b'9",var_b"b'8",
                                                                         var_b"b'7",var_b"b'6",
                                                                         var_b"b'5",var_b"b'4",
                                                                         var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"])),
                                                              let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var_b"unsigned",
                                                                    eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                       lw(0,1)),
                                                                    ite(eq(mop(Cast w1,
                                                                               ll[var_b"b'21"]),
                                                                           lw(1,1)),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadHalfLiteral",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",
                                                                                 var_b"add",
                                                                                 var_w("Rt",4),
                                                                                 var_w("imm32",32)],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadByteLiteral",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",
                                                                                 var_b"add",
                                                                                 var_w("Rt",4),
                                                                                 var_w("imm32",32)],
                                                                              @{theory}),@{theory}))))),
                                                           ite(eq(var_w("Rt",4),lw(13,4)),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "LoadByteLiteral/LoadHalfLiteral"],
                                                                     @{theory}),var("s",qTy)),
                                                               var("s",qTy))],
                                                        tp[apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           var("s",qTy)]))))),
                                          (var_b"b'23",
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[let'
                                                                (var("m",@{typ offset1}),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    @{theory}),
                                                                 let'
                                                                   (var_b"unsigned",
                                                                    eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                       lw(0,1)),
                                                                    ite(eq(mop(Cast w1,
                                                                               ll[var_b"b'21"]),
                                                                           lw(1,1)),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadHalf",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",lt,
                                                                                 lt,lf,
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory}),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadByte",
                                                                              @{typ Load},
                                                                              tp[var_b"unsigned",lt,
                                                                                 lt,lf,
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset1})],
                                                                              @{theory}),@{theory})))),
                                                              ite(eq(var_w("Rt",4),lw(13,4)),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "LoadByte/LoadHalf (immediate)"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",
                                                               bop(And,var_b"b'12",
                                                                   bop(And,var_b"b'11",
                                                                       bop(And,var_b"b'10",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'9"),
                                                                               mop(Not,var_b"b'8")))))))))),
                                           let'
                                             (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                              let'
                                                (tp[var_w("v",4),var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "state \<Rightarrow> (4 word \<times> state)"},
                                                       lu,@{theory}),var("state",qTy)),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("v",4),
                                                             ite(eq(var_w("W",1),lw(1,1)),
                                                                 apply
                                                                   (call
                                                                      ("HaveMPExt",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)),
                                                                 apply
                                                                   (call
                                                                      ("HaveThumb2",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)))],
                                                          @{theory}),var("s",qTy)),
                                                    tp[ite(var_b"v",
                                                           call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadData",@{typ Hint},
                                                                 tp[lf,eq(var_w("W",1),lw(1,1)),
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast w8,
                                                                               ll[var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory})],@{theory}),
                                                              @{theory}),
                                                           apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy))),
                                                       var("s",qTy)])))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'15",
                                                           bop(And,var_b"b'14",
                                                               bop(And,var_b"b'13",
                                                                   bop(And,var_b"b'12",
                                                                       bop(And,var_b"b'11",
                                                                           bop(And,var_b"b'10",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'9"),
                                                                                   mop(Not,
                                                                                       var_b"b'8"))))))))))),
                                           let'
                                             (tp[var_w("v",4),var("s",qTy)],
                                              apply
                                                (call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "state \<Rightarrow> (4 word \<times> state)"},
                                                    lu,@{theory}),var("state",qTy)),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("v",4),
                                                          bop(Ge,
                                                              apply
                                                                (call
                                                                   ("ArchVersion",
                                                                    @{typ "state \<Rightarrow> nat"},
                                                                    lu,@{theory}),var("s",qTy)),ln 7)],
                                                       @{theory}),var("s",qTy)),
                                                 tp[ite(var_b"v",
                                                        call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadInstruction",@{typ Hint},
                                                              tp[lf,
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"]),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast w8,
                                                                            ll[var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    @{theory})],@{theory}),@{theory}),
                                                        apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy))),var("s",qTy)]))),
                                          (bop(And,mop(Not,var_b"b'23"),
                                               bop(And,var_b"b'11",
                                                   bop(And,mop(Not,var_b"b'10"),mop(Not,var_b"b'8")))),
                                           tp[call
                                                ("instruction.Undefined",@{typ instruction},
                                                 lw(0,32),@{theory}),var("state",qTy)]),
                                          (bop(And,mop(Not,var_b"b'23"),
                                               bop(And,var_b"b'11",
                                                   bop(And,var_b"b'10",
                                                       bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[let'
                                                                (var_b"unsigned",
                                                                 eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                    lw(0,1)),
                                                                 let'
                                                                   (var_w("imm32",32),
                                                                    mop(Cast w32,
                                                                        mop(Cast w8,
                                                                            ll[var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    let'
                                                                      (var("m",@{typ offset2}),
                                                                       call
                                                                         ("offset2.immediate_form2",
                                                                          @{typ offset2},
                                                                          var_w("imm32",32),
                                                                          @{theory}),
                                                                       itb([(eq(mop(Cast w1,
                                                                                    ll[var_b"b'21"]),
                                                                                lw(1,1)),
                                                                             call
                                                                               ("instruction.Load",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Load.LoadHalfUnprivileged",
                                                                                   @{typ Load},
                                                                                   tp[var_b"unsigned",
                                                                                      lt,lf,
                                                                                      var_w("Rt",4),
                                                                                      var_w("Rn",4),
                                                                                      var("m",
                                                                                          @{typ offset2})],
                                                                                   @{theory}),
                                                                                @{theory})),
                                                                            (var_b"unsigned",
                                                                             call
                                                                               ("instruction.Load",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Load.LoadByteUnprivileged",
                                                                                   @{typ Load},
                                                                                   tp[lt,lf,
                                                                                      var_w("Rt",4),
                                                                                      var_w("Rn",4),
                                                                                      call
                                                                                        ("offset1.immediate_form1",
                                                                                         @{typ offset1},
                                                                                         var_w("imm32",32),
                                                                                         @{theory})],
                                                                                   @{theory}),
                                                                                @{theory}))],
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadSignedByteUnprivileged",
                                                                                 @{typ Load},
                                                                                 tp[lt,lf,
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset2})],
                                                                                 @{theory}),
                                                                              @{theory}))))),
                                                              ite(bop(In,var_w("Rt",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"LoadUnprivileged"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'15",
                                                           bop(And,var_b"b'14",
                                                               bop(And,var_b"b'13",
                                                                   bop(And,var_b"b'12",
                                                                       bop(And,var_b"b'11",
                                                                           bop(And,var_b"b'10",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'9"),
                                                                                   mop(Not,
                                                                                       var_b"b'8"))))))))))),
                                           tp[Term.Const
                                                (@{const_name "NoOperation"},@{typ instruction}),
                                              var("state",qTy)]),
                                          (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           let'
                                                             (var_b"wback",
                                                              eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                              tp[let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'9"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var_b"index",
                                                                       eq(mop(Cast w1,
                                                                              ll[var_b"b'10"]),
                                                                          lw(1,1)),
                                                                       let'
                                                                         (var_b"unsigned",
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'24"]),
                                                                             lw(0,1)),
                                                                          let'
                                                                            (var("m",@{typ offset1}),
                                                                             call
                                                                               ("offset1.immediate_form1",
                                                                                @{typ offset1},
                                                                                mop(Cast w32,
                                                                                    mop(Cast w8,
                                                                                        ll[var_b"b'7",
                                                                                           var_b"b'6",
                                                                                           var_b"b'5",
                                                                                           var_b"b'4",
                                                                                           var_b"b'3",
                                                                                           var_b"b'2",
                                                                                           var_b"b'1",
                                                                                           var_b"b'0"])),
                                                                                @{theory}),
                                                                             ite(eq(mop(Cast w1,
                                                                                        ll[var_b"b'21"]),
                                                                                    lw(1,1)),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadHalf",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          var_b"add",
                                                                                          var_b"index",
                                                                                          var_b"wback",
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       @{theory}),
                                                                                    @{theory}),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadByte",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          var_b"add",
                                                                                          var_b"index",
                                                                                          var_b"wback",
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       @{theory}),
                                                                                    @{theory})))))),
                                                                 ite(bop(Or,
                                                                         eq(var_w("Rt",4),lw(13,4)),
                                                                         bop(Or,
                                                                             bop(And,
                                                                                 eq(var_w("Rt",4),
                                                                                    lw(15,4)),
                                                                                 var_b"wback"),
                                                                             bop(And,var_b"wback",
                                                                                 eq(var_w("Rn",4),
                                                                                    var_w("Rt",4))))),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Load (immediate)"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))]),
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'15",
                                                       bop(And,var_b"b'14",
                                                           bop(And,var_b"b'13",
                                                               bop(And,var_b"b'12",
                                                                   bop(And,mop(Not,var_b"b'11"),
                                                                       bop(And,mop(Not,var_b"b'10"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'9"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'8"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'7"),
                                                                                       mop(Not,
                                                                                           var_b"b'6")))))))))))),
                                           let'
                                             (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                ite(eq(var_w("W",1),lw(1,1)),
                                                                    apply
                                                                      (call
                                                                         ("HaveMPExt",
                                                                          @{typ
                                                                          "state \<Rightarrow> bool"},
                                                                          lu,@{theory}),var("s",qTy)),
                                                                    apply
                                                                      (call
                                                                         ("HaveThumb2",
                                                                          @{typ
                                                                          "state \<Rightarrow> bool"},
                                                                          lu,@{theory}),var("s",qTy)))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[call
                                                                ("instruction.Hint",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Hint.PreloadData",@{typ Hint},
                                                                    tp[lt,eq(var_w("W",1),lw(1,1)),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       call
                                                                         ("offset1.register_form1",
                                                                          @{typ offset1},
                                                                          tp[var_w("Rm",4),
                                                                             lc("SRType_LSL",
                                                                                "SRType",@{theory}),
                                                                             mop(Cast HOLogic.natT,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 2),
                                                                                     ll[var_b"b'5",
                                                                                        var_b"b'4"]))],
                                                                          @{theory})],@{theory}),
                                                                 @{theory}),
                                                              ite(bop(In,var_w("Rm",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"PreloadData"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'15",
                                                           bop(And,var_b"b'14",
                                                               bop(And,var_b"b'13",
                                                                   bop(And,var_b"b'12",
                                                                       bop(And,mop(Not,var_b"b'11"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'10"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'9"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'8"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'7"),
                                                                                           mop(Not,
                                                                                               var_b"b'6"))))))))))))),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (tp[var_w("v",4),var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "state \<Rightarrow> (4 word \<times> state)"},
                                                       lu,@{theory}),var("state",qTy)),
                                                 let'
                                                   (tp[var_b"v",var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("Do",
                                                          @{typ
                                                          "state \<Rightarrow> (bool \<times> state)"},
                                                          tp[var_w("v",4),
                                                             bop(Ge,
                                                                 apply
                                                                   (call
                                                                      ("ArchVersion",
                                                                       @{typ
                                                                       "state \<Rightarrow> nat"},
                                                                       lu,@{theory}),var("s",qTy)),
                                                                 ln 7)],@{theory}),var("s",qTy)),
                                                    ite(var_b"v",
                                                        tp[call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadInstruction",
                                                                 @{typ Hint},
                                                                 tp[lt,
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.register_form1",
                                                                       @{typ offset1},
                                                                       tp[var_w("Rm",4),
                                                                          lc("SRType_LSL","SRType",
                                                                             @{theory}),
                                                                          mop(Cast HOLogic.natT,
                                                                              mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'5",
                                                                                     var_b"b'4"]))],
                                                                       @{theory})],@{theory}),
                                                              @{theory}),
                                                           ite(bop(In,var_w("Rm",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               apply
                                                                 (call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"PreloadInstruction"],
                                                                     @{theory}),var("s",qTy)),
                                                               var("s",qTy))],
                                                        tp[apply
                                                             (call
                                                                ("Skip",
                                                                 @{typ
                                                                 "state \<Rightarrow> instruction"},
                                                                 lu,@{theory}),var("s",qTy)),
                                                           var("s",qTy)]))))),
                                          (bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'15",
                                                           bop(And,var_b"b'14",
                                                               bop(And,var_b"b'13",
                                                                   bop(And,var_b"b'12",
                                                                       bop(And,mop(Not,var_b"b'11"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'10"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'9"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'8"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'7"),
                                                                                           mop(Not,
                                                                                               var_b"b'6"))))))))))))),
                                           tp[Term.Const
                                                (@{const_name "NoOperation"},@{typ instruction}),
                                              var("state",qTy)]),
                                          (bop(And,mop(Not,var_b"b'23"),
                                               bop(And,mop(Not,var_b"b'11"),
                                                   bop(And,mop(Not,var_b"b'10"),
                                                       bop(And,mop(Not,var_b"b'9"),
                                                           bop(And,mop(Not,var_b"b'8"),
                                                               bop(And,mop(Not,var_b"b'7"),
                                                                   mop(Not,var_b"b'6"))))))),
                                           let'
                                             (var_w("Rn",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rt",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    let'
                                                      (tp[var_w("v",4),var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("ThumbCondition",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (4 word \<times> state)"},lu,@{theory}),
                                                          var("state",qTy)),
                                                       let'
                                                         (tp[var_b"v",var("s",qTy)],
                                                          apply
                                                            (call
                                                               ("Do",
                                                                @{typ
                                                                "state \<Rightarrow>
                                                                 (bool \<times> state)"},
                                                                tp[var_w("v",4),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy))],
                                                                @{theory}),var("s",qTy)),
                                                          ite(var_b"v",
                                                              tp[let'
                                                                   (var_b"unsigned",
                                                                    eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                       lw(0,1)),
                                                                    let'
                                                                      (var("m",@{typ offset1}),
                                                                       call
                                                                         ("offset1.register_form1",
                                                                          @{typ offset1},
                                                                          tp[var_w("Rm",4),
                                                                             lc("SRType_LSL",
                                                                                "SRType",@{theory}),
                                                                             mop(Cast HOLogic.natT,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 2),
                                                                                     ll[var_b"b'5",
                                                                                        var_b"b'4"]))],
                                                                          @{theory}),
                                                                       ite(eq(mop(Cast w1,
                                                                                  ll[var_b"b'21"]),
                                                                              lw(1,1)),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadHalf",
                                                                                 @{typ Load},
                                                                                 tp[var_b"unsigned",
                                                                                    lt,lt,lf,
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset1})],
                                                                                 @{theory}),
                                                                              @{theory}),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadByte",
                                                                                 @{typ Load},
                                                                                 tp[var_b"unsigned",
                                                                                    lt,lt,lf,
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset1})],
                                                                                 @{theory}),
                                                                              @{theory})))),
                                                                 ite(bop(Or,
                                                                         eq(var_w("Rt",4),lw(13,4)),
                                                                         bop(In,var_w("Rm",4),
                                                                             sl[lw(13,4),lw(15,4)])),
                                                                     apply
                                                                       (call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "state \<Rightarrow>
                                                                            state"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Load (register)"],
                                                                           @{theory}),var("s",qTy)),
                                                                     var("s",qTy))],
                                                              tp[apply
                                                                   (call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "state \<Rightarrow>
                                                                        instruction"},lu,@{theory}),
                                                                    var("s",qTy)),var("s",qTy)])))))))],
                                         apply
                                           (call
                                              ("UndefinedThumb",
                                               @{typ
                                               "state \<Rightarrow> (instruction \<times> state)"},
                                               lu,@{theory}),var("state",qTy))),
                                     apply
                                       (call
                                          ("UndefinedThumb",
                                           @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                           lu,@{theory}),var("state",qTy)))),
                                (bop(And,var_b"b'31",
                                     bop(And,var_b"b'30",
                                         bop(And,var_b"b'29",
                                             bop(And,mop(Not,var_b"b'26"),mop(Not,var_b"b'24"))))),
                                 itb([(bop(And,mop(Not,var_b"b'23"),
                                           bop(And,mop(Not,var_b"b'11"),
                                               bop(And,mop(Not,var_b"b'10"),
                                                   bop(And,mop(Not,var_b"b'9"),
                                                       bop(And,mop(Not,var_b"b'8"),
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               mop(Not,var_b"b'6"))))))),
                                       let'
                                         (var_w("Rn",4),
                                          mop(Cast w4,
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                          let'
                                            (var_w("Rm",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                let'
                                                  (tp[var_w("v",4),var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("ThumbCondition",
                                                         @{typ
                                                         "state \<Rightarrow>
                                                          (4 word \<times> state)"},lu,@{theory}),
                                                      var("state",qTy)),
                                                   let'
                                                     (tp[var_b"v",var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("Do",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (bool \<times> state)"},
                                                            tp[var_w("v",4),
                                                               bop(And,
                                                                   mop(Not,
                                                                       eq(var_w("Rn",4),lw(15,4))),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy)))],
                                                            @{theory}),var("s",qTy)),
                                                      ite(var_b"v",
                                                          tp[let'
                                                               (var("m",@{typ offset1}),
                                                                call
                                                                  ("offset1.register_form1",
                                                                   @{typ offset1},
                                                                   tp[var_w("Rm",4),
                                                                      lc("SRType_LSL","SRType",
                                                                         @{theory}),
                                                                      mop(Cast HOLogic.natT,
                                                                          mop(Cast
                                                                                (Word_Lib.mk_wordT 2),
                                                                              ll[var_b"b'5",
                                                                                 var_b"b'4"]))],
                                                                   @{theory}),
                                                                ite(eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                       lw(1,1)),
                                                                    call
                                                                      ("instruction.Store",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Store.StoreHalf",
                                                                          @{typ Store},
                                                                          tp[lt,lt,lf,var_w("Rt",4),
                                                                             var_w("Rn",4),
                                                                             var("m",@{typ offset1})],
                                                                          @{theory}),@{theory}),
                                                                    call
                                                                      ("instruction.Store",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Store.StoreByte",
                                                                          @{typ Store},
                                                                          tp[lt,lt,lf,var_w("Rt",4),
                                                                             var_w("Rn",4),
                                                                             var("m",@{typ offset1})],
                                                                          @{theory}),@{theory}))),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rt",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(In,var_w("Rm",4),
                                                                         sl[lw(13,4),lw(15,4)])),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls
                                                                           "StoreByte/Half (register)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))],
                                                          tp[apply
                                                               (call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "state \<Rightarrow> instruction"},
                                                                   lu,@{theory}),var("s",qTy)),
                                                             var("s",qTy)]))))))),
                                      (bop(And,mop(Not,var_b"b'23"),
                                           bop(And,var_b"b'11",
                                               bop(And,var_b"b'10",
                                                   bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                       let'
                                         (var_w("Rn",4),
                                          mop(Cast w4,
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             let'
                                               (tp[var_w("v",4),var("s",qTy)],
                                                apply
                                                  (call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "state \<Rightarrow> (4 word \<times> state)"},
                                                      lu,@{theory}),var("state",qTy)),
                                                let'
                                                  (tp[var_b"v",var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("Do",
                                                         @{typ
                                                         "state \<Rightarrow> (bool \<times> state)"},
                                                         tp[var_w("v",4),
                                                            bop(And,
                                                                mop(Not,eq(var_w("Rn",4),lw(15,4))),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy)))],
                                                         @{theory}),var("s",qTy)),
                                                   ite(var_b"v",
                                                       tp[let'
                                                            (var_w("imm32",32),
                                                             mop(Cast w32,
                                                                 mop(Cast w8,
                                                                     ll[var_b"b'7",var_b"b'6",
                                                                        var_b"b'5",var_b"b'4",
                                                                        var_b"b'3",var_b"b'2",
                                                                        var_b"b'1",var_b"b'0"])),
                                                             ite(eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                    lw(1,1)),
                                                                 call
                                                                   ("instruction.Store",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Store.StoreHalfUnprivileged",
                                                                       @{typ Store},
                                                                       tp[lt,lf,var_w("Rt",4),
                                                                          var_w("Rn",4),
                                                                          call
                                                                            ("offset2.immediate_form2",
                                                                             @{typ offset2},
                                                                             var_w("imm32",32),
                                                                             @{theory})],@{theory}),
                                                                    @{theory}),
                                                                 call
                                                                   ("instruction.Store",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Store.StoreByteUnprivileged",
                                                                       @{typ Store},
                                                                       tp[lt,lf,var_w("Rt",4),
                                                                          var_w("Rn",4),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             var_w("imm32",32),
                                                                             @{theory})],@{theory}),
                                                                    @{theory}))),
                                                          ite(bop(In,var_w("Rt",4),
                                                                  sl[lw(13,4),lw(15,4)]),
                                                              apply
                                                                (call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "state \<Rightarrow> state"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls
                                                                        "StoreByte/HalfUnprivileged"],
                                                                    @{theory}),var("s",qTy)),
                                                              var("s",qTy))],
                                                       tp[apply
                                                            (call
                                                               ("Skip",
                                                                @{typ
                                                                "state \<Rightarrow> instruction"},
                                                                lu,@{theory}),var("s",qTy)),
                                                          var("s",qTy)])))))),
                                      (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                       let'
                                         (var_w("Rn",4),
                                          mop(Cast w4,
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                          let'
                                            (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                             let'
                                               (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                                let'
                                                  (var_w("Rt",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                          var_b"b'12"]),
                                                   let'
                                                     (tp[var_w("v",4),var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("ThumbCondition",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (4 word \<times> state)"},lu,@{theory}),
                                                         var("state",qTy)),
                                                      let'
                                                        (tp[var_b"v",var("s",qTy)],
                                                         apply
                                                           (call
                                                              ("Do",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (bool \<times> state)"},
                                                               tp[var_w("v",4),
                                                                  bop(And,
                                                                      mop(Not,
                                                                          eq(var_w("Rn",4),lw(15,4))),
                                                                      bop(And,
                                                                          bop(Or,
                                                                              eq(var_w("P",1),
                                                                                 lw(1,1)),
                                                                              eq(var_w("W",1),
                                                                                 lw(1,1))),
                                                                          apply
                                                                            (call
                                                                               ("HaveThumb2",
                                                                                @{typ
                                                                                "state \<Rightarrow>
                                                                                 bool"},lu,@{theory}),
                                                                             var("s",qTy))))],
                                                               @{theory}),var("s",qTy)),
                                                         ite(var_b"v",
                                                             let'
                                                               (var_b"wback",
                                                                eq(var_w("W",1),lw(1,1)),
                                                                tp[let'
                                                                     (var_b"add",
                                                                      eq(mop(Cast w1,ll[var_b"b'9"]),
                                                                         lw(1,1)),
                                                                      let'
                                                                        (var_b"index",
                                                                         eq(var_w("P",1),lw(1,1)),
                                                                         let'
                                                                           (var("m",@{typ offset1}),
                                                                            call
                                                                              ("offset1.immediate_form1",
                                                                               @{typ offset1},
                                                                               mop(Cast w32,
                                                                                   mop(Cast w8,
                                                                                       ll[var_b"b'7",
                                                                                          var_b"b'6",
                                                                                          var_b"b'5",
                                                                                          var_b"b'4",
                                                                                          var_b"b'3",
                                                                                          var_b"b'2",
                                                                                          var_b"b'1",
                                                                                          var_b"b'0"])),
                                                                               @{theory}),
                                                                            ite(eq(mop(Cast w1,
                                                                                       ll[var_b"b'21"]),
                                                                                   lw(1,1)),
                                                                                call
                                                                                  ("instruction.Store",
                                                                                   @{typ instruction},
                                                                                   call
                                                                                     ("Store.StoreHalf",
                                                                                      @{typ Store},
                                                                                      tp[var_b"add",
                                                                                         var_b"index",
                                                                                         var_b"wback",
                                                                                         var_w("Rt",4),
                                                                                         var_w("Rn",4),
                                                                                         var("m",
                                                                                             @{typ offset1})],
                                                                                      @{theory}),
                                                                                   @{theory}),
                                                                                call
                                                                                  ("instruction.Store",
                                                                                   @{typ instruction},
                                                                                   call
                                                                                     ("Store.StoreByte",
                                                                                      @{typ Store},
                                                                                      tp[var_b"add",
                                                                                         var_b"index",
                                                                                         var_b"wback",
                                                                                         var_w("Rt",4),
                                                                                         var_w("Rn",4),
                                                                                         var("m",
                                                                                             @{typ offset1})],
                                                                                      @{theory}),
                                                                                   @{theory}))))),
                                                                   ite(bop(Or,
                                                                           bop(In,var_w("Rt",4),
                                                                               sl[lw(13,4),lw(15,4)]),
                                                                           bop(And,var_b"wback",
                                                                               eq(var_w("Rn",4),
                                                                                  var_w("Rt",4)))),
                                                                       apply
                                                                         (call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "state \<Rightarrow>
                                                                              state"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls
                                                                                 "StoreByte/Half (immediate)"],
                                                                             @{theory}),var("s",qTy)),
                                                                       var("s",qTy))]),
                                                             tp[apply
                                                                  (call
                                                                     ("Skip",
                                                                      @{typ
                                                                      "state \<Rightarrow>
                                                                       instruction"},lu,@{theory}),
                                                                   var("s",qTy)),var("s",qTy)])))))))),
                                      (var_b"b'23",
                                       let'
                                         (var_w("Rn",4),
                                          mop(Cast w4,
                                              ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             let'
                                               (tp[var_w("v",4),var("s",qTy)],
                                                apply
                                                  (call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "state \<Rightarrow> (4 word \<times> state)"},
                                                      lu,@{theory}),var("state",qTy)),
                                                let'
                                                  (tp[var_b"v",var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("Do",
                                                         @{typ
                                                         "state \<Rightarrow> (bool \<times> state)"},
                                                         tp[var_w("v",4),
                                                            bop(And,
                                                                mop(Not,eq(var_w("Rn",4),lw(15,4))),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy)))],
                                                         @{theory}),var("s",qTy)),
                                                   ite(var_b"v",
                                                       tp[let'
                                                            (var("m",@{typ offset1}),
                                                             call
                                                               ("offset1.immediate_form1",
                                                                @{typ offset1},
                                                                mop(Cast w32,
                                                                    mop(Cast (Word_Lib.mk_wordT 12),
                                                                        ll[var_b"b'11",var_b"b'10",
                                                                           var_b"b'9",var_b"b'8",
                                                                           var_b"b'7",var_b"b'6",
                                                                           var_b"b'5",var_b"b'4",
                                                                           var_b"b'3",var_b"b'2",
                                                                           var_b"b'1",var_b"b'0"])),
                                                                @{theory}),
                                                             ite(eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                    lw(1,1)),
                                                                 call
                                                                   ("instruction.Store",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Store.StoreHalf",
                                                                       @{typ Store},
                                                                       tp[lt,lt,lf,var_w("Rt",4),
                                                                          var_w("Rn",4),
                                                                          var("m",@{typ offset1})],
                                                                       @{theory}),@{theory}),
                                                                 call
                                                                   ("instruction.Store",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Store.StoreByte",
                                                                       @{typ Store},
                                                                       tp[lt,lt,lf,var_w("Rt",4),
                                                                          var_w("Rn",4),
                                                                          var("m",@{typ offset1})],
                                                                       @{theory}),@{theory}))),
                                                          ite(bop(In,var_w("Rt",4),
                                                                  sl[lw(13,4),lw(15,4)]),
                                                              apply
                                                                (call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "state \<Rightarrow> state"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls
                                                                        "StoreByte/Half (immediate)"],
                                                                    @{theory}),var("s",qTy)),
                                                              var("s",qTy))],
                                                       tp[apply
                                                            (call
                                                               ("Skip",
                                                                @{typ
                                                                "state \<Rightarrow> instruction"},
                                                                lu,@{theory}),var("s",qTy)),
                                                          var("s",qTy)]))))))],
                                     apply
                                       (call
                                          ("UndefinedThumb",
                                           @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                           lu,@{theory}),var("state",qTy))))],
                               apply
                                 (call
                                    ("UndefinedThumb",
                                     @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                                     @{theory}),var("state",qTy)))),
                          (bop(And,var_b"b'31",
                               bop(And,var_b"b'30",bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                           itb([(bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              let'
                                                (var_w("registers",16),
                                                 cc[lw(0,1),mop(Cast w1,ll[var_b"b'14"]),lw(0,1),
                                                    mop(Cast (Word_Lib.mk_wordT 13),
                                                        ll[var_b"b'12",var_b"b'11",var_b"b'10",
                                                           var_b"b'9",var_b"b'8",var_b"b'7",
                                                           var_b"b'6",var_b"b'5",var_b"b'4",
                                                           var_b"b'3",var_b"b'2",var_b"b'1",
                                                           var_b"b'0"])],
                                                 let'
                                                   (var_b"wback",
                                                    eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                    tp[call
                                                         ("instruction.Store",@{typ instruction},
                                                          call
                                                            ("Store.StoreMultiple",@{typ Store},
                                                             tp[lt,lf,var_b"wback",var_w("Rn",4),
                                                                var_w("registers",16)],@{theory}),
                                                          @{theory}),
                                                       ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   bop(Lt,
                                                                       call
                                                                         ("BitCount",HOLogic.natT,
                                                                          var_w("registers",16),
                                                                          @{theory}),ln 2),
                                                                   bop(And,var_b"wback",
                                                                       bop(Bit,
                                                                           var_w("registers",16),
                                                                           mop(Cast HOLogic.natT,
                                                                               var_w("Rn",4)))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreMultiple"],@{theory}),
                                                              var("s",qTy)),var("s",qTy))])),
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,var_b"b'24",
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              let'
                                                (var_w("registers",16),
                                                 cc[lw(0,1),mop(Cast w1,ll[var_b"b'14"]),lw(0,1),
                                                    mop(Cast (Word_Lib.mk_wordT 13),
                                                        ll[var_b"b'12",var_b"b'11",var_b"b'10",
                                                           var_b"b'9",var_b"b'8",var_b"b'7",
                                                           var_b"b'6",var_b"b'5",var_b"b'4",
                                                           var_b"b'3",var_b"b'2",var_b"b'1",
                                                           var_b"b'0"])],
                                                 let'
                                                   (var_b"wback",
                                                    eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                    tp[call
                                                         ("instruction.Store",@{typ instruction},
                                                          call
                                                            ("Store.StoreMultiple",@{typ Store},
                                                             tp[lf,lt,var_b"wback",var_w("Rn",4),
                                                                var_w("registers",16)],@{theory}),
                                                          @{theory}),
                                                       ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   bop(Lt,
                                                                       call
                                                                         ("BitCount",HOLogic.natT,
                                                                          var_w("registers",16),
                                                                          @{theory}),ln 2),
                                                                   bop(And,var_b"wback",
                                                                       bop(Bit,
                                                                           var_w("registers",16),
                                                                           mop(Cast HOLogic.natT,
                                                                               var_w("Rn",4)))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreMultiple"],@{theory}),
                                                              var("s",qTy)),var("s",qTy))])),
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,mop(Not,var_b"b'22"),var_b"b'20")))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("M",1),mop(Cast w1,ll[var_b"b'14"]),
                                       let'
                                         (var_w("P",1),mop(Cast w1,ll[var_b"b'15"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         apply
                                                           (call
                                                              ("HaveThumb2",
                                                               @{typ "state \<Rightarrow> bool"},lu,
                                                               @{theory}),var("s",qTy))],@{theory}),
                                                   var("s",qTy)),
                                                ite(var_b"v",
                                                    let'
                                                      (var_w("registers",16),
                                                       cc[var_w("P",1),var_w("M",1),lw(0,1),
                                                          mop(Cast (Word_Lib.mk_wordT 13),
                                                              ll[var_b"b'12",var_b"b'11",
                                                                 var_b"b'10",var_b"b'9",var_b"b'8",
                                                                 var_b"b'7",var_b"b'6",var_b"b'5",
                                                                 var_b"b'4",var_b"b'3",var_b"b'2",
                                                                 var_b"b'1",var_b"b'0"])],
                                                       let'
                                                         (var_b"wback",
                                                          eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                          tp[call
                                                               ("instruction.Load",
                                                                @{typ instruction},
                                                                call
                                                                  ("Load.LoadMultiple",@{typ Load},
                                                                   tp[lt,lf,var_b"wback",
                                                                      var_w("Rn",4),
                                                                      var_w("registers",16)],
                                                                   @{theory}),@{theory}),
                                                             ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                     bop(Or,
                                                                         bop(Lt,
                                                                             call
                                                                               ("BitCount",
                                                                                HOLogic.natT,
                                                                                var_w("registers",16),
                                                                                @{theory}),ln 2),
                                                                         bop(Or,
                                                                             bop(And,
                                                                                 eq(var_w("P",1),
                                                                                    lw(1,1)),
                                                                                 eq(var_w("M",1),
                                                                                    lw(1,1))),
                                                                             bop(Or,
                                                                                 bop(And,
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         ln 15),
                                                                                     bop(And,
                                                                                         apply
                                                                                           (call
                                                                                              ("InITBlock",
                                                                                               @{typ
                                                                                               "state \<Rightarrow>
                                                                                                bool"},
                                                                                               lu,
                                                                                               @{theory}),
                                                                                            var("s",
                                                                                                qTy)),
                                                                                         mop(Not,
                                                                                             apply
                                                                                               (call
                                                                                                  ("LastInITBlock",
                                                                                                   @{typ
                                                                                                   "state \<Rightarrow>
                                                                                                    bool"},
                                                                                                   lu,
                                                                                                   @{theory}),
                                                                                                var("s",
                                                                                                    qTy))))),
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         mop(Cast
                                                                                               HOLogic.natT,
                                                                                             var_w("Rn",4)))))))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"LoadMultiple"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))])),
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,var_b"b'24",
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),var_b"b'20")))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("M",1),mop(Cast w1,ll[var_b"b'14"]),
                                       let'
                                         (var_w("P",1),mop(Cast w1,ll[var_b"b'15"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         apply
                                                           (call
                                                              ("HaveThumb2",
                                                               @{typ "state \<Rightarrow> bool"},lu,
                                                               @{theory}),var("s",qTy))],@{theory}),
                                                   var("s",qTy)),
                                                ite(var_b"v",
                                                    let'
                                                      (var_w("registers",16),
                                                       cc[var_w("P",1),var_w("M",1),lw(0,1),
                                                          mop(Cast (Word_Lib.mk_wordT 13),
                                                              ll[var_b"b'12",var_b"b'11",
                                                                 var_b"b'10",var_b"b'9",var_b"b'8",
                                                                 var_b"b'7",var_b"b'6",var_b"b'5",
                                                                 var_b"b'4",var_b"b'3",var_b"b'2",
                                                                 var_b"b'1",var_b"b'0"])],
                                                       let'
                                                         (var_b"wback",
                                                          eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                          tp[call
                                                               ("instruction.Load",
                                                                @{typ instruction},
                                                                call
                                                                  ("Load.LoadMultiple",@{typ Load},
                                                                   tp[lf,lt,var_b"wback",
                                                                      var_w("Rn",4),
                                                                      var_w("registers",16)],
                                                                   @{theory}),@{theory}),
                                                             ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                     bop(Or,
                                                                         bop(Lt,
                                                                             call
                                                                               ("BitCount",
                                                                                HOLogic.natT,
                                                                                var_w("registers",16),
                                                                                @{theory}),ln 2),
                                                                         bop(Or,
                                                                             bop(And,
                                                                                 eq(var_w("P",1),
                                                                                    lw(1,1)),
                                                                                 eq(var_w("M",1),
                                                                                    lw(1,1))),
                                                                             bop(Or,
                                                                                 bop(And,
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         ln 15),
                                                                                     bop(And,
                                                                                         apply
                                                                                           (call
                                                                                              ("InITBlock",
                                                                                               @{typ
                                                                                               "state \<Rightarrow>
                                                                                                bool"},
                                                                                               lu,
                                                                                               @{theory}),
                                                                                            var("s",
                                                                                                qTy)),
                                                                                         mop(Not,
                                                                                             apply
                                                                                               (call
                                                                                                  ("LastInITBlock",
                                                                                                   @{typ
                                                                                                   "state \<Rightarrow>
                                                                                                    bool"},
                                                                                                   lu,
                                                                                                   @{theory}),
                                                                                                var("s",
                                                                                                    qTy))))),
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         mop(Cast
                                                                                               HOLogic.natT,
                                                                                             var_w("Rn",4)))))))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"LoadMultiple"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))])),
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))),
                                 let'
                                   (var_w("op",2),
                                    mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'24",var_b"b'23"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   bop(And,
                                                       bop(In,var_w("op",2),sl[lw(0,2),lw(3,2)]),
                                                       apply
                                                         (call
                                                            ("HaveThumb2",
                                                             @{typ "state \<Rightarrow> bool"},lu,
                                                             @{theory}),var("s",qTy)))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              tp[call
                                                   ("instruction.System",@{typ instruction},
                                                    call
                                                      ("System.StoreReturnState",@{typ System},
                                                       tp[eq(var_w("op",2),lw(3,2)),lf,
                                                          eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                          mop(Cast (Word_Lib.mk_wordT 5),
                                                              ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                                 var_b"b'1",var_b"b'0"])],@{theory}),
                                                    @{theory}),
                                                 ite(eq(apply
                                                          (call
                                                             ("CurrentInstrSet",
                                                              @{typ "state \<Rightarrow> InstrSet"},
                                                              lu,@{theory}),var("s",qTy)),
                                                        lc("InstrSet_ThumbEE","InstrSet",@{theory})),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"StoreReturnState"],@{theory}),
                                                        var("s",qTy)),var("s",qTy))],
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'22"),var_b"b'20")),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("op",2),
                                       mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'24",var_b"b'23"]),
                                       let'
                                         (tp[var_w("v",4),var("s",qTy)],
                                          apply
                                            (call
                                               ("ThumbCondition",
                                                @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                                lu,@{theory}),var("state",qTy)),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[var_w("v",4),
                                                      bop(And,
                                                          bop(In,var_w("op",2),sl[lw(0,2),lw(3,2)]),
                                                          apply
                                                            (call
                                                               ("HaveThumb2",
                                                                @{typ "state \<Rightarrow> bool"},
                                                                lu,@{theory}),var("s",qTy)))],
                                                   @{theory}),var("s",qTy)),
                                             ite(var_b"v",
                                                 tp[call
                                                      ("instruction.System",@{typ instruction},
                                                       call
                                                         ("System.ReturnFromException",
                                                          @{typ System},
                                                          tp[eq(var_w("op",2),lw(3,2)),lf,
                                                             eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                             var_w("Rn",4)],@{theory}),@{theory}),
                                                    ite(bop(Or,
                                                            eq(apply
                                                                 (call
                                                                    ("CurrentInstrSet",
                                                                     @{typ
                                                                     "state \<Rightarrow> InstrSet"},
                                                                     lu,@{theory}),var("s",qTy)),
                                                               lc("InstrSet_ThumbEE","InstrSet",
                                                                  @{theory})),
                                                            bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                bop(And,
                                                                    apply
                                                                      (call
                                                                         ("InITBlock",
                                                                          @{typ
                                                                          "state \<Rightarrow> bool"},
                                                                          lu,@{theory}),var("s",qTy)),
                                                                    mop(Not,
                                                                        apply
                                                                          (call
                                                                             ("LastInITBlock",
                                                                              @{typ
                                                                              "state \<Rightarrow>
                                                                               bool"},lu,@{theory}),
                                                                           var("s",qTy)))))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"ReturnFromException"],@{theory}),
                                                           var("s",qTy)),var("s",qTy))],
                                                 tp[apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rd",4),
                                       mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         apply
                                                           (call
                                                              ("HaveThumb2",
                                                               @{typ "state \<Rightarrow> bool"},lu,
                                                               @{theory}),var("s",qTy))],@{theory}),
                                                   var("s",qTy)),
                                                ite(var_b"v",
                                                    tp[call
                                                         ("instruction.Store",@{typ instruction},
                                                          call
                                                            ("Store.StoreExclusive",@{typ Store},
                                                             tp[var_w("Rd",4),var_w("Rt",4),
                                                                var_w("Rn",4),
                                                                mop(Cast w32,
                                                                    cc[mop(Cast w8,
                                                                           ll[var_b"b'7",var_b"b'6",
                                                                              var_b"b'5",var_b"b'4",
                                                                              var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"]),
                                                                       lw(0,2)])],@{theory}),
                                                          @{theory}),
                                                       ite(bop(Or,
                                                               bop(In,var_w("Rd",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,
                                                                   bop(In,var_w("Rt",4),
                                                                       sl[lw(13,4),lw(15,4)]),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       bop(Or,
                                                                           eq(var_w("Rd",4),
                                                                              var_w("Rn",4)),
                                                                           eq(var_w("Rd",4),
                                                                              var_w("Rt",4)))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreExclusive"],@{theory}),
                                                              var("s",qTy)),var("s",qTy))],
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),var_b"b'20"))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       let'
                                         (tp[var_w("v",4),var("s",qTy)],
                                          apply
                                            (call
                                               ("ThumbCondition",
                                                @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                                lu,@{theory}),var("state",qTy)),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[var_w("v",4),
                                                      apply
                                                        (call
                                                           ("HaveThumb2",
                                                            @{typ "state \<Rightarrow> bool"},lu,
                                                            @{theory}),var("s",qTy))],@{theory}),
                                                var("s",qTy)),
                                             ite(var_b"v",
                                                 tp[call
                                                      ("instruction.Load",@{typ instruction},
                                                       call
                                                         ("Load.LoadExclusive",@{typ Load},
                                                          tp[var_w("Rt",4),var_w("Rn",4),
                                                             mop(Cast w32,
                                                                 cc[mop(Cast w8,
                                                                        ll[var_b"b'7",var_b"b'6",
                                                                           var_b"b'5",var_b"b'4",
                                                                           var_b"b'3",var_b"b'2",
                                                                           var_b"b'1",var_b"b'0"]),
                                                                    lw(0,2)])],@{theory}),@{theory}),
                                                    ite(bop(Or,
                                                            bop(In,var_w("Rt",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            eq(var_w("Rn",4),lw(15,4))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"StoreExclusive"],@{theory}),
                                                           var("s",qTy)),var("s",qTy))],
                                                 tp[apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rd",4),
                                       mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         bop(Ge,
                                                             apply
                                                               (call
                                                                  ("ArchVersion",
                                                                   @{typ "state \<Rightarrow> nat"},
                                                                   lu,@{theory}),var("s",qTy)),ln 7)],
                                                      @{theory}),var("s",qTy)),
                                                ite(var_b"v",
                                                    tp[ite(eq(mop(Cast w1,ll[var_b"b'4"]),lw(1,1)),
                                                           call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreExclusiveHalf",
                                                                 @{typ Store},
                                                                 tp[var_w("Rd",4),var_w("Rt",4),
                                                                    var_w("Rn",4)],@{theory}),
                                                              @{theory}),
                                                           call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreExclusiveByte",
                                                                 @{typ Store},
                                                                 tp[var_w("Rd",4),var_w("Rt",4),
                                                                    var_w("Rn",4)],@{theory}),
                                                              @{theory})),
                                                       ite(bop(Or,
                                                               bop(In,var_w("Rd",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,
                                                                   bop(In,var_w("Rt",4),
                                                                       sl[lw(13,4),lw(15,4)]),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       bop(Or,
                                                                           eq(var_w("Rd",4),
                                                                              var_w("Rn",4)),
                                                                           eq(var_w("Rd",4),
                                                                              var_w("Rt",4)))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls
                                                                     "StoreExclusive: Byte or Halfword"],
                                                                 @{theory}),var("s",qTy)),
                                                           var("s",qTy))],
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",
                                                                 bop(And,var_b"b'5",var_b"b'4"))))))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rd",4),
                                       mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                       let'
                                         (var_w("Rt2",4),
                                          mop(Cast w4,
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             let'
                                               (tp[var_w("v",4),var("s",qTy)],
                                                apply
                                                  (call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "state \<Rightarrow> (4 word \<times> state)"},
                                                      lu,@{theory}),var("state",qTy)),
                                                let'
                                                  (tp[var_b"v",var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("Do",
                                                         @{typ
                                                         "state \<Rightarrow> (bool \<times> state)"},
                                                         tp[var_w("v",4),
                                                            bop(Ge,
                                                                apply
                                                                  (call
                                                                     ("ArchVersion",
                                                                      @{typ
                                                                      "state \<Rightarrow> nat"},lu,
                                                                      @{theory}),var("s",qTy)),ln 7)],
                                                         @{theory}),var("s",qTy)),
                                                   ite(var_b"v",
                                                       tp[call
                                                            ("instruction.Store",@{typ instruction},
                                                             call
                                                               ("Store.StoreExclusiveDoubleword",
                                                                @{typ Store},
                                                                tp[var_w("Rd",4),var_w("Rt",4),
                                                                   var_w("Rt2",4),var_w("Rn",4)],
                                                                @{theory}),@{theory}),
                                                          ite(bop(Or,
                                                                  bop(In,var_w("Rd",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  bop(Or,
                                                                      bop(In,var_w("Rt",4),
                                                                          sl[lw(13,4),lw(15,4)]),
                                                                      bop(Or,
                                                                          bop(In,var_w("Rt2",4),
                                                                              sl[lw(13,4),lw(15,4)]),
                                                                          bop(Or,
                                                                              eq(var_w("Rn",4),
                                                                                 lw(15,4)),
                                                                              bop(Or,
                                                                                  eq(var_w("Rd",4),
                                                                                     var_w("Rn",4)),
                                                                                  eq(var_w("Rd",4),
                                                                                     var_w("Rt",4))))))),
                                                              apply
                                                                (call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "state \<Rightarrow> state"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"StoreExclusivDoubleword"],
                                                                    @{theory}),var("s",qTy)),
                                                              var("s",qTy))],
                                                       tp[apply
                                                            (call
                                                               ("Skip",
                                                                @{typ
                                                                "state \<Rightarrow> instruction"},
                                                                lu,@{theory}),var("s",qTy)),
                                                          var("s",qTy)])))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,var_b"b'20",
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,mop(Not,var_b"b'6"),
                                                                 mop(Not,var_b"b'5"))))))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rm",4),
                                       mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                       let'
                                         (tp[var_w("v",4),var("s",qTy)],
                                          apply
                                            (call
                                               ("ThumbCondition",
                                                @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                                lu,@{theory}),var("state",qTy)),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[var_w("v",4),
                                                      apply
                                                        (call
                                                           ("HaveThumb2",
                                                            @{typ "state \<Rightarrow> bool"},lu,
                                                            @{theory}),var("s",qTy))],@{theory}),
                                                var("s",qTy)),
                                             ite(var_b"v",
                                                 tp[call
                                                      ("instruction.Branch",@{typ instruction},
                                                       call
                                                         ("Branch.TableBranchByte",@{typ Branch},
                                                          tp[eq(mop(Cast w1,ll[var_b"b'4"]),lw(1,1)),
                                                             var_w("Rm",4),var_w("Rn",4)],@{theory}),
                                                       @{theory}),
                                                    ite(bop(Or,eq(var_w("Rn",4),lw(13,4)),
                                                            bop(Or,
                                                                bop(In,var_w("Rm",4),
                                                                    sl[lw(13,4),lw(15,4)]),
                                                                bop(And,
                                                                    apply
                                                                      (call
                                                                         ("InITBlock",
                                                                          @{typ
                                                                          "state \<Rightarrow> bool"},
                                                                          lu,@{theory}),var("s",qTy)),
                                                                    mop(Not,
                                                                        apply
                                                                          (call
                                                                             ("LastInITBlock",
                                                                              @{typ
                                                                              "state \<Rightarrow>
                                                                               bool"},lu,@{theory}),
                                                                           var("s",qTy)))))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"TableBranchByte"],@{theory}),
                                                           var("s",qTy)),var("s",qTy))],
                                                 tp[apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,var_b"b'20",
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       let'
                                         (tp[var_w("v",4),var("s",qTy)],
                                          apply
                                            (call
                                               ("ThumbCondition",
                                                @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                                lu,@{theory}),var("state",qTy)),
                                          let'
                                            (tp[var_b"v",var("s",qTy)],
                                             apply
                                               (call
                                                  ("Do",
                                                   @{typ
                                                   "state \<Rightarrow> (bool \<times> state)"},
                                                   tp[var_w("v",4),
                                                      bop(Ge,
                                                          apply
                                                            (call
                                                               ("ArchVersion",
                                                                @{typ "state \<Rightarrow> nat"},lu,
                                                                @{theory}),var("s",qTy)),ln 7)],
                                                   @{theory}),var("s",qTy)),
                                             ite(var_b"v",
                                                 tp[ite(eq(mop(Cast w1,ll[var_b"b'4"]),lw(1,1)),
                                                        call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusiveHalf",@{typ Load},
                                                              tp[var_w("Rt",4),var_w("Rn",4)],
                                                              @{theory}),@{theory}),
                                                        call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusiveByte",@{typ Load},
                                                              tp[var_w("Rt",4),var_w("Rn",4)],
                                                              @{theory}),@{theory})),
                                                    ite(bop(Or,
                                                            bop(In,var_w("Rt",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            eq(var_w("Rn",4),lw(15,4))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"LoadExclusive: Byte or Halfword"],
                                                              @{theory}),var("s",qTy)),var("s",qTy))],
                                                 tp[apply
                                                      (call
                                                         ("Skip",
                                                          @{typ "state \<Rightarrow> instruction"},
                                                          lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,var_b"b'20",
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,var_b"b'6",
                                                                 bop(And,var_b"b'5",var_b"b'4"))))))))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("Rt2",4),
                                       mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         bop(Ge,
                                                             apply
                                                               (call
                                                                  ("ArchVersion",
                                                                   @{typ "state \<Rightarrow> nat"},
                                                                   lu,@{theory}),var("s",qTy)),ln 7)],
                                                      @{theory}),var("s",qTy)),
                                                ite(var_b"v",
                                                    tp[call
                                                         ("instruction.Load",@{typ instruction},
                                                          call
                                                            ("Load.LoadExclusiveDoubleword",
                                                             @{typ Load},
                                                             tp[var_w("Rt",4),var_w("Rt2",4),
                                                                var_w("Rn",4)],@{theory}),@{theory}),
                                                       ite(bop(Or,
                                                               bop(In,var_w("Rt",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,
                                                                   bop(In,var_w("Rt2",4),
                                                                       sl[lw(13,4),lw(15,4)]),
                                                                   bop(Or,
                                                                       eq(var_w("Rt",4),
                                                                          var_w("Rt2",4)),
                                                                       eq(var_w("Rn",4),lw(15,4))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"LoadExclusiveDoubleword"],
                                                                 @{theory}),var("s",qTy)),
                                                           var("s",qTy))],
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,var_b"b'22",mop(Not,var_b"b'20"))),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                       let'
                                         (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                          let'
                                            (var_w("Rt2",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                let'
                                                  (tp[var_w("v",4),var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("ThumbCondition",
                                                         @{typ
                                                         "state \<Rightarrow>
                                                          (4 word \<times> state)"},lu,@{theory}),
                                                      var("state",qTy)),
                                                   let'
                                                     (tp[var_b"v",var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("Do",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (bool \<times> state)"},
                                                            tp[var_w("v",4),
                                                               bop(And,
                                                                   bop(Or,eq(var_w("P",1),lw(1,1)),
                                                                       eq(var_w("W",1),lw(1,1))),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy)))],
                                                            @{theory}),var("s",qTy)),
                                                      ite(var_b"v",
                                                          let'
                                                            (var_b"wback",eq(var_w("W",1),lw(1,1)),
                                                             tp[call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreDual",
                                                                      @{typ Store},
                                                                      tp[eq(mop(Cast w1,
                                                                                ll[var_b"b'23"]),
                                                                            lw(1,1)),
                                                                         eq(var_w("P",1),lw(1,1)),
                                                                         var_b"wback",var_w("Rt",4),
                                                                         var_w("Rt2",4),
                                                                         var_w("Rn",4),
                                                                         call
                                                                           ("offset2.immediate_form2",
                                                                            @{typ offset2},
                                                                            mop(Cast w32,
                                                                                cc[mop(Cast w8,
                                                                                       ll[var_b"b'7",
                                                                                          var_b"b'6",
                                                                                          var_b"b'5",
                                                                                          var_b"b'4",
                                                                                          var_b"b'3",
                                                                                          var_b"b'2",
                                                                                          var_b"b'1",
                                                                                          var_b"b'0"]),
                                                                                   lw(0,2)]),
                                                                            @{theory})],@{theory}),
                                                                   @{theory}),
                                                                ite(bop(Or,
                                                                        bop(And,var_b"wback",
                                                                            bop(Or,
                                                                                eq(var_w("Rn",4),
                                                                                   var_w("Rt",4)),
                                                                                eq(var_w("Rn",4),
                                                                                   var_w("Rt2",4)))),
                                                                        bop(Or,
                                                                            eq(var_w("Rn",4),
                                                                               lw(15,4)),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rt",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rt2",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)])))),
                                                                    apply
                                                                      (call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "state \<Rightarrow> state"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"StoreDual"],
                                                                          @{theory}),var("s",qTy)),
                                                                    var("s",qTy))]),
                                                          tp[apply
                                                               (call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "state \<Rightarrow> instruction"},
                                                                   lu,@{theory}),var("s",qTy)),
                                                             var("s",qTy)]))))))))),
                                (bop(And,mop(Not,var_b"b'25"),
                                     bop(And,var_b"b'22",
                                         bop(And,var_b"b'20",
                                             bop(And,var_b"b'19",
                                                 bop(And,var_b"b'18",
                                                     bop(And,var_b"b'17",var_b"b'16")))))),
                                 let'
                                   (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                    let'
                                      (var_w("Rt2",4),
                                       mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          let'
                                            (tp[var_w("v",4),var("s",qTy)],
                                             apply
                                               (call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "state \<Rightarrow> (4 word \<times> state)"},
                                                   lu,@{theory}),var("state",qTy)),
                                             let'
                                               (tp[var_b"v",var("s",qTy)],
                                                apply
                                                  (call
                                                     ("Do",
                                                      @{typ
                                                      "state \<Rightarrow> (bool \<times> state)"},
                                                      tp[var_w("v",4),
                                                         bop(And,
                                                             bop(Or,
                                                                 eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                    lw(1,1)),
                                                                 eq(var_w("W",1),lw(1,1))),
                                                             apply
                                                               (call
                                                                  ("HaveThumb2",
                                                                   @{typ "state \<Rightarrow> bool"},
                                                                   lu,@{theory}),var("s",qTy)))],
                                                      @{theory}),var("s",qTy)),
                                                ite(var_b"v",
                                                    tp[call
                                                         ("instruction.Load",@{typ instruction},
                                                          call
                                                            ("Load.LoadDualLiteral",@{typ Load},
                                                             tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                   lw(1,1)),var_w("Rt",4),
                                                                var_w("Rt2",4),
                                                                mop(Cast w32,
                                                                    cc[mop(Cast w8,
                                                                           ll[var_b"b'7",var_b"b'6",
                                                                              var_b"b'5",var_b"b'4",
                                                                              var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"]),
                                                                       lw(0,2)])],@{theory}),
                                                          @{theory}),
                                                       ite(bop(Or,
                                                               bop(In,var_w("Rt",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,
                                                                   bop(In,var_w("Rt2",4),
                                                                       sl[lw(13,4),lw(15,4)]),
                                                                   bop(Or,
                                                                       eq(var_w("Rt",4),
                                                                          var_w("Rt2",4)),
                                                                       eq(var_w("W",1),lw(1,1))))),
                                                           apply
                                                             (call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ "state \<Rightarrow> state"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"LoadDual: literal"],@{theory}),
                                                              var("s",qTy)),var("s",qTy))],
                                                    tp[apply
                                                         (call
                                                            ("Skip",
                                                             @{typ
                                                             "state \<Rightarrow> instruction"},lu,
                                                             @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                                (bop(And,mop(Not,var_b"b'25"),bop(And,var_b"b'22",var_b"b'20")),
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                       let'
                                         (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                          let'
                                            (var_w("Rt2",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                let'
                                                  (tp[var_w("v",4),var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("ThumbCondition",
                                                         @{typ
                                                         "state \<Rightarrow>
                                                          (4 word \<times> state)"},lu,@{theory}),
                                                      var("state",qTy)),
                                                   let'
                                                     (tp[var_b"v",var("s",qTy)],
                                                      apply
                                                        (call
                                                           ("Do",
                                                            @{typ
                                                            "state \<Rightarrow>
                                                             (bool \<times> state)"},
                                                            tp[var_w("v",4),
                                                               bop(And,
                                                                   bop(Or,eq(var_w("P",1),lw(1,1)),
                                                                       eq(var_w("W",1),lw(1,1))),
                                                                   apply
                                                                     (call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "state \<Rightarrow> bool"},
                                                                         lu,@{theory}),var("s",qTy)))],
                                                            @{theory}),var("s",qTy)),
                                                      ite(var_b"v",
                                                          let'
                                                            (var_b"wback",eq(var_w("W",1),lw(1,1)),
                                                             tp[call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadDual",@{typ Load},
                                                                      tp[eq(mop(Cast w1,
                                                                                ll[var_b"b'23"]),
                                                                            lw(1,1)),
                                                                         eq(var_w("P",1),lw(1,1)),
                                                                         var_b"wback",var_w("Rt",4),
                                                                         var_w("Rt2",4),
                                                                         var_w("Rn",4),
                                                                         call
                                                                           ("offset2.immediate_form2",
                                                                            @{typ offset2},
                                                                            mop(Cast w32,
                                                                                cc[mop(Cast w8,
                                                                                       ll[var_b"b'7",
                                                                                          var_b"b'6",
                                                                                          var_b"b'5",
                                                                                          var_b"b'4",
                                                                                          var_b"b'3",
                                                                                          var_b"b'2",
                                                                                          var_b"b'1",
                                                                                          var_b"b'0"]),
                                                                                   lw(0,2)]),
                                                                            @{theory})],@{theory}),
                                                                   @{theory}),
                                                                ite(bop(Or,
                                                                        bop(And,var_b"wback",
                                                                            bop(Or,
                                                                                eq(var_w("Rn",4),
                                                                                   var_w("Rt",4)),
                                                                                eq(var_w("Rn",4),
                                                                                   var_w("Rt2",4)))),
                                                                        bop(Or,
                                                                            bop(In,var_w("Rt",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rt2",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                eq(var_w("Rt",4),
                                                                                   var_w("Rt2",4))))),
                                                                    apply
                                                                      (call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "state \<Rightarrow> state"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"LoadDual"],@{theory}),
                                                                       var("s",qTy)),var("s",qTy))]),
                                                          tp[apply
                                                               (call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "state \<Rightarrow> instruction"},
                                                                   lu,@{theory}),var("s",qTy)),
                                                             var("s",qTy)]))))))))),
                                (var_b"b'25",
                                 let'
                                   (var_w("Rn",4),
                                    mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                    let'
                                      (var_w("S",1),mop(Cast w1,ll[var_b"b'20"]),
                                       let'
                                         (var_w("Rm",4),
                                          mop(Cast w4,
                                              ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                          let'
                                            (var_w("typ",2),
                                             mop(Cast (Word_Lib.mk_wordT 2),
                                                 ll[var_b"b'5",var_b"b'4"]),
                                             let'
                                               (var_w("imm2",2),
                                                mop(Cast (Word_Lib.mk_wordT 2),
                                                    ll[var_b"b'7",var_b"b'6"]),
                                                let'
                                                  (var_w("Rd",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                          var_b"b'8"]),
                                                   let'
                                                     (var_w("imm3",3),
                                                      mop(Cast (Word_Lib.mk_wordT 3),
                                                          ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                      let'
                                                        (tp[var_w("v",4),var("s",qTy)],
                                                         apply
                                                           (call
                                                              ("ThumbCondition",
                                                               @{typ
                                                               "state \<Rightarrow>
                                                                (4 word \<times> state)"},lu,
                                                               @{theory}),var("state",qTy)),
                                                         let'
                                                           (tp[var_b"v",var("s",qTy)],
                                                            apply
                                                              (call
                                                                 ("Do",
                                                                  @{typ
                                                                  "state \<Rightarrow>
                                                                   (bool \<times> state)"},
                                                                  tp[var_w("v",4),
                                                                     apply
                                                                       (call
                                                                          ("HaveThumb2",
                                                                           @{typ
                                                                           "state \<Rightarrow> bool"},
                                                                           lu,@{theory}),
                                                                        var("s",qTy))],@{theory}),
                                                               var("s",qTy)),
                                                            ite(var_b"v",
                                                                let'
                                                                  (tp[var("shift_t",@{typ SRType}),
                                                                      var_n"shift_n"],
                                                                   call
                                                                     ("DecodeImmShift",
                                                                      @{typ "SRType \<times> nat"},
                                                                      tp[var_w("typ",2),
                                                                         cc[var_w("imm3",3),
                                                                            var_w("imm2",2)]],
                                                                      @{theory}),
                                                                   let'
                                                                     (var_b"setflags",
                                                                      eq(var_w("S",1),lw(1,1)),
                                                                      itb([(bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(0,4)),
                                                                                bop(And,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(15,4)),
                                                                                    eq(var_w("S",1),
                                                                                       lw(1,1)))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.TestCompareRegister",
                                                                                     @{typ Data},
                                                                                     tp[lw(0,2),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rn",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "TST (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(0,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(0,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(13,4)),
                                                                                       bop(Or,
                                                                                           bop(And,
                                                                                               eq(var_w("Rd",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               mop(Not,
                                                                                                   var_b"setflags")),
                                                                                           bop(Or,
                                                                                               bop(In,
                                                                                                   var_w("Rn",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)]),
                                                                                               bop(In,
                                                                                                   var_w("Rm",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)])))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "AND (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(1,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(14,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rn",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "BIC (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(2,4)),
                                                                                eq(var_w("Rn",4),
                                                                                   lw(15,4))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.ShiftImmediate",
                                                                                     @{typ Data},
                                                                                     tp[lf,
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               itb([(bop(And,
                                                                                         eq(var_w("typ",2),
                                                                                            lw(0,2)),
                                                                                         bop(And,
                                                                                             eq(var_w("imm3",3),
                                                                                                lw(0,
                                                                                                   3)),
                                                                                             eq(var_w("imm2",2),
                                                                                                lw(0,
                                                                                                   2)))),
                                                                                     ite(bop(Or,
                                                                                             bop(And,
                                                                                                 var_b"setflags",
                                                                                                 bop(Or,
                                                                                                     bop(In,
                                                                                                         var_w("Rd",4),
                                                                                                         sl[lw(13,
                                                                                                               4),
                                                                                                            lw(15,
                                                                                                               4)]),
                                                                                                     bop(In,
                                                                                                         var_w("Rm",4),
                                                                                                         sl[lw(13,
                                                                                                               4),
                                                                                                            lw(15,
                                                                                                               4)]))),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"setflags"),
                                                                                                 bop(Or,
                                                                                                     eq(var_w("Rd",4),
                                                                                                        lw(15,
                                                                                                           4)),
                                                                                                     bop(Or,
                                                                                                         eq(var_w("Rm",4),
                                                                                                            lw(15,
                                                                                                               4)),
                                                                                                         bop(And,
                                                                                                             eq(var_w("Rd",4),
                                                                                                                lw(13,
                                                                                                                   4)),
                                                                                                             eq(var_w("Rm",4),
                                                                                                                lw(13,
                                                                                                                   4))))))),
                                                                                         apply
                                                                                           (call
                                                                                              ("DECODE_UNPREDICTABLE",
                                                                                               @{typ
                                                                                               "state \<Rightarrow>
                                                                                                state"},
                                                                                               tp[var("mc",
                                                                                                      @{typ MachineCode}),
                                                                                                  ls
                                                                                                   "MOV (register)"],
                                                                                               @{theory}),
                                                                                            var("s",
                                                                                                qTy)),
                                                                                         var("s",qTy))),
                                                                                    (bop(Or,
                                                                                         bop(In,
                                                                                             var_w("Rd",4),
                                                                                             sl[lw(13,
                                                                                                   4),
                                                                                                lw(15,
                                                                                                   4)]),
                                                                                         bop(In,
                                                                                             var_w("Rm",4),
                                                                                             sl[lw(13,
                                                                                                   4),
                                                                                                lw(15,
                                                                                                   4)])),
                                                                                     apply
                                                                                       (call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "state \<Rightarrow>
                                                                                            state"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "SHIFT (register)"],
                                                                                           @{theory}),
                                                                                        var("s",qTy)))],
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(2,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(12,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           eq(var_w("Rn",4),
                                                                                              lw(13,
                                                                                                 4)),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ORR (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(3,4)),
                                                                                eq(var_w("Rn",4),
                                                                                   lw(15,4))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.ShiftImmediate",
                                                                                     @{typ Data},
                                                                                     tp[lt,
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "MVN (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(3,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(15,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           eq(var_w("Rn",4),
                                                                                              lw(13,
                                                                                                 4)),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ORN (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(4,4)),
                                                                                bop(And,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(15,4)),
                                                                                    eq(var_w("S",1),
                                                                                       lw(1,1)))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.TestCompareRegister",
                                                                                     @{typ Data},
                                                                                     tp[lw(1,2),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rn",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "TEQ (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(4,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(1,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(13,4)),
                                                                                       bop(Or,
                                                                                           bop(And,
                                                                                               eq(var_w("Rd",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               mop(Not,
                                                                                                   var_b"setflags")),
                                                                                           bop(Or,
                                                                                               bop(In,
                                                                                                   var_w("Rn",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)]),
                                                                                               bop(In,
                                                                                                   var_w("Rm",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)])))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "EOR (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(6,4)),
                                                                                eq(var_w("S",1),
                                                                                   lw(0,1))),
                                                                            ite(bop(Bit,
                                                                                    var_w("typ",2),
                                                                                    ln 0),
                                                                                tp[call
                                                                                     ("instruction.Undefined",
                                                                                      @{typ instruction},
                                                                                      lw(0,32),
                                                                                      @{theory}),
                                                                                   var("s",qTy)],
                                                                                tp[call
                                                                                     ("instruction.Media",
                                                                                      @{typ instruction},
                                                                                      call
                                                                                        ("Media.PackHalfword",
                                                                                         @{typ Media},
                                                                                         tp[var("shift_t",
                                                                                                @{typ SRType}),
                                                                                            var_n"shift_n",
                                                                                            bop(Bit,
                                                                                                var_w("typ",2),
                                                                                                ln 1),
                                                                                            var_w("Rd",4),
                                                                                            var_w("Rn",4),
                                                                                            var_w("Rm",4)],
                                                                                         @{theory}),
                                                                                      @{theory}),
                                                                                   ite(bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rd",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           bop(Or,
                                                                                               bop(In,
                                                                                                   var_w("Rn",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)]),
                                                                                               bop(In,
                                                                                                   var_w("Rm",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)]))),
                                                                                       apply
                                                                                         (call
                                                                                            ("DECODE_UNPREDICTABLE",
                                                                                             @{typ
                                                                                             "state \<Rightarrow>
                                                                                              state"},
                                                                                             tp[var("mc",
                                                                                                    @{typ MachineCode}),
                                                                                                ls
                                                                                                 "PackHalfword"],
                                                                                             @{theory}),
                                                                                          var("s",
                                                                                              qTy)),
                                                                                       var("s",qTy))])),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(8,4)),
                                                                                bop(And,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(15,4)),
                                                                                    eq(var_w("S",1),
                                                                                       lw(1,1)))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.TestCompareRegister",
                                                                                     @{typ Data},
                                                                                     tp[lw(3,2),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rn",4),
                                                                                          lw(15,4)),
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "CMN (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(8,4)),
                                                                            tp[let'
                                                                                 (tp[var("shift_t",
                                                                                         @{typ SRType}),
                                                                                     var_n"shift_n"],
                                                                                  call
                                                                                    ("DecodeImmShift",
                                                                                     @{typ
                                                                                     "SRType \<times>
                                                                                      nat"},
                                                                                     tp[var_w("typ",2),
                                                                                        cc[var_w("imm3",3),
                                                                                           var_w("imm2",2)]],
                                                                                     @{theory}),
                                                                                  call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.Register",
                                                                                        @{typ Data},
                                                                                        tp[lw(4,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("Rm",4),
                                                                                           var("shift_t",
                                                                                               @{typ SRType}),
                                                                                           var_n"shift_n"],
                                                                                        @{theory}),
                                                                                     @{theory})),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(13,4)),
                                                                                       bop(Or,
                                                                                           bop(And,
                                                                                               eq(var_w("Rd",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               mop(Not,
                                                                                                   var_b"setflags")),
                                                                                           bop(Or,
                                                                                               eq(var_w("Rn",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               bop(In,
                                                                                                   var_w("Rm",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)])))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ADD (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(10,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(5,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rn",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ADC (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(11,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(6,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rn",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "SBC (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (bop(And,
                                                                                eq(mop(Cast w4,
                                                                                       ll[var_b"b'24",
                                                                                          var_b"b'23",
                                                                                          var_b"b'22",
                                                                                          var_b"b'21"]),
                                                                                   lw(13,4)),
                                                                                bop(And,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(15,4)),
                                                                                    eq(var_w("S",1),
                                                                                       lw(1,1)))),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.TestCompareRegister",
                                                                                     @{typ Data},
                                                                                     tp[lw(2,2),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rn",4),
                                                                                          lw(15,4)),
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "CMP (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(13,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(2,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(13,4)),
                                                                                       bop(Or,
                                                                                           bop(And,
                                                                                               eq(var_w("Rd",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               mop(Not,
                                                                                                   var_b"setflags")),
                                                                                           bop(Or,
                                                                                               eq(var_w("Rn",4),
                                                                                                  lw(15,
                                                                                                     4)),
                                                                                               bop(In,
                                                                                                   var_w("Rm",4),
                                                                                                   sl[lw(13,
                                                                                                         4),
                                                                                                      lw(15,
                                                                                                         4)])))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "SUB (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))]),
                                                                           (eq(mop(Cast w4,
                                                                                   ll[var_b"b'24",
                                                                                      var_b"b'23",
                                                                                      var_b"b'22",
                                                                                      var_b"b'21"]),
                                                                               lw(14,4)),
                                                                            tp[call
                                                                                 ("instruction.Data",
                                                                                  @{typ instruction},
                                                                                  call
                                                                                    ("Data.Register",
                                                                                     @{typ Data},
                                                                                     tp[lw(3,4),
                                                                                        var_b"setflags",
                                                                                        var_w("Rd",4),
                                                                                        var_w("Rn",4),
                                                                                        var_w("Rm",4),
                                                                                        var("shift_t",
                                                                                            @{typ SRType}),
                                                                                        var_n"shift_n"],
                                                                                     @{theory}),
                                                                                  @{theory}),
                                                                               ite(bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rd",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rn",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]))),
                                                                                   apply
                                                                                     (call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "state \<Rightarrow>
                                                                                          state"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "RSB (register)"],
                                                                                         @{theory}),
                                                                                      var("s",qTy)),
                                                                                   var("s",qTy))])],
                                                                          tp[call
                                                                               ("instruction.Undefined",
                                                                                @{typ instruction},
                                                                                lw(0,32),@{theory}),
                                                                             var("s",qTy)]))),
                                                                tp[apply
                                                                     (call
                                                                        ("Skip",
                                                                         @{typ
                                                                         "state \<Rightarrow>
                                                                          instruction"},lu,@{theory}),
                                                                      var("s",qTy)),var("s",qTy)])))))))))))],
                               apply
                                 (call
                                    ("UndefinedThumb",
                                     @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                                     @{theory}),var("state",qTy))))],
                         apply
                           (call
                              ("UndefinedThumb",
                               @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                               @{theory}),var("state",qTy)))),
                    (var_b"b'15",
                     ite(bop(And,var_b"b'31",bop(And,var_b"b'30",bop(And,var_b"b'29",var_b"b'28"))),
                         itb([(bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'14"),
                                                           bop(And,mop(Not,var_b"b'12"),var_b"b'5")))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("v",4),
                                                 apply
                                                   (call
                                                      ("HaveVirtExt",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy))],@{theory}),
                                           var("s",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.MoveToBankedOrSpecialRegister",
                                                     @{typ System},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        cc[mop(Cast w1,ll[var_b"b'4"]),
                                                           mop(Cast w4,
                                                               ll[var_b"b'11",var_b"b'10",
                                                                  var_b"b'9",var_b"b'8"])],
                                                        var_w("Rn",4)],@{theory}),@{theory}),
                                               ite(bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)]),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToBankedOrSpecialRegister"],
                                                         @{theory}),var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'14"),
                                                           bop(And,mop(Not,var_b"b'12"),
                                                               mop(Not,var_b"b'5"))))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("mask",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (tp[var_w("v",4),var("s",qTy)],
                                        apply
                                          (call
                                             ("ThumbCondition",
                                              @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                              lu,@{theory}),var("state",qTy)),
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("v",4),
                                                    apply
                                                      (call
                                                         ("HaveThumb2",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("s",qTy))],@{theory}),
                                              var("s",qTy)),
                                           ite(var_b"v",
                                               tp[call
                                                    ("instruction.System",@{typ instruction},
                                                     call
                                                       ("System.MoveToSpecialFromRegister",
                                                        @{typ System},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                           var_w("Rn",4),var_w("mask",4)],@{theory}),
                                                     @{theory}),
                                                  ite(bop(Or,eq(var_w("mask",4),lw(0,4)),
                                                          bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)])),
                                                      apply
                                                        (call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ "state \<Rightarrow> state"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MoveToSpecialFromRegister"],
                                                            @{theory}),var("s",qTy)),var("s",qTy))],
                                               tp[apply
                                                    (call
                                                       ("Skip",
                                                        @{typ "state \<Rightarrow> instruction"},lu,
                                                        @{theory}),var("s",qTy)),var("s",qTy)])))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               bop(And,mop(Not,var_b"b'12"),
                                                                   bop(And,mop(Not,var_b"b'10"),
                                                                       bop(And,mop(Not,var_b"b'9"),
                                                                           mop(Not,var_b"b'8")))))))))))),
                               let'
                                 (tp[var_w("v",4),var("s",qTy)],
                                  apply
                                    (call
                                       ("ThumbCondition",
                                        @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                        @{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("DecodeHint",
                                        @{typ "state \<Rightarrow> (instruction \<times> state)"},
                                        tp[var_w("v",4),
                                           mop(Cast w8,
                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                  var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                        @{theory}),var("s",qTy)))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               mop(Not,var_b"b'12"))))))))),
                               let'
                                 (var_w("mode",5),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("F",1),mop(Cast w1,ll[var_b"b'5"]),
                                     let'
                                       (var_w("I",1),mop(Cast w1,ll[var_b"b'6"]),
                                        let'
                                          (var_w("A",1),mop(Cast w1,ll[var_b"b'7"]),
                                           let'
                                             (var_w("M",1),mop(Cast w1,ll[var_b"b'8"]),
                                              let'
                                                (var_w("imod",2),
                                                 mop(Cast (Word_Lib.mk_wordT 2),
                                                     ll[var_b"b'10",var_b"b'9"]),
                                                 let'
                                                   (tp[var_w("v",4),var("s",qTy)],
                                                    apply
                                                      (call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           (4 word \<times> state)"},lu,@{theory}),
                                                       var("state",qTy)),
                                                    let'
                                                      (tp[var_b"v",var("s",qTy)],
                                                       apply
                                                         (call
                                                            ("Do",
                                                             @{typ
                                                             "state \<Rightarrow>
                                                              (bool \<times> state)"},
                                                             tp[var_w("v",4),
                                                                apply
                                                                  (call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy))],
                                                             @{theory}),var("s",qTy)),
                                                       ite(var_b"v",
                                                           tp[call
                                                                ("instruction.System",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("System.ChangeProcessorState",
                                                                    @{typ System},
                                                                    tp[eq(var_w("imod",2),lw(2,2)),
                                                                       eq(var_w("imod",2),lw(3,2)),
                                                                       eq(var_w("A",1),lw(1,1)),
                                                                       eq(var_w("I",1),lw(1,1)),
                                                                       eq(var_w("F",1),lw(1,1)),
                                                                       ite(eq(var_w("M",1),lw(1,1)),
                                                                           mop(Some,var_w("mode",5)),
                                                                           lo (Word_Lib.mk_wordT 5))],
                                                                    @{theory}),@{theory}),
                                                              ite(bop(Or,
                                                                      bop(And,
                                                                          mop(Not,
                                                                              eq(var_w("mode",5),
                                                                                 lw(0,5))),
                                                                          eq(var_w("M",1),lw(0,1))),
                                                                      bop(Or,
                                                                          eq(bop(Bit,
                                                                                 var_w("imod",2),
                                                                                 ln 1),
                                                                             eq(cc[var_w("A",1),
                                                                                   var_w("I",1),
                                                                                   var_w("F",1)],
                                                                                lw(0,3))),
                                                                          bop(Or,
                                                                              eq(var_w("imod",2),
                                                                                 lw(1,2)),
                                                                              apply
                                                                                (call
                                                                                   ("InITBlock",
                                                                                    @{typ
                                                                                    "state \<Rightarrow>
                                                                                     bool"},lu,
                                                                                    @{theory}),
                                                                                 var("s",qTy))))),
                                                                  apply
                                                                    (call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "state \<Rightarrow> state"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"ChangeProcessorState"],
                                                                        @{theory}),var("s",qTy)),
                                                                  var("s",qTy))],
                                                           tp[apply
                                                                (call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "state \<Rightarrow> instruction"},
                                                                    lu,@{theory}),var("s",qTy)),
                                                              var("s",qTy)])))))))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               bop(And,mop(Not,var_b"b'12"),
                                                                   bop(And,mop(Not,var_b"b'7"),
                                                                       bop(And,mop(Not,var_b"b'6"),
                                                                           mop(Not,var_b"b'5")))))))))))),
                               let'
                                 (var_w("J",1),mop(Cast w1,ll[var_b"b'4"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        let'
                                          (tp[var_b"v",var("s",qTy)],
                                           apply
                                             (call
                                                ("Do",
                                                 @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                 tp[var_w("v",4),
                                                    apply
                                                      (call
                                                         ("HaveThumbEE",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("s",qTy))],@{theory}),
                                              var("s",qTy)),
                                           tp[bop(And,var_b"v",
                                                  mop(Not,
                                                      bop(And,
                                                          eq(apply
                                                               (call
                                                                  ("CurrentInstrSet",
                                                                   @{typ
                                                                   "state \<Rightarrow> InstrSet"},
                                                                   lu,@{theory}),var("s",qTy)),
                                                             lc("InstrSet_Thumb","InstrSet",
                                                                @{theory})),eq(var_w("J",1),lw(0,1))))),
                                              var("s",qTy)]),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.EnterxLeavex",@{typ System},
                                                     eq(var_w("J",1),lw(1,1)),@{theory}),@{theory}),
                                               ite(apply
                                                     (call
                                                        ("InITBlock",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy)),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"EnterxLeavex"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               mop(Not,var_b"b'12"))))))))),
                               let'
                                 (var_w("option",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("v",4),
                                                 apply
                                                   (call
                                                      ("HaveThumb2",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy))],@{theory}),
                                           var("s",qTy)),
                                        ite(var_b"v",
                                            cs(mop(Cast w4,
                                                   ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]),
                                               [(var_w("v",4),
                                                 itb([(eq(var_w("v",4),lw(2,4)),
                                                       tp[Term.Const
                                                            (@{const_name "ClearExclusive"},
                                                             @{typ instruction}),var("s",qTy)]),
                                                      (eq(var_w("v",4),lw(4,4)),
                                                       tp[call
                                                            ("instruction.Hint",@{typ instruction},
                                                             call
                                                               ("Hint.DataSynchronizationBarrier",
                                                                @{typ Hint},var_w("option",4),
                                                                @{theory}),@{theory}),var("s",qTy)]),
                                                      (eq(var_w("v",4),lw(5,4)),
                                                       tp[call
                                                            ("instruction.Hint",@{typ instruction},
                                                             call
                                                               ("Hint.DataMemoryBarrier",
                                                                @{typ Hint},var_w("option",4),
                                                                @{theory}),@{theory}),var("s",qTy)]),
                                                      (eq(var_w("v",4),lw(6,4)),
                                                       tp[call
                                                            ("instruction.Hint",@{typ instruction},
                                                             call
                                                               ("Hint.InstructionSynchronizationBarrier",
                                                                @{typ Hint},var_w("option",4),
                                                                @{theory}),@{theory}),var("s",qTy)]),
                                                      (bop(Ge,
                                                           apply
                                                             (call
                                                                ("ArchVersion",
                                                                 @{typ "state \<Rightarrow> nat"},
                                                                 lu,@{theory}),var("s",qTy)),ln 7),
                                                       tp[call
                                                            ("instruction.Undefined",
                                                             @{typ instruction},lw(0,32),@{theory}),
                                                          var("s",qTy)])],
                                                     tp[lx @{typ instruction},
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"Miscellaneous control"],
                                                              @{theory}),var("s",qTy))]))],
                                               @{context}),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               mop(Not,var_b"b'12"))))))))),
                               let'
                                 (var_w("imm8",8),
                                  mop(Cast w8,
                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                         var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("v",4),
                                                 apply
                                                   (call
                                                      ("HaveThumb2",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy))],@{theory}),
                                           var("s",qTy)),
                                        ite(var_b"v",
                                            ite(bop(And,
                                                    apply
                                                      (call
                                                         ("HaveVirtExt",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("s",qTy)),
                                                    eq(var_w("imm8",8),lw(0,8))),
                                                tp[call
                                                     ("instruction.System",@{typ instruction},
                                                      Term.Const
                                                        (@{const_name "ExceptionReturn"},
                                                         @{typ System}),@{theory}),var("s",qTy)],
                                                let'
                                                  (tp[var_b"v",var("s",qTy)],
                                                   apply
                                                     (call
                                                        ("CurrentModeIsHyp",
                                                         @{typ
                                                         "state \<Rightarrow> (bool \<times> state)"},
                                                         lu,@{theory}),
                                                      ite(bop(Or,
                                                              eq(apply
                                                                   (call
                                                                      ("CurrentInstrSet",
                                                                       @{typ
                                                                       "state \<Rightarrow> InstrSet"},
                                                                       lu,@{theory}),var("s",qTy)),
                                                                 lc("InstrSet_ThumbEE","InstrSet",
                                                                    @{theory})),
                                                              bop(And,
                                                                  apply
                                                                    (call
                                                                       ("InITBlock",
                                                                        @{typ
                                                                        "state \<Rightarrow> bool"},
                                                                        lu,@{theory}),var("s",qTy)),
                                                                  mop(Not,
                                                                      apply
                                                                        (call
                                                                           ("LastInITBlock",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             bool"},lu,@{theory}),
                                                                         var("s",qTy))))),
                                                          apply
                                                            (call
                                                               ("DECODE_UNPREDICTABLE",
                                                                @{typ "state \<Rightarrow> state"},
                                                                tp[var("mc",@{typ MachineCode}),
                                                                   ls"SUBS<c> PC, LR, #0"],@{theory}),
                                                             var("s",qTy)),var("s",qTy))),
                                                   tp[ite(var_b"v",
                                                          call
                                                            ("instruction.Undefined",
                                                             @{typ instruction},lw(0,32),@{theory}),
                                                          call
                                                            ("instruction.Data",@{typ instruction},
                                                             call
                                                               ("Data.ArithLogicImmediate",
                                                                @{typ Data},
                                                                tp[lw(2,4),lt,lw(15,4),lw(14,4),
                                                                   mop(Cast (Word_Lib.mk_wordT 12),
                                                                       var_w("imm8",8))],@{theory}),
                                                             @{theory})),var("s",qTy)])),
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,mop(Not,var_b"b'14"),
                                                           bop(And,mop(Not,var_b"b'12"),var_b"b'5")))))))),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("v",4),
                                                 apply
                                                   (call
                                                      ("HaveVirtExt",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy))],@{theory}),
                                           var("s",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.MoveToRegisterFromBankedOrSpecial",
                                                     @{typ System},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        cc[mop(Cast w1,ll[var_b"b'4"]),
                                                           mop(Cast w4,
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16"])],
                                                        var_w("Rd",4)],@{theory}),@{theory}),
                                               ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToRegisterFromBankedOrSpecial"],
                                                         @{theory}),var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,mop(Not,var_b"b'26"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,mop(Not,var_b"b'14"),
                                                           bop(And,mop(Not,var_b"b'12"),
                                                               mop(Not,var_b"b'5"))))))))),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  let'
                                    (tp[var_w("v",4),var("s",qTy)],
                                     apply
                                       (call
                                          ("ThumbCondition",
                                           @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                           @{theory}),var("state",qTy)),
                                     let'
                                       (tp[var_b"v",var("s",qTy)],
                                        apply
                                          (call
                                             ("Do",
                                              @{typ "state \<Rightarrow> (bool \<times> state)"},
                                              tp[var_w("v",4),
                                                 apply
                                                   (call
                                                      ("HaveThumb2",
                                                       @{typ "state \<Rightarrow> bool"},lu,
                                                       @{theory}),var("s",qTy))],@{theory}),
                                           var("s",qTy)),
                                        ite(var_b"v",
                                            tp[call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.MoveToRegisterFromSpecial",
                                                     @{typ System},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                        var_w("Rd",4)],@{theory}),@{theory}),
                                               ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                   apply
                                                     (call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToRegisterFromSpecial"],@{theory}),
                                                      var("s",qTy)),var("s",qTy))],
                                            tp[apply
                                                 (call
                                                    ("Skip",
                                                     @{typ "state \<Rightarrow> instruction"},lu,
                                                     @{theory}),var("s",qTy)),var("s",qTy)]))))),
                              (bop(And,var_b"b'26",
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               bop(And,mop(Not,var_b"b'13"),
                                                                   mop(Not,var_b"b'12")))))))))),
                               let'
                                 (tp[var_w("v",4),var("s",qTy)],
                                  apply
                                    (call
                                       ("ThumbCondition",
                                        @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                        @{theory}),var("state",qTy)),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("v",4),
                                              apply
                                                (call
                                                   ("HaveVirtExt",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy))],@{theory}),
                                        var("s",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.HypervisorCall",@{typ System},
                                                  cc[mop(Cast w4,
                                                         ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                            var_b"b'16"]),
                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                         ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                            var_b"b'8",var_b"b'7",var_b"b'6",
                                                            var_b"b'5",var_b"b'4",var_b"b'3",
                                                            var_b"b'2",var_b"b'1",var_b"b'0"])],
                                                  @{theory}),@{theory}),
                                            ite(apply
                                                  (call
                                                     ("InITBlock",@{typ "state \<Rightarrow> bool"},
                                                      lu,@{theory}),var("s",qTy)),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"HypervisorCall"],@{theory}),var("s",qTy)),
                                                var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)])))),
                              (bop(And,var_b"b'26",
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               bop(And,mop(Not,var_b"b'13"),
                                                                   mop(Not,var_b"b'12")))))))))),
                               let'
                                 (tp[var_w("v",4),var("s",qTy)],
                                  apply
                                    (call
                                       ("ThumbCondition",
                                        @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                        @{theory}),var("state",qTy)),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("v",4),
                                              bop(And,
                                                  apply
                                                    (call
                                                       ("HaveSecurityExt",
                                                        @{typ "state \<Rightarrow> bool"},lu,
                                                        @{theory}),var("s",qTy)),
                                                  mop(Not,
                                                      eq(call
                                                           ("state.Architecture",
                                                            @{typ Architecture},var("s",qTy),
                                                            @{theory}),
                                                         lc("ARMv6K","Architecture",@{theory}))))],
                                           @{theory}),var("s",qTy)),
                                     ite(var_b"v",
                                         tp[call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.SecureMonitorCall",@{typ System},
                                                  mop(Cast w4,
                                                      ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                         var_b"b'16"]),@{theory}),@{theory}),
                                            ite(bop(And,
                                                    apply
                                                      (call
                                                         ("InITBlock",
                                                          @{typ "state \<Rightarrow> bool"},lu,
                                                          @{theory}),var("s",qTy)),
                                                    mop(Not,
                                                        apply
                                                          (call
                                                             ("LastInITBlock",
                                                              @{typ "state \<Rightarrow> bool"},lu,
                                                              @{theory}),var("s",qTy)))),
                                                apply
                                                  (call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ "state \<Rightarrow> state"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"SecureMonitorCall"],@{theory}),
                                                   var("s",qTy)),var("s",qTy))],
                                         tp[apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy)),var("s",qTy)])))),
                              (bop(And,var_b"b'26",
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'14"),
                                                               bop(And,var_b"b'13",
                                                                   mop(Not,var_b"b'12")))))))))),
                               let'
                                 (tp[var_w("v",4),var("s",qTy)],
                                  apply
                                    (call
                                       ("ThumbCondition",
                                        @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                        @{theory}),var("state",qTy)),
                                  let'
                                    (tp[var_b"v",var("s",qTy)],
                                     apply
                                       (call
                                          ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                           tp[var_w("v",4),
                                              apply
                                                (call
                                                   ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                    lu,@{theory}),var("s",qTy))],@{theory}),
                                        var("s",qTy)),
                                     tp[ite(var_b"v",
                                            call
                                              ("instruction.Undefined",@{typ instruction},
                                               mop(Cast w32,
                                                   cc[mop(Cast w4,
                                                          ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                             var_b"b'16"]),
                                                      mop(Cast (Word_Lib.mk_wordT 12),
                                                          ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                             var_b"b'8",var_b"b'7",var_b"b'6",
                                                             var_b"b'5",var_b"b'4",var_b"b'3",
                                                             var_b"b'2",var_b"b'1",var_b"b'0"])]),
                                               @{theory}),
                                            apply
                                              (call
                                                 ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                  lu,@{theory}),var("s",qTy))),var("s",qTy)]))),
                              (bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                               let'
                                 (tp[var_b"v",var("s",qTy)],
                                  apply
                                    (call
                                       ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                        tp[mop(Cast w4,
                                               ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22"]),
                                           apply
                                             (call
                                                ("HaveThumb2",@{typ "state \<Rightarrow> bool"},lu,
                                                 @{theory}),var("state",qTy))],@{theory}),
                                     var("state",qTy)),
                                  ite(var_b"v",
                                      tp[call
                                           ("instruction.Branch",@{typ instruction},
                                            call
                                              ("Branch.BranchTarget",@{typ Branch},
                                               mop(SE w32,
                                                   cc[mop(Cast w1,ll[var_b"b'26"]),
                                                      mop(Cast w1,ll[var_b"b'11"]),
                                                      mop(Cast w1,ll[var_b"b'13"]),
                                                      mop(Cast (Word_Lib.mk_wordT 6),
                                                          ll[var_b"b'21",var_b"b'20",var_b"b'19",
                                                             var_b"b'18",var_b"b'17",var_b"b'16"]),
                                                      mop(Cast (Word_Lib.mk_wordT 11),
                                                          ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                             var_b"b'7",var_b"b'6",var_b"b'5",
                                                             var_b"b'4",var_b"b'3",var_b"b'2",
                                                             var_b"b'1",var_b"b'0"]),lw(0,1)]),
                                               @{theory}),@{theory}),
                                         ite(apply
                                               (call
                                                  ("InITBlock",@{typ "state \<Rightarrow> bool"},lu,
                                                   @{theory}),var("s",qTy)),
                                             apply
                                               (call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ "state \<Rightarrow> state"},
                                                   tp[var("mc",@{typ MachineCode}),ls"BranchTarget"],
                                                   @{theory}),var("s",qTy)),var("s",qTy))],
                                      tp[apply
                                           (call
                                              ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                               @{theory}),var("s",qTy)),var("s",qTy)]))),
                              (var_b"b'12",
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'26"]),
                                  let'
                                    (var_w("J2",1),mop(Cast w1,ll[var_b"b'11"]),
                                     let'
                                       (var_w("J1",1),mop(Cast w1,ll[var_b"b'13"]),
                                        let'
                                          (var_w("L",1),mop(Cast w1,ll[var_b"b'14"]),
                                           let'
                                             (tp[var_w("v",4),var("s",qTy)],
                                              apply
                                                (call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "state \<Rightarrow> (4 word \<times> state)"},
                                                    lu,@{theory}),var("state",qTy)),
                                              let'
                                                (tp[var_b"v",var("s",qTy)],
                                                 apply
                                                   (call
                                                      ("Do",
                                                       @{typ
                                                       "state \<Rightarrow> (bool \<times> state)"},
                                                       tp[var_w("v",4),
                                                          bop(Or,
                                                              bop(And,eq(var_w("L",1),lw(1,1)),
                                                                  bop(And,eq(var_w("J1",1),lw(1,1)),
                                                                      eq(var_w("J1",1),var_w("J2",1)))),
                                                              apply
                                                                (call
                                                                   ("HaveThumb2",
                                                                    @{typ
                                                                    "state \<Rightarrow> bool"},lu,
                                                                    @{theory}),var("s",qTy)))],
                                                       @{theory}),var("s",qTy)),
                                                 ite(var_b"v",
                                                     tp[let'
                                                          (var_w("imm32",32),
                                                           mop(SE w32,
                                                               cc[var_w("S",1),
                                                                  mop(BNot,
                                                                      bop(BXor,var_w("J1",1),
                                                                          var_w("S",1))),
                                                                  mop(BNot,
                                                                      bop(BXor,var_w("J2",1),
                                                                          var_w("S",1))),
                                                                  mop(Cast (Word_Lib.mk_wordT 10),
                                                                      ll[var_b"b'25",var_b"b'24",
                                                                         var_b"b'23",var_b"b'22",
                                                                         var_b"b'21",var_b"b'20",
                                                                         var_b"b'19",var_b"b'18",
                                                                         var_b"b'17",var_b"b'16"]),
                                                                  mop(Cast (Word_Lib.mk_wordT 11),
                                                                      ll[var_b"b'10",var_b"b'9",
                                                                         var_b"b'8",var_b"b'7",
                                                                         var_b"b'6",var_b"b'5",
                                                                         var_b"b'4",var_b"b'3",
                                                                         var_b"b'2",var_b"b'1",
                                                                         var_b"b'0"]),lw(0,1)]),
                                                           ite(eq(var_w("L",1),lw(1,1)),
                                                               call
                                                                 ("instruction.Branch",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Branch.BranchLinkExchangeImmediate",
                                                                     @{typ Branch},
                                                                     tp[lc("InstrSet_Thumb",
                                                                           "InstrSet",@{theory}),
                                                                        var_w("imm32",32)],@{theory}),
                                                                  @{theory}),
                                                               call
                                                                 ("instruction.Branch",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("Branch.BranchTarget",
                                                                     @{typ Branch},
                                                                     var_w("imm32",32),@{theory}),
                                                                  @{theory}))),
                                                        ite(bop(And,
                                                                apply
                                                                  (call
                                                                     ("InITBlock",
                                                                      @{typ
                                                                      "state \<Rightarrow> bool"},
                                                                      lu,@{theory}),var("s",qTy)),
                                                                mop(Not,
                                                                    apply
                                                                      (call
                                                                         ("LastInITBlock",
                                                                          @{typ
                                                                          "state \<Rightarrow> bool"},
                                                                          lu,@{theory}),var("s",qTy)))),
                                                            apply
                                                              (call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "BranchTarget or BranchLinkExchangeImmediate"],
                                                                  @{theory}),var("s",qTy)),
                                                            var("s",qTy))],
                                                     tp[apply
                                                          (call
                                                             ("Skip",
                                                              @{typ
                                                              "state \<Rightarrow> instruction"},lu,
                                                              @{theory}),var("s",qTy)),var("s",qTy)])))))))),
                              (bop(And,var_b"b'14",mop(Not,var_b"b'12")),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'26"]),
                                  let'
                                    (var_w("J2",1),mop(Cast w1,ll[var_b"b'11"]),
                                     let'
                                       (var_w("J1",1),mop(Cast w1,ll[var_b"b'13"]),
                                        let'
                                          (tp[var_w("v",4),var("s",qTy)],
                                           apply
                                             (call
                                                ("ThumbCondition",
                                                 @{typ
                                                 "state \<Rightarrow> (4 word \<times> state)"},lu,
                                                 @{theory}),var("state",qTy)),
                                           let'
                                             (tp[var_b"v",var("s",qTy)],
                                              apply
                                                (call
                                                   ("Do",
                                                    @{typ
                                                    "state \<Rightarrow> (bool \<times> state)"},
                                                    tp[var_w("v",4),
                                                       bop(And,
                                                           mop(Not,
                                                               bop(Or,
                                                                   eq(apply
                                                                        (call
                                                                           ("CurrentInstrSet",
                                                                            @{typ
                                                                            "state \<Rightarrow>
                                                                             InstrSet"},lu,@{theory}),
                                                                         var("s",qTy)),
                                                                      lc("InstrSet_ThumbEE",
                                                                         "InstrSet",@{theory})),
                                                                   eq(mop(Cast w1,ll[var_b"b'0"]),
                                                                      lw(1,1)))),
                                                           ite(bop(And,eq(var_w("J1",1),lw(1,1)),
                                                                   eq(var_w("J1",1),var_w("J2",1))),
                                                               bop(Ge,
                                                                   apply
                                                                     (call
                                                                        ("ArchVersion",
                                                                         @{typ
                                                                         "state \<Rightarrow> nat"},
                                                                         lu,@{theory}),var("s",qTy)),
                                                                   ln 5),
                                                               apply
                                                                 (call
                                                                    ("HaveThumb2",
                                                                     @{typ
                                                                     "state \<Rightarrow> bool"},lu,
                                                                     @{theory}),var("s",qTy))))],
                                                    @{theory}),var("s",qTy)),
                                              ite(var_b"v",
                                                  tp[call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.BranchLinkExchangeImmediate",
                                                           @{typ Branch},
                                                           tp[lc("InstrSet_ARM","InstrSet",@{theory}),
                                                              mop(SE w32,
                                                                  cc[var_w("S",1),
                                                                     mop(BNot,
                                                                         bop(BXor,var_w("J1",1),
                                                                             var_w("S",1))),
                                                                     mop(BNot,
                                                                         bop(BXor,var_w("J2",1),
                                                                             var_w("S",1))),
                                                                     mop(Cast (Word_Lib.mk_wordT 10),
                                                                         ll[var_b"b'25",var_b"b'24",
                                                                            var_b"b'23",var_b"b'22",
                                                                            var_b"b'21",var_b"b'20",
                                                                            var_b"b'19",var_b"b'18",
                                                                            var_b"b'17",var_b"b'16"]),
                                                                     mop(Cast (Word_Lib.mk_wordT 10),
                                                                         ll[var_b"b'10",var_b"b'9",
                                                                            var_b"b'8",var_b"b'7",
                                                                            var_b"b'6",var_b"b'5",
                                                                            var_b"b'4",var_b"b'3",
                                                                            var_b"b'2",var_b"b'1"]),
                                                                     lw(0,2)])],@{theory}),@{theory}),
                                                     ite(bop(And,
                                                             apply
                                                               (call
                                                                  ("InITBlock",
                                                                   @{typ "state \<Rightarrow> bool"},
                                                                   lu,@{theory}),var("s",qTy)),
                                                             mop(Not,
                                                                 apply
                                                                   (call
                                                                      ("LastInITBlock",
                                                                       @{typ
                                                                       "state \<Rightarrow> bool"},
                                                                       lu,@{theory}),var("s",qTy)))),
                                                         apply
                                                           (call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ "state \<Rightarrow> state"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"BranchLinkExchangeImmediate"],
                                                               @{theory}),var("s",qTy)),var("s",qTy))],
                                                  tp[apply
                                                       (call
                                                          ("Skip",
                                                           @{typ "state \<Rightarrow> instruction"},
                                                           lu,@{theory}),var("s",qTy)),var("s",qTy)])))))))],
                             apply
                               (call
                                  ("UndefinedThumb",
                                   @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                                   @{theory}),var("state",qTy))),
                         apply
                           (call
                              ("UndefinedThumb",
                               @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                               @{theory}),var("state",qTy)))),
                    (bop(And,var_b"b'31",bop(And,var_b"b'30",bop(And,var_b"b'29",var_b"b'28"))),
                     itb([(mop(Not,var_b"b'25"),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("S",1),mop(Cast w1,ll[var_b"b'20"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              let'
                                                (var_w("imm12",12),
                                                 cc[mop(Cast w1,ll[var_b"b'26"]),
                                                    mop(Cast (Word_Lib.mk_wordT 3),
                                                        ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                    mop(Cast w8,
                                                        ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                           var_b"b'4",var_b"b'3",var_b"b'2",
                                                           var_b"b'1",var_b"b'0"])],
                                                 let'
                                                   (var_b"setflags",eq(var_w("S",1),lw(1,1)),
                                                    itb([(bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(0,4)),
                                                              bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                  eq(var_w("S",1),lw(1,1)))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.TestCompareImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(0,2),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(In,var_w("Rn",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"TST (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(0,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(0,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,eq(var_w("Rd",4),lw(13,4)),
                                                                     bop(Or,
                                                                         bop(And,
                                                                             eq(var_w("Rd",4),
                                                                                lw(15,4)),
                                                                             mop(Not,var_b"setflags")),
                                                                         bop(In,var_w("Rn",4),
                                                                             sl[lw(13,4),lw(15,4)]))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"AND (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(1,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(14,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(In,var_w("Rn",4),
                                                                         sl[lw(13,4),lw(15,4)])),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"BIC (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(2,4)),eq(var_w("Rn",4),lw(15,4))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.Move",@{typ Data},
                                                                   tp[var_b"setflags",lf,
                                                                      var_w("Rd",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(In,var_w("Rd",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"MOV (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(2,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(12,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     eq(var_w("Rn",4),lw(13,4))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"ORR (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(3,4)),eq(var_w("Rn",4),lw(15,4))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.Move",@{typ Data},
                                                                   tp[var_b"setflags",lt,
                                                                      var_w("Rd",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(In,var_w("Rd",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"MVN (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(3,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(15,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     eq(var_w("Rn",4),lw(13,4))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"ORN (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(4,4)),
                                                              bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                  eq(var_w("S",1),lw(1,1)))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.TestCompareImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(1,2),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(In,var_w("Rn",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"TEQ (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(4,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(1,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,eq(var_w("Rd",4),lw(13,4)),
                                                                     bop(Or,
                                                                         bop(And,
                                                                             eq(var_w("Rd",4),
                                                                                lw(15,4)),
                                                                             mop(Not,var_b"setflags")),
                                                                         bop(In,var_w("Rn",4),
                                                                             sl[lw(13,4),lw(15,4)]))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"EOR (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(8,4)),
                                                              bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                  eq(var_w("S",1),lw(1,1)))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.TestCompareImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(3,2),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(eq(var_w("Rn",4),lw(15,4)),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"CMN (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(8,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(4,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,eq(var_w("Rd",4),lw(13,4)),
                                                                     bop(Or,
                                                                         bop(And,
                                                                             eq(var_w("Rd",4),
                                                                                lw(15,4)),
                                                                             mop(Not,var_b"setflags")),
                                                                         eq(var_w("Rn",4),lw(15,4)))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"ADD (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(10,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(5,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(In,var_w("Rn",4),
                                                                         sl[lw(13,4),lw(15,4)])),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"ADC (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(11,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(6,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(In,var_w("Rn",4),
                                                                         sl[lw(13,4),lw(15,4)])),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"SBC (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (bop(And,
                                                              eq(mop(Cast w4,
                                                                     ll[var_b"b'24",var_b"b'23",
                                                                        var_b"b'22",var_b"b'21"]),
                                                                 lw(13,4)),
                                                              bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                  eq(var_w("S",1),lw(1,1)))),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.TestCompareImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(2,2),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(eq(var_w("Rn",4),lw(15,4)),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"CMP (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(13,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(2,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,eq(var_w("Rd",4),lw(13,4)),
                                                                     bop(Or,
                                                                         bop(And,
                                                                             eq(var_w("Rd",4),
                                                                                lw(15,4)),
                                                                             mop(Not,var_b"setflags")),
                                                                         eq(var_w("Rn",4),lw(15,4)))),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"SUB (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))]),
                                                         (eq(mop(Cast w4,
                                                                 ll[var_b"b'24",var_b"b'23",
                                                                    var_b"b'22",var_b"b'21"]),
                                                             lw(14,4)),
                                                          tp[call
                                                               ("instruction.Data",
                                                                @{typ instruction},
                                                                call
                                                                  ("Data.ArithLogicImmediate",
                                                                   @{typ Data},
                                                                   tp[lw(3,4),var_b"setflags",
                                                                      var_w("Rd",4),var_w("Rn",4),
                                                                      var_w("imm12",12)],@{theory}),
                                                                @{theory}),
                                                             ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(In,var_w("Rn",4),
                                                                         sl[lw(13,4),lw(15,4)])),
                                                                 apply
                                                                   (call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "state \<Rightarrow> state"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"RSB (immediate)"],
                                                                       @{theory}),var("s",qTy)),
                                                                 var("s",qTy))])],
                                                        tp[call
                                                             ("instruction.Undefined",
                                                              @{typ instruction},lw(0,32),@{theory}),
                                                           var("s",qTy)]))),
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                          (bop(And,var_b"b'25",
                               bop(And,mop(Not,var_b"b'24"),
                                   bop(And,mop(Not,var_b"b'23"),
                                       bop(And,mop(Not,var_b"b'22"),
                                           bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))))),
                           let'
                             (var_w("Rd",4),
                              mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),
                                             apply
                                               (call
                                                  ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                   lu,@{theory}),var("s",qTy))],@{theory}),
                                       var("s",qTy)),
                                    ite(var_b"v",
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.AddSub",@{typ Data},
                                                 tp[lf,var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                           var_b"b'16"]),
                                                    cc[mop(Cast w1,ll[var_b"b'26"]),
                                                       mop(Cast (Word_Lib.mk_wordT 3),
                                                           ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                       mop(Cast w8,
                                                           ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                              var_b"b'4",var_b"b'3",var_b"b'2",
                                                              var_b"b'1",var_b"b'0"])]],@{theory}),
                                              @{theory}),
                                           ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"ADDW (immediate)"],@{theory}),
                                                  var("s",qTy)),var("s",qTy))],
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))))),
                          (bop(And,var_b"b'25",
                               bop(And,mop(Not,var_b"b'24"),
                                   bop(And,var_b"b'23",
                                       bop(And,mop(Not,var_b"b'22"),
                                           bop(And,var_b"b'21",mop(Not,var_b"b'20")))))),
                           let'
                             (var_w("Rd",4),
                              mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),
                                             apply
                                               (call
                                                  ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                   lu,@{theory}),var("s",qTy))],@{theory}),
                                       var("s",qTy)),
                                    ite(var_b"v",
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.AddSub",@{typ Data},
                                                 tp[lt,var_w("Rd",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                           var_b"b'16"]),
                                                    cc[mop(Cast w1,ll[var_b"b'26"]),
                                                       mop(Cast (Word_Lib.mk_wordT 3),
                                                           ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                       mop(Cast w8,
                                                           ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                              var_b"b'4",var_b"b'3",var_b"b'2",
                                                              var_b"b'1",var_b"b'0"])]],@{theory}),
                                              @{theory}),
                                           ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"SUBW (immediate)"],@{theory}),
                                                  var("s",qTy)),var("s",qTy))],
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))))),
                          (bop(And,var_b"b'25",
                               bop(And,mop(Not,var_b"b'24"),
                                   bop(And,var_b"b'22",
                                       bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                           let'
                             (var_w("Rd",4),
                              mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                              let'
                                (tp[var_w("v",4),var("s",qTy)],
                                 apply
                                   (call
                                      ("ThumbCondition",
                                       @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                       @{theory}),var("state",qTy)),
                                 let'
                                   (tp[var_b"v",var("s",qTy)],
                                    apply
                                      (call
                                         ("Do",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                          tp[var_w("v",4),
                                             apply
                                               (call
                                                  ("HaveThumb2",@{typ "state \<Rightarrow> bool"},
                                                   lu,@{theory}),var("s",qTy))],@{theory}),
                                       var("s",qTy)),
                                    ite(var_b"v",
                                        tp[call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.MoveHalfword",@{typ Data},
                                                 tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                    var_w("Rd",4),
                                                    cc[mop(Cast w4,
                                                           ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                              var_b"b'16"]),
                                                       mop(Cast w1,ll[var_b"b'26"]),
                                                       mop(Cast (Word_Lib.mk_wordT 3),
                                                           ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                       mop(Cast w8,
                                                           ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                              var_b"b'4",var_b"b'3",var_b"b'2",
                                                              var_b"b'1",var_b"b'0"])]],@{theory}),
                                              @{theory}),
                                           ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                               apply
                                                 (call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ "state \<Rightarrow> state"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"MOVT or MOVW (immediate)"],@{theory}),
                                                  var("s",qTy)),var("s",qTy))],
                                        tp[apply
                                             (call
                                                ("Skip",@{typ "state \<Rightarrow> instruction"},lu,
                                                 @{theory}),var("s",qTy)),var("s",qTy)]))))),
                          (bop(And,var_b"b'25",
                               bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,var_b"b'21",
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               mop(Not,var_b"b'6")))))))))),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("sat_imm",4),
                                 mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              tp[let'
                                                   (var_b"unsigned",
                                                    eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                    call
                                                      ("instruction.Media",@{typ instruction},
                                                       call
                                                         ("Media.Saturate16",@{typ Media},
                                                          tp[ite(var_b"unsigned",
                                                                 mop(Cast HOLogic.natT,
                                                                     var_w("sat_imm",4)),
                                                                 bop(Add,
                                                                     mop(Cast HOLogic.natT,
                                                                         var_w("sat_imm",4)),ln 1)),
                                                             var_b"unsigned",var_w("Rd",4),
                                                             var_w("Rn",4)],@{theory}),@{theory})),
                                                 ite(bop(Or,
                                                         bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                         bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)])),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"Saturate16"],@{theory}),
                                                        var("s",qTy)),var("s",qTy))],
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                          (bop(And,var_b"b'25",
                               bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20")))),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("sat_imm",5),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (tp[var_w("v",4),var("s",qTy)],
                                       apply
                                         (call
                                            ("ThumbCondition",
                                             @{typ "state \<Rightarrow> (4 word \<times> state)"},
                                             lu,@{theory}),var("state",qTy)),
                                       let'
                                         (tp[var_b"v",var("s",qTy)],
                                          apply
                                            (call
                                               ("Do",
                                                @{typ "state \<Rightarrow> (bool \<times> state)"},
                                                tp[var_w("v",4),
                                                   apply
                                                     (call
                                                        ("HaveThumb2",
                                                         @{typ "state \<Rightarrow> bool"},lu,
                                                         @{theory}),var("s",qTy))],@{theory}),
                                             var("s",qTy)),
                                          ite(var_b"v",
                                              tp[let'
                                                   (var_b"unsigned",
                                                    eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                    let'
                                                      (tp[var("shift_t",@{typ SRType}),
                                                          var_n"shift_n"],
                                                       call
                                                         ("DecodeImmShift",
                                                          @{typ "SRType \<times> nat"},
                                                          tp[cc[mop(Cast w1,ll[var_b"b'21"]),lw(0,1)],
                                                             cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                                    ll[var_b"b'14",var_b"b'13",
                                                                       var_b"b'12"]),
                                                                mop(Cast (Word_Lib.mk_wordT 2),
                                                                    ll[var_b"b'7",var_b"b'6"])]],
                                                          @{theory}),
                                                       call
                                                         ("instruction.Media",@{typ instruction},
                                                          call
                                                            ("Media.Saturate",@{typ Media},
                                                             tp[var("shift_t",@{typ SRType}),
                                                                var_n"shift_n",
                                                                ite(var_b"unsigned",
                                                                    mop(Cast HOLogic.natT,
                                                                        var_w("sat_imm",5)),
                                                                    bop(Add,
                                                                        mop(Cast HOLogic.natT,
                                                                            var_w("sat_imm",5)),ln 1)),
                                                                var_b"unsigned",var_w("Rd",4),
                                                                var_w("Rn",4)],@{theory}),@{theory}))),
                                                 ite(bop(Or,
                                                         bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                         bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)])),
                                                     apply
                                                       (call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ "state \<Rightarrow> state"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"Saturate"],@{theory}),var("s",qTy)),
                                                     var("s",qTy))],
                                              tp[apply
                                                   (call
                                                      ("Skip",
                                                       @{typ "state \<Rightarrow> instruction"},lu,
                                                       @{theory}),var("s",qTy)),var("s",qTy)]))))))),
                          (bop(And,var_b"b'25",
                               bop(And,var_b"b'24",
                                   bop(And,var_b"b'22",
                                       bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("Rd",4),
                                 mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),
                                                apply
                                                  (call
                                                     ("HaveThumb2",
                                                      @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                                   var("s",qTy))],@{theory}),var("s",qTy)),
                                       ite(var_b"v",
                                           let'
                                             (var_n"widthminus1",
                                              mop(Cast HOLogic.natT,
                                                  mop(Cast (Word_Lib.mk_wordT 5),
                                                      ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])),
                                              let'
                                                (var_n"lsbit",
                                                 mop(Cast HOLogic.natT,
                                                     cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                        mop(Cast (Word_Lib.mk_wordT 2),
                                                            ll[var_b"b'7",var_b"b'6"])]),
                                                 tp[call
                                                      ("instruction.Media",@{typ instruction},
                                                       call
                                                         ("Media.BitFieldExtract",@{typ Media},
                                                          tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                             var_w("Rd",4),var_w("Rn",4),
                                                             var_n"lsbit",var_n"widthminus1"],
                                                          @{theory}),@{theory}),
                                                    ite(bop(Or,
                                                            bop(In,var_w("Rd",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            bop(Or,
                                                                bop(In,var_w("Rn",4),
                                                                    sl[lw(13,4),lw(15,4)]),
                                                                bop(Lt,ln 31,
                                                                    bop(Add,var_n"lsbit",
                                                                        var_n"widthminus1")))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"BitFieldExtract"],@{theory}),
                                                           var("s",qTy)),var("s",qTy))])),
                                           tp[apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy)),var("s",qTy)])))))),
                          (bop(And,var_b"b'25",
                               bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'23"),
                                       bop(And,var_b"b'22",bop(And,var_b"b'21",mop(Not,var_b"b'20")))))),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("Rd",4),
                                 mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                 let'
                                   (tp[var_w("v",4),var("s",qTy)],
                                    apply
                                      (call
                                         ("ThumbCondition",
                                          @{typ "state \<Rightarrow> (4 word \<times> state)"},lu,
                                          @{theory}),var("state",qTy)),
                                    let'
                                      (tp[var_b"v",var("s",qTy)],
                                       apply
                                         (call
                                            ("Do",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             tp[var_w("v",4),
                                                apply
                                                  (call
                                                     ("HaveThumb2",
                                                      @{typ "state \<Rightarrow> bool"},lu,@{theory}),
                                                   var("s",qTy))],@{theory}),var("s",qTy)),
                                       ite(var_b"v",
                                           let'
                                             (var_n"msbit",
                                              mop(Cast HOLogic.natT,
                                                  mop(Cast (Word_Lib.mk_wordT 5),
                                                      ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])),
                                              let'
                                                (var_n"lsbit",
                                                 mop(Cast HOLogic.natT,
                                                     cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                        mop(Cast (Word_Lib.mk_wordT 2),
                                                            ll[var_b"b'7",var_b"b'6"])]),
                                                 tp[call
                                                      ("instruction.Media",@{typ instruction},
                                                       call
                                                         ("Media.BitFieldClearOrInsert",
                                                          @{typ Media},
                                                          tp[var_w("Rd",4),var_w("Rn",4),
                                                             var_n"lsbit",var_n"msbit"],@{theory}),
                                                       @{theory}),
                                                    ite(bop(Or,
                                                            bop(In,var_w("Rd",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            bop(Or,eq(var_w("Rn",4),lw(13,4)),
                                                                bop(Lt,var_n"msbit",var_n"lsbit"))),
                                                        apply
                                                          (call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ "state \<Rightarrow> state"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"BitFieldClearOrInsert"],
                                                              @{theory}),var("s",qTy)),var("s",qTy))])),
                                           tp[apply
                                                (call
                                                   ("Skip",@{typ "state \<Rightarrow> instruction"},
                                                    lu,@{theory}),var("s",qTy)),var("s",qTy)]))))))],
                         apply
                           (call
                              ("UndefinedThumb",
                               @{typ "state \<Rightarrow> (instruction \<times> state)"},lu,
                               @{theory}),var("state",qTy))))],
                   apply
                     (call
                        ("UndefinedThumb",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                         lu,@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Decode",
   close
     (var("mc",@{typ MachineCode}),
      close
        (var("state",qTy),
         cs(var("mc",@{typ MachineCode}),
            [(call("MachineCode.ARM",@{typ MachineCode},var_w("w",32),@{theory}),
              apply
                (call
                   ("DecodeARM",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                    var_w("w",32),@{theory}),var("state",qTy))),
             (call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory}),
              apply
                (call
                   ("DecodeThumb",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                    var_w("h",16),@{theory}),var("state",qTy))),
             (call("MachineCode.ThumbEE",@{typ MachineCode},var_w("h",16),@{theory}),
              apply
                (call
                   ("DecodeThumbEE",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                    var_w("h",16),@{theory}),var("state",qTy))),
             (call
                ("MachineCode.Thumb2",@{typ MachineCode},
                 var("hs",@{typ "16 word \<times> 16 word"}),@{theory}),
              apply
                (call
                   ("DecodeThumb2",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                    var("hs",@{typ "16 word \<times> 16 word"}),@{theory}),var("state",qTy))),
             (call("MachineCode.BadCode",@{typ MachineCode},var_s"s",@{theory}),
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                    call("exception.UNPREDICTABLE",@{typ exception},var_s"s",@{theory}),@{theory}),
                 var("state",qTy)))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Next",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ MachineCode}),var("s",qTy)],
         apply
           (const("Fetch",@{typ "state \<Rightarrow> (MachineCode \<times> state)"},@{theory}),
            var("state",qTy)),
         apply
           (call("ITAdvance",@{typ "state \<Rightarrow> state"},lu,@{theory}),
            let'
              (tp[var("v",@{typ instruction}),var("s",qTy)],
               apply
                 (call
                    ("Decode",@{typ "state \<Rightarrow> (instruction \<times> state)"},
                     var("v",@{typ MachineCode}),@{theory}),var("s",qTy)),
               apply
                 (call
                    ("Run",@{typ "state \<Rightarrow> state"},var("v",@{typ instruction}),@{theory}),
                  var("s",qTy)))))))
end
\<close>
end