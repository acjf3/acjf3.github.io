(* CHERI.thy - generated by L3 - 02/11/2017 *)
theory CHERI
imports "$ISABELLE_HOME/src/HOL/Word/Word" "L3_Lib"
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "L3.ML"

record EntryLo =
  C :: "3 word"
  D :: bool
  G :: bool
  L :: bool
  PFN :: "28 word"
  S :: bool
  V :: bool
  entrylo'rst :: "28 word"

record TLBEntry =
  ASID :: "8 word"
  C0 :: "3 word"
  C1 :: "3 word"
  D0 :: bool
  D1 :: bool
  G :: bool
  L0 :: bool
  L1 :: bool
  Mask :: "12 word"
  PFN0 :: "28 word"
  PFN1 :: "28 word"
  R :: "2 word"
  S0 :: bool
  S1 :: bool
  V0 :: bool
  V1 :: bool
  VPN2 :: "27 word"

datatype AccessType = LOAD | STORE

record Index = Index :: "9 word" P :: bool index'rst :: "22 word"

record Random = Random :: "8 word" random'rst :: "24 word"

record Wired = Wired :: "8 word" wired'rst :: "24 word"

record PageMask = Mask :: "12 word" pagemask'rst :: "20 word"

record EntryHi = ASID :: "8 word" R :: "2 word" VPN2 :: "27 word" entryhi'rst :: "27 word"

record StatusRegister =
  BEV :: bool
  CU0 :: bool
  CU1 :: bool
  CU2 :: bool
  CU3 :: bool
  ERL :: bool
  EXL :: bool
  FR :: bool
  IE :: bool
  IM :: "8 word"
  KSU :: "2 word"
  KX :: bool
  RE :: bool
  SX :: bool
  UX :: bool
  statusregister'rst :: "9 word"

record ConfigRegister =
  AR :: "3 word"
  AT :: "2 word"
  BE :: bool
  K0 :: "3 word"
  M :: bool
  MT :: "3 word"
  configregister'rst :: "19 word"

record ConfigRegister1 =
  C2 :: bool
  CA :: bool
  DA :: "3 word"
  DL :: "3 word"
  DS :: "3 word"
  EP :: bool
  FP :: bool
  IA :: "3 word"
  IL :: "3 word"
  IS :: "3 word"
  M :: bool
  MD :: bool
  MMUSize :: "6 word"
  PCR :: bool
  WR :: bool

record ConfigRegister2 =
  M :: bool
  SA :: "4 word"
  SL :: "4 word"
  SS :: "4 word"
  SU :: "4 word"
  TA :: "4 word"
  TL :: "4 word"
  TS :: "4 word"
  TU :: "3 word"

record ConfigRegister3 =
  DSPP :: bool
  LPA :: bool
  M :: bool
  MT :: bool
  SM :: bool
  SP :: bool
  TL :: bool
  ULRI :: bool
  VEIC :: bool
  VInt :: bool
  configregister3'rst :: "22 word"

record ConfigRegister6 = LTLB :: bool TLBSize :: "16 word" configregister6'rst :: "15 word"

record CauseRegister =
  BD :: bool
  CE :: "2 word"
  ExcCode :: "5 word"
  IP :: "8 word"
  TI :: bool
  causeregister'rst :: "15 word"

record Context = BadVPN2 :: "19 word" PTEBase :: "41 word" context'rst :: "4 word"

record XContext = BadVPN2 :: "27 word" PTEBase :: "31 word" R :: "2 word" xcontext'rst :: "4 word"

record HWREna =
  CC :: bool
  CCRes :: bool
  CPUNum :: bool
  DS :: bool
  KS :: bool
  RS :: bool
  UL :: bool
  hwrena'rst :: "25 word"

record CP0 =
  BadVAddr :: "64 word"
  Cause :: CauseRegister
  Compare :: "32 word"
  Config :: ConfigRegister
  Config1 :: ConfigRegister1
  Config2 :: ConfigRegister2
  Config3 :: ConfigRegister3
  Config6 :: ConfigRegister6
  Context :: Context
  Count :: "32 word"
  Debug :: "32 word"
  EInstr :: "32 word"
  EPC :: "64 word"
  EntryHi :: EntryHi
  EntryLo0 :: EntryLo
  EntryLo1 :: EntryLo
  ErrCtl :: "32 word"
  ErrorEPC :: "64 word"
  HWREna :: HWREna
  Index :: Index
  LLAddr :: "64 word"
  PRId :: "32 word"
  PageMask :: PageMask
  Random :: Random
  Status :: StatusRegister
  UsrLocal :: "64 word"
  Wired :: Wired
  XContext :: XContext

record CoreStats = branch_not_taken :: nat branch_taken :: nat

record procState =
  c_BranchDelay :: "64 word option"
  c_BranchTo :: "64 word option"
  c_CP0 :: CP0
  c_CoreStats :: CoreStats
  c_LLbit :: "bool option"
  c_PC :: "64 word"
  c_exceptionSignalled :: bool
  c_hi :: "64 word option"
  c_lo :: "64 word option"

record UPerms = Reserved :: "28 word" soft :: "4 word"

record Perms =
  Access_System_Registers :: bool
  Global :: bool
  Permit_CCall :: bool
  Permit_Execute :: bool
  Permit_Load :: bool
  Permit_Load_Capability :: bool
  Permit_Seal :: bool
  Permit_Store :: bool
  Permit_Store_Capability :: bool
  Permit_Store_Local_Capability :: bool
  Reserved :: "22 word"

record Capability =
  base :: "64 word"
  cursor :: "64 word"
  length :: "64 word"
  otype :: "24 word"
  perms :: "15 word"
  reserved :: "8 word"
  sealed :: bool
  tag :: bool
  uperms :: "16 word"

record CapCause = ExcCode :: "8 word" RegNum :: "8 word"

datatype ExceptionType = Int | Mod | TLBL | TLBS | AdEL | AdES | Sys | Bp | ResI | CpU | Ov | Tr |
  CTLBL | CTLBS | C2E | MCheck | XTLBRefillL | XTLBRefillS

datatype CapExceptionType = capExcNone | capExcLength | capExcTag | capExcSeal | capExcType |
  capExcCall | capExcRet | capExcUnderflowTSS | capExcUser | capExcTLBNoStore | capExcInexact |
  capExcGlobal | capExcPermExe | capExcPermLoad | capExcPermStore | capExcPermLoadCap |
  capExcPermStoreCap | capExcPermStoreLocalCap | capExcPermSeal | capExcAccessSysReg |
  capExcPermCCall

datatype DataType = Cap Capability | Raw "256 word"

datatype RegSet = Lo_rs | Hi_rs | CLo_rs | CHi_rs

datatype CmpType = EQ | NE | LT | LE | LTU | LEU | EXEQ | NEXEQ

datatype Branch =
    BEQ "5 word \<times> 5 word \<times> 16 word"
  | BEQL "5 word \<times> 5 word \<times> 16 word"
  | BGEZ "5 word \<times> 16 word"
  | BGEZAL "5 word \<times> 16 word"
  | BGEZALL "5 word \<times> 16 word"
  | BGEZL "5 word \<times> 16 word"
  | BGTZ "5 word \<times> 16 word"
  | BGTZL "5 word \<times> 16 word"
  | BLEZ "5 word \<times> 16 word"
  | BLEZL "5 word \<times> 16 word"
  | BLTZ "5 word \<times> 16 word"
  | BLTZAL "5 word \<times> 16 word"
  | BLTZALL "5 word \<times> 16 word"
  | BLTZL "5 word \<times> 16 word"
  | BNE "5 word \<times> 5 word \<times> 16 word"
  | BNEL "5 word \<times> 5 word \<times> 16 word"
  | J "26 word"
  | JAL "26 word"
  | JALR "5 word \<times> 5 word"
  | JR "5 word"

datatype CP =
    DMFC0 "5 word \<times> 5 word \<times> 3 word"
  | DMTC0 "5 word \<times> 5 word \<times> 3 word"
  | MFC0 "5 word \<times> 5 word \<times> 3 word"
  | MTC0 "5 word \<times> 5 word \<times> 3 word"

datatype Store =
    SB "5 word \<times> 5 word \<times> 16 word"
  | SC "5 word \<times> 5 word \<times> 16 word"
  | SCD "5 word \<times> 5 word \<times> 16 word"
  | SD "5 word \<times> 5 word \<times> 16 word"
  | SDL "5 word \<times> 5 word \<times> 16 word"
  | SDR "5 word \<times> 5 word \<times> 16 word"
  | SH "5 word \<times> 5 word \<times> 16 word"
  | SW "5 word \<times> 5 word \<times> 16 word"
  | SWL "5 word \<times> 5 word \<times> 16 word"
  | SWR "5 word \<times> 5 word \<times> 16 word"

datatype Load =
    LB "5 word \<times> 5 word \<times> 16 word"
  | LBU "5 word \<times> 5 word \<times> 16 word"
  | LD "5 word \<times> 5 word \<times> 16 word"
  | LDL "5 word \<times> 5 word \<times> 16 word"
  | LDR "5 word \<times> 5 word \<times> 16 word"
  | LH "5 word \<times> 5 word \<times> 16 word"
  | LHU "5 word \<times> 5 word \<times> 16 word"
  | LL "5 word \<times> 5 word \<times> 16 word"
  | LLD "5 word \<times> 5 word \<times> 16 word"
  | LW "5 word \<times> 5 word \<times> 16 word"
  | LWL "5 word \<times> 5 word \<times> 16 word"
  | LWR "5 word \<times> 5 word \<times> 16 word"
  | LWU "5 word \<times> 5 word \<times> 16 word"

datatype Trap =
    TEQ "5 word \<times> 5 word"
  | TEQI "5 word \<times> 16 word"
  | TGE "5 word \<times> 5 word"
  | TGEI "5 word \<times> 16 word"
  | TGEIU "5 word \<times> 16 word"
  | TGEU "5 word \<times> 5 word"
  | TLT "5 word \<times> 5 word"
  | TLTI "5 word \<times> 16 word"
  | TLTIU "5 word \<times> 16 word"
  | TLTU "5 word \<times> 5 word"
  | TNE "5 word \<times> 5 word"
  | TNEI "5 word \<times> 16 word"

datatype Shift =
    DSLL "5 word \<times> 5 word \<times> 5 word"
  | DSLL32 "5 word \<times> 5 word \<times> 5 word"
  | DSLLV "5 word \<times> 5 word \<times> 5 word"
  | DSRA "5 word \<times> 5 word \<times> 5 word"
  | DSRA32 "5 word \<times> 5 word \<times> 5 word"
  | DSRAV "5 word \<times> 5 word \<times> 5 word"
  | DSRL "5 word \<times> 5 word \<times> 5 word"
  | DSRL32 "5 word \<times> 5 word \<times> 5 word"
  | DSRLV "5 word \<times> 5 word \<times> 5 word"
  | SLL "5 word \<times> 5 word \<times> 5 word"
  | SLLV "5 word \<times> 5 word \<times> 5 word"
  | SRA "5 word \<times> 5 word \<times> 5 word"
  | SRAV "5 word \<times> 5 word \<times> 5 word"
  | SRL "5 word \<times> 5 word \<times> 5 word"
  | SRLV "5 word \<times> 5 word \<times> 5 word"

datatype MultDiv =
    DDIV "5 word \<times> 5 word"
  | DDIVU "5 word \<times> 5 word"
  | DIV "5 word \<times> 5 word"
  | DIVU "5 word \<times> 5 word"
  | DMULT "5 word \<times> 5 word"
  | DMULTU "5 word \<times> 5 word"
  | MADD "5 word \<times> 5 word"
  | MADDU "5 word \<times> 5 word"
  | MFHI "5 word"
  | MFLO "5 word"
  | MSUB "5 word \<times> 5 word"
  | MSUBU "5 word \<times> 5 word"
  | MTHI "5 word"
  | MTLO "5 word"
  | MUL "5 word \<times> 5 word \<times> 5 word"
  | MULT "5 word \<times> 5 word"
  | MULTU "5 word \<times> 5 word"

datatype ArithR =
    ADD "5 word \<times> 5 word \<times> 5 word"
  | ADDU "5 word \<times> 5 word \<times> 5 word"
  | AND "5 word \<times> 5 word \<times> 5 word"
  | DADD "5 word \<times> 5 word \<times> 5 word"
  | DADDU "5 word \<times> 5 word \<times> 5 word"
  | DSUB "5 word \<times> 5 word \<times> 5 word"
  | DSUBU "5 word \<times> 5 word \<times> 5 word"
  | MOVN "5 word \<times> 5 word \<times> 5 word"
  | MOVZ "5 word \<times> 5 word \<times> 5 word"
  | NOR "5 word \<times> 5 word \<times> 5 word"
  | OR "5 word \<times> 5 word \<times> 5 word"
  | SLT "5 word \<times> 5 word \<times> 5 word"
  | SLTU "5 word \<times> 5 word \<times> 5 word"
  | SUB "5 word \<times> 5 word \<times> 5 word"
  | SUBU "5 word \<times> 5 word \<times> 5 word"
  | XOR "5 word \<times> 5 word \<times> 5 word"

datatype ArithI =
    ADDI "5 word \<times> 5 word \<times> 16 word"
  | ADDIU "5 word \<times> 5 word \<times> 16 word"
  | ANDI "5 word \<times> 5 word \<times> 16 word"
  | DADDI "5 word \<times> 5 word \<times> 16 word"
  | DADDIU "5 word \<times> 5 word \<times> 16 word"
  | LUI "5 word \<times> 16 word"
  | ORI "5 word \<times> 5 word \<times> 16 word"
  | SLTI "5 word \<times> 5 word \<times> 16 word"
  | SLTIU "5 word \<times> 5 word \<times> 16 word"
  | XORI "5 word \<times> 5 word \<times> 16 word"

datatype CGet =
    CGetBase "5 word \<times> 5 word"
  | CGetCause "5 word"
  | CGetLen "5 word \<times> 5 word"
  | CGetOffset "5 word \<times> 5 word"
  | CGetPCC "5 word"
  | CGetPCCSetOffset "5 word \<times> 5 word"
  | CGetPerm "5 word \<times> 5 word"
  | CGetSealed "5 word \<times> 5 word"
  | CGetTag "5 word \<times> 5 word"
  | CGetType "5 word \<times> 5 word"
  | CToPtr "5 word \<times> 5 word \<times> 5 word"

datatype CSet =
    CAndPerm "5 word \<times> 5 word \<times> 5 word"
  | CClearTag "5 word \<times> 5 word"
  | CFromPtr "5 word \<times> 5 word \<times> 5 word"
  | CIncOffset "5 word \<times> 5 word \<times> 5 word"
  | CIncOffsetImmediate "5 word \<times> 5 word \<times> 11 word"
  | CSetBounds "5 word \<times> 5 word \<times> 5 word"
  | CSetBoundsExact "5 word \<times> 5 word \<times> 5 word"
  | CSetBoundsImmediate "5 word \<times> 5 word \<times> 11 word"
  | CSetCause "5 word"
  | CSetOffset "5 word \<times> 5 word \<times> 5 word"

datatype CCheck = CCheckPerm "5 word \<times> 5 word" | CCheckType "5 word \<times> 5 word"

datatype CHERICOP2 =
    CBTS "5 word \<times> 16 word"
  | CBTU "5 word \<times> 16 word"
  | CCall "5 word \<times> 5 word \<times> 11 word"
  | CCallFast "5 word \<times> 5 word"
  | CCheck CCheck
  | CClearHi "16 word"
  | CClearLo "16 word"
  | CEQ "5 word \<times> 5 word \<times> 5 word"
  | CEXEQ "5 word \<times> 5 word \<times> 5 word"
  | CGet CGet
  | CJALR "5 word \<times> 5 word"
  | CJR "5 word"
  | CLE "5 word \<times> 5 word \<times> 5 word"
  | CLEU "5 word \<times> 5 word \<times> 5 word"
  | CLLC "5 word \<times> 5 word"
  | CLLx "5 word \<times> 5 word \<times> 3 word"
  | CLT "5 word \<times> 5 word \<times> 5 word"
  | CLTU "5 word \<times> 5 word \<times> 5 word"
  | CMOVN "5 word \<times> 5 word \<times> 5 word"
  | CMOVZ "5 word \<times> 5 word \<times> 5 word"
  | CMove "5 word \<times> 5 word"
  | CNE "5 word \<times> 5 word \<times> 5 word"
  | CNEXEQ "5 word \<times> 5 word \<times> 5 word"
  | CReturn
  | CSCC "5 word \<times> 5 word \<times> 5 word"
  | CSCx "5 word \<times> 5 word \<times> 5 word \<times> 2 word"
  | CSeal "5 word \<times> 5 word \<times> 5 word"
  | CSet CSet
  | CSub "5 word \<times> 5 word \<times> 5 word"
  | CUnseal "5 word \<times> 5 word \<times> 5 word"
  | ClearHi "16 word"
  | ClearLo "16 word"
  | DumpCapReg
  | UnknownCapInstruction

datatype COP2 = CHERICOP2 CHERICOP2

datatype CHERISWC2 = CStore "5 word \<times> 5 word \<times> 5 word \<times> 8 word \<times> 2 word"

datatype SWC2 = CHERISWC2 CHERISWC2

datatype CHERILWC2 =
    CLoad "5 word \<times> 5 word \<times> 5 word \<times> 8 word \<times> 1 word \<times> 2 word"

datatype LWC2 = CHERILWC2 CHERILWC2

datatype CHERILDC2 = CLC "5 word \<times> 5 word \<times> 5 word \<times> 11 word"

datatype LDC2 = CHERILDC2 CHERILDC2

datatype CHERISDC2 = CSC "5 word \<times> 5 word \<times> 5 word \<times> 11 word"

datatype SDC2 = CHERISDC2 CHERISDC2

datatype instruction =
    ArithI ArithI
  | ArithR ArithR
  | BREAK
  | Branch Branch
  | CACHE "5 word \<times> 5 word \<times> 16 word"
  | COP1 unit
  | COP2 COP2
  | CP CP
  | ERET
  | LDC2 LDC2
  | LWC2 LWC2
  | Load Load
  | MultDiv MultDiv
  | RDHWR "5 word \<times> 5 word"
  | ReservedInstruction
  | SDC2 SDC2
  | SWC2 SWC2
  | SYNC "5 word"
  | SYSCALL
  | Shift Shift
  | Store Store
  | TLBP
  | TLBR
  | TLBWI
  | TLBWR
  | Trap Trap
  | Unpredictable
  | WAIT

datatype exception = NoException | UNPREDICTABLE string

record state =
  BranchDelayPCC :: "(64 word \<times> Capability) option"
  BranchToPCC :: "(64 word \<times> Capability) option"
  CCallBranch :: bool
  CCallBranchDelay :: bool
  UNPREDICTABLE_HI :: "unit \<Rightarrow> unit"
  UNPREDICTABLE_LO :: "unit \<Rightarrow> unit"
  UNPREDICTABLE_TLB :: "unit \<Rightarrow> unit"
  all_BranchDelayPCC :: "8 word \<Rightarrow> ((64 word \<times> Capability) option)"
  all_BranchToPCC :: "8 word \<Rightarrow> ((64 word \<times> Capability) option)"
  all_CCallBranch :: "8 word \<Rightarrow> bool"
  all_CCallBranchDelay :: "8 word \<Rightarrow> bool"
  all_TLB_assoc :: "8 word \<Rightarrow> (4 word \<Rightarrow> (TLBEntry option))"
  all_TLB_direct :: "8 word \<Rightarrow> (8 word \<Rightarrow> (TLBEntry option))"
  all_capcause :: "8 word \<Rightarrow> CapCause"
  all_capr :: "8 word \<Rightarrow> (5 word \<Rightarrow> Capability)"
  all_gpr :: "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"
  all_pcc :: "8 word \<Rightarrow> Capability"
  all_state :: "8 word \<Rightarrow> procState"
  c_TLB_assoc :: "4 word \<Rightarrow> (TLBEntry option)"
  c_TLB_direct :: "8 word \<Rightarrow> (TLBEntry option)"
  c_capr :: "5 word \<Rightarrow> Capability"
  c_gpr :: "5 word \<Rightarrow> 64 word"
  c_pcc :: Capability
  c_state :: procState
  capcause :: CapCause
  csv_stats_header_done :: bool
  currentInst :: "32 word option"
  "done" :: bool
  exception :: exception
  instCnt :: nat
  log :: "nat \<Rightarrow> string"
  mem :: "35 word \<Rightarrow> DataType"
  print :: "string \<Rightarrow> unit"
  procID :: "8 word"
  totalCore :: nat
  trace_level :: nat
  unknown_counters :: "string \<Rightarrow> nat"
  watchOOBCap :: bool
  watchPaddr :: "40 word option"
  watcher :: string

fun nat_to_AccessType :: "nat \<Rightarrow> AccessType" where
  "nat_to_AccessType x =
   (if x = 0 then CHERI.LOAD else if x = 1 then CHERI.STORE
    else HOL.undefined)"

fun nat_to_ExceptionType :: "nat \<Rightarrow> ExceptionType" where
  "nat_to_ExceptionType x =
   (if x = 0 then CHERI.Int
    else if x = 1 then CHERI.Mod
    else if x = 2 then CHERI.TLBL
    else if x = 3 then CHERI.TLBS
    else if x = 4 then CHERI.AdEL
    else if x = 5 then CHERI.AdES
    else if x = 6 then CHERI.Sys
    else if x = 7 then CHERI.Bp
    else if x = 8 then CHERI.ResI
    else if x = 9 then CHERI.CpU
    else if x = 10 then CHERI.Ov
    else if x = 11 then CHERI.Tr
    else if x = 12 then CHERI.CTLBL
    else if x = 13 then CHERI.CTLBS
    else if x = 14 then CHERI.C2E
    else if x = 15 then CHERI.MCheck
    else if x = 16 then CHERI.XTLBRefillL
    else if x = 17 then CHERI.XTLBRefillS
    else HOL.undefined)"

fun nat_to_CapExceptionType :: "nat \<Rightarrow> CapExceptionType" where
  "nat_to_CapExceptionType x =
   (if x = 0 then CHERI.capExcNone
    else if x = 1 then CHERI.capExcLength
    else if x = 2 then CHERI.capExcTag
    else if x = 3 then CHERI.capExcSeal
    else if x = 4 then CHERI.capExcType
    else if x = 5 then CHERI.capExcCall
    else if x = 6 then CHERI.capExcRet
    else if x = 7 then CHERI.capExcUnderflowTSS
    else if x = 8 then CHERI.capExcUser
    else if x = 9 then CHERI.capExcTLBNoStore
    else if x = 10 then CHERI.capExcInexact
    else if x = 11 then CHERI.capExcGlobal
    else if x = 12 then CHERI.capExcPermExe
    else if x = 13 then CHERI.capExcPermLoad
    else if x = 14 then CHERI.capExcPermStore
    else if x = 15 then CHERI.capExcPermLoadCap
    else if x = 16 then CHERI.capExcPermStoreCap
    else if x = 17 then CHERI.capExcPermStoreLocalCap
    else if x = 18 then CHERI.capExcPermSeal
    else if x = 19 then CHERI.capExcAccessSysReg
    else if x = 20 then CHERI.capExcPermCCall
    else HOL.undefined)"

fun nat_to_RegSet :: "nat \<Rightarrow> RegSet" where
  "nat_to_RegSet x =
   (if x = 0 then CHERI.Lo_rs
    else if x = 1 then CHERI.Hi_rs
    else if x = 2 then CHERI.CLo_rs
    else if x = 3 then CHERI.CHi_rs
    else HOL.undefined)"

fun nat_to_CmpType :: "nat \<Rightarrow> CmpType" where
  "nat_to_CmpType x =
   (if x = 0 then CHERI.EQ
    else if x = 1 then CHERI.NE
    else if x = 2 then CHERI.LT
    else if x = 3 then CHERI.LE
    else if x = 4 then CHERI.LTU
    else if x = 5 then CHERI.LEU
    else if x = 6 then CHERI.EXEQ
    else if x = 7 then CHERI.NEXEQ
    else HOL.undefined)"

fun AccessType_to_nat :: "AccessType \<Rightarrow> nat" where
  "AccessType_to_nat x =
   (case x of
       CHERI.LOAD => 0 | CHERI.STORE => 1)"

fun ExceptionType_to_nat :: "ExceptionType \<Rightarrow> nat" where
  "ExceptionType_to_nat x =
   (case x of
       CHERI.Int => 0
     | CHERI.Mod => 1
     | CHERI.TLBL => 2
     | CHERI.TLBS => 3
     | CHERI.AdEL => 4
     | CHERI.AdES => 5
     | CHERI.Sys => 6
     | CHERI.Bp => 7
     | CHERI.ResI => 8
     | CHERI.CpU => 9
     | CHERI.Ov => 10
     | CHERI.Tr => 11
     | CHERI.CTLBL => 12
     | CHERI.CTLBS => 13
     | CHERI.C2E => 14
     | CHERI.MCheck => 15
     | CHERI.XTLBRefillL => 16
     | CHERI.XTLBRefillS => 17)"

fun CapExceptionType_to_nat :: "CapExceptionType \<Rightarrow> nat" where
  "CapExceptionType_to_nat x =
   (case x of
       CHERI.capExcNone => 0
     | CHERI.capExcLength => 1
     | CHERI.capExcTag => 2
     | CHERI.capExcSeal => 3
     | CHERI.capExcType => 4
     | CHERI.capExcCall => 5
     | CHERI.capExcRet => 6
     | CHERI.capExcUnderflowTSS => 7
     | CHERI.capExcUser => 8
     | CHERI.capExcTLBNoStore => 9
     | CHERI.capExcInexact => 10
     | CHERI.capExcGlobal => 11
     | CHERI.capExcPermExe => 12
     | CHERI.capExcPermLoad => 13
     | CHERI.capExcPermStore => 14
     | CHERI.capExcPermLoadCap => 15
     | CHERI.capExcPermStoreCap => 16
     | CHERI.capExcPermStoreLocalCap => 17
     | CHERI.capExcPermSeal => 18
     | CHERI.capExcAccessSysReg => 19
     | CHERI.capExcPermCCall => 20)"

fun RegSet_to_nat :: "RegSet \<Rightarrow> nat" where
  "RegSet_to_nat x =
   (case x of
       CHERI.Lo_rs => 0 | CHERI.Hi_rs => 1 | CHERI.CLo_rs => 2 | CHERI.CHi_rs => 3)"

fun CmpType_to_nat :: "CmpType \<Rightarrow> nat" where
  "CmpType_to_nat x =
   (case x of
       CHERI.EQ => 0
     | CHERI.NE => 1
     | CHERI.LT => 2
     | CHERI.LE => 3
     | CHERI.LTU => 4
     | CHERI.LEU => 5
     | CHERI.EXEQ => 6
     | CHERI.NEXEQ => 7)"

fun AccessType_to_string :: "AccessType \<Rightarrow> string" where
  "AccessType_to_string x =
   (case x of
       CHERI.LOAD => ''LOAD'' | CHERI.STORE => ''STORE'')"

fun ExceptionType_to_string :: "ExceptionType \<Rightarrow> string" where
  "ExceptionType_to_string x =
   (case x of
       CHERI.Int => ''Int''
     | CHERI.Mod => ''Mod''
     | CHERI.TLBL => ''TLBL''
     | CHERI.TLBS => ''TLBS''
     | CHERI.AdEL => ''AdEL''
     | CHERI.AdES => ''AdES''
     | CHERI.Sys => ''Sys''
     | CHERI.Bp => ''Bp''
     | CHERI.ResI => ''ResI''
     | CHERI.CpU => ''CpU''
     | CHERI.Ov => ''Ov''
     | CHERI.Tr => ''Tr''
     | CHERI.CTLBL => ''CTLBL''
     | CHERI.CTLBS => ''CTLBS''
     | CHERI.C2E => ''C2E''
     | CHERI.MCheck => ''MCheck''
     | CHERI.XTLBRefillL => ''XTLBRefillL''
     | CHERI.XTLBRefillS => ''XTLBRefillS'')"

fun CapExceptionType_to_string :: "CapExceptionType \<Rightarrow> string" where
  "CapExceptionType_to_string x =
   (case x of
       CHERI.capExcNone => ''capExcNone''
     | CHERI.capExcLength => ''capExcLength''
     | CHERI.capExcTag => ''capExcTag''
     | CHERI.capExcSeal => ''capExcSeal''
     | CHERI.capExcType => ''capExcType''
     | CHERI.capExcCall => ''capExcCall''
     | CHERI.capExcRet => ''capExcRet''
     | CHERI.capExcUnderflowTSS => ''capExcUnderflowTSS''
     | CHERI.capExcUser => ''capExcUser''
     | CHERI.capExcTLBNoStore => ''capExcTLBNoStore''
     | CHERI.capExcInexact => ''capExcInexact''
     | CHERI.capExcGlobal => ''capExcGlobal''
     | CHERI.capExcPermExe => ''capExcPermExe''
     | CHERI.capExcPermLoad => ''capExcPermLoad''
     | CHERI.capExcPermStore => ''capExcPermStore''
     | CHERI.capExcPermLoadCap => ''capExcPermLoadCap''
     | CHERI.capExcPermStoreCap => ''capExcPermStoreCap''
     | CHERI.capExcPermStoreLocalCap => ''capExcPermStoreLocalCap''
     | CHERI.capExcPermSeal => ''capExcPermSeal''
     | CHERI.capExcAccessSysReg => ''capExcAccessSysReg''
     | CHERI.capExcPermCCall => ''capExcPermCCall'')"

fun RegSet_to_string :: "RegSet \<Rightarrow> string" where
  "RegSet_to_string x =
   (case x of
       CHERI.Lo_rs => ''Lo_rs''
     | CHERI.Hi_rs => ''Hi_rs''
     | CHERI.CLo_rs => ''CLo_rs''
     | CHERI.CHi_rs => ''CHi_rs'')"

fun CmpType_to_string :: "CmpType \<Rightarrow> string" where
  "CmpType_to_string x =
   (case x of
       CHERI.EQ => ''EQ''
     | CHERI.NE => ''NE''
     | CHERI.LT => ''LT''
     | CHERI.LE => ''LE''
     | CHERI.LTU => ''LTU''
     | CHERI.LEU => ''LEU''
     | CHERI.EXEQ => ''EXEQ''
     | CHERI.NEXEQ => ''NEXEQ'')"

fun string_to_AccessType :: "string \<Rightarrow> AccessType" where
  "string_to_AccessType x =
   (if x = ''LOAD'' then CHERI.LOAD else if x = ''STORE'' then CHERI.STORE
    else HOL.undefined)"

fun string_to_ExceptionType :: "string \<Rightarrow> ExceptionType" where
  "string_to_ExceptionType x =
   (if x = ''Int'' then CHERI.Int
    else if x = ''Mod'' then CHERI.Mod
    else if x = ''TLBL'' then CHERI.TLBL
    else if x = ''TLBS'' then CHERI.TLBS
    else if x = ''AdEL'' then CHERI.AdEL
    else if x = ''AdES'' then CHERI.AdES
    else if x = ''Sys'' then CHERI.Sys
    else if x = ''Bp'' then CHERI.Bp
    else if x = ''ResI'' then CHERI.ResI
    else if x = ''CpU'' then CHERI.CpU
    else if x = ''Ov'' then CHERI.Ov
    else if x = ''Tr'' then CHERI.Tr
    else if x = ''CTLBL'' then CHERI.CTLBL
    else if x = ''CTLBS'' then CHERI.CTLBS
    else if x = ''C2E'' then CHERI.C2E
    else if x = ''MCheck'' then CHERI.MCheck
    else if x = ''XTLBRefillL'' then CHERI.XTLBRefillL
    else if x = ''XTLBRefillS'' then CHERI.XTLBRefillS
    else HOL.undefined)"

fun string_to_CapExceptionType :: "string \<Rightarrow> CapExceptionType" where
  "string_to_CapExceptionType x =
   (if x = ''capExcNone'' then CHERI.capExcNone
    else if x = ''capExcLength'' then CHERI.capExcLength
    else if x = ''capExcTag'' then CHERI.capExcTag
    else if x = ''capExcSeal'' then CHERI.capExcSeal
    else if x = ''capExcType'' then CHERI.capExcType
    else if x = ''capExcCall'' then CHERI.capExcCall
    else if x = ''capExcRet'' then CHERI.capExcRet
    else if x = ''capExcUnderflowTSS'' then CHERI.capExcUnderflowTSS
    else if x = ''capExcUser'' then CHERI.capExcUser
    else if x = ''capExcTLBNoStore'' then CHERI.capExcTLBNoStore
    else if x = ''capExcInexact'' then CHERI.capExcInexact
    else if x = ''capExcGlobal'' then CHERI.capExcGlobal
    else if x = ''capExcPermExe'' then CHERI.capExcPermExe
    else if x = ''capExcPermLoad'' then CHERI.capExcPermLoad
    else if x = ''capExcPermStore'' then CHERI.capExcPermStore
    else if x = ''capExcPermLoadCap'' then CHERI.capExcPermLoadCap
    else if x = ''capExcPermStoreCap'' then CHERI.capExcPermStoreCap
    else if x = ''capExcPermStoreLocalCap'' then CHERI.capExcPermStoreLocalCap
    else if x = ''capExcPermSeal'' then CHERI.capExcPermSeal
    else if x = ''capExcAccessSysReg'' then CHERI.capExcAccessSysReg
    else if x = ''capExcPermCCall'' then CHERI.capExcPermCCall
    else HOL.undefined)"

fun string_to_RegSet :: "string \<Rightarrow> RegSet" where
  "string_to_RegSet x =
   (if x = ''Lo_rs'' then CHERI.Lo_rs
    else if x = ''Hi_rs'' then CHERI.Hi_rs
    else if x = ''CLo_rs'' then CHERI.CLo_rs
    else if x = ''CHi_rs'' then CHERI.CHi_rs
    else HOL.undefined)"

fun string_to_CmpType :: "string \<Rightarrow> CmpType" where
  "string_to_CmpType x =
   (if x = ''EQ'' then CHERI.EQ
    else if x = ''NE'' then CHERI.NE
    else if x = ''LT'' then CHERI.LT
    else if x = ''LE'' then CHERI.LE
    else if x = ''LTU'' then CHERI.LTU
    else if x = ''LEU'' then CHERI.LEU
    else if x = ''EXEQ'' then CHERI.EXEQ
    else if x = ''NEXEQ'' then CHERI.NEXEQ
    else HOL.undefined)"

fun boolify'3 :: "3 word \<Rightarrow> (bool \<times> bool \<times> bool)" where
  "boolify'3 w =
   (case to_bl w of
     [b0,b1,b2] \<Rightarrow>
     (b0,b1,b2))"

fun boolify'26 :: "26 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'26 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25))"

fun boolify'32 :: "32 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'32 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31))"

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("raise'exception",
   close
     (var("e",@{typ exception}),
      close
        (var("state",qTy),
         tp[lx(@{typ 'a}),
            ite(eq(call("state.exception",@{typ exception},var("state",qTy),@{theory}),
                   Term.Const(@{const_name "NoException"},@{typ exception})),
                rupd("state.exception",tp[var("state",qTy),var("e",@{typ exception})],@{theory}),
                var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'EntryLo",
   close
     (var_w("x",64),
      record
        ("EntryLo",
         [ex(var_w("x",64),ln 5,ln 3,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",64),ln 2),
          bop(Bit,var_w("x",64),ln 0),bop(Bit,var_w("x",64),ln 62),
          ex(var_w("x",64),ln 33,ln 6,(Word_Lib.mk_wordT 28)),bop(Bit,var_w("x",64),ln 63),
          bop(Bit,var_w("x",64),ln 1),ex(var_w("x",64),ln 61,ln 34,(Word_Lib.mk_wordT 28))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'EntryLo",
   close
     (var("x",@{typ EntryLo}),
      cc[mop(Cast w1,call("EntryLo.S",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         mop(Cast w1,call("EntryLo.L",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         call("EntryLo.entrylo'rst",(Word_Lib.mk_wordT 28),var("x",@{typ EntryLo}),@{theory}),
         call("EntryLo.PFN",(Word_Lib.mk_wordT 28),var("x",@{typ EntryLo}),@{theory}),
         call("EntryLo.C",(Word_Lib.mk_wordT 3),var("x",@{typ EntryLo}),@{theory}),
         mop(Cast w1,call("EntryLo.D",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         mop(Cast w1,call("EntryLo.V",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         mop(Cast w1,call("EntryLo.G",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'EntryLo",
   close
     (tp[var_a w64,var("x",@{typ EntryLo})],
      call("reg'EntryLo",w64,var("x",@{typ EntryLo}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'EntryLo",
   close
     (tp[var_a @{typ EntryLo},var_w("x",64)],
      call("rec'EntryLo",@{typ EntryLo},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Index",
   close
     (var_w("x",32),
      record
        ("Index",
         [ex(var_w("x",32),ln 8,ln 0,(Word_Lib.mk_wordT 9)),bop(Bit,var_w("x",32),ln 31),
          ex(var_w("x",32),ln 30,ln 9,(Word_Lib.mk_wordT 22))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Index",
   close
     (var("x",@{typ Index}),
      cc[mop(Cast w1,call("Index.P",HOLogic.boolT,var("x",@{typ Index}),@{theory})),
         call("Index.index'rst",(Word_Lib.mk_wordT 22),var("x",@{typ Index}),@{theory}),
         call("Index.Index",(Word_Lib.mk_wordT 9),var("x",@{typ Index}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Index",
   close(tp[var_a w32,var("x",@{typ Index})],call("reg'Index",w32,var("x",@{typ Index}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Index",
   close
     (tp[var_a @{typ Index},var_w("x",32)],call("rec'Index",@{typ Index},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Random",
   close
     (var_w("x",32),
      record
        ("Random",
         [ex(var_w("x",32),ln 7,ln 0,w8),ex(var_w("x",32),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Random",
   close
     (var("x",@{typ Random}),
      cc[call("Random.random'rst",(Word_Lib.mk_wordT 24),var("x",@{typ Random}),@{theory}),
         call("Random.Random",w8,var("x",@{typ Random}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Random",
   close
     (tp[var_a w32,var("x",@{typ Random})],call("reg'Random",w32,var("x",@{typ Random}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Random",
   close
     (tp[var_a @{typ Random},var_w("x",32)],call("rec'Random",@{typ Random},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Wired",
   close
     (var_w("x",32),
      record
        ("Wired",
         [ex(var_w("x",32),ln 7,ln 0,w8),ex(var_w("x",32),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Wired",
   close
     (var("x",@{typ Wired}),
      cc[call("Wired.wired'rst",(Word_Lib.mk_wordT 24),var("x",@{typ Wired}),@{theory}),
         call("Wired.Wired",w8,var("x",@{typ Wired}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Wired",
   close(tp[var_a w32,var("x",@{typ Wired})],call("reg'Wired",w32,var("x",@{typ Wired}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Wired",
   close
     (tp[var_a @{typ Wired},var_w("x",32)],call("rec'Wired",@{typ Wired},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'PageMask",
   close
     (var_w("x",32),
      record
        ("PageMask",
         [ex(var_w("x",32),ln 24,ln 13,(Word_Lib.mk_wordT 12)),
          cc[ex(var_w("x",32),ln 12,ln 0,(Word_Lib.mk_wordT 13)),
             ex(var_w("x",32),ln 31,ln 25,(Word_Lib.mk_wordT 7))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'PageMask",
   close
     (var("x",@{typ PageMask}),
      let'
        (var_w("pagemask'rst",20),
         call("PageMask.pagemask'rst",(Word_Lib.mk_wordT 20),var("x",@{typ PageMask}),@{theory}),
         cc[ex(var_w("pagemask'rst",20),ln 6,ln 0,(Word_Lib.mk_wordT 7)),
            call("PageMask.Mask",(Word_Lib.mk_wordT 12),var("x",@{typ PageMask}),@{theory}),
            ex(var_w("pagemask'rst",20),ln 19,ln 7,(Word_Lib.mk_wordT 13))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'PageMask",
   close
     (tp[var_a w32,var("x",@{typ PageMask})],
      call("reg'PageMask",w32,var("x",@{typ PageMask}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'PageMask",
   close
     (tp[var_a @{typ PageMask},var_w("x",32)],
      call("rec'PageMask",@{typ PageMask},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'EntryHi",
   close
     (var_w("x",64),
      record
        ("EntryHi",
         [ex(var_w("x",64),ln 7,ln 0,w8),ex(var_w("x",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
          ex(var_w("x",64),ln 39,ln 13,(Word_Lib.mk_wordT 27)),
          cc[ex(var_w("x",64),ln 12,ln 8,(Word_Lib.mk_wordT 5)),
             ex(var_w("x",64),ln 61,ln 40,(Word_Lib.mk_wordT 22))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'EntryHi",
   close
     (var("x",@{typ EntryHi}),
      let'
        (var_w("entryhi'rst",27),
         call("EntryHi.entryhi'rst",(Word_Lib.mk_wordT 27),var("x",@{typ EntryHi}),@{theory}),
         cc[call("EntryHi.R",(Word_Lib.mk_wordT 2),var("x",@{typ EntryHi}),@{theory}),
            ex(var_w("entryhi'rst",27),ln 21,ln 0,(Word_Lib.mk_wordT 22)),
            call("EntryHi.VPN2",(Word_Lib.mk_wordT 27),var("x",@{typ EntryHi}),@{theory}),
            ex(var_w("entryhi'rst",27),ln 26,ln 22,(Word_Lib.mk_wordT 5)),
            call("EntryHi.ASID",w8,var("x",@{typ EntryHi}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'EntryHi",
   close
     (tp[var_a w64,var("x",@{typ EntryHi})],
      call("reg'EntryHi",w64,var("x",@{typ EntryHi}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'EntryHi",
   close
     (tp[var_a @{typ EntryHi},var_w("x",64)],
      call("rec'EntryHi",@{typ EntryHi},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'StatusRegister",
   close
     (var_w("x",32),
      record
        ("StatusRegister",
         [bop(Bit,var_w("x",32),ln 22),bop(Bit,var_w("x",32),ln 28),bop(Bit,var_w("x",32),ln 29),
          bop(Bit,var_w("x",32),ln 30),bop(Bit,var_w("x",32),ln 31),bop(Bit,var_w("x",32),ln 2),
          bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 26),bop(Bit,var_w("x",32),ln 0),
          ex(var_w("x",32),ln 15,ln 8,w8),ex(var_w("x",32),ln 4,ln 3,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 6),
          bop(Bit,var_w("x",32),ln 5),
          cc[ex(var_w("x",32),ln 21,ln 16,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 24,ln 23,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 27,ln 27,w1)]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'StatusRegister",
   close
     (var("x",@{typ StatusRegister}),
      let'
        (var_w("statusregister'rst",9),
         call
           ("StatusRegister.statusregister'rst",(Word_Lib.mk_wordT 9),
            var("x",@{typ StatusRegister}),@{theory}),
         cc[mop(Cast w1,
                call("StatusRegister.CU3",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.CU2",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.CU1",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.CU0",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",9),ln 0,ln 0,w1),
            mop(Cast w1,
                call("StatusRegister.FR",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.RE",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",9),ln 2,ln 1,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("StatusRegister.BEV",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",9),ln 8,ln 3,(Word_Lib.mk_wordT 6)),
            call("StatusRegister.IM",w8,var("x",@{typ StatusRegister}),@{theory}),
            mop(Cast w1,
                call("StatusRegister.KX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.SX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.UX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            call
              ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),var("x",@{typ StatusRegister}),@{theory}),
            mop(Cast w1,
                call("StatusRegister.ERL",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.EXL",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.IE",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'StatusRegister",
   close
     (tp[var_a w32,var("x",@{typ StatusRegister})],
      call("reg'StatusRegister",w32,var("x",@{typ StatusRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'StatusRegister",
   close
     (tp[var_a @{typ StatusRegister},var_w("x",32)],
      call("rec'StatusRegister",@{typ StatusRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister",
   close
     (var_w("x",32),
      record
        ("ConfigRegister",
         [ex(var_w("x",32),ln 12,ln 10,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 14,ln 13,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",32),ln 15),
          ex(var_w("x",32),ln 2,ln 0,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 31),
          ex(var_w("x",32),ln 9,ln 7,(Word_Lib.mk_wordT 3)),
          cc[ex(var_w("x",32),ln 6,ln 3,w4),ex(var_w("x",32),ln 30,ln 16,(Word_Lib.mk_wordT 15))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister",
   close
     (var("x",@{typ ConfigRegister}),
      let'
        (var_w("configregister'rst",19),
         call
           ("ConfigRegister.configregister'rst",(Word_Lib.mk_wordT 19),
            var("x",@{typ ConfigRegister}),@{theory}),
         cc[mop(Cast w1,
                call("ConfigRegister.M",HOLogic.boolT,var("x",@{typ ConfigRegister}),@{theory})),
            ex(var_w("configregister'rst",19),ln 14,ln 0,(Word_Lib.mk_wordT 15)),
            mop(Cast w1,
                call("ConfigRegister.BE",HOLogic.boolT,var("x",@{typ ConfigRegister}),@{theory})),
            call("ConfigRegister.AT",(Word_Lib.mk_wordT 2),var("x",@{typ ConfigRegister}),@{theory}),
            call("ConfigRegister.AR",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory}),
            call("ConfigRegister.MT",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory}),
            ex(var_w("configregister'rst",19),ln 18,ln 15,w4),
            call("ConfigRegister.K0",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister})],
      call("reg'ConfigRegister",w32,var("x",@{typ ConfigRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister",
   close
     (tp[var_a @{typ ConfigRegister},var_w("x",32)],
      call("rec'ConfigRegister",@{typ ConfigRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister1",
   close
     (var_w("x",32),
      record
        ("ConfigRegister1",
         [bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 2),
          ex(var_w("x",32),ln 9,ln 7,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 12,ln 10,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 15,ln 13,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 0),ex(var_w("x",32),ln 18,ln 16,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 21,ln 19,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 24,ln 22,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 5),ex(var_w("x",32),ln 30,ln 25,(Word_Lib.mk_wordT 6)),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 3)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister1",
   close
     (var("x",@{typ ConfigRegister1}),
      cc[mop(Cast w1,
             call("ConfigRegister1.M",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         call
           ("ConfigRegister1.MMUSize",(Word_Lib.mk_wordT 6),var("x",@{typ ConfigRegister1}),
            @{theory}),
         call("ConfigRegister1.IS",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.IL",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.IA",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DS",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DL",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DA",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         mop(Cast w1,
             call("ConfigRegister1.C2",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.MD",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.PCR",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.WR",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.CA",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.EP",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.FP",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister1",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister1})],
      call("reg'ConfigRegister1",w32,var("x",@{typ ConfigRegister1}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister1",
   close
     (tp[var_a @{typ ConfigRegister1},var_w("x",32)],
      call("rec'ConfigRegister1",@{typ ConfigRegister1},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister2",
   close
     (var_w("x",32),
      record
        ("ConfigRegister2",
         [bop(Bit,var_w("x",32),ln 31),ex(var_w("x",32),ln 3,ln 0,w4),
          ex(var_w("x",32),ln 7,ln 4,w4),ex(var_w("x",32),ln 11,ln 8,w4),
          ex(var_w("x",32),ln 15,ln 12,w4),ex(var_w("x",32),ln 19,ln 16,w4),
          ex(var_w("x",32),ln 23,ln 20,w4),ex(var_w("x",32),ln 27,ln 24,w4),
          ex(var_w("x",32),ln 30,ln 28,(Word_Lib.mk_wordT 3))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister2",
   close
     (var("x",@{typ ConfigRegister2}),
      cc[mop(Cast w1,
             call("ConfigRegister2.M",HOLogic.boolT,var("x",@{typ ConfigRegister2}),@{theory})),
         call("ConfigRegister2.TU",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TS",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TL",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TA",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SU",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SS",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SL",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SA",w4,var("x",@{typ ConfigRegister2}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister2",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister2})],
      call("reg'ConfigRegister2",w32,var("x",@{typ ConfigRegister2}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister2",
   close
     (tp[var_a @{typ ConfigRegister2},var_w("x",32)],
      call("rec'ConfigRegister2",@{typ ConfigRegister2},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister3",
   close
     (var_w("x",32),
      record
        ("ConfigRegister3",
         [bop(Bit,var_w("x",32),ln 10),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 4),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 6),
          bop(Bit,var_w("x",32),ln 5),
          cc[ex(var_w("x",32),ln 3,ln 3,w1),ex(var_w("x",32),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 12,ln 11,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 30,ln 14,(Word_Lib.mk_wordT 17))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister3",
   close
     (var("x",@{typ ConfigRegister3}),
      let'
        (var_w("configregister3'rst",22),
         call
           ("ConfigRegister3.configregister3'rst",(Word_Lib.mk_wordT 22),
            var("x",@{typ ConfigRegister3}),@{theory}),
         cc[mop(Cast w1,
                call("ConfigRegister3.M",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 16,ln 0,(Word_Lib.mk_wordT 17)),
            mop(Cast w1,
                call("ConfigRegister3.ULRI",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 18,ln 17,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("ConfigRegister3.DSPP",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 20,ln 19,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("ConfigRegister3.LPA",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.VEIC",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.VInt",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.SP",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 21,ln 21,w1),
            mop(Cast w1,
                call("ConfigRegister3.MT",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.SM",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.TL",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister3",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister3})],
      call("reg'ConfigRegister3",w32,var("x",@{typ ConfigRegister3}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister3",
   close
     (tp[var_a @{typ ConfigRegister3},var_w("x",32)],
      call("rec'ConfigRegister3",@{typ ConfigRegister3},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister6",
   close
     (var_w("x",32),
      record
        ("ConfigRegister6",
         [bop(Bit,var_w("x",32),ln 2),ex(var_w("x",32),ln 31,ln 16,w16),
          cc[ex(var_w("x",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 15,ln 3,(Word_Lib.mk_wordT 13))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister6",
   close
     (var("x",@{typ ConfigRegister6}),
      let'
        (var_w("configregister6'rst",15),
         call
           ("ConfigRegister6.configregister6'rst",(Word_Lib.mk_wordT 15),
            var("x",@{typ ConfigRegister6}),@{theory}),
         cc[call("ConfigRegister6.TLBSize",w16,var("x",@{typ ConfigRegister6}),@{theory}),
            ex(var_w("configregister6'rst",15),ln 12,ln 0,(Word_Lib.mk_wordT 13)),
            mop(Cast w1,
                call("ConfigRegister6.LTLB",HOLogic.boolT,var("x",@{typ ConfigRegister6}),@{theory})),
            ex(var_w("configregister6'rst",15),ln 14,ln 13,(Word_Lib.mk_wordT 2))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister6",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister6})],
      call("reg'ConfigRegister6",w32,var("x",@{typ ConfigRegister6}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister6",
   close
     (tp[var_a @{typ ConfigRegister6},var_w("x",32)],
      call("rec'ConfigRegister6",@{typ ConfigRegister6},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'CauseRegister",
   close
     (var_w("x",32),
      record
        ("CauseRegister",
         [bop(Bit,var_w("x",32),ln 31),ex(var_w("x",32),ln 29,ln 28,(Word_Lib.mk_wordT 2)),
          ex(var_w("x",32),ln 6,ln 2,(Word_Lib.mk_wordT 5)),ex(var_w("x",32),ln 15,ln 8,w8),
          bop(Bit,var_w("x",32),ln 30),
          cc[ex(var_w("x",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 7,ln 7,w1),
             ex(var_w("x",32),ln 27,ln 16,(Word_Lib.mk_wordT 12))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'CauseRegister",
   close
     (var("x",@{typ CauseRegister}),
      let'
        (var_w("causeregister'rst",15),
         call
           ("CauseRegister.causeregister'rst",(Word_Lib.mk_wordT 15),var("x",@{typ CauseRegister}),
            @{theory}),
         cc[mop(Cast w1,
                call("CauseRegister.BD",HOLogic.boolT,var("x",@{typ CauseRegister}),@{theory})),
            mop(Cast w1,
                call("CauseRegister.TI",HOLogic.boolT,var("x",@{typ CauseRegister}),@{theory})),
            call("CauseRegister.CE",(Word_Lib.mk_wordT 2),var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 11,ln 0,(Word_Lib.mk_wordT 12)),
            call("CauseRegister.IP",w8,var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 12,ln 12,w1),
            call
              ("CauseRegister.ExcCode",(Word_Lib.mk_wordT 5),var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 14,ln 13,(Word_Lib.mk_wordT 2))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'CauseRegister",
   close
     (tp[var_a w32,var("x",@{typ CauseRegister})],
      call("reg'CauseRegister",w32,var("x",@{typ CauseRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'CauseRegister",
   close
     (tp[var_a @{typ CauseRegister},var_w("x",32)],
      call("rec'CauseRegister",@{typ CauseRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Context",
   close
     (var_w("x",64),
      record
        ("Context",
         [ex(var_w("x",64),ln 22,ln 4,(Word_Lib.mk_wordT 19)),
          ex(var_w("x",64),ln 63,ln 23,(Word_Lib.mk_wordT 41)),ex(var_w("x",64),ln 3,ln 0,w4)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Context",
   close
     (var("x",@{typ Context}),
      cc[call("Context.PTEBase",(Word_Lib.mk_wordT 41),var("x",@{typ Context}),@{theory}),
         call("Context.BadVPN2",(Word_Lib.mk_wordT 19),var("x",@{typ Context}),@{theory}),
         call("Context.context'rst",w4,var("x",@{typ Context}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Context",
   close
     (tp[var_a w64,var("x",@{typ Context})],
      call("reg'Context",w64,var("x",@{typ Context}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Context",
   close
     (tp[var_a @{typ Context},var_w("x",64)],
      call("rec'Context",@{typ Context},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'XContext",
   close
     (var_w("x",64),
      record
        ("XContext",
         [ex(var_w("x",64),ln 30,ln 4,(Word_Lib.mk_wordT 27)),
          ex(var_w("x",64),ln 63,ln 33,(Word_Lib.mk_wordT 31)),
          ex(var_w("x",64),ln 32,ln 31,(Word_Lib.mk_wordT 2)),ex(var_w("x",64),ln 3,ln 0,w4)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'XContext",
   close
     (var("x",@{typ XContext}),
      cc[call("XContext.PTEBase",(Word_Lib.mk_wordT 31),var("x",@{typ XContext}),@{theory}),
         call("XContext.R",(Word_Lib.mk_wordT 2),var("x",@{typ XContext}),@{theory}),
         call("XContext.BadVPN2",(Word_Lib.mk_wordT 27),var("x",@{typ XContext}),@{theory}),
         call("XContext.xcontext'rst",w4,var("x",@{typ XContext}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'XContext",
   close
     (tp[var_a w64,var("x",@{typ XContext})],
      call("reg'XContext",w64,var("x",@{typ XContext}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'XContext",
   close
     (tp[var_a @{typ XContext},var_w("x",64)],
      call("rec'XContext",@{typ XContext},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HWREna",
   close
     (var_w("x",32),
      record
        ("HWREna",
         [bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 0),
          bop(Bit,var_w("x",32),ln 28),bop(Bit,var_w("x",32),ln 26),bop(Bit,var_w("x",32),ln 27),
          bop(Bit,var_w("x",32),ln 29),
          cc[ex(var_w("x",32),ln 1,ln 1,w1),ex(var_w("x",32),ln 25,ln 4,(Word_Lib.mk_wordT 22)),
             ex(var_w("x",32),ln 31,ln 30,(Word_Lib.mk_wordT 2))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HWREna",
   close
     (var("x",@{typ HWREna}),
      let'
        (var_w("hwrena'rst",25),
         call("HWREna.hwrena'rst",(Word_Lib.mk_wordT 25),var("x",@{typ HWREna}),@{theory}),
         cc[ex(var_w("hwrena'rst",25),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("HWREna.UL",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            mop(Cast w1,call("HWREna.DS",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            mop(Cast w1,call("HWREna.RS",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            mop(Cast w1,call("HWREna.KS",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            ex(var_w("hwrena'rst",25),ln 23,ln 2,(Word_Lib.mk_wordT 22)),
            mop(Cast w1,call("HWREna.CCRes",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            mop(Cast w1,call("HWREna.CC",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            ex(var_w("hwrena'rst",25),ln 24,ln 24,w1),
            mop(Cast w1,call("HWREna.CPUNum",HOLogic.boolT,var("x",@{typ HWREna}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HWREna",
   close
     (tp[var_a w32,var("x",@{typ HWREna})],call("reg'HWREna",w32,var("x",@{typ HWREna}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HWREna",
   close
     (tp[var_a @{typ HWREna},var_w("x",32)],call("rec'HWREna",@{typ HWREna},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("BYTE",lw(0,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("HALFWORD",lw(1,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("WORD",lw(3,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("DOUBLEWORD",lw(7,3))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def ("println",close(var_s"s",close(var("state",qTy),lu)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("cpr",
   close
     (var_w("r",5),
      cc[ls"c0_",
         itb([(eq(var_w("r",5),lw(0,5)),ls"index"),(eq(var_w("r",5),lw(1,5)),ls"random"),
              (eq(var_w("r",5),lw(2,5)),ls"entrylo0"),(eq(var_w("r",5),lw(3,5)),ls"entrylo1"),
              (eq(var_w("r",5),lw(4,5)),ls"context"),(eq(var_w("r",5),lw(5,5)),ls"pagemask"),
              (eq(var_w("r",5),lw(6,5)),ls"wired"),(eq(var_w("r",5),lw(7,5)),ls"hwrena"),
              (eq(var_w("r",5),lw(8,5)),ls"badvaddr"),(eq(var_w("r",5),lw(9,5)),ls"count"),
              (eq(var_w("r",5),lw(10,5)),ls"entryhi"),(eq(var_w("r",5),lw(11,5)),ls"compare"),
              (eq(var_w("r",5),lw(12,5)),ls"status"),(eq(var_w("r",5),lw(13,5)),ls"cause"),
              (eq(var_w("r",5),lw(14,5)),ls"epc"),(eq(var_w("r",5),lw(15,5)),ls"prid"),
              (eq(var_w("r",5),lw(16,5)),ls"config"),(eq(var_w("r",5),lw(17,5)),ls"lladdr"),
              (eq(var_w("r",5),lw(18,5)),ls"watchlo"),(eq(var_w("r",5),lw(19,5)),ls"watchhi"),
              (eq(var_w("r",5),lw(20,5)),ls"xcontext"),(eq(var_w("r",5),lw(21,5)),ls"21"),
              (eq(var_w("r",5),lw(22,5)),ls"22"),(eq(var_w("r",5),lw(23,5)),ls"debug"),
              (eq(var_w("r",5),lw(24,5)),ls"depc"),(eq(var_w("r",5),lw(25,5)),ls"perfcnt"),
              (eq(var_w("r",5),lw(26,5)),ls"errctl"),(eq(var_w("r",5),lw(27,5)),ls"cacheerr"),
              (eq(var_w("r",5),lw(28,5)),ls"taglo"),(eq(var_w("r",5),lw(29,5)),ls"taghi"),
              (eq(var_w("r",5),lw(30,5)),ls"errorepc"),(eq(var_w("r",5),lw(31,5)),ls"kscratch")],
             lx(@{typ string}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("hex",
   close
     (var("x",@{typ "'N::len word"}),
      let'
        (tp[var_i"q",var_i"r"],mop(QuotRem,tp[mop(Cast HOLogic.intT,mop(Size,ly(0,"N"))),li 4]),
         cc[ls"0x",
            mop(PadLeft,
                tp[lsc #"0",
                   mop(Cast HOLogic.natT,bop(Add,var_i"q",ite(eq(var_i"r",li 0),li 0,li 1))),
                   mop(ToLower,mop(Cast(@{typ string}),var("x",@{typ "'N::len word"})))])])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_sig_exception",
   close
     (var_w("ExceptionCode",5),
      cc[ls"MIPS exception ",call("hex",@{typ string},var_w("ExceptionCode",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_gpr",
   close
     (tp[var_w("r",5),var_w("data",64)],
      cc[ls"Reg ",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r",5))),ls" <- ",
         call("hex",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_hi",
   close(var_w("data",64),cc[ls"HI <- ",call("hex",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_lo",
   close(var_w("data",64),cc[ls"LO <- ",call("hex",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_c0",
   close
     (tp[var_w("r",5),var_w("data",64)],
      cc[call("cpr",@{typ string},var_w("r",5),@{theory}),ls" <- ",
         call("hex",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_w_mem",
   close
     (tp[var_w("addr",37),var_w("mask",64),var_w("data",64)],
      cc[ls"MEM[",call("hex",@{typ string},cc[var_w("addr",37),lw(0,3)],@{theory}),ls"] <- (data: ",
         call("hex",@{typ string},var_w("data",64),@{theory}),ls", mask: ",
         call("hex",@{typ string},var_w("mask",64),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_r_mem",
   close
     (tp[var_w("addr",37),var_w("data",64)],
      cc[ls"data <- MEM[",call("hex",@{typ string},cc[var_w("addr",37),lw(0,3)],@{theory}),ls"]: ",
         call("hex",@{typ string},var_w("data",64),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("clear_watcher",lu)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("clear_logs",lu)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("gpr",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (call("state.c_gpr",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
            var_w("n",5)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'gpr",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         rupd
           ("state.c_gpr",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_gpr",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                  var_w("n",5),var_w("value",64))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("GPR",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         ite(eq(var_w("n",5),lw(0,5)),lw(0,64),
             apply
               (call("gpr",@{typ "state \<Rightarrow> 64 word"},var_w("n",5),@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'GPR",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         ite(mop(Not,eq(var_w("n",5),lw(0,5))),
             apply
               (call
                  ("write'gpr",@{typ "state \<Rightarrow> state"},
                   tp[var_w("value",64),var_w("n",5)],@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PC",
   close
     (var("state",qTy),
      call
        ("procState.c_PC",w64,call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'PC",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_PC",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var_w("value",64)],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("hi",
   close
     (var("state",qTy),
      call
        ("procState.c_hi",@{typ "64 word option"},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'hi",
   close
     (var("value",@{typ "64 word option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_hi",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ "64 word option"})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("lo",
   close
     (var("state",qTy),
      call
        ("procState.c_lo",@{typ "64 word option"},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'lo",
   close
     (var("value",@{typ "64 word option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_lo",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ "64 word option"})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CP0",
   close
     (var("state",qTy),
      call
        ("procState.c_CP0",@{typ CP0},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CP0",
   close
     (var("value",@{typ CP0}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_CP0",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ CP0})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BranchDelay",
   close
     (var("state",qTy),
      call
        ("procState.c_BranchDelay",@{typ "64 word option"},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'BranchDelay",
   close
     (var("value",@{typ "64 word option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_BranchDelay",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ "64 word option"})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BranchTo",
   close
     (var("state",qTy),
      call
        ("procState.c_BranchTo",@{typ "64 word option"},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'BranchTo",
   close
     (var("value",@{typ "64 word option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_BranchTo",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ "64 word option"})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LLbit",
   close
     (var("state",qTy),
      call
        ("procState.c_LLbit",@{typ "bool option"},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'LLbit",
   close
     (var("value",@{typ "bool option"}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_LLbit",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ "bool option"})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("exceptionSignalled",
   close
     (var("state",qTy),
      call
        ("procState.c_exceptionSignalled",HOLogic.boolT,
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'exceptionSignalled",
   close
     (var_b"value",
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_exceptionSignalled",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),var_b"value"],
                  @{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UserMode",
   close
     (var("state",qTy),
      bop(And,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                   @{theory}),@{theory}),lw(2,2)),
          mop(Not,
              bop(Or,
                  call
                    ("StatusRegister.EXL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),
                  call
                    ("StatusRegister.ERL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SupervisorMode",
   close
     (var("state",qTy),
      bop(And,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                   @{theory}),@{theory}),lw(1,2)),
          mop(Not,
              bop(Or,
                  call
                    ("StatusRegister.EXL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),
                  call
                    ("StatusRegister.ERL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KernelMode",
   close
     (var("state",qTy),
      bop(Or,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                   @{theory}),@{theory}),lw(0,2)),
          bop(Or,
              call
                ("StatusRegister.EXL",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                    @{theory}),@{theory}),
              call
                ("StatusRegister.ERL",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                    @{theory}),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndianMem",
   close
     (var("state",qTy),
      call
        ("ConfigRegister.BE",HOLogic.boolT,
         call
           ("CP0.Config",@{typ ConfigRegister},
            apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
            @{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReverseEndian",
   close
     (var("state",qTy),
      mop(Cast w1,
          bop(And,
              call
                ("StatusRegister.RE",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                    @{theory}),@{theory}),
              apply(const("UserMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndianCPU",
   close
     (var("state",qTy),
      bop(BXor,
          mop(Cast w1,
              apply
                (const("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
          apply
            (const("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("NotWordValue",
   close
     (var_w("value",64),
      let'
        (var_w("top",33),ex(var_w("value",64),ln 63,ln 31,(Word_Lib.mk_wordT 33)),
         bop(And,mop(Not,eq(var_w("top",33),lw(0,33))),
             mop(Not,eq(var_w("top",33),lw(8589934591,33)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CheckBranch",
   close
     (var("state",qTy),
      ite(mop(IsSome,
              apply
                (const("BranchDelay",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),
                 var("state",qTy))),
          mop(Snd,
              apply
                (call
                   ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                    call
                      ("exception.UNPREDICTABLE",@{typ exception},ls"Not permitted in delay slot",
                       @{theory}),@{theory}),var("state",qTy))),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dumpRegs",close(var_a HOLogic.unitT,lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("coreStats",
   close
     (var("state",qTy),
      call
        ("procState.c_CoreStats",@{typ CoreStats},
         call("state.c_state",@{typ procState},var("state",qTy),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'coreStats",
   close
     (var("value",@{typ CoreStats}),
      close
        (var("state",qTy),
         rupd
           ("state.c_state",
            tp[var("state",qTy),
               rupd
                 ("procState.c_CoreStats",
                  tp[call("state.c_state",@{typ procState},var("state",qTy),@{theory}),
                     var("value",@{typ CoreStats})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("initCoreStats",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ CoreStats}),var("s",qTy)],
         let'
           (var("s0",qTy),
            apply
              (call
                 ("write'coreStats",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("CoreStats.branch_taken",
                     tp[apply
                          (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),
                           var("state",qTy)),ln 0],@{theory}),@{theory}),var("state",qTy)),
            tp[apply
                 (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),var("s0",qTy)),
               var("s0",qTy)]),
         apply
           (call
              ("write'coreStats",@{typ "state \<Rightarrow> state"},
               rupd("CoreStats.branch_not_taken",tp[var("v",@{typ CoreStats}),ln 0],@{theory}),
               @{theory}),var("s",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("printCoreStats",
   close
     (var("state",qTy),
      cc[mop(PadRight,tp[lsc #" ",ln 16,ls"branch_taken"]),ls" = ",
         mop(PadLeft,
             tp[lsc #" ",ln 9,
                mop(Cast(@{typ string}),
                    call
                      ("CoreStats.branch_taken",HOLogic.natT,
                       apply
                         (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),
                          var("state",qTy)),@{theory}))]),ls"\n",
         mop(PadRight,tp[lsc #" ",ln 16,ls"branch_not_taken"]),ls" = ",
         mop(PadLeft,
             tp[lsc #" ",ln 9,
                mop(Cast(@{typ string}),
                    call
                      ("CoreStats.branch_not_taken",HOLogic.natT,
                       apply
                         (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),
                          var("state",qTy)),@{theory}))])]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("csvHeaderCoreStats",ls"branch_taken,branch_not_taken")
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("csvCoreStats",
   close
     (var("state",qTy),
      cc[mop(Cast(@{typ string}),
             call
               ("CoreStats.branch_taken",HOLogic.natT,
                apply
                  (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),
                   var("state",qTy)),@{theory})),ls",",
         mop(Cast(@{typ string}),
             call
               ("CoreStats.branch_not_taken",HOLogic.natT,
                apply
                  (const("coreStats",@{typ "state \<Rightarrow> CoreStats"},@{theory}),
                   var("state",qTy)),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("next_unknown",
   close
     (var_s"s",
      close
        (var("state",qTy),
         let'
           (var_n"v",
            apply
              (call
                 ("state.unknown_counters",@{typ "string \<Rightarrow> nat"},var("state",qTy),
                  @{theory}),var_s"s"),
            tp[tp[var_n"v",var_s"s"],
               rupd
                 ("state.unknown_counters",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.unknown_counters",@{typ "string \<Rightarrow> nat"},
                           var("state",qTy),@{theory}),var_s"s",bop(Add,var_n"v",ln 1))],@{theory})]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("CAPBYTEWIDTH",ln 32)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("UPERMS",ln 16)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("OTYPEWIDTH",ln 24)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'UPerms",
   close
     (var_w("x",32),
      record
        ("UPerms",
         [ex(var_w("x",32),ln 31,ln 4,(Word_Lib.mk_wordT 28)),ex(var_w("x",32),ln 3,ln 0,w4)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'UPerms",
   close
     (var("x",@{typ UPerms}),
      cc[call("UPerms.Reserved",(Word_Lib.mk_wordT 28),var("x",@{typ UPerms}),@{theory}),
         call("UPerms.soft",w4,var("x",@{typ UPerms}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'UPerms",
   close
     (tp[var_a w32,var("x",@{typ UPerms})],call("reg'UPerms",w32,var("x",@{typ UPerms}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'UPerms",
   close
     (tp[var_a @{typ UPerms},var_w("x",32)],call("rec'UPerms",@{typ UPerms},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Perms",
   close
     (var_w("x",32),
      record
        ("Perms",
         [bop(Bit,var_w("x",32),ln 10),bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 8),
          bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 4),
          bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 5),
          bop(Bit,var_w("x",32),ln 6),
          cc[ex(var_w("x",32),ln 31,ln 11,(Word_Lib.mk_wordT 21)),ex(var_w("x",32),ln 9,ln 9,w1)]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Perms",
   close
     (var("x",@{typ Perms}),
      let'
        (var_w("Reserved",22),
         call("Perms.Reserved",(Word_Lib.mk_wordT 22),var("x",@{typ Perms}),@{theory}),
         cc[ex(var_w("Reserved",22),ln 21,ln 1,(Word_Lib.mk_wordT 21)),
            mop(Cast w1,
                call("Perms.Access_System_Registers",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            ex(var_w("Reserved",22),ln 0,ln 0,w1),
            mop(Cast w1,call("Perms.Permit_CCall",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,call("Perms.Permit_Seal",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,
                call
                  ("Perms.Permit_Store_Local_Capability",HOLogic.boolT,var("x",@{typ Perms}),
                   @{theory})),
            mop(Cast w1,
                call("Perms.Permit_Store_Capability",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,
                call("Perms.Permit_Load_Capability",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,call("Perms.Permit_Store",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,call("Perms.Permit_Load",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,call("Perms.Permit_Execute",HOLogic.boolT,var("x",@{typ Perms}),@{theory})),
            mop(Cast w1,call("Perms.Global",HOLogic.boolT,var("x",@{typ Perms}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Perms",
   close(tp[var_a w32,var("x",@{typ Perms})],call("reg'Perms",w32,var("x",@{typ Perms}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Perms",
   close
     (tp[var_a @{typ Perms},var_w("x",32)],call("rec'Perms",@{typ Perms},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Capability",
   close
     (var_w("x",257),
      record
        ("Capability",
         [ex(var_w("x",257),ln 191,ln 128,w64),ex(var_w("x",257),ln 127,ln 64,w64),
          ex(var_w("x",257),ln 255,ln 192,w64),
          ex(var_w("x",257),ln 55,ln 32,(Word_Lib.mk_wordT 24)),
          ex(var_w("x",257),ln 15,ln 1,(Word_Lib.mk_wordT 15)),ex(var_w("x",257),ln 63,ln 56,w8),
          bop(Bit,var_w("x",257),ln 0),bop(Bit,var_w("x",257),ln 256),
          ex(var_w("x",257),ln 31,ln 16,w16)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Capability",
   close
     (var("x",@{typ Capability}),
      cc[mop(Cast w1,call("Capability.tag",HOLogic.boolT,var("x",@{typ Capability}),@{theory})),
         call("Capability.length",w64,var("x",@{typ Capability}),@{theory}),
         call("Capability.base",w64,var("x",@{typ Capability}),@{theory}),
         call("Capability.cursor",w64,var("x",@{typ Capability}),@{theory}),
         call("Capability.reserved",w8,var("x",@{typ Capability}),@{theory}),
         call("Capability.otype",(Word_Lib.mk_wordT 24),var("x",@{typ Capability}),@{theory}),
         call("Capability.uperms",w16,var("x",@{typ Capability}),@{theory}),
         call("Capability.perms",(Word_Lib.mk_wordT 15),var("x",@{typ Capability}),@{theory}),
         mop(Cast w1,call("Capability.sealed",HOLogic.boolT,var("x",@{typ Capability}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Capability",
   close
     (tp[var_a (Word_Lib.mk_wordT 257),var("x",@{typ Capability})],
      call("reg'Capability",(Word_Lib.mk_wordT 257),var("x",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Capability",
   close
     (tp[var_a @{typ Capability},var_w("x",257)],
      call("rec'Capability",@{typ Capability},var_w("x",257),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("defaultCap",
   rupd
     ("Capability.reserved",
      tp[rupd
           ("Capability.perms",
            tp[rupd
                 ("Capability.uperms",
                  tp[rupd
                       ("Capability.otype",
                        tp[rupd
                             ("Capability.length",
                              tp[rupd
                                   ("Capability.base",
                                    tp[rupd
                                         ("Capability.cursor",
                                          tp[rupd
                                               ("Capability.sealed",
                                                tp[rupd
                                                     ("Capability.tag",tp[lx @{typ Capability},lt],
                                                      @{theory}),lf],@{theory}),lw(0,64)],@{theory}),
                                       lw(0,64)],@{theory}),mop(BNot,lw(0,64))],@{theory}),lw(0,24)],
                        @{theory}),mop(BNot,lw(0,16))],@{theory}),mop(BNot,lw(0,15))],@{theory}),
         lw(0,8)],@{theory}))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("nullCap",
   rupd
     ("Capability.reserved",
      tp[rupd
           ("Capability.perms",
            tp[rupd
                 ("Capability.uperms",
                  tp[rupd
                       ("Capability.otype",
                        tp[rupd
                             ("Capability.length",
                              tp[rupd
                                   ("Capability.base",
                                    tp[rupd
                                         ("Capability.cursor",
                                          tp[rupd
                                               ("Capability.sealed",
                                                tp[rupd
                                                     ("Capability.tag",tp[lx @{typ Capability},lf],
                                                      @{theory}),lf],@{theory}),lw(0,64)],@{theory}),
                                       lw(0,64)],@{theory}),mop(BNot,lw(0,64))],@{theory}),lw(0,24)],
                        @{theory}),lw(0,16)],@{theory}),lw(0,15)],@{theory}),lw(0,8)],@{theory}))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("canRepOffset",close(tp[var("cap",@{typ Capability}),var_w("newOffset",64)],lt))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("canRepSeal",close(tp[var("cap",@{typ Capability}),var_b"newSeal"],lt))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("canRepBounds",close(tp[var("cap",@{typ Capability}),var_w("newLength",64)],lt))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getTag",
   close
     (var("cap",@{typ Capability}),
      call("Capability.tag",HOLogic.boolT,var("cap",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getType",
   close
     (var("cap",@{typ Capability}),
      call("Capability.otype",(Word_Lib.mk_wordT 24),var("cap",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getPerms",
   close
     (var("cap",@{typ Capability}),
      call
        ("rec'Perms",@{typ Perms},
         mop(Cast w32,
             call("Capability.perms",(Word_Lib.mk_wordT 15),var("cap",@{typ Capability}),@{theory})),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getUPerms",
   close
     (var("cap",@{typ Capability}),
      call
        ("rec'UPerms",@{typ UPerms},
         mop(Cast w32,call("Capability.uperms",w16,var("cap",@{typ Capability}),@{theory})),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getSealed",
   close
     (var("cap",@{typ Capability}),
      call("Capability.sealed",HOLogic.boolT,var("cap",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getOffset",
   close
     (var("cap",@{typ Capability}),
      bop(Sub,call("Capability.cursor",w64,var("cap",@{typ Capability}),@{theory}),
          call("Capability.base",w64,var("cap",@{typ Capability}),@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getBase",
   close
     (var("cap",@{typ Capability}),
      call("Capability.base",w64,var("cap",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getLength",
   close
     (var("cap",@{typ Capability}),
      call("Capability.length",w64,var("cap",@{typ Capability}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("getBaseAndLength",
   close
     (var("cap",@{typ Capability}),
      tp[call("Capability.base",w64,var("cap",@{typ Capability}),@{theory}),
         call("Capability.length",w64,var("cap",@{typ Capability}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setTag",
   close
     (tp[var("cap",@{typ Capability}),var_b"tag"],
      rupd("Capability.tag",tp[var("cap",@{typ Capability}),var_b"tag"],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setType",
   close
     (tp[var("cap",@{typ Capability}),var_w("otype",24)],
      rupd("Capability.otype",tp[var("cap",@{typ Capability}),var_w("otype",24)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setPerms",
   close
     (tp[var("cap",@{typ Capability}),var("perms",@{typ Perms})],
      rupd
        ("Capability.perms",
         tp[var("cap",@{typ Capability}),
            ex(call("reg'Perms",w32,var("perms",@{typ Perms}),@{theory}),ln 14,ln 0,
               (Word_Lib.mk_wordT 15))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setUPerms",
   close
     (tp[var("cap",@{typ Capability}),var("uperms",@{typ UPerms})],
      rupd
        ("Capability.uperms",
         tp[var("cap",@{typ Capability}),
            ex(call("reg'UPerms",w32,var("uperms",@{typ UPerms}),@{theory}),ln 15,ln 0,w16)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setSealed",
   close
     (tp[var("cap",@{typ Capability}),var_b"sealed"],
      rupd("Capability.sealed",tp[var("cap",@{typ Capability}),var_b"sealed"],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setOffset",
   close
     (tp[var("cap",@{typ Capability}),var_w("offset",64)],
      rupd
        ("Capability.cursor",
         tp[var("cap",@{typ Capability}),
            bop(Add,var_w("offset",64),
                call("Capability.base",w64,var("cap",@{typ Capability}),@{theory}))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("setBounds",
   close
     (tp[var("cap",@{typ Capability}),var_w("length",64)],
      rupd
        ("Capability.length",
         tp[rupd
              ("Capability.base",
               tp[var("cap",@{typ Capability}),
                  call("Capability.cursor",w64,var("cap",@{typ Capability}),@{theory})],@{theory}),
            var_w("length",64)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_cap_write",
   close
     (var("cap",@{typ Capability}),
      cc[ls"t:",
         ite(call("getTag",HOLogic.boolT,var("cap",@{typ Capability}),@{theory}),ls"1",ls"0"),
         ls" s:",
         ite(call("getSealed",HOLogic.boolT,var("cap",@{typ Capability}),@{theory}),ls"1",ls"0"),
         ls" perms:",
         call
           ("hex",@{typ string},
            cc[call("Capability.uperms",w16,var("cap",@{typ Capability}),@{theory}),
               call
                 ("Capability.perms",(Word_Lib.mk_wordT 15),var("cap",@{typ Capability}),@{theory})],
            @{theory}),ls" type:",
         call
           ("hex",@{typ string},
            call("getType",(Word_Lib.mk_wordT 24),var("cap",@{typ Capability}),@{theory}),@{theory}),
         ls" offset:",
         call
           ("hex",@{typ string},call("getOffset",w64,var("cap",@{typ Capability}),@{theory}),
            @{theory}),ls" base:",
         call
           ("hex",@{typ string},call("getBase",w64,var("cap",@{typ Capability}),@{theory}),@{theory}),
         ls" length:",
         call
           ("hex",@{typ string},call("getLength",w64,var("cap",@{typ Capability}),@{theory}),
            @{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_cpp_write",
   close
     (var("cap",@{typ Capability}),
      cc[ls"PCC <- ",call("log_cap_write",@{typ string},var("cap",@{typ Capability}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_creg_write",
   close
     (tp[var_w("r",5),var("cap",@{typ Capability})],
      cc[ls"CapReg ",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r",5))),ls" <- ",
         call("log_cap_write",@{typ string},var("cap",@{typ Capability}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_store_cap",
   close
     (tp[var_w("pAddr",40),var("cap",@{typ Capability})],
      cc[ls"MEM[",call("hex",@{typ string},var_w("pAddr",40),@{theory}),ls"] <- ",
         call("log_cap_write",@{typ string},var("cap",@{typ Capability}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("log_load_cap",
   close
     (tp[var_w("pAddr",40),var("cap",@{typ Capability})],
      cc[call("log_cap_write",@{typ string},var("cap",@{typ Capability}),@{theory}),ls" <- MEM[",
         call("hex",@{typ string},var_w("pAddr",40),@{theory}),ls"]"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isCapAligned",
   close(var_w("addr",64),eq(ex(var_w("addr",64),ln 4,ln 0,(Word_Lib.mk_wordT 5)),lw(0,5))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("capToBits",
   close
     (var("cap",@{typ Capability}),
      bop(BXor,
          ex(call("reg'Capability",(Word_Lib.mk_wordT 257),var("cap",@{typ Capability}),@{theory}),
             ln 255,ln 0,(Word_Lib.mk_wordT 256)),
          ex(call
               ("reg'Capability",(Word_Lib.mk_wordT 257),
                const("nullCap",@{typ Capability},@{theory}),@{theory}),ln 255,ln 0,
             (Word_Lib.mk_wordT 256)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("bitsToCap",
   close
     (var_w("raw",256),
      call
        ("rec'Capability",@{typ Capability},
         cc[lw(0,1),
            bop(BXor,var_w("raw",256),
                ex(call
                     ("reg'Capability",(Word_Lib.mk_wordT 257),
                      const("nullCap",@{typ Capability},@{theory}),@{theory}),ln 255,ln 0,
                   (Word_Lib.mk_wordT 256)))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("readDwordFromRaw",
   close
     (tp[var_w("dwordAddr",37),var_w("raw",256)],
      cs(ex(var_w("dwordAddr",37),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
         [(var_w("v",2),
           itb([(eq(var_w("v",2),lw(0,2)),ex(var_w("raw",256),ln 63,ln 0,w64)),
                (eq(var_w("v",2),lw(1,2)),ex(var_w("raw",256),ln 127,ln 64,w64)),
                (eq(var_w("v",2),lw(2,2)),ex(var_w("raw",256),ln 191,ln 128,w64)),
                (eq(var_w("v",2),lw(3,2)),ex(var_w("raw",256),ln 255,ln 192,w64))],lx w64))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("updateDwordInRaw",
   close
     (tp[var_w("dwordAddr",37),var_w("data",64),var_w("mask",64),var_w("old_blob",256)],
      cs(ex(var_w("dwordAddr",37),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
         [(var_w("v",2),
           itb([(eq(var_w("v",2),lw(0,2)),
                 cc[ex(var_w("old_blob",256),ln 255,ln 64,(Word_Lib.mk_wordT 192)),
                    bop(BOr,
                        bop(BAnd,ex(var_w("old_blob",256),ln 63,ln 0,w64),mop(BNot,var_w("mask",64))),
                        bop(BAnd,var_w("data",64),var_w("mask",64)))]),
                (eq(var_w("v",2),lw(1,2)),
                 cc[ex(var_w("old_blob",256),ln 255,ln 128,(Word_Lib.mk_wordT 128)),
                    bop(BOr,
                        bop(BAnd,ex(var_w("old_blob",256),ln 127,ln 64,w64),
                            mop(BNot,var_w("mask",64))),bop(BAnd,var_w("data",64),var_w("mask",64))),
                    ex(var_w("old_blob",256),ln 63,ln 0,w64)]),
                (eq(var_w("v",2),lw(2,2)),
                 cc[ex(var_w("old_blob",256),ln 255,ln 192,w64),
                    bop(BOr,
                        bop(BAnd,ex(var_w("old_blob",256),ln 191,ln 128,w64),
                            mop(BNot,var_w("mask",64))),bop(BAnd,var_w("data",64),var_w("mask",64))),
                    ex(var_w("old_blob",256),ln 127,ln 0,(Word_Lib.mk_wordT 128))]),
                (eq(var_w("v",2),lw(3,2)),
                 cc[bop(BOr,
                        bop(BAnd,ex(var_w("old_blob",256),ln 255,ln 192,w64),
                            mop(BNot,var_w("mask",64))),bop(BAnd,var_w("data",64),var_w("mask",64))),
                    ex(var_w("old_blob",256),ln 191,ln 0,(Word_Lib.mk_wordT 192))])],
               lx (Word_Lib.mk_wordT 256)))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'CapCause",
   close
     (var_w("x",16),
      record("CapCause",[ex(var_w("x",16),ln 15,ln 8,w8),ex(var_w("x",16),ln 7,ln 0,w8)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'CapCause",
   close
     (var("x",@{typ CapCause}),
      cc[call("CapCause.ExcCode",w8,var("x",@{typ CapCause}),@{theory}),
         call("CapCause.RegNum",w8,var("x",@{typ CapCause}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'CapCause",
   close
     (tp[var_a w16,var("x",@{typ CapCause})],
      call("reg'CapCause",w16,var("x",@{typ CapCause}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'CapCause",
   close
     (tp[var_a @{typ CapCause},var_w("x",16)],
      call("rec'CapCause",@{typ CapCause},var_w("x",16),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("switchCoreCAP",
   close
     (var_w("i",8),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            rupd
              ("state.all_BranchDelayPCC",
               tp[var("state",qTy),
                  fupd
                    (call
                       ("state.all_BranchDelayPCC",
                        @{typ "8 word \<Rightarrow> ((64 word \<times> Capability) option)"},
                        var("state",qTy),@{theory}),
                     call("state.procID",w8,var("state",qTy),@{theory}),
                     call
                       ("state.BranchDelayPCC",@{typ "(64 word \<times> Capability) option"},
                        var("state",qTy),@{theory}))],@{theory}),
            let'
              (var("s",qTy),
               rupd
                 ("state.all_BranchToPCC",
                  tp[var("s",qTy),
                     fupd
                       (call
                          ("state.all_BranchToPCC",
                           @{typ "8 word \<Rightarrow> ((64 word \<times> Capability) option)"},
                           var("s",qTy),@{theory}),call("state.procID",w8,var("s",qTy),@{theory}),
                        call
                          ("state.BranchToPCC",@{typ "(64 word \<times> Capability) option"},
                           var("s",qTy),@{theory}))],@{theory}),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.all_CCallBranchDelay",
                     tp[var("s",qTy),
                        fupd
                          (call
                             ("state.all_CCallBranchDelay",@{typ "8 word \<Rightarrow> bool"},
                              var("s",qTy),@{theory}),
                           call("state.procID",w8,var("s",qTy),@{theory}),
                           call("state.CCallBranchDelay",HOLogic.boolT,var("s",qTy),@{theory}))],
                     @{theory}),
                  let'
                    (var("s",qTy),
                     rupd
                       ("state.all_CCallBranch",
                        tp[var("s",qTy),
                           fupd
                             (call
                                ("state.all_CCallBranch",@{typ "8 word \<Rightarrow> bool"},
                                 var("s",qTy),@{theory}),
                              call("state.procID",w8,var("s",qTy),@{theory}),
                              call("state.CCallBranch",HOLogic.boolT,var("s",qTy),@{theory}))],
                        @{theory}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.all_capcause",
                           tp[var("s",qTy),
                              fupd
                                (call
                                   ("state.all_capcause",@{typ "8 word \<Rightarrow> CapCause"},
                                    var("s",qTy),@{theory}),
                                 call("state.procID",w8,var("s",qTy),@{theory}),
                                 call("state.capcause",@{typ CapCause},var("s",qTy),@{theory}))],
                           @{theory}),
                        let'
                          (var("s",qTy),
                           rupd
                             ("state.all_pcc",
                              tp[var("s",qTy),
                                 fupd
                                   (call
                                      ("state.all_pcc",@{typ "8 word \<Rightarrow> Capability"},
                                       var("s",qTy),@{theory}),
                                    call("state.procID",w8,var("s",qTy),@{theory}),
                                    call("state.c_pcc",@{typ Capability},var("s",qTy),@{theory}))],
                              @{theory}),
                           let'
                             (var("s",qTy),
                              rupd
                                ("state.all_capr",
                                 tp[var("s",qTy),
                                    fupd
                                      (call
                                         ("state.all_capr",
                                          @{typ
                                          "8 word \<Rightarrow> (5 word \<Rightarrow> Capability)"},
                                          var("s",qTy),@{theory}),
                                       call("state.procID",w8,var("s",qTy),@{theory}),
                                       call
                                         ("state.c_capr",@{typ "5 word \<Rightarrow> Capability"},
                                          var("s",qTy),@{theory}))],@{theory}),
                              let'
                                (var("s",qTy),
                                 rupd
                                   ("state.BranchDelayPCC",
                                    tp[var("s",qTy),
                                       apply
                                         (call
                                            ("state.all_BranchDelayPCC",
                                             @{typ
                                             "8 word \<Rightarrow>
                                              ((64 word \<times> Capability) option)"},var("s",qTy),
                                             @{theory}),var_w("i",8))],@{theory}),
                                 let'
                                   (var("s",qTy),
                                    rupd
                                      ("state.BranchToPCC",
                                       tp[var("s",qTy),
                                          apply
                                            (call
                                               ("state.all_BranchToPCC",
                                                @{typ
                                                "8 word \<Rightarrow>
                                                 ((64 word \<times> Capability) option)"},
                                                var("s",qTy),@{theory}),var_w("i",8))],@{theory}),
                                    let'
                                      (var("s",qTy),
                                       rupd
                                         ("state.CCallBranchDelay",
                                          tp[var("s",qTy),
                                             apply
                                               (call
                                                  ("state.all_CCallBranchDelay",
                                                   @{typ "8 word \<Rightarrow> bool"},var("s",qTy),
                                                   @{theory}),var_w("i",8))],@{theory}),
                                       let'
                                         (var("s",qTy),
                                          rupd
                                            ("state.CCallBranch",
                                             tp[var("s",qTy),
                                                apply
                                                  (call
                                                     ("state.all_CCallBranch",
                                                      @{typ "8 word \<Rightarrow> bool"},
                                                      var("s",qTy),@{theory}),var_w("i",8))],
                                             @{theory}),
                                          let'
                                            (var("s",qTy),
                                             rupd
                                               ("state.capcause",
                                                tp[var("s",qTy),
                                                   apply
                                                     (call
                                                        ("state.all_capcause",
                                                         @{typ "8 word \<Rightarrow> CapCause"},
                                                         var("s",qTy),@{theory}),var_w("i",8))],
                                                @{theory}),
                                             let'
                                               (var("s",qTy),
                                                rupd
                                                  ("state.c_pcc",
                                                   tp[var("s",qTy),
                                                      apply
                                                        (call
                                                           ("state.all_pcc",
                                                            @{typ "8 word \<Rightarrow> Capability"},
                                                            var("s",qTy),@{theory}),var_w("i",8))],
                                                   @{theory}),
                                                rupd
                                                  ("state.c_capr",
                                                   tp[var("s",qTy),
                                                      apply
                                                        (call
                                                           ("state.all_capr",
                                                            @{typ
                                                            "8 word \<Rightarrow>
                                                             (5 word \<Rightarrow> Capability)"},
                                                            var("s",qTy),@{theory}),var_w("i",8))],
                                                   @{theory})))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dumpCRegs",close(var_a HOLogic.unitT,lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PCC",close(var("state",qTy),call("state.c_pcc",@{typ Capability},var("state",qTy),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'PCC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         rupd("state.c_pcc",tp[var("state",qTy),var("value",@{typ Capability})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CAPR",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         apply
           (call("state.c_capr",@{typ "5 word \<Rightarrow> Capability"},var("state",qTy),@{theory}),
            var_w("n",5)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CAPR",
   close
     (tp[var("value",@{typ Capability}),var_w("n",5)],
      close
        (var("state",qTy),
         rupd
           ("state.c_capr",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_capr",@{typ "5 word \<Rightarrow> Capability"},var("state",qTy),
                     @{theory}),var_w("n",5),var("value",@{typ Capability}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("RCC",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(24,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'RCC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(24,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("IDC",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(26,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'IDC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(26,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KR1C",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(27,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'KR1C",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(27,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KR2C",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(28,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'KR2C",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(28,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KCC",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(29,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'KCC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(29,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KDC",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(30,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'KDC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(30,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("EPCC",
   close
     (var("state",qTy),
      apply
        (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(31,5),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'EPCC",
   close
     (var("value",@{typ Capability}),
      close
        (var("state",qTy),
         apply
           (call
              ("write'CAPR",@{typ "state \<Rightarrow> state"},
               tp[var("value",@{typ Capability}),lw(31,5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("allow_system_reg_access",
   close
     (tp[var("p",@{typ Perms}),var_w("r",5)],
      close
        (var("state",qTy),
         ite(bop(And,bop(Uge,var_w("r",5),lw(27,5)),
                 mop(Not,
                     call
                       ("Perms.Access_System_Registers",HOLogic.boolT,var("p",@{typ Perms}),
                        @{theory}))),lf,
             mop(Not,
                 bop(And,eq(var_w("r",5),lw(26,5)),
                     call("state.CCallBranchDelay",HOLogic.boolT,var("state",qTy),@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ExceptionCode",
   close
     (var("e",@{typ ExceptionType}),
      cs(var("e",@{typ ExceptionType}),
         [(lc("Int","ExceptionType",@{theory}),lw(0,5)),
          (lc("Mod","ExceptionType",@{theory}),lw(1,5)),
          (lc("TLBL","ExceptionType",@{theory}),lw(2,5)),
          (lc("TLBS","ExceptionType",@{theory}),lw(3,5)),
          (lc("AdEL","ExceptionType",@{theory}),lw(4,5)),
          (lc("AdES","ExceptionType",@{theory}),lw(5,5)),
          (lc("Sys","ExceptionType",@{theory}),lw(8,5)),
          (lc("Bp","ExceptionType",@{theory}),lw(9,5)),
          (lc("ResI","ExceptionType",@{theory}),lw(10,5)),
          (lc("CpU","ExceptionType",@{theory}),lw(11,5)),
          (lc("Ov","ExceptionType",@{theory}),lw(12,5)),
          (lc("Tr","ExceptionType",@{theory}),lw(13,5)),
          (lc("CTLBL","ExceptionType",@{theory}),lw(16,5)),
          (lc("CTLBS","ExceptionType",@{theory}),lw(17,5)),
          (lc("C2E","ExceptionType",@{theory}),lw(18,5)),
          (lc("MCheck","ExceptionType",@{theory}),lw(24,5)),
          (lc("XTLBRefillL","ExceptionType",@{theory}),lw(2,5)),
          (lc("XTLBRefillS","ExceptionType",@{theory}),lw(3,5))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("capExcCode",
   close
     (var("e",@{typ CapExceptionType}),
      cs(var("e",@{typ CapExceptionType}),
         [(lc("capExcNone","CapExceptionType",@{theory}),lw(0,8)),
          (lc("capExcLength","CapExceptionType",@{theory}),lw(1,8)),
          (lc("capExcTag","CapExceptionType",@{theory}),lw(2,8)),
          (lc("capExcSeal","CapExceptionType",@{theory}),lw(3,8)),
          (lc("capExcType","CapExceptionType",@{theory}),lw(4,8)),
          (lc("capExcCall","CapExceptionType",@{theory}),lw(5,8)),
          (lc("capExcRet","CapExceptionType",@{theory}),lw(6,8)),
          (lc("capExcUnderflowTSS","CapExceptionType",@{theory}),lw(7,8)),
          (lc("capExcUser","CapExceptionType",@{theory}),lw(8,8)),
          (lc("capExcTLBNoStore","CapExceptionType",@{theory}),lw(9,8)),
          (lc("capExcInexact","CapExceptionType",@{theory}),lw(10,8)),
          (lc("capExcGlobal","CapExceptionType",@{theory}),lw(16,8)),
          (lc("capExcPermExe","CapExceptionType",@{theory}),lw(17,8)),
          (lc("capExcPermLoad","CapExceptionType",@{theory}),lw(18,8)),
          (lc("capExcPermStore","CapExceptionType",@{theory}),lw(19,8)),
          (lc("capExcPermLoadCap","CapExceptionType",@{theory}),lw(20,8)),
          (lc("capExcPermStoreCap","CapExceptionType",@{theory}),lw(21,8)),
          (lc("capExcPermStoreLocalCap","CapExceptionType",@{theory}),lw(22,8)),
          (lc("capExcPermSeal","CapExceptionType",@{theory}),lw(23,8)),
          (lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(24,8)),
          (lc("capExcPermCCall","CapExceptionType",@{theory}),lw(25,8))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalException",
   close
     (var("ExceptionType",@{typ ExceptionType}),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(mop(Not,
                    call
                      ("StatusRegister.EXL",HOLogic.boolT,
                       call
                         ("CP0.Status",@{typ StatusRegister},
                          apply
                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory})),
                ite(bop(Or,
                        mop(IsSome,
                            apply
                              (const
                                 ("BranchDelay",@{typ "state \<Rightarrow> (64 word option)"},
                                  @{theory}),var("state",qTy))),
                        mop(IsSome,
                            call
                              ("state.BranchDelayPCC",@{typ "(64 word \<times> Capability) option"},
                               var("state",qTy),@{theory}))),
                    let'
                      (tp[var("v",@{typ CP0}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'CP0",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("CP0.EPC",
                                   tp[apply
                                        (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                         var("state",qTy)),
                                      bop(Sub,
                                          apply
                                            (const
                                               ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                             var("state",qTy)),lw(4,64))],@{theory}),@{theory}),
                             var("state",qTy)),
                          tp[apply
                               (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       apply
                         (call
                            ("write'CP0",@{typ "state \<Rightarrow> state"},
                             rupd
                               ("CP0.Cause",
                                tp[var("v",@{typ CP0}),
                                   rupd
                                     ("CauseRegister.BD",
                                      tp[call
                                           ("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),
                                            @{theory}),lt],@{theory})],@{theory}),@{theory}),
                          var("s",qTy))),
                    let'
                      (tp[var("v",@{typ CP0}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'CP0",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("CP0.EPC",
                                   tp[apply
                                        (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                         var("state",qTy)),
                                      apply
                                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                         var("state",qTy))],@{theory}),@{theory}),var("state",qTy)),
                          tp[apply
                               (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                var("s0",qTy)),var("s0",qTy)]),
                       apply
                         (call
                            ("write'CP0",@{typ "state \<Rightarrow> state"},
                             rupd
                               ("CP0.Cause",
                                tp[var("v",@{typ CP0}),
                                   rupd
                                     ("CauseRegister.BD",
                                      tp[call
                                           ("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),
                                            @{theory}),lf],@{theory})],@{theory}),@{theory}),
                          var("s",qTy)))),var("state",qTy)),
            let'
              (tp[var("v0",@{typ CP0}),var("s0",qTy)],
               let'
                 (var("s0",qTy),
                  ite(mop(IsSome,
                          call("state.currentInst",@{typ "32 word option"},var("s",qTy),@{theory})),
                      apply
                        (call
                           ("write'CP0",@{typ "state \<Rightarrow> state"},
                            rupd
                              ("CP0.EInstr",
                               tp[apply
                                    (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                     var("s",qTy)),
                                  mop(ValOf,
                                      call
                                        ("state.currentInst",@{typ "32 word option"},var("s",qTy),
                                         @{theory}))],@{theory}),@{theory}),var("s",qTy)),
                      var("s",qTy)),
                  tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                     var("s0",qTy)]),
               let'
                 (tp[var("v0",@{typ CP0}),var("s0",qTy)],
                  let'
                    (var("s",qTy),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Cause",
                              tp[var("v0",@{typ CP0}),
                                 rupd
                                   ("CauseRegister.ExcCode",
                                    tp[call
                                         ("CP0.Cause",@{typ CauseRegister},var("v0",@{typ CP0}),
                                          @{theory}),
                                       call
                                         ("ExceptionCode",(Word_Lib.mk_wordT 5),
                                          var("ExceptionType",@{typ ExceptionType}),@{theory})],
                                    @{theory})],@{theory}),@{theory}),var("s0",qTy)),
                     tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s",qTy)),
                        var("s",qTy)]),
                  let'
                    (var_w("v0",64),
                     ite(call
                           ("StatusRegister.BEV",HOLogic.boolT,
                            call("CP0.Status",@{typ StatusRegister},var("v0",@{typ CP0}),@{theory}),
                            @{theory}),lw(18446744072631616000,64),lw(18446744071562067968,64)),
                     let'
                       (tp[var("v1",@{typ Capability}),var("s0",qTy)],
                        let'
                          (var("s",qTy),
                           apply
                             (call
                                ("write'exceptionSignalled",@{typ "state \<Rightarrow> state"},lt,
                                 @{theory}),
                              rupd
                                ("state.BranchToPCC",
                                 tp[rupd
                                      ("state.BranchDelayPCC",
                                       tp[apply
                                            (call
                                               ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                                                lo w64,@{theory}),
                                             apply
                                               (call
                                                  ("write'BranchDelay",
                                                   @{typ "state \<Rightarrow> state"},lo w64,
                                                   @{theory}),var("s0",qTy))),
                                          lo(@{typ "64 word \<times> Capability"})],@{theory}),
                                    lo(@{typ "64 word \<times> Capability"})],@{theory})),
                           tp[apply
                                (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                 var("s",qTy)),var("s",qTy)]),
                        let'
                          (var("s2",qTy),
                           ite(mop(Not,
                                   call
                                     ("StatusRegister.EXL",HOLogic.boolT,
                                      call
                                        ("CP0.Status",@{typ StatusRegister},
                                         apply
                                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                            var("s0",qTy)),@{theory}),@{theory})),
                               apply
                                 (call
                                    ("write'EPCC",@{typ "state \<Rightarrow> state"},
                                     ite(mop(Not,
                                             call
                                               ("canRepOffset",HOLogic.boolT,
                                                tp[apply
                                                     (const
                                                        ("PCC",
                                                         @{typ "state \<Rightarrow> Capability"},
                                                         @{theory}),var("s0",qTy)),
                                                   apply
                                                     (const
                                                        ("PC",@{typ "state \<Rightarrow> 64 word"},
                                                         @{theory}),var("s0",qTy))],@{theory})),
                                         call
                                           ("setOffset",@{typ Capability},
                                            tp[const("nullCap",@{typ Capability},@{theory}),
                                               bop(Add,
                                                   call
                                                     ("getBase",w64,
                                                      apply
                                                        (const
                                                           ("PCC",
                                                            @{typ "state \<Rightarrow> Capability"},
                                                            @{theory}),var("s0",qTy)),@{theory}),
                                                   apply
                                                     (const
                                                        ("PC",@{typ "state \<Rightarrow> 64 word"},
                                                         @{theory}),var("s0",qTy)))],@{theory}),
                                         call
                                           ("setOffset",@{typ Capability},
                                            tp[var("v1",@{typ Capability}),
                                               apply
                                                 (const
                                                    ("PC",@{typ "state \<Rightarrow> 64 word"},
                                                     @{theory}),var("s0",qTy))],@{theory})),
                                     @{theory}),var("s0",qTy)),var("s0",qTy)),
                           let'
                             (var("s2",qTy),
                              apply
                                (call
                                   ("write'PCC",@{typ "state \<Rightarrow> state"},
                                    apply
                                      (const
                                         ("KCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                       var("s2",qTy)),@{theory}),var("s2",qTy)),
                              let'
                                (var("s1",qTy),
                                 apply
                                   (call
                                      ("write'PC",@{typ "state \<Rightarrow> state"},
                                       bop(Sub,
                                           cc[ex(var_w("v0",64),ln 63,ln 30,(Word_Lib.mk_wordT 34)),
                                              bop(Add,
                                                  ex(var_w("v0",64),ln 29,ln 0,
                                                     (Word_Lib.mk_wordT 30)),
                                                  itb([(bop(And,
                                                            bop(Or,
                                                                eq(var("ExceptionType",
                                                                       @{typ ExceptionType}),
                                                                   lc("XTLBRefillL","ExceptionType",
                                                                      @{theory})),
                                                                eq(var("ExceptionType",
                                                                       @{typ ExceptionType}),
                                                                   lc("XTLBRefillS","ExceptionType",
                                                                      @{theory}))),
                                                            mop(Not,
                                                                call
                                                                  ("StatusRegister.EXL",
                                                                   HOLogic.boolT,
                                                                   call
                                                                     ("CP0.Status",
                                                                      @{typ StatusRegister},
                                                                      apply
                                                                        (const
                                                                           ("CP0",
                                                                            @{typ
                                                                            "state \<Rightarrow> CP0"},
                                                                            @{theory}),var("s",qTy)),
                                                                      @{theory}),@{theory}))),
                                                        lw(128,30)),
                                                       (bop(And,
                                                            eq(var("ExceptionType",
                                                                   @{typ ExceptionType}),
                                                               lc("C2E","ExceptionType",@{theory})),
                                                            bop(Or,
                                                                eq(call
                                                                     ("CapCause.ExcCode",w8,
                                                                      call
                                                                        ("state.capcause",
                                                                         @{typ CapCause},
                                                                         var("s",qTy),@{theory}),
                                                                      @{theory}),lw(5,8)),
                                                                eq(call
                                                                     ("CapCause.ExcCode",w8,
                                                                      call
                                                                        ("state.capcause",
                                                                         @{typ CapCause},
                                                                         var("s",qTy),@{theory}),
                                                                      @{theory}),lw(6,8)))),
                                                        lw(640,30))],lw(384,30)))],
                                           call
                                             ("getBase",w64,
                                              apply
                                                (const
                                                   ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                    @{theory}),var("s2",qTy)),@{theory})),@{theory}),
                                    var("s2",qTy)),
                                 let'
                                   (var("v",@{typ CP0}),
                                    apply
                                      (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                       var("s1",qTy)),
                                    apply
                                      (call
                                         ("write'CP0",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("CP0.Status",
                                             tp[var("v",@{typ CP0}),
                                                rupd
                                                  ("StatusRegister.EXL",
                                                   tp[call
                                                        ("CP0.Status",@{typ StatusRegister},
                                                         var("v",@{typ CP0}),@{theory}),lt],
                                                   @{theory})],@{theory}),@{theory}),var("s1",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCP1UnusableException",
   close
     (var("state",qTy),
      let'
        (var("v",@{typ CP0}),
         apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
         apply
           (call
              ("SignalException",@{typ "state \<Rightarrow> state"},
               lc("CpU","ExceptionType",@{theory}),@{theory}),
            apply
              (call
                 ("write'CP0",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("CP0.Cause",
                     tp[var("v",@{typ CP0}),
                        rupd
                          ("CauseRegister.CE",
                           tp[call("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),@{theory}),
                              lw(1,2)],@{theory})],@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCP2UnusableException",
   close
     (var("state",qTy),
      let'
        (var("v",@{typ CP0}),
         apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
         apply
           (call
              ("SignalException",@{typ "state \<Rightarrow> state"},
               lc("CpU","ExceptionType",@{theory}),@{theory}),
            apply
              (call
                 ("write'CP0",@{typ "state \<Rightarrow> state"},
                  rupd
                    ("CP0.Cause",
                     tp[var("v",@{typ CP0}),
                        rupd
                          ("CauseRegister.CE",
                           tp[call("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),@{theory}),
                              lw(2,2)],@{theory})],@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCapException_internal",
   close
     (tp[var("capException",@{typ CapExceptionType}),var_w("regNum",8)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            rupd
              ("state.capcause",
               tp[var("state",qTy),
                  rupd
                    ("CapCause.ExcCode",
                     tp[call("state.capcause",@{typ CapCause},var("state",qTy),@{theory}),
                        call("capExcCode",w8,var("capException",@{typ CapExceptionType}),@{theory})],
                     @{theory})],@{theory}),
            apply
              (call
                 ("SignalException",@{typ "state \<Rightarrow> state"},
                  lc("C2E","ExceptionType",@{theory}),@{theory}),
               rupd
                 ("state.capcause",
                  tp[var("s",qTy),
                     rupd
                       ("CapCause.RegNum",
                        tp[call("state.capcause",@{typ CapCause},var("s",qTy),@{theory}),
                           var_w("regNum",8)],@{theory})],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCapException",
   close
     (tp[var("capException",@{typ CapExceptionType}),var_w("regNum",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("SignalCapException_internal",@{typ "state \<Rightarrow> state"},
               tp[var("capException",@{typ CapExceptionType}),mop(Cast w8,var_w("regNum",5))],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCapException_noReg",
   close
     (var("capException",@{typ CapExceptionType}),
      close
        (var("state",qTy),
         apply
           (call
              ("SignalCapException_internal",@{typ "state \<Rightarrow> state"},
               tp[var("capException",@{typ CapExceptionType}),lw(255,8)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ERET",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ CP0}),var("s",qTy)],
         let'
           (var("s",qTy),
            apply
              (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy)),
            tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s",qTy)),
               var("s",qTy)]),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call("CP0.Status",@{typ StatusRegister},var("v",@{typ CP0}),@{theory}),@{theory}),
                 apply(const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("s",qTy))),
             let'
               (tp[var("v",@{typ Capability}),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (call("write'LLbit",@{typ "state \<Rightarrow> state"},mop(Some,lf),@{theory}),
                      ite(call
                            ("StatusRegister.ERL",HOLogic.boolT,
                             call
                               ("CP0.Status",@{typ StatusRegister},
                                apply
                                  (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                   var("s",qTy)),@{theory}),@{theory}),
                          let'
                            (tp[var("v",@{typ CP0}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'PC",@{typ "state \<Rightarrow> state"},
                                      bop(Sub,
                                          call
                                            ("CP0.ErrorEPC",w64,
                                             apply
                                               (const
                                                  ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                var("s",qTy)),@{theory}),lw(4,64)),@{theory}),
                                   var("s",qTy)),
                                tp[apply
                                     (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'CP0",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("CP0.Status",
                                      tp[var("v",@{typ CP0}),
                                         rupd
                                           ("StatusRegister.ERL",
                                            tp[call
                                                 ("CP0.Status",@{typ StatusRegister},
                                                  var("v",@{typ CP0}),@{theory}),lf],@{theory})],
                                      @{theory}),@{theory}),var("s",qTy))),
                          let'
                            (tp[var("v",@{typ CP0}),var("s",qTy)],
                             let'
                               (var("s0",qTy),
                                apply
                                  (call
                                     ("write'PC",@{typ "state \<Rightarrow> state"},
                                      bop(Sub,
                                          call
                                            ("CP0.EPC",w64,
                                             apply
                                               (const
                                                  ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                var("s",qTy)),@{theory}),lw(4,64)),@{theory}),
                                   var("s",qTy)),
                                tp[apply
                                     (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                      var("s0",qTy)),var("s0",qTy)]),
                             apply
                               (call
                                  ("write'CP0",@{typ "state \<Rightarrow> state"},
                                   rupd
                                     ("CP0.Status",
                                      tp[var("v",@{typ CP0}),
                                         rupd
                                           ("StatusRegister.EXL",
                                            tp[call
                                                 ("CP0.Status",@{typ StatusRegister},
                                                  var("v",@{typ CP0}),@{theory}),lf],@{theory})],
                                      @{theory}),@{theory}),var("s",qTy))))),
                   tp[apply
                        (const("EPCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                         var("s0",qTy)),var("s0",qTy)]),
                apply
                  (call
                     ("write'PCC",@{typ "state \<Rightarrow> state"},var("v",@{typ Capability}),
                      @{theory}),var("s",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("TLBAssocEntries",ln 16)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("TLBDirectEntries",ln 256)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("TLBEntries",
   bop(Add,const("TLBAssocEntries",HOLogic.natT,@{theory}),
       const("TLBDirectEntries",HOLogic.natT,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TLB_direct",
   close
     (var_w("i",8),
      close
        (var("state",qTy),
         apply
           (call
              ("state.c_TLB_direct",@{typ "8 word \<Rightarrow> (TLBEntry option)"},
               var("state",qTy),@{theory}),var_w("i",8)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'TLB_direct",
   close
     (tp[var("value",@{typ "TLBEntry option"}),var_w("i",8)],
      close
        (var("state",qTy),
         rupd
           ("state.c_TLB_direct",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_TLB_direct",@{typ "8 word \<Rightarrow> (TLBEntry option)"},
                     var("state",qTy),@{theory}),var_w("i",8),var("value",@{typ "TLBEntry option"}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("TLB_assoc",
   close
     (var_w("i",4),
      close
        (var("state",qTy),
         apply
           (call
              ("state.c_TLB_assoc",@{typ "4 word \<Rightarrow> (TLBEntry option)"},var("state",qTy),
               @{theory}),var_w("i",4)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'TLB_assoc",
   close
     (tp[var("value",@{typ "TLBEntry option"}),var_w("i",4)],
      close
        (var("state",qTy),
         rupd
           ("state.c_TLB_assoc",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.c_TLB_assoc",@{typ "4 word \<Rightarrow> (TLBEntry option)"},
                     var("state",qTy),@{theory}),var_w("i",4),var("value",@{typ "TLBEntry option"}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("switchCoreTLB",
   close
     (var_w("i",8),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            rupd
              ("state.all_TLB_direct",
               tp[var("state",qTy),
                  fupd
                    (call
                       ("state.all_TLB_direct",
                        @{typ "8 word \<Rightarrow> (8 word \<Rightarrow> (TLBEntry option))"},
                        var("state",qTy),@{theory}),
                     call("state.procID",w8,var("state",qTy),@{theory}),
                     call
                       ("state.c_TLB_direct",@{typ "8 word \<Rightarrow> (TLBEntry option)"},
                        var("state",qTy),@{theory}))],@{theory}),
            let'
              (var("s",qTy),
               rupd
                 ("state.all_TLB_assoc",
                  tp[var("s",qTy),
                     fupd
                       (call
                          ("state.all_TLB_assoc",
                           @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLBEntry option))"},
                           var("s",qTy),@{theory}),call("state.procID",w8,var("s",qTy),@{theory}),
                        call
                          ("state.c_TLB_assoc",@{typ "4 word \<Rightarrow> (TLBEntry option)"},
                           var("s",qTy),@{theory}))],@{theory}),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.c_TLB_direct",
                     tp[var("s",qTy),
                        apply
                          (call
                             ("state.all_TLB_direct",
                              @{typ "8 word \<Rightarrow> (8 word \<Rightarrow> (TLBEntry option))"},
                              var("s",qTy),@{theory}),var_w("i",8))],@{theory}),
                  rupd
                    ("state.c_TLB_assoc",
                     tp[var("s",qTy),
                        apply
                          (call
                             ("state.all_TLB_assoc",
                              @{typ "8 word \<Rightarrow> (4 word \<Rightarrow> (TLBEntry option))"},
                              var("s",qTy),@{theory}),var_w("i",8))],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LookupTLB",
   close
     (tp[var_w("r",2),var_w("vpn2",27)],
      close
        (var("state",qTy),
         let'
           (var("s0",@{typ "(9 word \<times> TLBEntry) list"}),
            lnl(@{typ "9 word \<times> TLBEntry"}),
            mop(Fst,
                mop(Snd,
                    apply
                      (forloop
                         (tp[ln 0,bop(Sub,const("TLBAssocEntries",HOLogic.natT,@{theory}),ln 1),
                             close
                               (var_n"i",
                                close
                                  (var("state",
                                       @{typ "((9 word \<times> TLBEntry) list) \<times> state"}),
                                   cs(apply
                                        (call
                                           ("TLB_assoc",
                                            @{typ "state \<Rightarrow> (TLBEntry option)"},
                                            mop(Cast w4,var_n"i"),@{theory}),
                                         mop(Snd,
                                             var("state",
                                                 @{typ
                                                 "((9 word \<times> TLBEntry) list) \<times> state"}))),
                                      [(mop(Some,var("e",@{typ TLBEntry})),
                                        tp[lu,
                                           ite(bop(And,
                                                   bop(And,
                                                       eq(call
                                                            ("TLBEntry.R",(Word_Lib.mk_wordT 2),
                                                             var("e",@{typ TLBEntry}),@{theory}),
                                                          var_w("r",2)),
                                                       bop(Or,
                                                           call
                                                             ("TLBEntry.G",HOLogic.boolT,
                                                              var("e",@{typ TLBEntry}),@{theory}),
                                                           eq(call
                                                                ("TLBEntry.ASID",w8,
                                                                 var("e",@{typ TLBEntry}),@{theory}),
                                                              call
                                                                ("EntryHi.ASID",w8,
                                                                 call
                                                                   ("CP0.EntryHi",@{typ EntryHi},
                                                                    apply
                                                                      (const
                                                                         ("CP0",
                                                                          @{typ
                                                                          "state \<Rightarrow> CP0"},
                                                                          @{theory}),
                                                                       mop(Snd,
                                                                           var("state",
                                                                               @{typ
                                                                               "((9 word \<times>
                                                                                   TLBEntry)
                                                                                    list) \<times>
                                                                                state"}))),@{theory}),
                                                                 @{theory})))),
                                                   let'
                                                     (var_w("nmask",27),
                                                      mop(BNot,
                                                          mop(Cast (Word_Lib.mk_wordT 27),
                                                              call
                                                                ("TLBEntry.Mask",
                                                                 (Word_Lib.mk_wordT 12),
                                                                 var("e",@{typ TLBEntry}),@{theory}))),
                                                      eq(bop(BAnd,
                                                             call
                                                               ("TLBEntry.VPN2",
                                                                (Word_Lib.mk_wordT 27),
                                                                var("e",@{typ TLBEntry}),@{theory}),
                                                             var_w("nmask",27)),
                                                         bop(BAnd,var_w("vpn2",27),var_w("nmask",27))))),
                                               tp[llc([tp[mop(Cast (Word_Lib.mk_wordT 9),var_n"i"),
                                                          var("e",@{typ TLBEntry})]],
                                                      mop(Fst,
                                                          var("state",
                                                              @{typ
                                                              "((9 word \<times> TLBEntry) list) \<times>
                                                               state"}))),
                                                  mop(Snd,
                                                      var("state",
                                                          @{typ
                                                          "((9 word \<times> TLBEntry) list) \<times>
                                                           state"}))],
                                               var("state",
                                                   @{typ
                                                   "((9 word \<times> TLBEntry) list) \<times> state"}))]),
                                       (var_a(@{typ "TLBEntry option"}),
                                        tp[lu,
                                           var("state",
                                               @{typ
                                               "((9 word \<times> TLBEntry) list) \<times> state"})])],
                                      @{context})))]),
                       ite(call
                             ("ConfigRegister6.LTLB",HOLogic.boolT,
                              call
                                ("CP0.Config6",@{typ ConfigRegister6},
                                 apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),@{theory}),@{theory}),
                           let'
                             (var_w("b",8),ex(var_w("vpn2",27),ln 7,ln 0,w8),
                              cs(apply
                                   (call
                                      ("TLB_direct",@{typ "state \<Rightarrow> (TLBEntry option)"},
                                       var_w("b",8),@{theory}),var("state",qTy)),
                                 [(mop(Some,var("e",@{typ TLBEntry})),
                                   tp[ite(bop(And,
                                              bop(And,
                                                  eq(call
                                                       ("TLBEntry.R",(Word_Lib.mk_wordT 2),
                                                        var("e",@{typ TLBEntry}),@{theory}),
                                                     var_w("r",2)),
                                                  bop(Or,
                                                      call
                                                        ("TLBEntry.G",HOLogic.boolT,
                                                         var("e",@{typ TLBEntry}),@{theory}),
                                                      eq(call
                                                           ("TLBEntry.ASID",w8,
                                                            var("e",@{typ TLBEntry}),@{theory}),
                                                         call
                                                           ("EntryHi.ASID",w8,
                                                            call
                                                              ("CP0.EntryHi",@{typ EntryHi},
                                                               apply
                                                                 (const
                                                                    ("CP0",
                                                                     @{typ
                                                                     "state \<Rightarrow> CP0"},
                                                                     @{theory}),var("state",qTy)),
                                                               @{theory}),@{theory})))),
                                              let'
                                                (var_w("nmask",27),
                                                 mop(BNot,
                                                     mop(Cast (Word_Lib.mk_wordT 27),
                                                         call
                                                           ("TLBEntry.Mask",(Word_Lib.mk_wordT 12),
                                                            var("e",@{typ TLBEntry}),@{theory}))),
                                                 eq(bop(BAnd,
                                                        call
                                                          ("TLBEntry.VPN2",(Word_Lib.mk_wordT 27),
                                                           var("e",@{typ TLBEntry}),@{theory}),
                                                        var_w("nmask",27)),
                                                    bop(BAnd,var_w("vpn2",27),var_w("nmask",27))))),
                                          ll[tp[ite(bop(Le,
                                                        const
                                                          ("TLBAssocEntries",HOLogic.natT,@{theory}),
                                                        mop(Cast HOLogic.natT,var_w("b",8))),
                                                    mop(Cast (Word_Lib.mk_wordT 9),var_w("b",8)),
                                                    bop(Add,
                                                        mop(Cast (Word_Lib.mk_wordT 9),
                                                            const
                                                              ("TLBDirectEntries",HOLogic.natT,
                                                               @{theory})),
                                                        mop(Cast (Word_Lib.mk_wordT 9),var_w("b",8)))),
                                                var("e",@{typ TLBEntry})]],
                                          var("s0",@{typ "(9 word \<times> TLBEntry) list"})),
                                      var("state",qTy)]),
                                  (var_a(@{typ "TLBEntry option"}),
                                   tp[var("s0",@{typ "(9 word \<times> TLBEntry) list"}),
                                      var("state",qTy)])],@{context})),
                           tp[var("s0",@{typ "(9 word \<times> TLBEntry) list"}),var("state",qTy)]))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalTLBException_internal",
   close
     (tp[var_w("asid",8),var_w("vAddr",64)],
      close
        (var("state",qTy),
         let'
           (var_w("r",2),ex(var_w("vAddr",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
            let'
              (var_w("vpn2",27),ex(var_w("vAddr",64),ln 39,ln 13,(Word_Lib.mk_wordT 27)),
               let'
                 (tp[var("v",@{typ CP0}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.BadVAddr",
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),var_w("vAddr",64)],@{theory}),@{theory}),
                        var("state",qTy)),
                     tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                        var("s0",qTy)]),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.EntryHi",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("EntryHi.R",
                                       tp[call
                                            ("CP0.EntryHi",@{typ EntryHi},var("v",@{typ CP0}),
                                             @{theory}),var_w("r",2)],@{theory})],@{theory}),
                              @{theory}),var("s",qTy)),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     let'
                       (tp[var("v",@{typ CP0}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'CP0",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("CP0.EntryHi",
                                    tp[var("v",@{typ CP0}),
                                       rupd
                                         ("EntryHi.VPN2",
                                          tp[call
                                               ("CP0.EntryHi",@{typ EntryHi},var("v",@{typ CP0}),
                                                @{theory}),var_w("vpn2",27)],@{theory})],@{theory}),
                                 @{theory}),var("s",qTy)),
                           tp[apply
                                (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ CP0}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'CP0",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("CP0.EntryHi",
                                       tp[var("v",@{typ CP0}),
                                          rupd
                                            ("EntryHi.ASID",
                                             tp[call
                                                  ("CP0.EntryHi",@{typ EntryHi},var("v",@{typ CP0}),
                                                   @{theory}),var_w("asid",8)],@{theory})],@{theory}),
                                    @{theory}),var("s",qTy)),
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ CP0}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'CP0",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("CP0.XContext",
                                          tp[var("v",@{typ CP0}),
                                             rupd
                                               ("XContext.R",
                                                tp[call
                                                     ("CP0.XContext",@{typ XContext},
                                                      var("v",@{typ CP0}),@{theory}),var_w("r",2)],
                                                @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                 tp[apply
                                      (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              let'
                                (tp[var("v",@{typ CP0}),var("s",qTy)],
                                 let'
                                   (var("s0",qTy),
                                    apply
                                      (call
                                         ("write'CP0",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("CP0.XContext",
                                             tp[var("v",@{typ CP0}),
                                                rupd
                                                  ("XContext.BadVPN2",
                                                   tp[call
                                                        ("CP0.XContext",@{typ XContext},
                                                         var("v",@{typ CP0}),@{theory}),
                                                      var_w("vpn2",27)],@{theory})],@{theory}),
                                          @{theory}),var("s",qTy)),
                                    tp[apply
                                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                          var("s0",qTy)),var("s0",qTy)]),
                                 apply
                                   (call
                                      ("write'CP0",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("CP0.Context",
                                          tp[var("v",@{typ CP0}),
                                             rupd
                                               ("Context.BadVPN2",
                                                tp[call
                                                     ("CP0.Context",@{typ Context},
                                                      var("v",@{typ CP0}),@{theory}),
                                                   ex(var_w("vAddr",64),ln 31,ln 13,
                                                      (Word_Lib.mk_wordT 19))],@{theory})],@{theory}),
                                       @{theory}),var("s",qTy)))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalTLBException",
   close
     (tp[var("e",@{typ ExceptionType}),var_w("asid",8),var_w("vAddr",64)],
      close
        (var("state",qTy),
         let'
           (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
            apply
              (call
                 ("next_unknown",
                  @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                  ls"tlb-translation",@{theory}),
               apply
                 (call
                    ("SignalException",@{typ "state \<Rightarrow> state"},
                     var("e",@{typ ExceptionType}),@{theory}),
                  apply
                    (call
                       ("SignalTLBException_internal",@{typ "state \<Rightarrow> state"},
                        tp[var_w("asid",8),var_w("vAddr",64)],@{theory}),var("state",qTy)))),
            tp[apply
                 (lx(@{typ "(nat \<times> string) \<Rightarrow> (40 word \<times> 3 word)"}),
                  var("v",@{typ "nat \<times> string"})),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CheckSegment",
   close
     (var_w("vAddr",64),
      close
        (var("state",qTy),
         itb([(apply(const("UserMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy)),
               tp[lo(@{typ "40 word \<times> 3 word"}),
                  bop(Ult,var_w("vAddr",64),lw(1099511627776,64))]),
              (apply
                 (const("SupervisorMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                  var("state",qTy)),
               tp[lo(@{typ "40 word \<times> 3 word"}),
                  bop(Or,bop(Ult,var_w("vAddr",64),lw(1099511627776,64)),
                      bop(Or,
                          bop(And,bop(Ule,lw(4611686018427387904,64),var_w("vAddr",64)),
                              bop(Ult,var_w("vAddr",64),lw(4611687117939015680,64))),
                          bop(And,bop(Ule,lw(18446744072635809792,64),var_w("vAddr",64)),
                              bop(Ult,var_w("vAddr",64),lw(18446744073172680704,64)))))]),
              (bop(Ult,var_w("vAddr",64),lw(13835058055282163712,64)),
               itb([(bop(Ult,var_w("vAddr",64),lw(4611686018427387904,64)),
                     tp[lo(@{typ "40 word \<times> 3 word"}),
                        bop(Ult,var_w("vAddr",64),lw(1099511627776,64))]),
                    (bop(Ule,lw(9223372036854775808,64),var_w("vAddr",64)),
                     tp[mop(Some,
                            tp[ex(var_w("vAddr",64),ln 39,ln 0,(Word_Lib.mk_wordT 40)),
                               ex(var_w("vAddr",64),ln 61,ln 59,(Word_Lib.mk_wordT 3))]),
                        eq(ex(var_w("vAddr",64),ln 58,ln 40,(Word_Lib.mk_wordT 19)),lw(0,19))])],
                   tp[lo(@{typ "40 word \<times> 3 word"}),
                      bop(Ult,var_w("vAddr",64),lw(4611687117939015680,64))])),
              (bop(Ult,var_w("vAddr",64),lw(18446744072098938880,64)),
               ite(bop(Ule,lw(18446744071562067968,64),var_w("vAddr",64)),
                   tp[mop(Some,
                          tp[bop(Sub,ex(var_w("vAddr",64),ln 39,ln 0,(Word_Lib.mk_wordT 40)),
                                 lw(1097364144128,40)),
                             call
                               ("ConfigRegister.K0",(Word_Lib.mk_wordT 3),
                                call
                                  ("CP0.Config",@{typ ConfigRegister},
                                   apply
                                     (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                      var("state",qTy)),@{theory}),@{theory})]),lt],
                   tp[lo(@{typ "40 word \<times> 3 word"}),
                      bop(Ult,var_w("vAddr",64),lw(13835059152646307840,64))])),
              (bop(Ult,var_w("vAddr",64),lw(18446744072635809792,64)),
               tp[mop(Some,
                      tp[bop(Sub,ex(var_w("vAddr",64),ln 39,ln 0,(Word_Lib.mk_wordT 40)),
                             lw(1097901015040,40)),lw(2,3)]),lt])],
             tp[lo(@{typ "40 word \<times> 3 word"}),
                bop(Ule,lw(18446744072635809792,64),var_w("vAddr",64))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("checkMask",
   close
     (var_w("mask",12),
      itb([(eq(var_w("mask",12),lw(0,12)),mop(Some,ln 12)),
           (eq(var_w("mask",12),lw(3,12)),mop(Some,ln 14)),
           (eq(var_w("mask",12),lw(15,12)),mop(Some,ln 16)),
           (eq(var_w("mask",12),lw(63,12)),mop(Some,ln 18)),
           (eq(var_w("mask",12),lw(255,12)),mop(Some,ln 20)),
           (eq(var_w("mask",12),lw(1023,12)),mop(Some,ln 22)),
           (eq(var_w("mask",12),lw(4095,12)),mop(Some,ln 24))],lo HOLogic.natT)))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("check_cca",
   close
     (var_w("cca",3),
      close
        (var("state",qTy),
         ite(bop(In,var_w("cca",3),sl[lw(0,3),lw(1,3),lw(7,3)]),
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.UNPREDICTABLE",@{typ exception},
                          cc[ls"CCA ",mop(Cast(@{typ string}),var_w("cca",3)),ls" Reserved"],
                          @{theory}),@{theory}),var("state",qTy))),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("AddressTranslation",
   close
     (tp[var_w("vAddr",64),var("AccessType",@{typ AccessType})],
      close
        (var("state",qTy),
         let'
           (tp[var("unmapped",@{typ "(40 word \<times> 3 word) option"}),var_b"valid"],
            apply
              (call
                 ("CheckSegment",
                  @{typ "state \<Rightarrow> (((40 word \<times> 3 word) option) \<times> bool)"},
                  var_w("vAddr",64),@{theory}),var("state",qTy)),
            ite(var_b"valid",
                cs(var("unmapped",@{typ "(40 word \<times> 3 word) option"}),
                   [(mop(Some,tp[var_w("pAddr",40),var_w("cca",3)]),
                     tp[tp[var_w("pAddr",40),var_w("cca",3),lf,lf],
                        apply
                          (call
                             ("check_cca",@{typ "state \<Rightarrow> state"},var_w("cca",3),
                              @{theory}),var("state",qTy))]),
                    (lo(@{typ "40 word \<times> 3 word"}),
                     cs(apply
                          (call
                             ("LookupTLB",
                              @{typ "state \<Rightarrow> ((9 word \<times> TLBEntry) list)"},
                              tp[ex(var_w("vAddr",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
                                 ex(var_w("vAddr",64),ln 39,ln 13,(Word_Lib.mk_wordT 27))],@{theory}),
                           var("state",qTy)),
                        [(lnl(@{typ "9 word \<times> TLBEntry"}),
                          let'
                            (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                             apply
                               (call
                                  ("next_unknown",
                                   @{typ
                                   "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                                   ls"tlb-translation",@{theory}),
                                mop(Snd,
                                    apply
                                      (call
                                         ("SignalTLBException",
                                          @{typ
                                          "state \<Rightarrow>
                                           ((40 word \<times> 3 word) \<times> state)"},
                                          tp[ite(eq(var("AccessType",@{typ AccessType}),
                                                    lc("LOAD","AccessType",@{theory})),
                                                 lc("XTLBRefillL","ExceptionType",@{theory}),
                                                 lc("XTLBRefillS","ExceptionType",@{theory})),
                                             call
                                               ("EntryHi.ASID",w8,
                                                call
                                                  ("CP0.EntryHi",@{typ EntryHi},
                                                   apply
                                                     (const
                                                        ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                         @{theory}),var("state",qTy)),@{theory}),
                                                @{theory}),var_w("vAddr",64)],@{theory}),
                                       var("state",qTy)))),
                             tp[apply
                                  (lx(@{typ
                                      "(nat \<times> string) \<Rightarrow>
                                       (40 word \<times> 3 word \<times> bool \<times> bool)"}),
                                   var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                         (ll[tp[var_a (Word_Lib.mk_wordT 9),var("e",@{typ TLBEntry})]],
                          cs(call
                               ("checkMask",@{typ "nat option"},
                                call
                                  ("TLBEntry.Mask",(Word_Lib.mk_wordT 12),var("e",@{typ TLBEntry}),
                                   @{theory}),@{theory}),
                             [(mop(Some,var_n"EvenOddBit"),
                               let'
                                 (tp[var_b"S",var_b"L",var_w("PFN",28),var_w("C",3),var_b"D",
                                     var_b"V"],
                                  ite(bop(Bit,var_w("vAddr",64),var_n"EvenOddBit"),
                                      tp[call
                                           ("TLBEntry.S1",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.L1",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.PFN1",(Word_Lib.mk_wordT 28),
                                            var("e",@{typ TLBEntry}),@{theory}),
                                         call
                                           ("TLBEntry.C1",(Word_Lib.mk_wordT 3),
                                            var("e",@{typ TLBEntry}),@{theory}),
                                         call
                                           ("TLBEntry.D1",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.V1",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory})],
                                      tp[call
                                           ("TLBEntry.S0",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.L0",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.PFN0",(Word_Lib.mk_wordT 28),
                                            var("e",@{typ TLBEntry}),@{theory}),
                                         call
                                           ("TLBEntry.C0",(Word_Lib.mk_wordT 3),
                                            var("e",@{typ TLBEntry}),@{theory}),
                                         call
                                           ("TLBEntry.D0",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory}),
                                         call
                                           ("TLBEntry.V0",HOLogic.boolT,var("e",@{typ TLBEntry}),
                                            @{theory})]),
                                  ite(var_b"V",
                                      ite(bop(And,mop(Not,var_b"D"),
                                              eq(var("AccessType",@{typ AccessType}),
                                                 lc("STORE","AccessType",@{theory}))),
                                          let'
                                            (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                                             apply
                                               (call
                                                  ("next_unknown",
                                                   @{typ
                                                   "state \<Rightarrow>
                                                    ((nat \<times> string) \<times> state)"},
                                                   ls"tlb-translation",@{theory}),
                                                mop(Snd,
                                                    apply
                                                      (call
                                                         ("SignalTLBException",
                                                          @{typ
                                                          "state \<Rightarrow>
                                                           ((40 word \<times> 3 word) \<times> state)"},
                                                          tp[lc("Mod","ExceptionType",@{theory}),
                                                             call
                                                               ("TLBEntry.ASID",w8,
                                                                var("e",@{typ TLBEntry}),@{theory}),
                                                             var_w("vAddr",64)],@{theory}),
                                                       var("state",qTy)))),
                                             tp[apply
                                                  (lx(@{typ
                                                      "(nat \<times> string) \<Rightarrow>
                                                       (40 word \<times>
                                                        3 word \<times> bool \<times> bool)"}),
                                                   var("v",@{typ "nat \<times> string"})),
                                                var("s",qTy)]),
                                          tp[tp[bop(BOr,
                                                    bop(Lsl,
                                                        mop(Cast (Word_Lib.mk_wordT 40),
                                                            bop(BAnd,var_w("PFN",28),
                                                                cc[lw(65535,16),
                                                                   mop(BNot,
                                                                       call
                                                                         ("TLBEntry.Mask",
                                                                          (Word_Lib.mk_wordT 12),
                                                                          var("e",@{typ TLBEntry}),
                                                                          @{theory}))])),ln 12),
                                                    mop(Cast (Word_Lib.mk_wordT 40),
                                                        bop(BAnd,var_w("vAddr",64),
                                                            mop(Cast w64,
                                                                cc[call
                                                                     ("TLBEntry.Mask",
                                                                      (Word_Lib.mk_wordT 12),
                                                                      var("e",@{typ TLBEntry}),
                                                                      @{theory}),lw(4095,12)])))),
                                                var_w("C",3),var_b"S",var_b"L"],
                                             apply
                                               (call
                                                  ("check_cca",@{typ "state \<Rightarrow> state"},
                                                   var_w("C",3),@{theory}),var("state",qTy))]),
                                      let'
                                        (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                                         apply
                                           (call
                                              ("next_unknown",
                                               @{typ
                                               "state \<Rightarrow>
                                                ((nat \<times> string) \<times> state)"},
                                               ls"tlb-translation",@{theory}),
                                            mop(Snd,
                                                apply
                                                  (call
                                                     ("SignalTLBException",
                                                      @{typ
                                                      "state \<Rightarrow>
                                                       ((40 word \<times> 3 word) \<times> state)"},
                                                      tp[ite(eq(var("AccessType",@{typ AccessType}),
                                                                lc("LOAD","AccessType",@{theory})),
                                                             lc("TLBL","ExceptionType",@{theory}),
                                                             lc("TLBS","ExceptionType",@{theory})),
                                                         call
                                                           ("TLBEntry.ASID",w8,
                                                            var("e",@{typ TLBEntry}),@{theory}),
                                                         var_w("vAddr",64)],@{theory}),
                                                   var("state",qTy)))),
                                         tp[apply
                                              (lx(@{typ
                                                  "(nat \<times> string) \<Rightarrow>
                                                   (40 word \<times>
                                                    3 word \<times> bool \<times> bool)"}),
                                               var("v",@{typ "nat \<times> string"})),var("s",qTy)])))),
                              (var_a(@{typ "nat option"}),
                               apply
                                 (call
                                    ("raise'exception",
                                     @{typ
                                     "state \<Rightarrow>
                                      ((40 word \<times> 3 word \<times> bool \<times> bool) \<times>
                                       state)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"TLB: bad mask",@{theory}),@{theory}),var("state",qTy)))],
                             @{context})),
                         (var_a(@{typ "(9 word \<times> TLBEntry) list"}),
                          apply
                            (call
                               ("raise'exception",
                                @{typ
                                "state \<Rightarrow>
                                 ((40 word \<times> 3 word \<times> bool \<times> bool) \<times>
                                  state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},
                                   ls"TLB: multiple matches",@{theory}),@{theory}),var("state",qTy)))],
                        @{context}))],@{context}),
                let'
                  (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                   apply
                     (call
                        ("next_unknown",
                         @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                         ls"tlb-translation",@{theory}),
                      apply
                        (call
                           ("SignalException",@{typ "state \<Rightarrow> state"},
                            ite(eq(var("AccessType",@{typ AccessType}),
                                   lc("LOAD","AccessType",@{theory})),
                                lc("AdEL","ExceptionType",@{theory}),
                                lc("AdES","ExceptionType",@{theory})),@{theory}),
                         apply
                           (call
                              ("write'CP0",@{typ "state \<Rightarrow> state"},
                               rupd
                                 ("CP0.BadVAddr",
                                  tp[apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("state",qTy)),
                                     bop(Add,
                                         call
                                           ("getBase",w64,
                                            apply
                                              (const
                                                 ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                  @{theory}),var("state",qTy)),@{theory}),
                                         var_w("vAddr",64))],@{theory}),@{theory}),var("state",qTy)))),
                   tp[apply
                        (lx(@{typ
                            "(nat \<times> string) \<Rightarrow>
                             (40 word \<times> 3 word \<times> bool \<times> bool)"}),
                         var("v",@{typ "nat \<times> string"})),var("s",qTy)]))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("tlbTryTranslation",
   close
     (var_w("vAddr",64),
      close
        (var("state",qTy),
         let'
           (tp[var("r",@{typ "40 word option"}),var("s1",@{typ "(40 word option) \<times> state"})],
            let'
              (var("s0",@{typ "40 word option"}),lo (Word_Lib.mk_wordT 40),
               let'
                 (tp[var("unmapped",@{typ "(40 word \<times> 3 word) option"}),var_b"valid"],
                  apply
                    (call
                       ("CheckSegment",
                        @{typ
                        "state \<Rightarrow> (((40 word \<times> 3 word) option) \<times> bool)"},
                        var_w("vAddr",64),@{theory}),var("state",qTy)),
                  let'
                    (var("s",@{typ "(40 word option) \<times> state"}),
                     ite(var_b"valid",
                         cs(var("unmapped",@{typ "(40 word \<times> 3 word) option"}),
                            [(mop(Some,tp[var_w("pAddr",40),var_w("cca",3)]),
                              tp[mop(Some,var_w("pAddr",40)),var("state",qTy)]),
                             (lo(@{typ "40 word \<times> 3 word"}),
                              cs(apply
                                   (call
                                      ("LookupTLB",
                                       @{typ
                                       "state \<Rightarrow> ((9 word \<times> TLBEntry) list)"},
                                       tp[ex(var_w("vAddr",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
                                          ex(var_w("vAddr",64),ln 39,ln 13,(Word_Lib.mk_wordT 27))],
                                       @{theory}),var("state",qTy)),
                                 [(ll[tp[var_a (Word_Lib.mk_wordT 9),var("e",@{typ TLBEntry})]],
                                   cs(call
                                        ("checkMask",@{typ "nat option"},
                                         call
                                           ("TLBEntry.Mask",(Word_Lib.mk_wordT 12),
                                            var("e",@{typ TLBEntry}),@{theory}),@{theory}),
                                      [(mop(Some,var_n"EvenOddBit"),
                                        let'
                                          (tp[var_a HOLogic.boolT,var_a HOLogic.boolT,
                                              var_w("PFN",28),var_a (Word_Lib.mk_wordT 3),
                                              var_a HOLogic.boolT,var_b"V"],
                                           ite(bop(Bit,var_w("vAddr",64),var_n"EvenOddBit"),
                                               tp[call
                                                    ("TLBEntry.S1",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.L1",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.PFN1",(Word_Lib.mk_wordT 28),
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.C1",(Word_Lib.mk_wordT 3),
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.D1",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.V1",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory})],
                                               tp[call
                                                    ("TLBEntry.S0",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.L0",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.PFN0",(Word_Lib.mk_wordT 28),
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.C0",(Word_Lib.mk_wordT 3),
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.D0",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory}),
                                                  call
                                                    ("TLBEntry.V0",HOLogic.boolT,
                                                     var("e",@{typ TLBEntry}),@{theory})]),
                                           tp[ite(var_b"V",
                                                  mop(Some,
                                                      bop(BOr,
                                                          bop(Lsl,
                                                              mop(Cast (Word_Lib.mk_wordT 40),
                                                                  bop(BAnd,var_w("PFN",28),
                                                                      cc[lw(65535,16),
                                                                         mop(BNot,
                                                                             call
                                                                               ("TLBEntry.Mask",
                                                                                (Word_Lib.mk_wordT 12),
                                                                                var("e",
                                                                                    @{typ TLBEntry}),
                                                                                @{theory}))])),ln 12),
                                                          mop(Cast (Word_Lib.mk_wordT 40),
                                                              bop(BAnd,var_w("vAddr",64),
                                                                  mop(Cast w64,
                                                                      cc[call
                                                                           ("TLBEntry.Mask",
                                                                            (Word_Lib.mk_wordT 12),
                                                                            var("e",@{typ TLBEntry}),
                                                                            @{theory}),lw(4095,12)]))))),
                                                  var("s0",@{typ "40 word option"})),
                                              var("state",qTy)])),
                                       (var_a(@{typ "nat option"}),
                                        tp[var("s0",@{typ "40 word option"}),
                                           mop(Snd,
                                               apply
                                                 (call
                                                    ("raise'exception",
                                                     @{typ
                                                     "state \<Rightarrow> (unit \<times> state)"},
                                                     call
                                                       ("exception.UNPREDICTABLE",@{typ exception},
                                                        ls"TLB: bad mask",@{theory}),@{theory}),
                                                  var("state",qTy)))])],@{context})),
                                  (var_a(@{typ "(9 word \<times> TLBEntry) list"}),
                                   tp[var("s0",@{typ "40 word option"}),var("state",qTy)])],
                                 @{context}))],@{context}),
                         tp[var("s0",@{typ "40 word option"}),var("state",qTy)]),
                     tp[mop(Fst,var("s",@{typ "(40 word option) \<times> state"})),
                        var("s",@{typ "(40 word option) \<times> state"})]))),
            tp[var("r",@{typ "40 word option"}),
               mop(Snd,var("s1",@{typ "(40 word option) \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CP0TLBEntry",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("v",@{typ EntryHi}),
            call
              ("CP0.EntryHi",@{typ EntryHi},
               apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
               @{theory}),
            let'
              (var("v0",@{typ EntryLo}),
               call
                 ("CP0.EntryLo1",@{typ EntryLo},
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  @{theory}),
               let'
                 (var("v1",@{typ EntryLo}),
                  call
                    ("CP0.EntryLo0",@{typ EntryLo},
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),
                  rupd
                    ("TLBEntry.V0",
                     tp[rupd
                          ("TLBEntry.D0",
                           tp[rupd
                                ("TLBEntry.C0",
                                 tp[rupd
                                      ("TLBEntry.PFN0",
                                       tp[rupd
                                            ("TLBEntry.L0",
                                             tp[rupd
                                                  ("TLBEntry.S0",
                                                   tp[rupd
                                                        ("TLBEntry.G",
                                                         tp[rupd
                                                              ("TLBEntry.V1",
                                                               tp[rupd
                                                                    ("TLBEntry.D1",
                                                                     tp[rupd
                                                                          ("TLBEntry.C1",
                                                                           tp[rupd
                                                                                ("TLBEntry.PFN1",
                                                                                 tp[rupd
                                                                                      ("TLBEntry.L1",
                                                                                       tp[rupd
                                                                                            ("TLBEntry.S1",
                                                                                             tp[rupd
                                                                                                  ("TLBEntry.ASID",
                                                                                                   tp[rupd
                                                                                                        ("TLBEntry.VPN2",
                                                                                                         tp[rupd
                                                                                                              ("TLBEntry.R",
                                                                                                               tp[rupd
                                                                                                                    ("TLBEntry.Mask",
                                                                                                                     tp[lx @{typ TLBEntry},
                                                                                                                        call
                                                                                                                          ("PageMask.Mask",
                                                                                                                           (Word_Lib.mk_wordT 12),
                                                                                                                           call
                                                                                                                             ("CP0.PageMask",
                                                                                                                              @{typ PageMask},
                                                                                                                              apply
                                                                                                                                (const
                                                                                                                                   ("CP0",
                                                                                                                                    @{typ
                                                                                                                                    "state \<Rightarrow>
                                                                                                                                     CP0"},
                                                                                                                                    @{theory}),
                                                                                                                                 var("state",
                                                                                                                                     qTy)),
                                                                                                                              @{theory}),
                                                                                                                           @{theory})],
                                                                                                                     @{theory}),
                                                                                                                  call
                                                                                                                    ("EntryHi.R",
                                                                                                                     (Word_Lib.mk_wordT 2),
                                                                                                                     var("v",
                                                                                                                         @{typ EntryHi}),
                                                                                                                     @{theory})],
                                                                                                               @{theory}),
                                                                                                            call
                                                                                                              ("EntryHi.VPN2",
                                                                                                               (Word_Lib.mk_wordT 27),
                                                                                                               var("v",
                                                                                                                   @{typ EntryHi}),
                                                                                                               @{theory})],
                                                                                                         @{theory}),
                                                                                                      call
                                                                                                        ("EntryHi.ASID",
                                                                                                         w8,
                                                                                                         var("v",
                                                                                                             @{typ EntryHi}),
                                                                                                         @{theory})],
                                                                                                   @{theory}),
                                                                                                call
                                                                                                  ("EntryLo.S",
                                                                                                   HOLogic.boolT,
                                                                                                   var("v0",
                                                                                                       @{typ EntryLo}),
                                                                                                   @{theory})],
                                                                                             @{theory}),
                                                                                          call
                                                                                            ("EntryLo.L",
                                                                                             HOLogic.boolT,
                                                                                             var("v0",
                                                                                                 @{typ EntryLo}),
                                                                                             @{theory})],
                                                                                       @{theory}),
                                                                                    call
                                                                                      ("EntryLo.PFN",
                                                                                       (Word_Lib.mk_wordT 28),
                                                                                       var("v0",
                                                                                           @{typ EntryLo}),
                                                                                       @{theory})],
                                                                                 @{theory}),
                                                                              call
                                                                                ("EntryLo.C",
                                                                                 (Word_Lib.mk_wordT 3),
                                                                                 var("v0",
                                                                                     @{typ EntryLo}),
                                                                                 @{theory})],
                                                                           @{theory}),
                                                                        call
                                                                          ("EntryLo.D",
                                                                           HOLogic.boolT,
                                                                           var("v0",@{typ EntryLo}),
                                                                           @{theory})],@{theory}),
                                                                  call
                                                                    ("EntryLo.V",HOLogic.boolT,
                                                                     var("v0",@{typ EntryLo}),
                                                                     @{theory})],@{theory}),
                                                            bop(And,
                                                                call
                                                                  ("EntryLo.G",HOLogic.boolT,
                                                                   var("v0",@{typ EntryLo}),
                                                                   @{theory}),
                                                                call
                                                                  ("EntryLo.G",HOLogic.boolT,
                                                                   var("v1",@{typ EntryLo}),
                                                                   @{theory}))],@{theory}),
                                                      call
                                                        ("EntryLo.S",HOLogic.boolT,
                                                         var("v1",@{typ EntryLo}),@{theory})],
                                                   @{theory}),
                                                call
                                                  ("EntryLo.L",HOLogic.boolT,
                                                   var("v1",@{typ EntryLo}),@{theory})],@{theory}),
                                          call
                                            ("EntryLo.PFN",(Word_Lib.mk_wordT 28),
                                             var("v1",@{typ EntryLo}),@{theory})],@{theory}),
                                    call
                                      ("EntryLo.C",(Word_Lib.mk_wordT 3),var("v1",@{typ EntryLo}),
                                       @{theory})],@{theory}),
                              call("EntryLo.D",HOLogic.boolT,var("v1",@{typ EntryLo}),@{theory})],
                           @{theory}),
                        call("EntryLo.V",HOLogic.boolT,var("v1",@{typ EntryLo}),@{theory})],
                     @{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalTLBCapException",
   close
     (tp[var("capException",@{typ CapExceptionType}),var_w("asid",8),var_w("vAddr",64)],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("next_unknown",
                   @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                   ls"tlb-cap-exception",@{theory}),
                apply
                  (call
                     ("SignalCapException_noReg",@{typ "state \<Rightarrow> state"},
                      var("capException",@{typ CapExceptionType}),@{theory}),
                   apply
                     (call
                        ("SignalTLBException_internal",@{typ "state \<Rightarrow> state"},
                         tp[var_w("asid",8),var_w("vAddr",64)],@{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBP",
   close
     (var("state",qTy),
      ite(bop(And,
              mop(Not,
                  call
                    ("StatusRegister.CU0",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory})),
              mop(Not,
                  apply
                    (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                     var("state",qTy)))),
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
          cs(apply
               (call
                  ("LookupTLB",@{typ "state \<Rightarrow> ((9 word \<times> TLBEntry) list)"},
                   tp[call
                        ("EntryHi.R",(Word_Lib.mk_wordT 2),
                         call
                           ("CP0.EntryHi",@{typ EntryHi},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory}),
                      call
                        ("EntryHi.VPN2",(Word_Lib.mk_wordT 27),
                         call
                           ("CP0.EntryHi",@{typ EntryHi},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})],@{theory}),var("state",qTy)),
             [(lnl(@{typ "9 word \<times> TLBEntry"}),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.Index",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("Index.P",
                                       tp[call
                                            ("CP0.Index",@{typ Index},var("v",@{typ CP0}),@{theory}),
                                          lt],@{theory})],@{theory}),@{theory}),var("state",qTy)),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     let'
                       (tp[var("v0",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"tlb-index",@{theory}),var("s",qTy)),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.Index",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("Index.Index",
                                       tp[call
                                            ("CP0.Index",@{typ Index},var("v",@{typ CP0}),@{theory}),
                                          apply
                                            (lx(@{typ "(nat \<times> string) \<Rightarrow> 9 word"}),
                                             var("v0",@{typ "nat \<times> string"}))],@{theory})],
                                 @{theory}),@{theory}),var("s",qTy)))))),
              (ll[tp[var_w("i",9),var_a @{typ TLBEntry}]],
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.Index",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("Index.P",
                                       tp[call
                                            ("CP0.Index",@{typ Index},var("v",@{typ CP0}),@{theory}),
                                          lf],@{theory})],@{theory}),@{theory}),var("state",qTy)),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Index",
                              tp[var("v",@{typ CP0}),
                                 rupd
                                   ("Index.Index",
                                    tp[call("CP0.Index",@{typ Index},var("v",@{typ CP0}),@{theory}),
                                       var_w("i",9)],@{theory})],@{theory}),@{theory}),var("s",qTy))))),
              (var_a(@{typ "(9 word \<times> TLBEntry) list"}),
               mop(Snd,
                   apply
                     (call
                        ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},ls"TLB: multiple matches",
                            @{theory}),@{theory}),var("state",qTy))))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBR",
   close
     (var("state",qTy),
      ite(bop(And,
              mop(Not,
                  call
                    ("StatusRegister.CU0",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory})),
              mop(Not,
                  apply
                    (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                     var("state",qTy)))),
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
          let'
            (var_w("v",9),
             call
               ("Index.Index",(Word_Lib.mk_wordT 9),
                call
                  ("CP0.Index",@{typ Index},
                   apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                   @{theory}),@{theory}),
             cs(ite(bop(Ge,mop(Cast HOLogic.natT,var_w("v",9)),
                        const("TLBAssocEntries",HOLogic.natT,@{theory})),
                    apply
                      (call
                         ("TLB_direct",@{typ "state \<Rightarrow> (TLBEntry option)"},
                          ex(var_w("v",9),ln 7,ln 0,w8),@{theory}),var("state",qTy)),
                    apply
                      (call
                         ("TLB_assoc",@{typ "state \<Rightarrow> (TLBEntry option)"},
                          mop(Cast w4,var_w("v",9)),@{theory}),var("state",qTy))),
                [(mop(Some,var("e",@{typ TLBEntry})),
                  let'
                    (var("v",@{typ CP0}),
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     let'
                       (tp[var("v",@{typ CP0}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'CP0",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("CP0.PageMask",
                                    tp[var("v",@{typ CP0}),
                                       rupd
                                         ("PageMask.Mask",
                                          tp[call
                                               ("CP0.PageMask",@{typ PageMask},var("v",@{typ CP0}),
                                                @{theory}),
                                             call
                                               ("TLBEntry.Mask",(Word_Lib.mk_wordT 12),
                                                var("e",@{typ TLBEntry}),@{theory})],@{theory})],
                                    @{theory}),@{theory}),var("state",qTy)),
                           tp[apply
                                (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ CP0}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'CP0",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("CP0.EntryHi",
                                       tp[var("v",@{typ CP0}),
                                          rupd
                                            ("EntryHi.R",
                                             tp[call
                                                  ("CP0.EntryHi",@{typ EntryHi},var("v",@{typ CP0}),
                                                   @{theory}),
                                                call
                                                  ("TLBEntry.R",(Word_Lib.mk_wordT 2),
                                                   var("e",@{typ TLBEntry}),@{theory})],@{theory})],
                                       @{theory}),@{theory}),var("s",qTy)),
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ CP0}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'CP0",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("CP0.EntryHi",
                                          tp[var("v",@{typ CP0}),
                                             rupd
                                               ("EntryHi.VPN2",
                                                tp[call
                                                     ("CP0.EntryHi",@{typ EntryHi},
                                                      var("v",@{typ CP0}),@{theory}),
                                                   call
                                                     ("TLBEntry.VPN2",(Word_Lib.mk_wordT 27),
                                                      var("e",@{typ TLBEntry}),@{theory})],@{theory})],
                                          @{theory}),@{theory}),var("s",qTy)),
                                 tp[apply
                                      (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              let'
                                (tp[var("v",@{typ CP0}),var("s",qTy)],
                                 let'
                                   (var("s0",qTy),
                                    apply
                                      (call
                                         ("write'CP0",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("CP0.EntryHi",
                                             tp[var("v",@{typ CP0}),
                                                rupd
                                                  ("EntryHi.ASID",
                                                   tp[call
                                                        ("CP0.EntryHi",@{typ EntryHi},
                                                         var("v",@{typ CP0}),@{theory}),
                                                      call
                                                        ("TLBEntry.ASID",w8,
                                                         var("e",@{typ TLBEntry}),@{theory})],
                                                   @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                    tp[apply
                                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                          var("s0",qTy)),var("s0",qTy)]),
                                 let'
                                   (tp[var("v",@{typ CP0}),var("s",qTy)],
                                    let'
                                      (var("s0",qTy),
                                       apply
                                         (call
                                            ("write'CP0",@{typ "state \<Rightarrow> state"},
                                             rupd
                                               ("CP0.EntryLo1",
                                                tp[var("v",@{typ CP0}),
                                                   rupd
                                                     ("EntryLo.PFN",
                                                      tp[call
                                                           ("CP0.EntryLo1",@{typ EntryLo},
                                                            var("v",@{typ CP0}),@{theory}),
                                                         call
                                                           ("TLBEntry.PFN1",(Word_Lib.mk_wordT 28),
                                                            var("e",@{typ TLBEntry}),@{theory})],
                                                      @{theory})],@{theory}),@{theory}),var("s",qTy)),
                                       tp[apply
                                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                             var("s0",qTy)),var("s0",qTy)]),
                                    let'
                                      (tp[var("v",@{typ CP0}),var("s",qTy)],
                                       let'
                                         (var("s0",qTy),
                                          apply
                                            (call
                                               ("write'CP0",@{typ "state \<Rightarrow> state"},
                                                rupd
                                                  ("CP0.EntryLo1",
                                                   tp[var("v",@{typ CP0}),
                                                      rupd
                                                        ("EntryLo.C",
                                                         tp[call
                                                              ("CP0.EntryLo1",@{typ EntryLo},
                                                               var("v",@{typ CP0}),@{theory}),
                                                            call
                                                              ("TLBEntry.C1",(Word_Lib.mk_wordT 3),
                                                               var("e",@{typ TLBEntry}),@{theory})],
                                                         @{theory})],@{theory}),@{theory}),
                                             var("s",qTy)),
                                          tp[apply
                                               (const
                                                  ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                var("s0",qTy)),var("s0",qTy)]),
                                       let'
                                         (tp[var("v",@{typ CP0}),var("s",qTy)],
                                          let'
                                            (var("s0",qTy),
                                             apply
                                               (call
                                                  ("write'CP0",@{typ "state \<Rightarrow> state"},
                                                   rupd
                                                     ("CP0.EntryLo1",
                                                      tp[var("v",@{typ CP0}),
                                                         rupd
                                                           ("EntryLo.D",
                                                            tp[call
                                                                 ("CP0.EntryLo1",@{typ EntryLo},
                                                                  var("v",@{typ CP0}),@{theory}),
                                                               call
                                                                 ("TLBEntry.D1",HOLogic.boolT,
                                                                  var("e",@{typ TLBEntry}),@{theory})],
                                                            @{theory})],@{theory}),@{theory}),
                                                var("s",qTy)),
                                             tp[apply
                                                  (const
                                                     ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                      @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                          let'
                                            (tp[var("v",@{typ CP0}),var("s",qTy)],
                                             let'
                                               (var("s0",qTy),
                                                apply
                                                  (call
                                                     ("write'CP0",
                                                      @{typ "state \<Rightarrow> state"},
                                                      rupd
                                                        ("CP0.EntryLo1",
                                                         tp[var("v",@{typ CP0}),
                                                            rupd
                                                              ("EntryLo.V",
                                                               tp[call
                                                                    ("CP0.EntryLo1",@{typ EntryLo},
                                                                     var("v",@{typ CP0}),@{theory}),
                                                                  call
                                                                    ("TLBEntry.V1",HOLogic.boolT,
                                                                     var("e",@{typ TLBEntry}),
                                                                     @{theory})],@{theory})],
                                                         @{theory}),@{theory}),var("s",qTy)),
                                                tp[apply
                                                     (const
                                                        ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                         @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                             let'
                                               (tp[var("v",@{typ CP0}),var("s",qTy)],
                                                let'
                                                  (var("s0",qTy),
                                                   apply
                                                     (call
                                                        ("write'CP0",
                                                         @{typ "state \<Rightarrow> state"},
                                                         rupd
                                                           ("CP0.EntryLo1",
                                                            tp[var("v",@{typ CP0}),
                                                               rupd
                                                                 ("EntryLo.G",
                                                                  tp[call
                                                                       ("CP0.EntryLo1",
                                                                        @{typ EntryLo},
                                                                        var("v",@{typ CP0}),
                                                                        @{theory}),
                                                                     call
                                                                       ("TLBEntry.G",HOLogic.boolT,
                                                                        var("e",@{typ TLBEntry}),
                                                                        @{theory})],@{theory})],
                                                            @{theory}),@{theory}),var("s",qTy)),
                                                   tp[apply
                                                        (const
                                                           ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                            @{theory}),var("s0",qTy)),var("s0",qTy)]),
                                                let'
                                                  (tp[var("v",@{typ CP0}),var("s",qTy)],
                                                   let'
                                                     (var("s0",qTy),
                                                      apply
                                                        (call
                                                           ("write'CP0",
                                                            @{typ "state \<Rightarrow> state"},
                                                            rupd
                                                              ("CP0.EntryLo0",
                                                               tp[var("v",@{typ CP0}),
                                                                  rupd
                                                                    ("EntryLo.PFN",
                                                                     tp[call
                                                                          ("CP0.EntryLo0",
                                                                           @{typ EntryLo},
                                                                           var("v",@{typ CP0}),
                                                                           @{theory}),
                                                                        call
                                                                          ("TLBEntry.PFN0",
                                                                           (Word_Lib.mk_wordT 28),
                                                                           var("e",@{typ TLBEntry}),
                                                                           @{theory})],@{theory})],
                                                               @{theory}),@{theory}),var("s",qTy)),
                                                      tp[apply
                                                           (const
                                                              ("CP0",
                                                               @{typ "state \<Rightarrow> CP0"},
                                                               @{theory}),var("s0",qTy)),
                                                         var("s0",qTy)]),
                                                   let'
                                                     (tp[var("v",@{typ CP0}),var("s",qTy)],
                                                      let'
                                                        (var("s0",qTy),
                                                         apply
                                                           (call
                                                              ("write'CP0",
                                                               @{typ "state \<Rightarrow> state"},
                                                               rupd
                                                                 ("CP0.EntryLo0",
                                                                  tp[var("v",@{typ CP0}),
                                                                     rupd
                                                                       ("EntryLo.C",
                                                                        tp[call
                                                                             ("CP0.EntryLo0",
                                                                              @{typ EntryLo},
                                                                              var("v",@{typ CP0}),
                                                                              @{theory}),
                                                                           call
                                                                             ("TLBEntry.C0",
                                                                              (Word_Lib.mk_wordT 3),
                                                                              var("e",
                                                                                  @{typ TLBEntry}),
                                                                              @{theory})],@{theory})],
                                                                  @{theory}),@{theory}),var("s",qTy)),
                                                         tp[apply
                                                              (const
                                                                 ("CP0",
                                                                  @{typ "state \<Rightarrow> CP0"},
                                                                  @{theory}),var("s0",qTy)),
                                                            var("s0",qTy)]),
                                                      let'
                                                        (tp[var("v",@{typ CP0}),var("s",qTy)],
                                                         let'
                                                           (var("s0",qTy),
                                                            apply
                                                              (call
                                                                 ("write'CP0",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  rupd
                                                                    ("CP0.EntryLo0",
                                                                     tp[var("v",@{typ CP0}),
                                                                        rupd
                                                                          ("EntryLo.D",
                                                                           tp[call
                                                                                ("CP0.EntryLo0",
                                                                                 @{typ EntryLo},
                                                                                 var("v",@{typ CP0}),
                                                                                 @{theory}),
                                                                              call
                                                                                ("TLBEntry.D0",
                                                                                 HOLogic.boolT,
                                                                                 var("e",
                                                                                     @{typ TLBEntry}),
                                                                                 @{theory})],
                                                                           @{theory})],@{theory}),
                                                                  @{theory}),var("s",qTy)),
                                                            tp[apply
                                                                 (const
                                                                    ("CP0",
                                                                     @{typ
                                                                     "state \<Rightarrow> CP0"},
                                                                     @{theory}),var("s0",qTy)),
                                                               var("s0",qTy)]),
                                                         let'
                                                           (tp[var("v",@{typ CP0}),var("s",qTy)],
                                                            let'
                                                              (var("s0",qTy),
                                                               apply
                                                                 (call
                                                                    ("write'CP0",
                                                                     @{typ
                                                                     "state \<Rightarrow> state"},
                                                                     rupd
                                                                       ("CP0.EntryLo0",
                                                                        tp[var("v",@{typ CP0}),
                                                                           rupd
                                                                             ("EntryLo.V",
                                                                              tp[call
                                                                                   ("CP0.EntryLo0",
                                                                                    @{typ EntryLo},
                                                                                    var("v",
                                                                                        @{typ CP0}),
                                                                                    @{theory}),
                                                                                 call
                                                                                   ("TLBEntry.V0",
                                                                                    HOLogic.boolT,
                                                                                    var("e",
                                                                                        @{typ TLBEntry}),
                                                                                    @{theory})],
                                                                              @{theory})],@{theory}),
                                                                     @{theory}),var("s",qTy)),
                                                               tp[apply
                                                                    (const
                                                                       ("CP0",
                                                                        @{typ
                                                                        "state \<Rightarrow> CP0"},
                                                                        @{theory}),var("s0",qTy)),
                                                                  var("s0",qTy)]),
                                                            apply
                                                              (call
                                                                 ("write'CP0",
                                                                  @{typ "state \<Rightarrow> state"},
                                                                  rupd
                                                                    ("CP0.EntryLo0",
                                                                     tp[var("v",@{typ CP0}),
                                                                        rupd
                                                                          ("EntryLo.G",
                                                                           tp[call
                                                                                ("CP0.EntryLo0",
                                                                                 @{typ EntryLo},
                                                                                 var("v",@{typ CP0}),
                                                                                 @{theory}),
                                                                              call
                                                                                ("TLBEntry.G",
                                                                                 HOLogic.boolT,
                                                                                 var("e",
                                                                                     @{typ TLBEntry}),
                                                                                 @{theory})],
                                                                           @{theory})],@{theory}),
                                                                  @{theory}),var("s",qTy))))))))))))))))),
                 (var_a(@{typ "TLBEntry option"}),
                  mop(Snd,
                      apply
                        (call
                           ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            call
                              ("exception.UNPREDICTABLE",@{typ exception},
                               ls"TLB: reading from invalid entry",@{theory}),@{theory}),
                         var("state",qTy))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBWI",
   close
     (var("state",qTy),
      itb([(bop(And,
                mop(Not,
                    call
                      ("StatusRegister.CU0",HOLogic.boolT,
                       call
                         ("CP0.Status",@{typ StatusRegister},
                          apply
                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory})),
                mop(Not,
                    apply
                      (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("SignalException",@{typ "state \<Rightarrow> state"},
                  lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))),
           (mop(Not,
                mop(IsSome,
                    call
                      ("checkMask",@{typ "nat option"},
                       call
                         ("PageMask.Mask",(Word_Lib.mk_wordT 12),
                          call
                            ("CP0.PageMask",@{typ PageMask},
                             apply
                               (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                var("state",qTy)),@{theory}),@{theory}),@{theory}))),
            apply
              (call
                 ("SignalException",@{typ "state \<Rightarrow> state"},
                  lc("MCheck","ExceptionType",@{theory}),@{theory}),var("state",qTy))),
           (bop(Lt,
                mop(Cast HOLogic.natT,
                    call
                      ("Index.Index",(Word_Lib.mk_wordT 9),
                       call
                         ("CP0.Index",@{typ Index},
                          apply
                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory})),
                const("TLBAssocEntries",HOLogic.natT,@{theory})),
            apply
              (call
                 ("write'TLB_assoc",@{typ "state \<Rightarrow> state"},
                  tp[mop(Some,
                         apply
                           (call("CP0TLBEntry",@{typ "state \<Rightarrow> TLBEntry"},lu,@{theory}),
                            var("state",qTy))),
                     mop(Cast w4,
                         call
                           ("Index.Index",(Word_Lib.mk_wordT 9),
                            call
                              ("CP0.Index",@{typ Index},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory}))],@{theory}),
               var("state",qTy))),
           (bop(Lt,
                mop(Cast HOLogic.natT,
                    call
                      ("Index.Index",(Word_Lib.mk_wordT 9),
                       call
                         ("CP0.Index",@{typ Index},
                          apply
                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory})),
                const("TLBEntries",HOLogic.natT,@{theory})),
            apply
              (call
                 ("write'TLB_direct",@{typ "state \<Rightarrow> state"},
                  tp[mop(Some,
                         apply
                           (call("CP0TLBEntry",@{typ "state \<Rightarrow> TLBEntry"},lu,@{theory}),
                            var("state",qTy))),
                     ex(call
                          ("EntryHi.VPN2",(Word_Lib.mk_wordT 27),
                           call
                             ("CP0.EntryHi",@{typ EntryHi},
                              apply
                                (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                 var("state",qTy)),@{theory}),@{theory}),ln 7,ln 0,w8)],@{theory}),
               var("state",qTy)))],
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("MCheck","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBWR",
   close
     (var("state",qTy),
      itb([(bop(And,
                mop(Not,
                    call
                      ("StatusRegister.CU0",HOLogic.boolT,
                       call
                         ("CP0.Status",@{typ StatusRegister},
                          apply
                            (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                             var("state",qTy)),@{theory}),@{theory})),
                mop(Not,
                    apply
                      (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("SignalException",@{typ "state \<Rightarrow> state"},
                  lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))),
           (mop(Not,
                mop(IsSome,
                    call
                      ("checkMask",@{typ "nat option"},
                       call
                         ("PageMask.Mask",(Word_Lib.mk_wordT 12),
                          call
                            ("CP0.PageMask",@{typ PageMask},
                             apply
                               (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                var("state",qTy)),@{theory}),@{theory}),@{theory}))),
            apply
              (call
                 ("SignalException",@{typ "state \<Rightarrow> state"},
                  lc("MCheck","ExceptionType",@{theory}),@{theory}),var("state",qTy))),
           (call
              ("ConfigRegister6.LTLB",HOLogic.boolT,
               call
                 ("CP0.Config6",@{typ ConfigRegister6},
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  @{theory}),@{theory}),
            let'
              (var_w("v",8),
               ex(call
                    ("EntryHi.VPN2",(Word_Lib.mk_wordT 27),
                     call
                       ("CP0.EntryHi",@{typ EntryHi},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),ln 7,ln 0,w8),
               let'
                 (tp[var("v0",@{typ TLBEntry}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     cs(apply
                          (call
                             ("TLB_direct",@{typ "state \<Rightarrow> (TLBEntry option)"},
                              var_w("v",8),@{theory}),var("state",qTy)),
                        [(mop(Some,var("old",@{typ TLBEntry})),
                          apply
                            (call
                               ("write'TLB_assoc",@{typ "state \<Rightarrow> state"},
                                tp[mop(Some,var("old",@{typ TLBEntry})),
                                   mop(Cast w4,
                                       call
                                         ("Random.Random",w8,
                                          call
                                            ("CP0.Random",@{typ Random},
                                             apply
                                               (const
                                                  ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                var("state",qTy)),@{theory}),@{theory}))],@{theory}),
                             var("state",qTy))),(var_a(@{typ "TLBEntry option"}),var("state",qTy))],
                        @{context}),
                     tp[apply
                          (call("CP0TLBEntry",@{typ "state \<Rightarrow> TLBEntry"},lu,@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  apply
                    (call
                       ("write'TLB_direct",@{typ "state \<Rightarrow> state"},
                        tp[mop(Some,var("v0",@{typ TLBEntry})),var_w("v",8)],@{theory}),var("s",qTy)))))],
          apply
            (call
               ("write'TLB_assoc",@{typ "state \<Rightarrow> state"},
                tp[mop(Some,
                       apply
                         (call("CP0TLBEntry",@{typ "state \<Rightarrow> TLBEntry"},lu,@{theory}),
                          var("state",qTy))),
                   mop(Cast w4,
                       call
                         ("Random.Random",w8,
                          call
                            ("CP0.Random",@{typ Random},
                             apply
                               (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                var("state",qTy)),@{theory}),@{theory}))],@{theory}),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg_name",
   close
     (var_w("n",5),
      cc[ls"$",
         itb([(eq(var_w("n",5),lw(0,5)),ls"zero"),(eq(var_w("n",5),lw(1,5)),ls"at"),
              (eq(var_w("n",5),lw(2,5)),ls"v0"),(eq(var_w("n",5),lw(3,5)),ls"v1"),
              (eq(var_w("n",5),lw(4,5)),ls"a0"),(eq(var_w("n",5),lw(5,5)),ls"a1"),
              (eq(var_w("n",5),lw(6,5)),ls"a2"),(eq(var_w("n",5),lw(7,5)),ls"a3"),
              (eq(var_w("n",5),lw(8,5)),ls"t0"),(eq(var_w("n",5),lw(9,5)),ls"t1"),
              (eq(var_w("n",5),lw(10,5)),ls"t2"),(eq(var_w("n",5),lw(11,5)),ls"t3"),
              (eq(var_w("n",5),lw(12,5)),ls"t4"),(eq(var_w("n",5),lw(13,5)),ls"t5"),
              (eq(var_w("n",5),lw(14,5)),ls"t6"),(eq(var_w("n",5),lw(15,5)),ls"t7"),
              (eq(var_w("n",5),lw(16,5)),ls"s0"),(eq(var_w("n",5),lw(17,5)),ls"s1"),
              (eq(var_w("n",5),lw(18,5)),ls"s2"),(eq(var_w("n",5),lw(19,5)),ls"s3"),
              (eq(var_w("n",5),lw(20,5)),ls"s4"),(eq(var_w("n",5),lw(21,5)),ls"s5"),
              (eq(var_w("n",5),lw(22,5)),ls"s6"),(eq(var_w("n",5),lw(23,5)),ls"s7"),
              (eq(var_w("n",5),lw(24,5)),ls"t8"),(eq(var_w("n",5),lw(25,5)),ls"t9"),
              (eq(var_w("n",5),lw(26,5)),ls"k0"),(eq(var_w("n",5),lw(27,5)),ls"k1"),
              (eq(var_w("n",5),lw(28,5)),ls"gp"),(eq(var_w("n",5),lw(29,5)),ls"sp"),
              (eq(var_w("n",5),lw(30,5)),ls"fp"),(eq(var_w("n",5),lw(31,5)),ls"ra")],
             lx(@{typ string}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ihex",
   close
     (var("n",@{typ "'N::len word"}),
      cc[ite(bop(Ult,var("n",@{typ "'N::len word"}),ly(10,"N")),ls"",ls"0x"),
         mop(ToLower,mop(Cast(@{typ string}),var("n",@{typ "'N::len word"})))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1i",
   close
     (tp[var_s"s",var("n",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),
         call("ihex",@{typ string},var("n",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1ai",
   close
     (tp[var_s"s",var("n",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),
         call
           ("ihex",@{typ string},bop(Lsl,mop(Cast w32,var("n",@{typ "'N::len word"})),ln 2),
            @{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1lai",
   close
     (tp[var_s"s",var("n",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),
         call
           ("ihex",@{typ string},
            bop(Lsl,mop(Cast w32,bop(Add,var("n",@{typ "'N::len word"}),ly(1,"N"))),ln 2),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1r",
   close
     (tp[var_s"s",var_w("n",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),
         call("reg_name",@{typ string},var_w("n",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1ri",
   close
     (tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call("ihex",@{typ string},var("n",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1rai",
   close
     (tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call
           ("ihex",@{typ string},bop(Lsl,mop(Cast w32,var("n",@{typ "'N::len word"})),ln 2),
            @{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1rlai",
   close
     (tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call
           ("ihex",@{typ string},
            bop(Lsl,mop(Cast w32,bop(Add,var("n",@{typ "'N::len word"}),ly(1,"N"))),ln 2),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2r",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5)],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call("reg_name",@{typ string},var_w("r2",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2ri",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call("op2r",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5)],@{theory}),ls", ",
         call("ihex",@{typ string},var("n",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2rai",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call("op2r",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5)],@{theory}),ls", ",
         call
           ("ihex",@{typ string},bop(Lsl,mop(Cast w32,var("n",@{typ "'N::len word"})),ln 2),
            @{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2rlai",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call("op2r",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5)],@{theory}),ls", ",
         call
           ("ihex",@{typ string},
            bop(Lsl,mop(Cast w32,bop(Add,var("n",@{typ "'N::len word"}),ly(1,"N"))),ln 2),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op3r",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("r3",5)],
      cc[call("op2r",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5)],@{theory}),ls", ",
         call("reg_name",@{typ string},var_w("r3",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2roi",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call("cpr",@{typ string},var_w("r2",5),@{theory}),
         ite(eq(var("n",@{typ "'N::len word"}),ly(0,"N")),ls"",
             call("ihex",@{typ string},var("n",@{typ "'N::len word"}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("opmem",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call
           ("op1ri",@{typ string},tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
            @{theory}),ls"(",call("reg_name",@{typ string},var_w("r2",5),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("fcc",
   close(var_w("n",3),cc[ls", $fcc",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("n",3)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1fpr",
   close
     (tp[var_s"s",var_w("n",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),ls"$f",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("n",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op1fpri",
   close
     (tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
      cc[call("op1fpr",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call("ihex",@{typ string},var("n",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2fpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5)],
      cc[call("op1fpr",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",ls"$f",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r2",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2rfpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5)],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",ls"$f",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r2",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2rcfpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5)],
      cc[call("op1r",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", $",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r2",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op2ccfpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("n",3)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,cc[var_s"s",ls" "]]),
         ite(eq(var_w("n",3),lw(0,3)),ls"",
             cc[ls"$fcc",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("n",3))),ls", "]),
         cc[ls"$f",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r1",5)))],ls", ",ls"$f",
         mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r2",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op3fpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("r3",5)],
      cc[call("op2fpr",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5)],@{theory}),ls", ",
         ls"$f",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r3",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op4fpr",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("r3",5),var_w("r4",5)],
      cc[call
           ("op3fpr",@{typ string},tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("r3",5)],@{theory}),
         ls", ",ls"$f",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("r4",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("opfpmem",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var("n",@{typ "'N::len word"})],
      cc[call
           ("op1fpri",@{typ string},tp[var_s"s",var_w("r1",5),var("n",@{typ "'N::len word"})],
            @{theory}),ls"(",call("reg_name",@{typ string},var_w("r2",5),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("opfpmem2",
   close
     (tp[var_s"s",var_w("r1",5),var_w("r2",5),var_w("r3",5)],
      cc[call("op1fpr",@{typ string},tp[var_s"s",var_w("r1",5)],@{theory}),ls", ",
         call("reg_name",@{typ string},var_w("r3",5),@{theory}),ls"(",
         call("reg_name",@{typ string},var_w("r2",5),@{theory}),ls")"]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form1",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),var_w("function",6)],
      cc[lw(0,6),var_w("rs",5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),var_w("function",6)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form2",
   close
     (tp[var_w("rs",5),var_w("function",5),var_w("imm",16)],
      cc[lw(1,6),var_w("rs",5),var_w("function",5),var_w("imm",16)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form3",
   close
     (tp[var_w("function",5),var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      cc[lw(16,6),var_w("function",5),var_w("rt",5),var_w("rd",5),lw(0,8),var_w("sel",3)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form4",
   close
     (tp[var_w("function",6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],
      cc[var_w("function",6),var_w("rs",5),var_w("rt",5),var_w("imm",16)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form5",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),var_w("function",6)],
      cc[lw(28,6),var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),var_w("function",6)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("form6",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("function",6)],
      cc[lw(31,6),lw(0,5),var_w("rt",5),var_w("rd",5),lw(0,5),var_w("function",6)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L1ISIZE",ln 32768)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L1IWAYS",ln 2)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L1DSIZE",ln 32768)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L1DWAYS",ln 4)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L1LINESIZE",ln 128)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L2SIZE",ln 262144)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L2WAYS",ln 4)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("L2LINESIZE",ln 128)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("isAligned",
   close
     (tp[var_w("vAddr",64),var_w("MemType",3)],
      eq(bop(BAnd,mop(Cast (Word_Lib.mk_wordT 3),var_w("vAddr",64)),var_w("MemType",3)),lw(0,3))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("AdjustEndian",
   close
     (tp[var_w("MemType",3),var_w("pAddr",40)],
      close
        (var("state",qTy),
         itb([(eq(var_w("MemType",3),lw(0,3)),
               tp[bop(BXor,var_w("pAddr",40),
                      mop(Cast (Word_Lib.mk_wordT 40),
                          rep(apply
                                (const
                                   ("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                 var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3)))),var("state",qTy)]),
              (eq(var_w("MemType",3),lw(1,3)),
               tp[bop(BXor,var_w("pAddr",40),
                      mop(Cast (Word_Lib.mk_wordT 40),
                          cc[rep(apply
                                   (const
                                      ("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2)),lw(0,1)])),
                  var("state",qTy)]),
              (eq(var_w("MemType",3),lw(3,3)),
               tp[bop(BXor,var_w("pAddr",40),
                      mop(Cast (Word_Lib.mk_wordT 40),
                          cc[apply
                               (const("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("state",qTy)),lw(0,2)])),var("state",qTy)]),
              (eq(var_w("MemType",3),lw(7,3)),tp[var_w("pAddr",40),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (40 word \<times> state)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"bad access length",@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("InitMEM",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
         apply
           (call
              ("next_unknown",@{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
               ls"mem-data",@{theory}),var("state",qTy)),
         rupd
           ("state.mem",
            tp[var("s",qTy),
               mop(K1 (Word_Lib.mk_wordT 35),
                   call
                     ("DataType.Raw",@{typ DataType},
                      apply
                        (lx(@{typ "(nat \<times> string) \<Rightarrow> 256 word"}),
                         var("v",@{typ "nat \<times> string"})),@{theory}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReadData",
   close
     (var_w("dwordAddr",37),
      close
        (var("state",qTy),
         cs(apply
              (call("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
               ex(var_w("dwordAddr",37),ln 36,
                  bop(Sub,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),ln 3),
                  (Word_Lib.mk_wordT 35))),
            [(call("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),@{theory}),
              call
                ("readDwordFromRaw",w64,
                 tp[var_w("dwordAddr",37),
                    call("capToBits",(Word_Lib.mk_wordT 256),var("cap",@{typ Capability}),@{theory})],
                 @{theory})),
             (call("DataType.Raw",@{typ DataType},var_w("raw",256),@{theory}),
              call("readDwordFromRaw",w64,tp[var_w("dwordAddr",37),var_w("raw",256)],@{theory}))],
            @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("WriteData",
   close
     (tp[var_w("dwordAddr",37),var_w("data",64),var_w("mask",64)],
      close
        (var("state",qTy),
         rupd
           ("state.mem",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
                  ex(var_w("dwordAddr",37),ln 36,
                     bop(Sub,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),ln 3),
                     (Word_Lib.mk_wordT 35)),
                  call
                    ("DataType.Raw",@{typ DataType},
                     call
                       ("updateDwordInRaw",(Word_Lib.mk_wordT 256),
                        tp[var_w("dwordAddr",37),var_w("data",64),var_w("mask",64),
                           cs(apply
                                (call
                                   ("state.mem",@{typ "35 word \<Rightarrow> DataType"},
                                    var("state",qTy),@{theory}),
                                 ex(var_w("dwordAddr",37),ln 36,
                                    bop(Sub,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),
                                        ln 3),(Word_Lib.mk_wordT 35))),
                              [(call
                                  ("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),
                                   @{theory}),
                                call
                                  ("capToBits",(Word_Lib.mk_wordT 256),var("cap",@{typ Capability}),
                                   @{theory})),
                               (call("DataType.Raw",@{typ DataType},var_w("raw",256),@{theory}),
                                var_w("raw",256))],@{context})],@{theory}),@{theory}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReadInst",
   close
     (var_w("a",40),
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            cs(apply
                 (call
                    ("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
                  ex(var_w("a",40),ln 39,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),
                     (Word_Lib.mk_wordT 35))),
               [(call("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),@{theory}),
                 call
                   ("readDwordFromRaw",w64,
                    tp[ex(var_w("a",40),ln 39,ln 3,(Word_Lib.mk_wordT 37)),
                       call
                         ("capToBits",(Word_Lib.mk_wordT 256),var("cap",@{typ Capability}),@{theory})],
                    @{theory})),
                (call("DataType.Raw",@{typ DataType},var_w("raw",256),@{theory}),
                 call
                   ("readDwordFromRaw",w64,
                    tp[ex(var_w("a",40),ln 39,ln 3,(Word_Lib.mk_wordT 37)),var_w("raw",256)],
                    @{theory}))],@{context}),
            ite(bop(Bit,var_w("a",40),ln 2),ex(var_w("v",64),ln 31,ln 0,w32),
                ex(var_w("v",64),ln 63,ln 32,w32))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReadCap",
   close
     (var_w("capAddr",35),
      close
        (var("state",qTy),
         cs(apply
              (call("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
               var_w("capAddr",35)),
            [(call("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),@{theory}),
              var("cap",@{typ Capability})),
             (call("DataType.Raw",@{typ DataType},var_w("raw",256),@{theory}),
              call("bitsToCap",@{typ Capability},var_w("raw",256),@{theory}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("WriteCap",
   close
     (tp[var_w("capAddr",35),var("cap",@{typ Capability})],
      close
        (var("state",qTy),
         rupd
           ("state.mem",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
                  var_w("capAddr",35),
                  call("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),@{theory}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("WriteDWORD",
   close
     (tp[var_w("dwordAddr",37),var_w("data",64)],
      close
        (var("state",qTy),
         rupd
           ("state.mem",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
                  ex(var_w("dwordAddr",37),ln 36,
                     bop(Sub,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),ln 3),
                     (Word_Lib.mk_wordT 35)),
                  call
                    ("DataType.Raw",@{typ DataType},
                     call
                       ("updateDwordInRaw",(Word_Lib.mk_wordT 256),
                        tp[var_w("dwordAddr",37),var_w("data",64),mop(BNot,lw(0,64)),
                           cs(apply
                                (call
                                   ("state.mem",@{typ "35 word \<Rightarrow> DataType"},
                                    var("state",qTy),@{theory}),
                                 ex(var_w("dwordAddr",37),ln 36,
                                    bop(Sub,mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),
                                        ln 3),(Word_Lib.mk_wordT 35))),
                              [(call
                                  ("DataType.Cap",@{typ DataType},var("cap",@{typ Capability}),
                                   @{theory}),
                                mop(Cast (Word_Lib.mk_wordT 256),
                                    call
                                      ("reg'Capability",(Word_Lib.mk_wordT 257),
                                       var("cap",@{typ Capability}),@{theory}))),
                               (call("DataType.Raw",@{typ DataType},var_w("raw",256),@{theory}),
                                var_w("raw",256))],@{context})],@{theory}),@{theory}))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Write256",
   close
     (tp[var_w("addr",35),var_w("data",256)],
      close
        (var("state",qTy),
         rupd
           ("state.mem",
            tp[var("state",qTy),
               fupd
                 (call
                    ("state.mem",@{typ "35 word \<Rightarrow> DataType"},var("state",qTy),@{theory}),
                  var_w("addr",35),call("DataType.Raw",@{typ DataType},var_w("data",256),@{theory}))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("getVirtualAddress",
   close
     (var_w("addr",64),
      close
        (var("state",qTy),
         bop(Add,
             bop(Add,var_w("addr",64),
                 call
                   ("getBase",w64,
                    apply
                      (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(0,5),@{theory}),
                       var("state",qTy)),@{theory})),
             call
               ("getOffset",w64,
                apply
                  (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(0,5),@{theory}),
                   var("state",qTy)),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LoadMemoryCap",
   close
     (tp[var_w("MemType",3),var_b"needAlign",var_w("vAddr",64),var_b"link"],
      close
        (var("state",qTy),
         ite(bop(And,var_b"needAlign",
                 mop(Not,
                     call
                       ("isAligned",HOLogic.boolT,tp[var_w("vAddr",64),var_w("MemType",3)],@{theory}))),
             let'
               (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                apply
                  (call
                     ("next_unknown",
                      @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                      ls"mem-data",@{theory}),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("AdEL","ExceptionType",@{theory}),@{theory}),
                      apply
                        (call
                           ("write'CP0",@{typ "state \<Rightarrow> state"},
                            rupd
                              ("CP0.BadVAddr",
                               tp[apply
                                    (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                     var("state",qTy)),var_w("vAddr",64)],@{theory}),@{theory}),
                         var("state",qTy)))),
                tp[apply
                     (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                      var("v",@{typ "nat \<times> string"})),var("s",qTy)]),
             let'
               (tp[var_w("v",40),var("s",qTy)],
                apply
                  (call
                     ("AdjustEndian",@{typ "state \<Rightarrow> (40 word \<times> state)"},
                      tp[var_w("MemType",3),mop(Cast (Word_Lib.mk_wordT 40),var_w("vAddr",64))],
                      @{theory}),var("state",qTy)),
                let'
                  (var("s0",qTy),
                   ite(var_b"link",
                       let'
                         (tp[var("v0",@{typ CP0}),var("s",qTy)],
                          let'
                            (var("s0",qTy),
                             apply
                               (call
                                  ("write'LLbit",@{typ "state \<Rightarrow> state"},mop(Some,lt),
                                   @{theory}),var("s",qTy)),
                             tp[apply
                                  (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                   var("s0",qTy)),var("s0",qTy)]),
                          apply
                            (call
                               ("write'CP0",@{typ "state \<Rightarrow> state"},
                                rupd
                                  ("CP0.LLAddr",
                                   tp[var("v0",@{typ CP0}),mop(Cast w64,var_w("v",40))],@{theory}),
                                @{theory}),var("s",qTy))),
                       apply
                         (call
                            ("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,
                             @{theory}),var("s",qTy))),
                   tp[apply
                        (call
                           ("ReadData",@{typ "state \<Rightarrow> 64 word"},
                            ex(var_w("v",40),ln 39,ln 3,(Word_Lib.mk_wordT 37)),@{theory}),
                         var("s0",qTy)),var("s0",qTy)]))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LoadMemory",
   close
     (tp[var_w("MemType",3),var_w("AccessLength",3),var_b"needAlign",var_w("vAddr",64),var_b"link"],
      close
        (var("state",qTy),
         let'
           (var("v",@{typ Capability}),
            apply
              (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(0,5),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("base",64),var_w("len",64)],
               call
                 ("getBaseAndLength",@{typ "64 word \<times> 64 word"},
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(0,5),@{theory}),
                     var("state",qTy)),@{theory}),
               itb([(mop(Not,call("getTag",HOLogic.boolT,var("v",@{typ Capability}),@{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"mem-data",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcTag","CapExceptionType",@{theory}),lw(0,5)],@{theory}),
                              var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (call("getSealed",HOLogic.boolT,var("v",@{typ Capability}),@{theory}),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"mem-data",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcSeal","CapExceptionType",@{theory}),lw(0,5)],@{theory}),
                              var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (mop(Not,
                         call
                           ("Perms.Permit_Load",HOLogic.boolT,
                            call("getPerms",@{typ Perms},var("v",@{typ Capability}),@{theory}),
                            @{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"mem-data",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcPermLoad","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (bop(Ult,var_w("vAddr",64),
                         call("getBase",w64,var("v",@{typ Capability}),@{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"mem-data",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcLength","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (bop(Ugt,
                         bop(Add,
                             bop(Add,cc[lw(0,1),var_w("vAddr",64)],
                                 mop(Cast (Word_Lib.mk_wordT 65),var_w("AccessLength",3))),lw(1,65)),
                         bop(Add,cc[lw(0,1),var_w("base",64)],cc[lw(0,1),var_w("len",64)])),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"mem-data",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcLength","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],
                   apply
                     (call
                        ("LoadMemoryCap",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         tp[var_w("MemType",3),var_b"needAlign",var_w("vAddr",64),var_b"link"],
                         @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LoadCap",
   close
     (tp[var_w("vAddr",64),var_b"link"],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(var_b"link",
                let'
                  (tp[var("v",@{typ CP0}),var("s",qTy)],
                   let'
                     (var("s",qTy),
                      apply
                        (call
                           ("write'LLbit",@{typ "state \<Rightarrow> state"},mop(Some,lt),@{theory}),
                         var("state",qTy)),
                      tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s",qTy)),
                         var("s",qTy)]),
                   apply
                     (call
                        ("write'CP0",@{typ "state \<Rightarrow> state"},
                         rupd("CP0.LLAddr",tp[var("v",@{typ CP0}),var_w("vAddr",64)],@{theory}),
                         @{theory}),var("s",qTy))),
                apply
                  (call("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,@{theory}),
                   var("state",qTy))),
            tp[apply
                 (call
                    ("ReadCap",@{typ "state \<Rightarrow> Capability"},
                     ex(var_w("vAddr",64),ln 39,
                        mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),(Word_Lib.mk_wordT 35)),
                     @{theory}),var("s",qTy)),var("s",qTy)]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("StoreMemoryCap",
   close
     (tp[var_w("MemType",3),var_w("AccessLength",3),var_w("MemElem",64),var_b"needAlign",
         var_w("vAddr",64),var_b"cond"],
      close
        (var("state",qTy),
         ite(bop(And,var_b"needAlign",
                 mop(Not,
                     call
                       ("isAligned",HOLogic.boolT,tp[var_w("vAddr",64),var_w("MemType",3)],@{theory}))),
             let'
               (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                apply
                  (call
                     ("next_unknown",
                      @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                      ls"sc-success",@{theory}),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("AdES","ExceptionType",@{theory}),@{theory}),
                      apply
                        (call
                           ("write'CP0",@{typ "state \<Rightarrow> state"},
                            rupd
                              ("CP0.BadVAddr",
                               tp[apply
                                    (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                     var("state",qTy)),var_w("vAddr",64)],@{theory}),@{theory}),
                         var("state",qTy)))),
                tp[apply
                     (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                      var("v",@{typ "nat \<times> string"})),var("s",qTy)]),
             let'
               (tp[var_w("v",40),var("s",qTy)],
                apply
                  (call
                     ("AdjustEndian",@{typ "state \<Rightarrow> (40 word \<times> state)"},
                      tp[var_w("MemType",3),mop(Cast (Word_Lib.mk_wordT 40),var_w("vAddr",64))],
                      @{theory}),var("state",qTy)),
                let'
                  (tp[var_b"v0",var("s",qTy)],
                   ite(var_b"cond",
                       cs(apply
                            (const("LLbit",@{typ "state \<Rightarrow> (bool option)"},@{theory}),
                             var("s",qTy)),
                          [(lo HOLogic.boolT,
                            apply
                              (call
                                 ("raise'exception",
                                  @{typ "state \<Rightarrow> (bool \<times> state)"},
                                  call
                                    ("exception.UNPREDICTABLE",@{typ exception},
                                     ls"conditional store: LLbit not set",@{theory}),@{theory}),
                               var("s",qTy))),(mop(Some,lf),tp[lf,var("s",qTy)]),
                           (mop(Some,lt),
                            ite(eq(call
                                     ("CP0.LLAddr",w64,
                                      apply
                                        (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                         var("s",qTy)),@{theory}),mop(Cast w64,var_w("v",40))),
                                tp[lt,var("s",qTy)],
                                apply
                                  (call
                                     ("raise'exception",
                                      @{typ "state \<Rightarrow> (bool \<times> state)"},
                                      call
                                        ("exception.UNPREDICTABLE",@{typ exception},
                                         ls
                                          "conditional store: address does not match previous LL address",
                                         @{theory}),@{theory}),var("s",qTy))))],@{context}),
                       tp[lf,var("s",qTy)]),
                   let'
                     (var("s",qTy),
                      apply
                        (call
                           ("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,
                            @{theory}),var("s",qTy)),
                      let'
                        (var("s",qTy),
                         mop(Snd,
                             apply
                               (forloop
                                  (tp[ln 0,
                                      bop(Sub,
                                          call
                                            ("state.totalCore",HOLogic.natT,var("s",qTy),@{theory}),
                                          ln 1),
                                      close
                                        (var_n"core",
                                         close
                                           (var("state",qTy),
                                            let'
                                              (var_w("i",8),mop(Cast w8,var_n"core"),
                                               let'
                                                 (var("v1",@{typ procState}),
                                                  apply
                                                    (call
                                                       ("state.all_state",
                                                        @{typ "8 word \<Rightarrow> procState"},
                                                        var("state",qTy),@{theory}),var_w("i",8)),
                                                  tp[lu,
                                                     ite(bop(And,
                                                             mop(Not,
                                                                 eq(var_w("i",8),
                                                                    call
                                                                      ("state.procID",w8,
                                                                       var("state",qTy),@{theory}))),
                                                             bop(And,
                                                                 bop(Or,mop(Not,var_b"cond"),
                                                                     var_b"v0"),
                                                                 bop(And,
                                                                     eq(call
                                                                          ("procState.c_LLbit",
                                                                           @{typ "bool option"},
                                                                           var("v1",@{typ procState}),
                                                                           @{theory}),mop(Some,lt)),
                                                                     eq(ex(call
                                                                             ("CP0.LLAddr",w64,
                                                                              call
                                                                                ("procState.c_CP0",
                                                                                 @{typ CP0},
                                                                                 var("v1",
                                                                                     @{typ procState}),
                                                                                 @{theory}),
                                                                              @{theory}),ln 39,ln 3,
                                                                           (Word_Lib.mk_wordT 37)),
                                                                        ex(var_w("v",40),ln 39,ln 3,
                                                                           (Word_Lib.mk_wordT 37)))))),
                                                         rupd
                                                           ("state.all_state",
                                                            tp[var("state",qTy),
                                                               fupd
                                                                 (call
                                                                    ("state.all_state",
                                                                     @{typ
                                                                     "8 word \<Rightarrow> procState"},
                                                                     var("state",qTy),@{theory}),
                                                                  var_w("i",8),
                                                                  rupd
                                                                    ("procState.c_LLbit",
                                                                     tp[apply
                                                                          (call
                                                                             ("state.all_state",
                                                                              @{typ
                                                                              "8 word \<Rightarrow>
                                                                               procState"},
                                                                              var("state",qTy),
                                                                              @{theory}),
                                                                           var_w("i",8)),
                                                                        mop(Some,lf)],@{theory}))],
                                                            @{theory}),var("state",qTy))]))))]),
                                var("s",qTy))),
                         tp[var_b"v0",
                            ite(bop(Or,mop(Not,var_b"cond"),var_b"v0"),
                                let'
                                  (var_n"x",
                                   bop(Mul,ln 8,
                                       bop(Add,mop(Cast HOLogic.natT,var_w("AccessLength",3)),ln 1)),
                                   apply
                                     (call
                                        ("WriteData",@{typ "state \<Rightarrow> state"},
                                         tp[ex(var_w("v",40),ln 39,ln 3,(Word_Lib.mk_wordT 37)),
                                            var_w("MemElem",64),
                                            bop(Lsl,bop(Sub,bop(Lsl,lw(1,64),var_n"x"),lw(1,64)),
                                                bop(Sub,ln 64,
                                                    bop(Add,var_n"x",
                                                        bop(Mul,ln 8,
                                                            mop(Cast HOLogic.natT,
                                                                ex(var_w("vAddr",64),ln 2,ln 0,
                                                                   (Word_Lib.mk_wordT 3)))))))],
                                         @{theory}),var("s",qTy))),var("s",qTy))]))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("StoreMemory",
   close
     (tp[var_w("MemType",3),var_w("AccessLength",3),var_b"needAlign",var_w("MemElem",64),
         var_w("vAddr",64),var_b"cond"],
      close
        (var("state",qTy),
         let'
           (var("v",@{typ Capability}),
            apply
              (call("CAPR",@{typ "state \<Rightarrow> Capability"},lw(0,5),@{theory}),
               var("state",qTy)),
            let'
              (tp[var_w("base",64),var_w("len",64)],
               call
                 ("getBaseAndLength",@{typ "64 word \<times> 64 word"},var("v",@{typ Capability}),
                  @{theory}),
               itb([(mop(Not,call("getTag",HOLogic.boolT,var("v",@{typ Capability}),@{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"sc-success",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcTag","CapExceptionType",@{theory}),lw(0,5)],@{theory}),
                              var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (call("getSealed",HOLogic.boolT,var("v",@{typ Capability}),@{theory}),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"sc-success",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcSeal","CapExceptionType",@{theory}),lw(0,5)],@{theory}),
                              var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (mop(Not,
                         call
                           ("Perms.Permit_Store",HOLogic.boolT,
                            call("getPerms",@{typ Perms},var("v",@{typ Capability}),@{theory}),
                            @{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"sc-success",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcPermStore","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (bop(Ult,var_w("vAddr",64),
                         call("getBase",w64,var("v",@{typ Capability}),@{theory})),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"sc-success",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcLength","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                    (bop(Ugt,
                         bop(Add,
                             bop(Add,cc[lw(0,1),var_w("vAddr",64)],
                                 mop(Cast (Word_Lib.mk_wordT 65),var_w("AccessLength",3))),lw(1,65)),
                         bop(Add,cc[lw(0,1),var_w("base",64)],cc[lw(0,1),var_w("len",64)])),
                     let'
                       (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                        apply
                          (call
                             ("next_unknown",
                              @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                              ls"sc-success",@{theory}),
                           apply
                             (call
                                ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                 tp[lc("capExcLength","CapExceptionType",@{theory}),lw(0,5)],
                                 @{theory}),var("state",qTy))),
                        tp[apply
                             (lx(@{typ "(nat \<times> string) \<Rightarrow> bool"}),
                              var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],
                   apply
                     (call
                        ("StoreMemoryCap",@{typ "state \<Rightarrow> (bool \<times> state)"},
                         tp[var_w("MemType",3),var_w("AccessLength",3),var_w("MemElem",64),
                            var_b"needAlign",var_w("vAddr",64),var_b"cond"],@{theory}),
                      var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("StoreCap",
   close
     (tp[var_w("vAddr",64),var("cap",@{typ Capability}),var_b"cond"],
      close
        (var("state",qTy),
         let'
           (tp[var_b"r",var("s1",@{typ "bool \<times> state"})],
            let'
              (var("s",@{typ "bool \<times> state"}),
               ite(var_b"cond",
                   cs(apply
                        (const("LLbit",@{typ "state \<Rightarrow> (bool option)"},@{theory}),
                         var("state",qTy)),
                      [(lo HOLogic.boolT,
                        tp[lf,
                           mop(Snd,
                               apply
                                 (call
                                    ("raise'exception",
                                     @{typ "state \<Rightarrow> (unit \<times> state)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"conditional store of capability: LLbit not set",@{theory}),
                                     @{theory}),var("state",qTy)))]),
                       (mop(Some,lf),tp[lf,var("state",qTy)]),
                       (mop(Some,lt),
                        ite(eq(call
                                 ("CP0.LLAddr",w64,
                                  apply
                                    (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                     var("state",qTy)),@{theory}),var_w("vAddr",64)),
                            tp[lt,var("state",qTy)],
                            tp[lf,
                               mop(Snd,
                                   apply
                                     (call
                                        ("raise'exception",
                                         @{typ "state \<Rightarrow> (unit \<times> state)"},
                                         call
                                           ("exception.UNPREDICTABLE",@{typ exception},
                                            ls
                                             "conditional store of capability: address does not match previous LL address",
                                            @{theory}),@{theory}),var("state",qTy)))]))],@{context}),
                   tp[lf,var("state",qTy)]),
               let'
                 (var("s1",qTy),
                  apply
                    (call
                       ("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,@{theory}),
                     mop(Snd,var("s",@{typ "bool \<times> state"}))),
                  let'
                    (var("s",@{typ "bool \<times> state"}),
                     let'
                       (var("s",@{typ "bool \<times> state"}),
                        mop(Snd,
                            apply
                              (forloop
                                 (tp[ln 0,
                                     bop(Sub,
                                         call
                                           ("state.totalCore",HOLogic.natT,var("s1",qTy),@{theory}),
                                         ln 1),
                                     close
                                       (var_n"core",
                                        close
                                          (var("state",@{typ "bool \<times> state"}),
                                           let'
                                             (var_w("i",8),mop(Cast w8,var_n"core"),
                                              let'
                                                (var("v",@{typ procState}),
                                                 apply
                                                   (call
                                                      ("state.all_state",
                                                       @{typ "8 word \<Rightarrow> procState"},
                                                       mop(Snd,
                                                           var("state",@{typ "bool \<times> state"})),
                                                       @{theory}),var_w("i",8)),
                                                 tp[lu,
                                                    ite(bop(And,
                                                            mop(Not,
                                                                eq(var_w("i",8),
                                                                   call
                                                                     ("state.procID",w8,
                                                                      mop(Snd,
                                                                          var("state",
                                                                              @{typ
                                                                              "bool \<times> state"})),
                                                                      @{theory}))),
                                                            bop(And,
                                                                bop(Or,mop(Not,var_b"cond"),
                                                                    mop(Fst,
                                                                        var("state",
                                                                            @{typ
                                                                            "bool \<times> state"}))),
                                                                bop(And,
                                                                    eq(call
                                                                         ("procState.c_LLbit",
                                                                          @{typ "bool option"},
                                                                          var("v",@{typ procState}),
                                                                          @{theory}),mop(Some,lt)),
                                                                    eq(ex(call
                                                                            ("CP0.LLAddr",w64,
                                                                             call
                                                                               ("procState.c_CP0",
                                                                                @{typ CP0},
                                                                                var("v",
                                                                                    @{typ procState}),
                                                                                @{theory}),@{theory}),
                                                                          ln 39,
                                                                          mop(Log,
                                                                              const
                                                                                ("CAPBYTEWIDTH",
                                                                                 HOLogic.natT,
                                                                                 @{theory})),
                                                                          (Word_Lib.mk_wordT 35)),
                                                                       ex(var_w("vAddr",64),ln 39,
                                                                          mop(Log,
                                                                              const
                                                                                ("CAPBYTEWIDTH",
                                                                                 HOLogic.natT,
                                                                                 @{theory})),
                                                                          (Word_Lib.mk_wordT 35)))))),
                                                        tp[mop(Fst,
                                                               var("state",
                                                                   @{typ "bool \<times> state"})),
                                                           rupd
                                                             ("state.all_state",
                                                              tp[mop(Snd,
                                                                     var("state",
                                                                         @{typ
                                                                         "bool \<times> state"})),
                                                                 fupd
                                                                   (call
                                                                      ("state.all_state",
                                                                       @{typ
                                                                       "8 word \<Rightarrow>
                                                                        procState"},
                                                                       mop(Snd,
                                                                           var("state",
                                                                               @{typ
                                                                               "bool \<times> state"})),
                                                                       @{theory}),var_w("i",8),
                                                                    rupd
                                                                      ("procState.c_LLbit",
                                                                       tp[apply
                                                                            (call
                                                                               ("state.all_state",
                                                                                @{typ
                                                                                "8 word \<Rightarrow>
                                                                                 procState"},
                                                                                mop(Snd,
                                                                                    var("state",
                                                                                        @{typ
                                                                                        "bool \<times>
                                                                                         state"})),
                                                                                @{theory}),
                                                                             var_w("i",8)),
                                                                          mop(Some,lf)],@{theory}))],
                                                              @{theory})],
                                                        var("state",@{typ "bool \<times> state"}))]))))]),
                               tp[mop(Fst,var("s",@{typ "bool \<times> state"})),var("s1",qTy)])),
                        ite(bop(Or,mop(Not,var_b"cond"),
                                mop(Fst,var("s",@{typ "bool \<times> state"}))),
                            tp[mop(Fst,var("s",@{typ "bool \<times> state"})),
                               apply
                                 (call
                                    ("WriteCap",@{typ "state \<Rightarrow> state"},
                                     tp[ex(var_w("vAddr",64),ln 39,
                                           mop(Log,const("CAPBYTEWIDTH",HOLogic.natT,@{theory})),
                                           (Word_Lib.mk_wordT 35)),var("cap",@{typ Capability})],
                                     @{theory}),mop(Snd,var("s",@{typ "bool \<times> state"})))],
                            var("s",@{typ "bool \<times> state"}))),
                     tp[mop(Fst,var("s",@{typ "bool \<times> state"})),
                        var("s",@{typ "bool \<times> state"})]))),
            tp[var_b"r",mop(Snd,var("s1",@{typ "bool \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Fetch",
   close
     (var("state",qTy),
      let'
        (var("v",@{typ CP0}),
         apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
         let'
           (tp[var("v",@{typ CP0}),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.Random",
                        tp[var("v",@{typ CP0}),
                           rupd
                             ("Random.Random",
                              tp[call("CP0.Random",@{typ Random},var("v",@{typ CP0}),@{theory}),
                                 ite(eq(call
                                          ("Random.Random",w8,
                                           call
                                             ("CP0.Random",@{typ Random},
                                              apply
                                                (const
                                                   ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                 var("state",qTy)),@{theory}),@{theory}),
                                        call
                                          ("Wired.Wired",w8,
                                           call
                                             ("CP0.Wired",@{typ Wired},
                                              apply
                                                (const
                                                   ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                                 var("state",qTy)),@{theory}),@{theory})),
                                     mop(Cast w8,
                                         bop(Sub,const("TLBAssocEntries",HOLogic.natT,@{theory}),
                                             ln 1)),
                                     bop(Sub,
                                         call
                                           ("Random.Random",w8,
                                            call
                                              ("CP0.Random",@{typ Random},
                                               apply
                                                 (const
                                                    ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                     @{theory}),var("state",qTy)),@{theory}),
                                            @{theory}),lw(1,8)))],@{theory})],@{theory}),@{theory}),
                  var("state",qTy)),
               tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            let'
              (tp[var("v",@{typ CP0}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  ite(eq(call("CP0.Compare",w32,var("v",@{typ CP0}),@{theory}),
                         call
                           ("CP0.Count",w32,
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s",qTy)),
                            @{theory})),
                      let'
                        (var("v",@{typ CP0}),
                         apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s",qTy)),
                         let'
                           (tp[var("v",@{typ CP0}),var("s",qTy)],
                            let'
                              (var("s0",qTy),
                               let'
                                 (var("x0",@{typ CauseRegister}),
                                  call
                                    ("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),@{theory}),
                                  apply
                                    (call
                                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                                        rupd
                                          ("CP0.Cause",
                                           tp[var("v",@{typ CP0}),
                                              rupd
                                                ("CauseRegister.IP",
                                                 tp[var("x0",@{typ CauseRegister}),
                                                    bfi(ln 7,ln 7,mop(Cast w1,lt),
                                                        call
                                                          ("CauseRegister.IP",w8,
                                                           var("x0",@{typ CauseRegister}),@{theory}))],
                                                 @{theory})],@{theory}),@{theory}),var("s",qTy))),
                               tp[apply
                                    (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                     var("s0",qTy)),var("s0",qTy)]),
                            apply
                              (call
                                 ("write'CP0",@{typ "state \<Rightarrow> state"},
                                  rupd
                                    ("CP0.Cause",
                                     tp[var("v",@{typ CP0}),
                                        rupd
                                          ("CauseRegister.TI",
                                           tp[call
                                                ("CP0.Cause",@{typ CauseRegister},
                                                 var("v",@{typ CP0}),@{theory}),lt],@{theory})],
                                     @{theory}),@{theory}),var("s",qTy)))),var("s",qTy)),
                  tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                     var("s0",qTy)]),
               let'
                 (tp[var_b"v",var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     ite(bop(And,
                             call
                               ("StatusRegister.IE",HOLogic.boolT,
                                call
                                  ("CP0.Status",@{typ StatusRegister},var("v",@{typ CP0}),@{theory}),
                                @{theory}),
                             mop(Not,
                                 bop(Or,
                                     call
                                       ("StatusRegister.EXL",HOLogic.boolT,
                                        call
                                          ("CP0.Status",@{typ StatusRegister},
                                           apply
                                             (const
                                                ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                              var("s",qTy)),@{theory}),@{theory}),
                                     call
                                       ("StatusRegister.ERL",HOLogic.boolT,
                                        call
                                          ("CP0.Status",@{typ StatusRegister},
                                           apply
                                             (const
                                                ("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                              var("s",qTy)),@{theory}),@{theory})))),
                         ite(mop(Not,
                                 eq(bop(BAnd,
                                        ex(call
                                             ("StatusRegister.IM",w8,
                                              call
                                                ("CP0.Status",@{typ StatusRegister},
                                                 apply
                                                   (const
                                                      ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                       @{theory}),var("s",qTy)),@{theory}),@{theory}),
                                           ln 7,ln 2,(Word_Lib.mk_wordT 6)),
                                        ex(call
                                             ("CauseRegister.IP",w8,
                                              call
                                                ("CP0.Cause",@{typ CauseRegister},
                                                 apply
                                                   (const
                                                      ("CP0",@{typ "state \<Rightarrow> CP0"},
                                                       @{theory}),var("s",qTy)),@{theory}),@{theory}),
                                           ln 7,ln 2,(Word_Lib.mk_wordT 6))),lw(0,6))),
                             apply
                               (call
                                  ("SignalException",@{typ "state \<Rightarrow> state"},
                                   lc("Int","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                             var("s",qTy)),var("s",qTy)),
                     tp[apply
                          (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                           var("s0",qTy)),var("s0",qTy)]),
                  itb([(var_b"v",tp[lo w32,var("s",qTy)]),
                       (eq(ex(apply
                                (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                 var("s",qTy)),ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2)),
                        let'
                          (var_w("v",64),
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("s",qTy)),
                               call
                                 ("getBase",w64,
                                  apply
                                    (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                     var("s",qTy)),@{theory})),
                           itb([(mop(Not,
                                     call
                                       ("getTag",HOLogic.boolT,
                                        apply
                                          (const
                                             ("PCC",@{typ "state \<Rightarrow> Capability"},
                                              @{theory}),var("s",qTy)),@{theory})),
                                 tp[lo w32,
                                    apply
                                      (call
                                         ("SignalCapException_noReg",
                                          @{typ "state \<Rightarrow> state"},
                                          lc("capExcTag","CapExceptionType",@{theory}),@{theory}),
                                       var("s",qTy))]),
                                (call
                                   ("getSealed",HOLogic.boolT,
                                    apply
                                      (const
                                         ("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                       var("s",qTy)),@{theory}),
                                 tp[lo w32,
                                    apply
                                      (call
                                         ("SignalCapException_noReg",
                                          @{typ "state \<Rightarrow> state"},
                                          lc("capExcSeal","CapExceptionType",@{theory}),@{theory}),
                                       var("s",qTy))]),
                                (bop(Ult,var_w("v",64),
                                     call
                                       ("getBase",w64,
                                        apply
                                          (const
                                             ("PCC",@{typ "state \<Rightarrow> Capability"},
                                              @{theory}),var("s",qTy)),@{theory})),
                                 tp[lo w32,
                                    apply
                                      (call
                                         ("SignalCapException_noReg",
                                          @{typ "state \<Rightarrow> state"},
                                          lc("capExcLength","CapExceptionType",@{theory}),@{theory}),
                                       var("s",qTy))]),
                                (bop(Ugt,bop(Add,cc[lw(0,1),var_w("v",64)],lw(4,65)),
                                     bop(Add,
                                         mop(Cast (Word_Lib.mk_wordT 65),
                                             call
                                               ("getBase",w64,
                                                apply
                                                  (const
                                                     ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                      @{theory}),var("s",qTy)),@{theory})),
                                         mop(Cast (Word_Lib.mk_wordT 65),
                                             call
                                               ("getLength",w64,
                                                apply
                                                  (const
                                                     ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                      @{theory}),var("s",qTy)),@{theory})))),
                                 tp[lo w32,
                                    apply
                                      (call
                                         ("SignalCapException_noReg",
                                          @{typ "state \<Rightarrow> state"},
                                          lc("capExcLength","CapExceptionType",@{theory}),@{theory}),
                                       var("s",qTy))]),
                                (mop(Not,
                                     call
                                       ("Perms.Permit_Execute",HOLogic.boolT,
                                        call
                                          ("getPerms",@{typ Perms},
                                           apply
                                             (const
                                                ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                 @{theory}),var("s",qTy)),@{theory}),@{theory})),
                                 tp[lo w32,
                                    apply
                                      (call
                                         ("SignalCapException_noReg",
                                          @{typ "state \<Rightarrow> state"},
                                          lc("capExcPermExe","CapExceptionType",@{theory}),@{theory}),
                                       var("s",qTy))])],
                               tp[ite(apply
                                        (const
                                           ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},
                                            @{theory}),var("s",qTy)),lo w32,
                                      mop(Some,
                                          apply
                                            (call
                                               ("ReadInst",@{typ "state \<Rightarrow> 32 word"},
                                                mop(Cast (Word_Lib.mk_wordT 40),var_w("v",64)),
                                                @{theory}),var("s",qTy)))),var("s",qTy)])))],
                      tp[lo w32,
                         apply
                           (call
                              ("SignalException",@{typ "state \<Rightarrow> state"},
                               lc("AdEL","ExceptionType",@{theory}),@{theory}),
                            apply
                              (call
                                 ("write'CP0",@{typ "state \<Rightarrow> state"},
                                  rupd
                                    ("CP0.BadVAddr",
                                     tp[apply
                                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                           var("s",qTy)),
                                        bop(Add,
                                            call
                                              ("getBase",w64,
                                               apply
                                                 (const
                                                    ("PCC",@{typ "state \<Rightarrow> Capability"},
                                                     @{theory}),var("s",qTy)),@{theory}),
                                            apply
                                              (const
                                                 ("PC",@{typ "state \<Rightarrow> 64 word"},
                                                  @{theory}),var("s",qTy)))],@{theory}),@{theory}),
                               var("s",qTy)))])))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("PSIZE",ln 40)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("switchCore",
   close
     (var_n"n",
      close
        (var("state",qTy),
         let'
           (var_n"v",mop(Cast HOLogic.natT,call("state.procID",w8,var("state",qTy),@{theory})),
            tp[var_n"v",
               ite(mop(Not,eq(var_n"n",var_n"v")),
                   let'
                     (var_w("i",8),mop(Cast w8,var_n"n"),
                      let'
                        (var("s",qTy),
                         apply
                           (call
                              ("switchCoreCAP",@{typ "state \<Rightarrow> state"},var_w("i",8),
                               @{theory}),
                            apply
                              (call
                                 ("switchCoreTLB",@{typ "state \<Rightarrow> state"},var_w("i",8),
                                  @{theory}),var("state",qTy))),
                         let'
                           (var("s",qTy),
                            rupd
                              ("state.all_gpr",
                               tp[var("s",qTy),
                                  fupd
                                    (call
                                       ("state.all_gpr",
                                        @{typ "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                                        var("s",qTy),@{theory}),
                                     call("state.procID",w8,var("s",qTy),@{theory}),
                                     call
                                       ("state.c_gpr",@{typ "5 word \<Rightarrow> 64 word"},
                                        var("s",qTy),@{theory}))],@{theory}),
                            let'
                              (var("s",qTy),
                               rupd
                                 ("state.all_state",
                                  tp[var("s",qTy),
                                     fupd
                                       (call
                                          ("state.all_state",
                                           @{typ "8 word \<Rightarrow> procState"},var("s",qTy),
                                           @{theory}),
                                        call("state.procID",w8,var("s",qTy),@{theory}),
                                        call
                                          ("state.c_state",@{typ procState},var("s",qTy),@{theory}))],
                                  @{theory}),
                               let'
                                 (var("s",qTy),
                                  rupd
                                    ("state.c_gpr",
                                     tp[var("s",qTy),
                                        apply
                                          (call
                                             ("state.all_gpr",
                                              @{typ
                                              "8 word \<Rightarrow> (5 word \<Rightarrow> 64 word)"},
                                              var("s",qTy),@{theory}),var_w("i",8))],@{theory}),
                                  rupd
                                    ("state.procID",
                                     tp[rupd
                                          ("state.c_state",
                                           tp[var("s",qTy),
                                              apply
                                                (call
                                                   ("state.all_state",
                                                    @{typ "8 word \<Rightarrow> procState"},
                                                    var("s",qTy),@{theory}),var_w("i",8))],@{theory}),
                                        var_w("i",8)],@{theory})))))),var("state",qTy))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("resetStats",
   close
     (var("state",qTy),
      apply(const("initCoreStats",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dumpStats",close(tp[var_n"inst",var_s"ips",var("fmt",@{typ "string option"})],ls""))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("clearDynamicStats",close(var_a HOLogic.unitT,lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HI",
   close
     (var("state",qTy),
      cs(apply(const("hi",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),var("state",qTy)),
         [(mop(Some,var_w("v",64)),tp[var_w("v",64),var("state",qTy)]),
          (lo w64,
           let'
             (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
              apply
                (call
                   ("next_unknown",
                    @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},ls"hi-reg",
                    @{theory}),var("state",qTy)),
              tp[apply
                   (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                    var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'HI",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         apply
           (call
              ("write'hi",@{typ "state \<Rightarrow> state"},mop(Some,var_w("value",64)),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LO",
   close
     (var("state",qTy),
      cs(apply(const("lo",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),var("state",qTy)),
         [(mop(Some,var_w("v",64)),tp[var_w("v",64),var("state",qTy)]),
          (lo w64,
           let'
             (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
              apply
                (call
                   ("next_unknown",
                    @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},ls"lo-reg",
                    @{theory}),var("state",qTy)),
              tp[apply
                   (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                    var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'LO",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         apply
           (call
              ("write'lo",@{typ "state \<Rightarrow> state"},mop(Some,var_w("value",64)),@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CPR",
   close
     (tp[var_n"n",var_w("reg",5),var_w("sel",3)],
      close
        (var("state",qTy),
         itb([(bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(0,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'Index",w32,
                         call
                           ("CP0.Index",@{typ Index},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(1,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'Random",w32,
                         call
                           ("CP0.Random",@{typ Random},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(2,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("reg'EntryLo",w64,
                     call
                       ("CP0.EntryLo0",@{typ EntryLo},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(3,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("reg'EntryLo",w64,
                     call
                       ("CP0.EntryLo1",@{typ EntryLo},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(4,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("reg'Context",w64,
                     call
                       ("CP0.Context",@{typ Context},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(4,5)),eq(var_w("sel",3),lw(2,3)))),
               tp[call
                    ("CP0.UsrLocal",w64,
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(5,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'PageMask",w32,
                         call
                           ("CP0.PageMask",@{typ PageMask},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(6,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'Wired",w32,
                         call
                           ("CP0.Wired",@{typ Wired},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(7,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'HWREna",w32,
                         call
                           ("CP0.HWREna",@{typ HWREna},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(8,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("CP0.BadVAddr",w64,
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(8,5)),eq(var_w("sel",3),lw(1,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.EInstr",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(9,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.Count",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(10,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("reg'EntryHi",w64,
                     call
                       ("CP0.EntryHi",@{typ EntryHi},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(11,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.Compare",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(12,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'StatusRegister",w32,
                         call
                           ("CP0.Status",@{typ StatusRegister},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(13,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'CauseRegister",w32,
                         call
                           ("CP0.Cause",@{typ CauseRegister},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(14,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("CP0.EPC",w64,
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(15,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.PRId",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(15,5)),eq(var_w("sel",3),lw(1,3)))),
               tp[mop(Cast w64,
                      cc[mop(Cast w16,
                             bop(Sub,
                                 call("state.totalCore",HOLogic.natT,var("state",qTy),@{theory}),
                                 ln 1)),
                         mop(Cast w16,call("state.procID",w8,var("state",qTy),@{theory}))]),
                  var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(15,5)),eq(var_w("sel",3),lw(6,3)))),
               tp[mop(Cast w64,
                      cc[mop(Cast w16,
                             bop(Sub,
                                 call("state.totalCore",HOLogic.natT,var("state",qTy),@{theory}),
                                 ln 1)),
                         mop(Cast w16,call("state.procID",w8,var("state",qTy),@{theory}))]),
                  var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'ConfigRegister",w32,
                         call
                           ("CP0.Config",@{typ ConfigRegister},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(1,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'ConfigRegister1",w32,
                         call
                           ("CP0.Config1",@{typ ConfigRegister1},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(2,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'ConfigRegister2",w32,
                         call
                           ("CP0.Config2",@{typ ConfigRegister2},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(3,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'ConfigRegister3",w32,
                         call
                           ("CP0.Config3",@{typ ConfigRegister3},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(4,3)))),
               tp[lw(1,64),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(5,3)))),
               tp[lw(1,64),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(6,3)))),
               tp[mop(Cast w64,
                      call
                        ("reg'ConfigRegister6",w32,
                         call
                           ("CP0.Config6",@{typ ConfigRegister6},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(17,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("CP0.LLAddr",w64,
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(20,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("reg'XContext",w64,
                     call
                       ("CP0.XContext",@{typ XContext},
                        apply
                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                        @{theory}),@{theory}),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(23,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.Debug",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(26,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[mop(Cast w64,
                      call
                        ("CP0.ErrCtl",w32,
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory})),var("state",qTy)]),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(30,5)),eq(var_w("sel",3),lw(0,3)))),
               tp[call
                    ("CP0.ErrorEPC",w64,
                     apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                     @{theory}),var("state",qTy)])],
             let'
               (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                apply
                  (call
                     ("next_unknown",
                      @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                      ls"cop-reg",@{theory}),var("state",qTy)),
                tp[apply
                     (lx(@{typ "(nat \<times> string) \<Rightarrow> 64 word"}),
                      var("v",@{typ "nat \<times> string"})),var("s",qTy)])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CPR",
   close
     (tp[var_w("value",64),var_n"n",var_w("reg",5),var_w("sel",3)],
      close
        (var("state",qTy),
         itb([(bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(0,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Index",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("Index.Index",
                                 tp[call("CP0.Index",@{typ Index},var("v",@{typ CP0}),@{theory}),
                                    ex(var_w("value",64),ln 8,ln 0,(Word_Lib.mk_wordT 9))],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(2,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.EntryLo0",
                           tp[var("v",@{typ CP0}),
                              call
                                ("write'reg'EntryLo",@{typ EntryLo},
                                 tp[call
                                      ("CP0.EntryLo0",@{typ EntryLo},var("v",@{typ CP0}),@{theory}),
                                    var_w("value",64)],@{theory})],@{theory}),@{theory}),
                     var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(3,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.EntryLo1",
                           tp[var("v",@{typ CP0}),
                              call
                                ("write'reg'EntryLo",@{typ EntryLo},
                                 tp[call
                                      ("CP0.EntryLo1",@{typ EntryLo},var("v",@{typ CP0}),@{theory}),
                                    var_w("value",64)],@{theory})],@{theory}),@{theory}),
                     var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(4,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Context",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("Context.PTEBase",
                                 tp[call("CP0.Context",@{typ Context},var("v",@{typ CP0}),@{theory}),
                                    ex(var_w("value",64),ln 63,ln 23,(Word_Lib.mk_wordT 41))],
                                 @{theory})],@{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(4,5)),eq(var_w("sel",3),lw(2,3)))),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.UsrLocal",
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),var_w("value",64)],@{theory}),@{theory}),
                  var("state",qTy))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(5,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.PageMask",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("PageMask.Mask",
                                 tp[call
                                      ("CP0.PageMask",@{typ PageMask},var("v",@{typ CP0}),@{theory}),
                                    ex(var_w("value",64),ln 24,ln 13,(Word_Lib.mk_wordT 12))],
                                 @{theory})],@{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(6,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.Wired",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("Wired.Wired",
                                       tp[call
                                            ("CP0.Wired",@{typ Wired},var("v",@{typ CP0}),@{theory}),
                                          ex(var_w("value",64),ln 7,ln 0,w8)],@{theory})],@{theory}),
                              @{theory}),var("state",qTy)),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Random",
                              tp[var("v",@{typ CP0}),
                                 rupd
                                   ("Random.Random",
                                    tp[call
                                         ("CP0.Random",@{typ Random},var("v",@{typ CP0}),@{theory}),
                                       mop(Cast w8,
                                           bop(Sub,const("TLBAssocEntries",HOLogic.natT,@{theory}),
                                               ln 1))],@{theory})],@{theory}),@{theory}),
                        var("s",qTy))))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(7,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        apply
                          (call
                             ("write'CP0",@{typ "state \<Rightarrow> state"},
                              rupd
                                ("CP0.HWREna",
                                 tp[var("v",@{typ CP0}),
                                    rupd
                                      ("HWREna.CPUNum",
                                       tp[call
                                            ("CP0.HWREna",@{typ HWREna},var("v",@{typ CP0}),
                                             @{theory}),bop(Bit,var_w("value",64),ln 0)],@{theory})],
                                 @{theory}),@{theory}),var("state",qTy)),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     let'
                       (tp[var("v",@{typ CP0}),var("s",qTy)],
                        let'
                          (var("s0",qTy),
                           apply
                             (call
                                ("write'CP0",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("CP0.HWREna",
                                    tp[var("v",@{typ CP0}),
                                       rupd
                                         ("HWREna.CC",
                                          tp[call
                                               ("CP0.HWREna",@{typ HWREna},var("v",@{typ CP0}),
                                                @{theory}),bop(Bit,var_w("value",64),ln 2)],
                                          @{theory})],@{theory}),@{theory}),var("s",qTy)),
                           tp[apply
                                (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                 var("s0",qTy)),var("s0",qTy)]),
                        let'
                          (tp[var("v",@{typ CP0}),var("s",qTy)],
                           let'
                             (var("s0",qTy),
                              apply
                                (call
                                   ("write'CP0",@{typ "state \<Rightarrow> state"},
                                    rupd
                                      ("CP0.HWREna",
                                       tp[var("v",@{typ CP0}),
                                          rupd
                                            ("HWREna.CCRes",
                                             tp[call
                                                  ("CP0.HWREna",@{typ HWREna},var("v",@{typ CP0}),
                                                   @{theory}),bop(Bit,var_w("value",64),ln 3)],
                                             @{theory})],@{theory}),@{theory}),var("s",qTy)),
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("s0",qTy)),var("s0",qTy)]),
                           let'
                             (tp[var("v",@{typ CP0}),var("s",qTy)],
                              let'
                                (var("s0",qTy),
                                 apply
                                   (call
                                      ("write'CP0",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("CP0.HWREna",
                                          tp[var("v",@{typ CP0}),
                                             rupd
                                               ("HWREna.RS",
                                                tp[call
                                                     ("CP0.HWREna",@{typ HWREna},
                                                      var("v",@{typ CP0}),@{theory}),
                                                   bop(Bit,var_w("value",64),ln 27)],@{theory})],
                                          @{theory}),@{theory}),var("s",qTy)),
                                 tp[apply
                                      (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                       var("s0",qTy)),var("s0",qTy)]),
                              let'
                                (tp[var("v",@{typ CP0}),var("s",qTy)],
                                 let'
                                   (var("s0",qTy),
                                    apply
                                      (call
                                         ("write'CP0",@{typ "state \<Rightarrow> state"},
                                          rupd
                                            ("CP0.HWREna",
                                             tp[var("v",@{typ CP0}),
                                                rupd
                                                  ("HWREna.DS",
                                                   tp[call
                                                        ("CP0.HWREna",@{typ HWREna},
                                                         var("v",@{typ CP0}),@{theory}),
                                                      bop(Bit,var_w("value",64),ln 28)],@{theory})],
                                             @{theory}),@{theory}),var("s",qTy)),
                                    tp[apply
                                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                          var("s0",qTy)),var("s0",qTy)]),
                                 apply
                                   (call
                                      ("write'CP0",@{typ "state \<Rightarrow> state"},
                                       rupd
                                         ("CP0.HWREna",
                                          tp[var("v",@{typ CP0}),
                                             rupd
                                               ("HWREna.UL",
                                                tp[call
                                                     ("CP0.HWREna",@{typ HWREna},
                                                      var("v",@{typ CP0}),@{theory}),
                                                   bop(Bit,var_w("value",64),ln 29)],@{theory})],
                                          @{theory}),@{theory}),var("s",qTy))))))))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(9,5)),eq(var_w("sel",3),lw(0,3)))),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.Count",
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory}),
                     @{theory}),var("state",qTy))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(10,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.EntryHi",
                           tp[var("v",@{typ CP0}),
                              call
                                ("write'reg'EntryHi",@{typ EntryHi},
                                 tp[call("CP0.EntryHi",@{typ EntryHi},var("v",@{typ CP0}),@{theory}),
                                    var_w("value",64)],@{theory})],@{theory}),@{theory}),
                     var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(11,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (tp[var("v",@{typ CP0}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Compare",
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),ex(var_w("value",64),ln 31,ln 0,w32)],
                              @{theory}),@{theory}),var("state",qTy)),
                     tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                        var("s0",qTy)]),
                  let'
                    (tp[var("v",@{typ CP0}),var("s",qTy)],
                     let'
                       (var("s0",qTy),
                        let'
                          (var("x0",@{typ CauseRegister}),
                           call("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),@{theory}),
                           apply
                             (call
                                ("write'CP0",@{typ "state \<Rightarrow> state"},
                                 rupd
                                   ("CP0.Cause",
                                    tp[var("v",@{typ CP0}),
                                       rupd
                                         ("CauseRegister.IP",
                                          tp[var("x0",@{typ CauseRegister}),
                                             bfi(ln 7,ln 7,mop(Cast w1,lf),
                                                 call
                                                   ("CauseRegister.IP",w8,
                                                    var("x0",@{typ CauseRegister}),@{theory}))],
                                          @{theory})],@{theory}),@{theory}),var("s",qTy))),
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                           var("s0",qTy)]),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Cause",
                              tp[var("v",@{typ CP0}),
                                 rupd
                                   ("CauseRegister.TI",
                                    tp[call
                                         ("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),
                                          @{theory}),lf],@{theory})],@{theory}),@{theory}),
                        var("s",qTy))))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(12,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Status",
                           tp[var("v",@{typ CP0}),
                              call
                                ("write'reg'StatusRegister",@{typ StatusRegister},
                                 tp[call
                                      ("CP0.Status",@{typ StatusRegister},var("v",@{typ CP0}),
                                       @{theory}),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(13,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  let'
                    (var("x0",@{typ CauseRegister}),
                     call("CP0.Cause",@{typ CauseRegister},var("v",@{typ CP0}),@{theory}),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Cause",
                              tp[var("v",@{typ CP0}),
                                 rupd
                                   ("CauseRegister.IP",
                                    tp[var("x0",@{typ CauseRegister}),
                                       bfi(ln 1,ln 0,
                                           ex(var_w("value",64),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
                                           call
                                             ("CauseRegister.IP",w8,var("x0",@{typ CauseRegister}),
                                              @{theory}))],@{theory})],@{theory}),@{theory}),
                        var("state",qTy))))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(14,5)),eq(var_w("sel",3),lw(0,3)))),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.EPC",
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),var_w("value",64)],@{theory}),@{theory}),
                  var("state",qTy))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Config",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("ConfigRegister.K0",
                                 tp[call
                                      ("CP0.Config",@{typ ConfigRegister},var("v",@{typ CP0}),
                                       @{theory}),
                                    ex(var_w("value",64),ln 2,ln 0,(Word_Lib.mk_wordT 3))],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(2,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Config2",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("ConfigRegister2.SU",
                                 tp[call
                                      ("CP0.Config2",@{typ ConfigRegister2},var("v",@{typ CP0}),
                                       @{theory}),ex(var_w("value",64),ln 15,ln 12,w4)],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(6,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Config6",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("ConfigRegister6.LTLB",
                                 tp[call
                                      ("CP0.Config6",@{typ ConfigRegister6},var("v",@{typ CP0}),
                                       @{theory}),bop(Bit,var_w("value",64),ln 2)],@{theory})],
                           @{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(20,5)),eq(var_w("sel",3),lw(0,3)))),
               let'
                 (var("v",@{typ CP0}),
                  apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.XContext",
                           tp[var("v",@{typ CP0}),
                              rupd
                                ("XContext.PTEBase",
                                 tp[call
                                      ("CP0.XContext",@{typ XContext},var("v",@{typ CP0}),@{theory}),
                                    ex(var_w("value",64),ln 63,ln 33,(Word_Lib.mk_wordT 31))],
                                 @{theory})],@{theory}),@{theory}),var("state",qTy)))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(23,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.done",
                  tp[apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.Debug",
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),ex(var_w("value",64),ln 31,ln 0,w32)],
                              @{theory}),@{theory}),var("state",qTy)),lt],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(26,5)),eq(var_w("sel",3),lw(0,3)))),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.ErrCtl",
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory}),
                     @{theory}),var("state",qTy))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(30,5)),eq(var_w("sel",3),lw(0,3)))),
               apply
                 (call
                    ("write'CP0",@{typ "state \<Rightarrow> state"},
                     rupd
                       ("CP0.ErrorEPC",
                        tp[apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),var_w("value",64)],@{theory}),@{theory}),
                  var("state",qTy)))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'COP1",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         apply
           (call
              ("SignalException",@{typ "state \<Rightarrow> state"},
               lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("register_inaccessible",
   close
     (var_w("cb",5),
      close
        (var("state",qTy),
         mop(Not,
             apply
               (call
                  ("allow_system_reg_access",@{typ "state \<Rightarrow> bool"},
                   tp[call
                        ("getPerms",@{typ Perms},
                         apply
                           (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                            var("state",qTy)),@{theory}),var_w("cb",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("register_inaccessible_write_attempt",
   close
     (var_w("mask",16),
      close
        (var("state",qTy),
         let'
           (tp[var_b"r",var("s1",@{typ "bool \<times> state"})],
            let'
              (var("s",@{typ "bool \<times> state"}),
               itb([(bop(And,bop(Bit,var_w("mask",16),ln 15),
                         apply
                           (call
                              ("register_inaccessible",@{typ "state \<Rightarrow> bool"},lw(31,5),
                               @{theory}),var("state",qTy))),
                     tp[lt,
                        apply
                          (call
                             ("SignalCapException",@{typ "state \<Rightarrow> state"},
                              tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(31,5)],
                              @{theory}),var("state",qTy))]),
                    (bop(And,bop(Bit,var_w("mask",16),ln 14),
                         apply
                           (call
                              ("register_inaccessible",@{typ "state \<Rightarrow> bool"},lw(30,5),
                               @{theory}),var("state",qTy))),
                     tp[lt,
                        apply
                          (call
                             ("SignalCapException",@{typ "state \<Rightarrow> state"},
                              tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(30,5)],
                              @{theory}),var("state",qTy))]),
                    (bop(And,bop(Bit,var_w("mask",16),ln 13),
                         apply
                           (call
                              ("register_inaccessible",@{typ "state \<Rightarrow> bool"},lw(29,5),
                               @{theory}),var("state",qTy))),
                     tp[lt,
                        apply
                          (call
                             ("SignalCapException",@{typ "state \<Rightarrow> state"},
                              tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(29,5)],
                              @{theory}),var("state",qTy))]),
                    (bop(And,bop(Bit,var_w("mask",16),ln 11),
                         apply
                           (call
                              ("register_inaccessible",@{typ "state \<Rightarrow> bool"},lw(27,5),
                               @{theory}),var("state",qTy))),
                     tp[lt,
                        apply
                          (call
                             ("SignalCapException",@{typ "state \<Rightarrow> state"},
                              tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(27,5)],
                              @{theory}),var("state",qTy))]),
                    (bop(And,bop(Bit,var_w("mask",16),ln 12),
                         apply
                           (call
                              ("register_inaccessible",@{typ "state \<Rightarrow> bool"},lw(28,5),
                               @{theory}),var("state",qTy))),
                     tp[lt,
                        apply
                          (call
                             ("SignalCapException",@{typ "state \<Rightarrow> state"},
                              tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),lw(28,5)],
                              @{theory}),var("state",qTy))])],tp[lf,var("state",qTy)]),
               tp[mop(Fst,var("s",@{typ "bool \<times> state"})),
                  var("s",@{typ "bool \<times> state"})]),
            tp[var_b"r",mop(Snd,var("s1",@{typ "bool \<times> state"}))]))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("watchOOB",close(tp[var("cap",@{typ Capability}),var_w("pc",64)],close(var("state",qTy),lu)))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SignExtendBitString",
   close(tp[var_n"w",var_v"x"],mop(PadLeft,tp[mop(Head,var_v"x"),var_n"w",var_v"x"])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ZeroExtendBitString",close(tp[var_n"w",var_v"x"],mop(PadLeft,tp[lf,var_n"w",var_v"x"])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'DumpCapReg",lu)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetBase",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("getBase",w64,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),var_w("rd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetOffset",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("getOffset",w64,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),var_w("rd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetLen",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("getLength",w64,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),var_w("rd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetTag",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[mop(Cast w64,
                          mop(Cast w1,
                              call
                                ("getTag",HOLogic.boolT,
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                       @{theory}),var("state",qTy)),@{theory}))),var_w("rd",5)],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetSealed",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[bfi(ln 0,ln 0,
                                mop(Cast w1,
                                    call
                                      ("getSealed",HOLogic.boolT,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("state",qTy)),@{theory})),
                                apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rd",5),
                                      @{theory}),var("state",qTy))),var_w("rd",5)],@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rd",5),@{theory}),
                         var("s0",qTy)),var("s0",qTy)]),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[bfi(ln 63,ln 1,lw(0,63),var_w("v",64)),var_w("rd",5)],@{theory}),
                   var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetPerm",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[bfi(bop(Add,const("UPERMS",HOLogic.natT,@{theory}),ln 14),ln 15,
                          ex(call
                               ("reg'UPerms",w32,
                                call
                                  ("getUPerms",@{typ UPerms},
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                @{theory}),bop(Sub,const("UPERMS",HOLogic.natT,@{theory}),ln 1),
                             ln 0,w16),
                          bfi(ln 14,ln 0,
                              ex(call
                                   ("reg'Perms",w32,
                                    call
                                      ("getPerms",@{typ Perms},
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                    @{theory}),ln 14,ln 0,(Word_Lib.mk_wordT 15)),lw(0,64))),
                      var_w("rd",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetType",
   close
     (tp[var_w("rd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[mop(Cast w64,
                            call
                              ("getType",(Word_Lib.mk_wordT 24),
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory})),var_w("rd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[mop(BNot,lw(0,64)),var_w("rd",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetPCC",
   close
     (var_w("cd",5),
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                               var("state",qTy)),
                            apply
                              (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                               var("state",qTy))],@{theory}),var_w("cd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetPCCSetOffset",
   close
     (tp[var_w("cd",5),var_w("rs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepOffset",HOLogic.boolT,
                      tp[apply
                           (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                            var("state",qTy)),
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                            var("state",qTy))],@{theory})),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[call
                          ("setOffset",@{typ Capability},
                           tp[const("nullCap",@{typ Capability},@{theory}),
                              bop(Add,
                                  call
                                    ("getBase",w64,
                                     apply
                                       (const
                                          ("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                        var("state",qTy)),@{theory}),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                        @{theory}),var("state",qTy)))],@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                               var("state",qTy)),
                            apply
                              (call
                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                               var("state",qTy))],@{theory}),var_w("cd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CGetCause",
   close
     (var_w("rd",5),
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Access_System_Registers",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                            var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException_noReg",@{typ "state \<Rightarrow> state"},
                     lc("capExcAccessSysReg","CapExceptionType",@{theory}),@{theory}),
                  var("state",qTy)))],
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[bfi(ln 7,ln 0,
                                call
                                  ("CapCause.RegNum",w8,
                                   call("state.capcause",@{typ CapCause},var("state",qTy),@{theory}),
                                   @{theory}),
                                apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rd",5),
                                      @{theory}),var("state",qTy))),var_w("rd",5)],@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rd",5),@{theory}),
                         var("s0",qTy)),var("s0",qTy)]),
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (call
                           ("write'GPR",@{typ "state \<Rightarrow> state"},
                            tp[bfi(ln 15,ln 8,
                                   call
                                     ("CapCause.ExcCode",w8,
                                      call("state.capcause",@{typ CapCause},var("s",qTy),@{theory}),
                                      @{theory}),var_w("v",64)),var_w("rd",5)],@{theory}),
                         var("s",qTy)),
                      tp[apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rd",5),@{theory}),
                            var("s0",qTy)),var("s0",qTy)]),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[bfi(ln 63,ln 16,lw(0,48),var_w("v",64)),var_w("rd",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSetCause",
   close
     (var_w("rt",5),
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Access_System_Registers",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                            var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException_noReg",@{typ "state \<Rightarrow> state"},
                     lc("capExcAccessSysReg","CapExceptionType",@{theory}),@{theory}),
                  var("state",qTy)))],
             let'
               (var("s",qTy),
                rupd
                  ("state.capcause",
                   tp[var("state",qTy),
                      rupd
                        ("CapCause.ExcCode",
                         tp[call("state.capcause",@{typ CapCause},var("state",qTy),@{theory}),
                            ex(apply
                                 (call
                                    ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                     @{theory}),var("state",qTy)),ln 15,ln 8,w8)],@{theory})],
                   @{theory}),
                rupd
                  ("state.capcause",
                   tp[var("s",qTy),
                      rupd
                        ("CapCause.RegNum",
                         tp[call("state.capcause",@{typ CapCause},var("s",qTy),@{theory}),
                            ex(apply
                                 (call
                                    ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                     @{theory}),var("s",qTy)),ln 7,ln 0,w8)],@{theory})],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CIncOffset",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (bop(And,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   bop(And,
                       call
                         ("getSealed",HOLogic.boolT,
                          apply
                            (call
                               ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                @{theory}),var("state",qTy)),@{theory}),
                       mop(Not,
                           eq(apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                    @{theory}),var("state",qTy)),lw(0,64))))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepOffset",HOLogic.boolT,
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),
                         bop(Add,
                             call
                               ("getOffset",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory}),
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)))],@{theory})),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[call
                          ("setOffset",@{typ Capability},
                           tp[const("nullCap",@{typ Capability},@{theory}),
                              bop(Add,
                                  bop(Add,
                                      call
                                        ("getBase",w64,
                                         apply
                                           (call
                                              ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                               var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                      call
                                        ("getOffset",w64,
                                         apply
                                           (call
                                              ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                               var_w("cb",5),@{theory}),var("state",qTy)),@{theory})),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)))],@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),
                            bop(Add,
                                call
                                  ("getOffset",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("state",qTy)))],@{theory}),var_w("cd",5)],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CIncOffsetImmediate",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("increment",11)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (bop(And,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepOffset",HOLogic.boolT,
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),
                         bop(Add,
                             call
                               ("getOffset",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory}),
                             mop(SE w64,var_w("increment",11)))],@{theory})),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[call
                          ("setOffset",@{typ Capability},
                           tp[const("nullCap",@{typ Capability},@{theory}),
                              bop(Add,
                                  bop(Add,
                                      call
                                        ("getBase",w64,
                                         apply
                                           (call
                                              ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                               var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                      call
                                        ("getOffset",w64,
                                         apply
                                           (call
                                              ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                               var_w("cb",5),@{theory}),var("state",qTy)),@{theory})),
                                  mop(SE w64,var_w("increment",11)))],@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),
                            bop(Add,
                                call
                                  ("getOffset",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                mop(SE w64,var_w("increment",11)))],@{theory}),var_w("cd",5)],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSetBounds",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            call
              ("getBase",w64,
               apply
                 (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                  var("state",qTy)),@{theory}),
            let'
              (var_w("v1",64),
               bop(Add,
                   call
                     ("getBase",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               itb([(mop(Not,
                         call
                           ("StatusRegister.CU2",HOLogic.boolT,
                            call
                              ("CP0.Status",@{typ StatusRegister},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory})),
                     apply
                       (const
                          ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                        var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                           @{theory}),var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (mop(Not,
                         call
                           ("getTag",HOLogic.boolT,
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (call
                       ("getSealed",HOLogic.boolT,
                        apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),@{theory}),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (bop(Ult,var_w("v1",64),var_w("v",64)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (bop(Ugt,
                         bop(Add,cc[lw(0,1),var_w("v1",64)],
                             cc[lw(0,1),
                                apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("state",qTy))]),
                         bop(Add,cc[lw(0,1),var_w("v",64)],
                             cc[lw(0,1),
                                call
                                  ("getLength",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy)))],
                   apply
                     (call
                        ("write'CAPR",@{typ "state \<Rightarrow> state"},
                         tp[call
                              ("setBounds",@{typ Capability},
                               tp[apply
                                    (call
                                       ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                        var_w("cb",5),@{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy))],@{theory}),var_w("cd",5)],
                         @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSetBoundsExact",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            call
              ("getBase",w64,
               apply
                 (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                  var("state",qTy)),@{theory}),
            let'
              (var_w("v1",64),
               bop(Add,
                   call
                     ("getBase",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               itb([(mop(Not,
                         call
                           ("StatusRegister.CU2",HOLogic.boolT,
                            call
                              ("CP0.Status",@{typ StatusRegister},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory})),
                     apply
                       (const
                          ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                        var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                           @{theory}),var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (mop(Not,
                         call
                           ("getTag",HOLogic.boolT,
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (call
                       ("getSealed",HOLogic.boolT,
                        apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),@{theory}),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (bop(Ult,var_w("v1",64),var_w("v",64)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (bop(Ugt,
                         bop(Add,cc[lw(0,1),var_w("v1",64)],
                             cc[lw(0,1),
                                apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("state",qTy))]),
                         bop(Add,cc[lw(0,1),var_w("v",64)],
                             cc[lw(0,1),
                                call
                                  ("getLength",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (mop(Not,
                         call
                           ("canRepBounds",HOLogic.boolT,
                            tp[apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),
                               apply
                                 (call
                                    ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                     @{theory}),var("state",qTy))],@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcInexact","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy)))],
                   apply
                     (call
                        ("write'CAPR",@{typ "state \<Rightarrow> state"},
                         tp[call
                              ("setBounds",@{typ Capability},
                               tp[apply
                                    (call
                                       ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                        var_w("cb",5),@{theory}),var("state",qTy)),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy))],@{theory}),var_w("cd",5)],
                         @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSetBoundsImmediate",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("req_length",11)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            call
              ("getBase",w64,
               apply
                 (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                  var("state",qTy)),@{theory}),
            let'
              (var_w("v1",64),
               bop(Add,
                   call
                     ("getBase",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               itb([(mop(Not,
                         call
                           ("StatusRegister.CU2",HOLogic.boolT,
                            call
                              ("CP0.Status",@{typ StatusRegister},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory})),
                     apply
                       (const
                          ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                        var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                           @{theory}),var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (mop(Not,
                         call
                           ("getTag",HOLogic.boolT,
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (call
                       ("getSealed",HOLogic.boolT,
                        apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),@{theory}),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (bop(Ult,var_w("v1",64),var_w("v",64)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (bop(Ugt,
                         bop(Add,cc[lw(0,1),var_w("v1",64)],
                             mop(Cast (Word_Lib.mk_wordT 65),var_w("req_length",11))),
                         bop(Add,cc[lw(0,1),var_w("v",64)],
                             cc[lw(0,1),
                                call
                                  ("getLength",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy)))],
                   apply
                     (call
                        ("write'CAPR",@{typ "state \<Rightarrow> state"},
                         tp[call
                              ("setBounds",@{typ Capability},
                               tp[apply
                                    (call
                                       ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                        var_w("cb",5),@{theory}),var("state",qTy)),
                                  mop(Cast w64,var_w("req_length",11))],@{theory}),var_w("cd",5)],
                         @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ClearRegs",
   close
     (tp[var_w("mask",16),var("regset",@{typ RegSet})],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU2",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory})),
             apply
               (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             cs(var("regset",@{typ RegSet}),
                [(lc("Lo_rs","RegSet",@{theory}),
                  mop(Snd,
                      apply
                        (forloop
                           (tp[ln 0,ln 15,
                               close
                                 (var_n"i",
                                  close
                                    (var("state",qTy),
                                     tp[lu,
                                        ite(bop(Bit,var_w("mask",16),var_n"i"),
                                            apply
                                              (call
                                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                  tp[lw(0,64),
                                                     mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                  @{theory}),var("state",qTy)),var("state",qTy))]))]),
                         var("state",qTy)))),
                 (lc("Hi_rs","RegSet",@{theory}),
                  mop(Snd,
                      apply
                        (forloop
                           (tp[ln 16,ln 31,
                               close
                                 (var_n"i",
                                  close
                                    (var("state",qTy),
                                     tp[lu,
                                        ite(bop(Bit,var_w("mask",16),bop(Sub,var_n"i",ln 16)),
                                            apply
                                              (call
                                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                  tp[lw(0,64),
                                                     mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                  @{theory}),var("state",qTy)),var("state",qTy))]))]),
                         var("state",qTy)))),
                 (lc("CLo_rs","RegSet",@{theory}),
                  mop(Snd,
                      apply
                        (forloop
                           (tp[ln 0,ln 15,
                               close
                                 (var_n"i",
                                  close
                                    (var("state",qTy),
                                     tp[lu,
                                        ite(bop(Bit,var_w("mask",16),var_n"i"),
                                            apply
                                              (call
                                                 ("write'CAPR",@{typ "state \<Rightarrow> state"},
                                                  tp[const("nullCap",@{typ Capability},@{theory}),
                                                     mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                  @{theory}),var("state",qTy)),var("state",qTy))]))]),
                         var("state",qTy)))),
                 (lc("CHi_rs","RegSet",@{theory}),
                  let'
                    (tp[var_b"v",var("s",qTy)],
                     apply
                       (call
                          ("register_inaccessible_write_attempt",
                           @{typ "state \<Rightarrow> (bool \<times> state)"},var_w("mask",16),
                           @{theory}),var("state",qTy)),
                     ite(mop(Not,var_b"v"),
                         mop(Snd,
                             apply
                               (forloop
                                  (tp[ln 16,ln 31,
                                      close
                                        (var_n"i",
                                         close
                                           (var("state",qTy),
                                            tp[lu,
                                               ite(bop(Bit,var_w("mask",16),bop(Sub,var_n"i",ln 16)),
                                                   apply
                                                     (call
                                                        ("write'CAPR",
                                                         @{typ "state \<Rightarrow> state"},
                                                         tp[const
                                                              ("nullCap",@{typ Capability},@{theory}),
                                                            mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],
                                                         @{theory}),var("state",qTy)),
                                                   var("state",qTy))]))]),var("s",qTy))),
                         var("s",qTy))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ClearLo",
   close
     (var_w("mask",16),
      close
        (var("state",qTy),
         apply
           (call
              ("ClearRegs",@{typ "state \<Rightarrow> state"},
               tp[var_w("mask",16),lc("Lo_rs","RegSet",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ClearHi",
   close
     (var_w("mask",16),
      close
        (var("state",qTy),
         apply
           (call
              ("ClearRegs",@{typ "state \<Rightarrow> state"},
               tp[var_w("mask",16),lc("Hi_rs","RegSet",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CClearLo",
   close
     (var_w("mask",16),
      close
        (var("state",qTy),
         apply
           (call
              ("ClearRegs",@{typ "state \<Rightarrow> state"},
               tp[var_w("mask",16),lc("CLo_rs","RegSet",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CClearHi",
   close
     (var_w("mask",16),
      close
        (var("state",qTy),
         apply
           (call
              ("ClearRegs",@{typ "state \<Rightarrow> state"},
               tp[var_w("mask",16),lc("CHi_rs","RegSet",@{theory})],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CClearTag",
   close
     (tp[var_w("cd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setTag",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),lf],@{theory}),var_w("cd",5)],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CAndPerm",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setUPerms",@{typ Capability},
                         tp[call
                              ("setPerms",@{typ Capability},
                               tp[apply
                                    (call
                                       ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                        var_w("cb",5),@{theory}),var("state",qTy)),
                                  call
                                    ("rec'Perms",@{typ Perms},
                                     mop(Cast w32,
                                         bop(BAnd,
                                             ex(call
                                                  ("reg'Perms",w32,
                                                   call
                                                     ("getPerms",@{typ Perms},
                                                      apply
                                                        (call
                                                           ("CAPR",
                                                            @{typ "state \<Rightarrow> Capability"},
                                                            var_w("cb",5),@{theory}),
                                                         var("state",qTy)),@{theory}),@{theory}),
                                                ln 14,ln 0,(Word_Lib.mk_wordT 15)),
                                             ex(apply
                                                  (call
                                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                      var_w("rt",5),@{theory}),var("state",qTy)),
                                                ln 14,ln 0,(Word_Lib.mk_wordT 15)))),@{theory})],
                               @{theory}),
                            call
                              ("rec'UPerms",@{typ UPerms},
                               mop(Cast w32,
                                   bop(BAnd,
                                       ex(call
                                            ("reg'UPerms",w32,
                                             call
                                               ("getUPerms",@{typ UPerms},
                                                apply
                                                  (call
                                                     ("CAPR",
                                                      @{typ "state \<Rightarrow> Capability"},
                                                      var_w("cb",5),@{theory}),var("state",qTy)),
                                                @{theory}),@{theory}),
                                          bop(Sub,const("UPERMS",HOLogic.natT,@{theory}),ln 1),ln 0,
                                          w16),
                                       ex(apply
                                            (call
                                               ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                var_w("rt",5),@{theory}),var("state",qTy)),
                                          bop(Add,const("UPERMS",HOLogic.natT,@{theory}),ln 14),
                                          ln 15,w16))),@{theory})],@{theory}),var_w("cd",5)],
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSetOffset",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (bop(And,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepOffset",HOLogic.boolT,
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy))],@{theory})),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[call
                          ("setOffset",@{typ Capability},
                           tp[const("nullCap",@{typ Capability},@{theory}),
                              bop(Add,
                                  call
                                    ("getBase",w64,
                                     apply
                                       (call
                                          ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                           var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)))],@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),
                            apply
                              (call
                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                               var("state",qTy))],@{theory}),var_w("cd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSub",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("ct",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("ct",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("ct",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[bop(Sub,
                          bop(Sub,
                              bop(Add,
                                  call
                                    ("getBase",w64,
                                     apply
                                       (call
                                          ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                           var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                  call
                                    ("getOffset",w64,
                                     apply
                                       (call
                                          ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                           var_w("cb",5),@{theory}),var("state",qTy)),@{theory})),
                              call
                                ("getBase",w64,
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                       @{theory}),var("state",qTy)),@{theory})),
                          call
                            ("getOffset",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                   @{theory}),var("state",qTy)),@{theory})),var_w("rd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CCheckPerm",
   close
     (tp[var_w("cs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(bop(BAnd,
                          ex(call
                               ("reg'Perms",w32,
                                call
                                  ("getPerms",@{typ Perms},
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cs",5),@{theory}),var("state",qTy)),@{theory}),
                                @{theory}),ln 14,ln 0,(Word_Lib.mk_wordT 15)),
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 14,ln 0,(Word_Lib.mk_wordT 15))),
                      ex(apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)),ln 14,ln 0,(Word_Lib.mk_wordT 15)))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcUser","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(bop(BAnd,
                          ex(call
                               ("reg'UPerms",w32,
                                call
                                  ("getUPerms",@{typ UPerms},
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cs",5),@{theory}),var("state",qTy)),@{theory}),
                                @{theory}),bop(Sub,const("UPERMS",HOLogic.natT,@{theory}),ln 1),
                             ln 0,w16),
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),
                             bop(Add,const("UPERMS",HOLogic.natT,@{theory}),ln 14),ln 15,w16)),
                      ex(apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)),bop(Add,const("UPERMS",HOLogic.natT,@{theory}),ln 14),
                         ln 15,w16))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcUser","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(ex(apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)),ln 63,
                         bop(Add,const("UPERMS",HOLogic.natT,@{theory}),ln 15),
                         (Word_Lib.mk_wordT 33)),lw(0,33))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcUser","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy)))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CCheckType",
   close
     (tp[var_w("cs",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),
                      call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcType","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy)))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CFromPtr",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (eq(apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),lw(0,64)),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[const("nullCap",@{typ Capability},@{theory}),var_w("cd",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepOffset",HOLogic.boolT,
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy))],@{theory})),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[call
                          ("setOffset",@{typ Capability},
                           tp[const("nullCap",@{typ Capability},@{theory}),
                              bop(Add,
                                  call
                                    ("getBase",w64,
                                     apply
                                       (call
                                          ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                           var_w("cb",5),@{theory}),var("state",qTy)),@{theory}),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)))],@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setOffset",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),
                            apply
                              (call
                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                               var("state",qTy))],@{theory}),var_w("cd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CToPtr",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("ct",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("ct",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("ct",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},tp[lw(0,64),var_w("rd",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[bop(Sub,
                          bop(Add,
                              call
                                ("getBase",w64,
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                       @{theory}),var("state",qTy)),@{theory}),
                              call
                                ("getOffset",w64,
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                       @{theory}),var("state",qTy)),@{theory})),
                          call
                            ("getBase",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                   @{theory}),var("state",qTy)),@{theory})),var_w("rd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CPtrCmp",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("ct",5),var("t",@{typ CmpType})],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("ct",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("ct",5)],
                     @{theory}),var("state",qTy)))],
             let'
               (var("v",@{typ Capability}),
                apply
                  (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                   var("state",qTy)),
                let'
                  (var("v0",@{typ Capability}),
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                      var("state",qTy)),
                   let'
                     (var("s",
                          @{typ
                          "bool \<times>
                           bool \<times> bool \<times> bool \<times> bool \<times> state"}),
                      ite(mop(Not,
                              eq(call("getTag",HOLogic.boolT,var("v",@{typ Capability}),@{theory}),
                                 call("getTag",HOLogic.boolT,var("v0",@{typ Capability}),@{theory}))),
                          ite(call("getTag",HOLogic.boolT,var("v",@{typ Capability}),@{theory}),
                              tp[lf,lf,lt,lt,lf,var("state",qTy)],
                              tp[lt,lt,lf,lf,lf,var("state",qTy)]),
                          let'
                            (var_w("cursor1",64),
                             bop(Add,call("getBase",w64,var("v",@{typ Capability}),@{theory}),
                                 call("getOffset",w64,var("v",@{typ Capability}),@{theory})),
                             let'
                               (var_w("cursor2",64),
                                bop(Add,call("getBase",w64,var("v0",@{typ Capability}),@{theory}),
                                    call("getOffset",w64,var("v0",@{typ Capability}),@{theory})),
                                tp[bop(Ult,var_w("cursor1",64),var_w("cursor2",64)),
                                   bop(Lt,var_w("cursor1",64),var_w("cursor2",64)),
                                   bop(Ugt,var_w("cursor1",64),var_w("cursor2",64)),
                                   bop(Gt,var_w("cursor1",64),var_w("cursor2",64)),
                                   eq(var_w("cursor1",64),var_w("cursor2",64)),var("state",qTy)]))),
                      cs(var("t",@{typ CmpType}),
                         [(lc("EQ","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        mop(Fst,
                                            mop(Snd,
                                                mop(Snd,
                                                    mop(Snd,
                                                        mop(Snd,
                                                            var("s",
                                                                @{typ
                                                                "bool \<times>
                                                                 bool \<times>
                                                                 bool \<times>
                                                                 bool \<times> bool \<times> state"}))))))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("NE","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        mop(Not,
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        mop(Snd,
                                                            mop(Snd,
                                                                var("s",
                                                                    @{typ
                                                                    "bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times> state"})))))))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("LT","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        mop(Fst,
                                            mop(Snd,
                                                var("s",
                                                    @{typ
                                                    "bool \<times>
                                                     bool \<times>
                                                     bool \<times> bool \<times> bool \<times> state"})))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("LE","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        bop(Or,
                                            mop(Fst,
                                                mop(Snd,
                                                    var("s",
                                                        @{typ
                                                        "bool \<times>
                                                         bool \<times>
                                                         bool \<times>
                                                         bool \<times> bool \<times> state"}))),
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        mop(Snd,
                                                            mop(Snd,
                                                                var("s",
                                                                    @{typ
                                                                    "bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times> state"})))))))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("LTU","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        mop(Fst,
                                            var("s",
                                                @{typ
                                                "bool \<times>
                                                 bool \<times>
                                                 bool \<times> bool \<times> bool \<times> state"}))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("LEU","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[mop(Cast w64,
                                        bop(Or,
                                            mop(Fst,
                                                var("s",
                                                    @{typ
                                                    "bool \<times>
                                                     bool \<times>
                                                     bool \<times> bool \<times> bool \<times> state"})),
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        mop(Snd,
                                                            mop(Snd,
                                                                var("s",
                                                                    @{typ
                                                                    "bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times>
                                                                     bool \<times> state"})))))))),
                                    var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("EXEQ","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[ite(eq(var("v",@{typ Capability}),var("v0",@{typ Capability})),
                                        lw(1,64),lw(0,64)),var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"})))))))),
                          (lc("NEXEQ","CmpType",@{theory}),
                           apply
                             (call
                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                 tp[ite(eq(var("v",@{typ Capability}),var("v0",@{typ Capability})),
                                        lw(0,64),lw(1,64)),var_w("rd",5)],@{theory}),
                              mop(Snd,
                                  mop(Snd,
                                      mop(Snd,
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool \<times>
                                                       bool \<times>
                                                       bool \<times>
                                                       bool \<times> bool \<times> state"}))))))))],
                         @{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEQ",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("EQ","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CNE",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("NE","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLT",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("LT","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLE",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("LE","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLTU",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("LTU","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLEU",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("LEU","CmpType",@{theory})],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEXEQ",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("EXEQ","CmpType",@{theory})],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CNEXEQ",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("CPtrCmp",@{typ "state \<Rightarrow> state"},
               tp[var_w("rd",5),var_w("cb",5),var_w("cs",5),lc("NEXEQ","CmpType",@{theory})],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CBTU",
   close
     (tp[var_w("cb",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU2",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory})),
             apply
               (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_b"v",var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call
                           ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                            @{theory}),var("s0",qTy)),var("s0",qTy)]),
                itb([(var_b"v",
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          call
                            ("getTag",HOLogic.boolT,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("s",qTy)),@{theory})),
                      apply
                        (call
                           ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                            mop(Some,
                                bop(Add,
                                    bop(Add,
                                        apply
                                          (const
                                             ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                           var("s",qTy)),lw(4,64)),
                                    bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                         var("s",qTy)))],var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CBTS",
   close
     (tp[var_w("cb",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU2",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory})),
             apply
               (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_b"v",var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call
                           ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                            @{theory}),var("s0",qTy)),var("s0",qTy)]),
                itb([(var_b"v",
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (call
                        ("getTag",HOLogic.boolT,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("s",qTy)),@{theory}),
                      apply
                        (call
                           ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                            mop(Some,
                                bop(Add,
                                    bop(Add,
                                        apply
                                          (const
                                             ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                           var("s",qTy)),lw(4,64)),
                                    bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                         var("s",qTy)))],var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSC",
   close
     (tp[var_w("cs",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Store_Capability",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermStoreCap","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (bop(And,
                   mop(Not,
                       call
                         ("Perms.Permit_Store_Local_Capability",HOLogic.boolT,
                          call
                            ("getPerms",@{typ Perms},
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("state",qTy)),@{theory}),@{theory})),
                   bop(And,
                       call
                         ("getTag",HOLogic.boolT,
                          apply
                            (call
                               ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                @{theory}),var("state",qTy)),@{theory}),
                       mop(Not,
                           call
                             ("Perms.Global",HOLogic.boolT,
                              call
                                ("getPerms",@{typ Perms},
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                       @{theory}),var("state",qTy)),@{theory}),@{theory})))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermStoreLocalCap","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy)))],
             let'
               (var_w("v",64),
                bop(Add,
                    bop(Add,
                        bop(Add,
                            call
                              ("getBase",w64,
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory}),
                            call
                              ("getOffset",w64,
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory})),
                        apply
                          (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                           var("state",qTy))),mop(SE w64,cc[var_w("offset",11),lw(0,4)])),
                itb([(bop(Ugt,
                          bop(Add,cc[lw(0,1),var_w("v",64)],
                              mop(Cast (Word_Lib.mk_wordT 65),
                                  const("CAPBYTEWIDTH",HOLogic.natT,@{theory}))),
                          bop(Add,
                              cc[lw(0,1),
                                 call
                                   ("getBase",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("state",qTy)),@{theory})],
                              cc[lw(0,1),
                                 call
                                   ("getLength",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("state",qTy))),
                     (bop(Ult,var_w("v",64),
                          call
                            ("getBase",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("state",qTy)),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("state",qTy))),
                     (mop(Not,call("isCapAligned",HOLogic.boolT,var_w("v",64),@{theory})),
                      apply
                        (call
                           ("SignalException",@{typ "state \<Rightarrow> state"},
                            lc("AdES","ExceptionType",@{theory}),@{theory}),
                         apply
                           (call
                              ("write'CP0",@{typ "state \<Rightarrow> state"},
                               rupd
                                 ("CP0.BadVAddr",
                                  tp[apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("state",qTy)),var_w("v",64)],@{theory}),@{theory}),
                            var("state",qTy))))],
                    apply
                      (call
                         ("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,
                          @{theory}),
                       mop(Snd,
                           apply
                             (call
                                ("StoreCap",@{typ "state \<Rightarrow> (bool \<times> state)"},
                                 tp[var_w("v",64),
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cs",5),@{theory}),var("state",qTy)),lf],@{theory}),
                              var("state",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLC",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy)))],
             let'
               (var_w("v",64),
                bop(Add,
                    bop(Add,
                        bop(Add,
                            call
                              ("getBase",w64,
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory}),
                            call
                              ("getOffset",w64,
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory})),
                        apply
                          (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                           var("state",qTy))),mop(SE w64,cc[var_w("offset",11),lw(0,4)])),
                itb([(bop(Ugt,
                          bop(Add,cc[lw(0,1),var_w("v",64)],
                              mop(Cast (Word_Lib.mk_wordT 65),
                                  const("CAPBYTEWIDTH",HOLogic.natT,@{theory}))),
                          bop(Add,
                              cc[lw(0,1),
                                 call
                                   ("getBase",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("state",qTy)),@{theory})],
                              cc[lw(0,1),
                                 call
                                   ("getLength",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("state",qTy))),
                     (bop(Ult,var_w("v",64),
                          call
                            ("getBase",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("state",qTy)),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("state",qTy))),
                     (mop(Not,call("isCapAligned",HOLogic.boolT,var_w("v",64),@{theory})),
                      apply
                        (call
                           ("SignalException",@{typ "state \<Rightarrow> state"},
                            lc("AdEL","ExceptionType",@{theory}),@{theory}),
                         apply
                           (call
                              ("write'CP0",@{typ "state \<Rightarrow> state"},
                               rupd
                                 ("CP0.BadVAddr",
                                  tp[apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("state",qTy)),var_w("v",64)],@{theory}),@{theory}),
                            var("state",qTy))))],
                    let'
                      (tp[var("v",@{typ Capability}),var("s",qTy)],
                       apply
                         (call
                            ("LoadCap",@{typ "state \<Rightarrow> (Capability \<times> state)"},
                             tp[var_w("v",64),lf],@{theory}),var("state",qTy)),
                       apply
                         (call
                            ("write'LLbit",@{typ "state \<Rightarrow> state"},lo HOLogic.boolT,
                             @{theory}),
                          ite(mop(Not,
                                  apply
                                    (const
                                       ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},
                                        @{theory}),var("s",qTy))),
                              apply
                                (call
                                   ("write'CAPR",@{typ "state \<Rightarrow> state"},
                                    tp[ite(mop(Not,
                                               call
                                                 ("Perms.Permit_Load_Capability",HOLogic.boolT,
                                                  call
                                                    ("getPerms",@{typ Perms},
                                                     apply
                                                       (call
                                                          ("CAPR",
                                                           @{typ "state \<Rightarrow> Capability"},
                                                           var_w("cb",5),@{theory}),var("s",qTy)),
                                                     @{theory}),@{theory})),
                                           call
                                             ("setTag",@{typ Capability},
                                              tp[var("v",@{typ Capability}),lf],@{theory}),
                                           var("v",@{typ Capability})),var_w("cd",5)],@{theory}),
                                 var("s",qTy)),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLoad",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("s",1),var_w("t",2)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Load",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermLoad","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy)))],
             let'
               (var("v",@{typ Capability}),
                apply
                  (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                   var("state",qTy)),
                let'
                  (var_w("v0",64),
                   bop(Add,
                       bop(Add,
                           bop(Add,call("getBase",w64,var("v",@{typ Capability}),@{theory}),
                               call("getOffset",w64,var("v",@{typ Capability}),@{theory})),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy))),
                       mop(SE w64,
                           bop(Lsl,
                               cc[rep(mop(Cast w1,bop(Bit,var_w("offset",8),ln 7)),ln 3,
                                      (Word_Lib.mk_wordT 3)),var_w("offset",8)],
                               mop(Cast HOLogic.natT,var_w("t",2))))),
                   let'
                     (var("s0",@{typ "3 word \<times> 3 word \<times> 64 word \<times> state"}),
                      itb([(eq(var_w("t",2),lw(0,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   rep(apply
                                         (const
                                            ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                             @{theory}),var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
                               const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lw(1,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(1,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   cc[rep(apply
                                            (const
                                               ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                                @{theory}),var("state",qTy)),ln 2,
                                          (Word_Lib.mk_wordT 2)),lw(0,1)]),
                               const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lw(2,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(2,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   cc[apply
                                        (const
                                           ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                            @{theory}),var("state",qTy)),lw(0,2)]),
                               const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lw(4,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(3,2)),
                            tp[lw(0,3),const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lw(8,64),
                               var("state",qTy)])],
                          mop(Snd,
                              lx(@{typ
                                 "unit \<times>
                                  3 word \<times> 3 word \<times> 64 word \<times> state"}))),
                      itb([(bop(Ugt,
                                bop(Add,cc[lw(0,1),var_w("v0",64)],
                                    cc[lw(0,1),
                                       mop(Fst,
                                           mop(Snd,
                                               mop(Snd,
                                                   var("s0",
                                                       @{typ
                                                       "3 word \<times>
                                                        3 word \<times> 64 word \<times> state"}))))]),
                                bop(Add,
                                    cc[lw(0,1),
                                       call("getBase",w64,var("v",@{typ Capability}),@{theory})],
                                    cc[lw(0,1),
                                       call("getLength",w64,var("v",@{typ Capability}),@{theory})])),
                            apply
                              (call
                                 ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                  tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                  @{theory}),
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s0",
                                               @{typ
                                               "3 word \<times>
                                                3 word \<times> 64 word \<times> state"})))))),
                           (bop(Ult,var_w("v0",64),
                                call("getBase",w64,var("v",@{typ Capability}),@{theory})),
                            apply
                              (call
                                 ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                  tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                  @{theory}),
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s0",
                                               @{typ
                                               "3 word \<times>
                                                3 word \<times> 64 word \<times> state"}))))))],
                          let'
                            (tp[var_w("v",64),
                                var("s0",
                                    @{typ "3 word \<times> 3 word \<times> 64 word \<times> state"})],
                             let'
                               (tp[var_w("v",64),
                                   var("s3",@{typ "3 word \<times> 64 word \<times> state"})],
                                let'
                                  (tp[var_w("v",64),var("s3",@{typ "64 word \<times> state"})],
                                   let'
                                     (tp[var_w("v",64),var("s3",qTy)],
                                      apply
                                        (call
                                           ("LoadMemoryCap",
                                            @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                            tp[mop(Fst,
                                                   mop(Snd,
                                                       var("s0",
                                                           @{typ
                                                           "3 word \<times>
                                                            3 word \<times> 64 word \<times> state"}))),
                                               lt,var_w("v0",64),lf],@{theory}),
                                         mop(Snd,
                                             mop(Snd,
                                                 mop(Snd,
                                                     var("s0",
                                                         @{typ
                                                         "3 word \<times>
                                                          3 word \<times> 64 word \<times> state"}))))),
                                      tp[var_w("v",64),
                                         mop(Fst,
                                             mop(Snd,
                                                 mop(Snd,
                                                     var("s0",
                                                         @{typ
                                                         "3 word \<times>
                                                          3 word \<times> 64 word \<times> state"})))),
                                         var("s3",qTy)]),
                                   tp[var_w("v",64),
                                      mop(Fst,
                                          mop(Snd,
                                              var("s0",
                                                  @{typ
                                                  "3 word \<times>
                                                   3 word \<times> 64 word \<times> state"}))),
                                      var("s3",@{typ "64 word \<times> state"})]),
                                tp[var_w("v",64),
                                   mop(Fst,
                                       var("s0",
                                           @{typ
                                           "3 word \<times> 3 word \<times> 64 word \<times> state"})),
                                   var("s3",@{typ "3 word \<times> 64 word \<times> state"})]),
                             let'
                               (tp[var_b"v0",
                                   var("s0",
                                       @{typ
                                       "3 word \<times> 3 word \<times> 64 word \<times> state"})],
                                let'
                                  (tp[var_b"v",
                                      var("s3",@{typ "3 word \<times> 64 word \<times> state"})],
                                   let'
                                     (tp[var_b"v",var("s3",@{typ "64 word \<times> state"})],
                                      let'
                                        (tp[var_b"v",var("s3",qTy)],
                                         let'
                                           (var("s",qTy),
                                            mop(Snd,
                                                mop(Snd,
                                                    mop(Snd,
                                                        var("s0",
                                                            @{typ
                                                            "3 word \<times>
                                                             3 word \<times> 64 word \<times> state"})))),
                                            tp[apply
                                                 (const
                                                    ("exceptionSignalled",
                                                     @{typ "state \<Rightarrow> bool"},@{theory}),
                                                  var("s",qTy)),var("s",qTy)]),
                                         tp[var_b"v",
                                            mop(Fst,
                                                mop(Snd,
                                                    mop(Snd,
                                                        var("s0",
                                                            @{typ
                                                            "3 word \<times>
                                                             3 word \<times> 64 word \<times> state"})))),
                                            var("s3",qTy)]),
                                      tp[var_b"v",
                                         mop(Fst,
                                             mop(Snd,
                                                 var("s0",
                                                     @{typ
                                                     "3 word \<times>
                                                      3 word \<times> 64 word \<times> state"}))),
                                         var("s3",@{typ "64 word \<times> state"})]),
                                   tp[var_b"v",
                                      mop(Fst,
                                          var("s0",
                                              @{typ
                                              "3 word \<times>
                                               3 word \<times> 64 word \<times> state"})),
                                      var("s3",@{typ "3 word \<times> 64 word \<times> state"})]),
                                ite(mop(Not,var_b"v0"),
                                    let'
                                      (var_v"final_data",
                                       ex(mop(Cast(@{typ "bool list"}),var_w("v",64)),
                                          bop(Sub,
                                              bop(Add,
                                                  bop(Mul,
                                                      mop(Cast HOLogic.natT,
                                                          mop(Fst,
                                                              var("s0",
                                                                  @{typ
                                                                  "3 word \<times>
                                                                   3 word \<times>
                                                                   64 word \<times> state"}))),ln 8),
                                                  bop(Mul,
                                                      mop(Cast HOLogic.natT,
                                                          mop(Fst,
                                                              mop(Snd,
                                                                  mop(Snd,
                                                                      var("s0",
                                                                          @{typ
                                                                          "3 word \<times>
                                                                           3 word \<times>
                                                                           64 word \<times> state"}))))),
                                                      ln 8)),ln 1),
                                          bop(Mul,
                                              mop(Cast HOLogic.natT,
                                                  mop(Fst,
                                                      var("s0",
                                                          @{typ
                                                          "3 word \<times>
                                                           3 word \<times> 64 word \<times> state"}))),
                                              ln 8),@{typ "bool list"}),
                                       ite(eq(var_w("s",1),lw(0,1)),
                                           apply
                                             (call
                                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                 tp[mop(Cast w64,
                                                        call
                                                          ("ZeroExtendBitString",@{typ "bool list"},
                                                           tp[ln 64,var_v"final_data"],@{theory})),
                                                    var_w("rd",5)],@{theory}),
                                              mop(Snd,
                                                  mop(Snd,
                                                      mop(Snd,
                                                          var("s0",
                                                              @{typ
                                                              "3 word \<times>
                                                               3 word \<times>
                                                               64 word \<times> state"}))))),
                                           apply
                                             (call
                                                ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                 tp[mop(Cast w64,
                                                        call
                                                          ("SignExtendBitString",@{typ "bool list"},
                                                           tp[ln 64,var_v"final_data"],@{theory})),
                                                    var_w("rd",5)],@{theory}),
                                              mop(Snd,
                                                  mop(Snd,
                                                      mop(Snd,
                                                          var("s0",
                                                              @{typ
                                                              "3 word \<times>
                                                               3 word \<times>
                                                               64 word \<times> state"}))))))),
                                    mop(Snd,
                                        mop(Snd,
                                            mop(Snd,
                                                var("s0",
                                                    @{typ
                                                    "3 word \<times>
                                                     3 word \<times> 64 word \<times> state"})))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CStore",
   close
     (tp[var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("t",2)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Store",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermStore","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy)))],
             let'
               (var("v",@{typ Capability}),
                apply
                  (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                   var("state",qTy)),
                let'
                  (var_w("v0",64),
                   bop(Add,
                       bop(Add,
                           bop(Add,call("getBase",w64,var("v",@{typ Capability}),@{theory}),
                               call("getOffset",w64,var("v",@{typ Capability}),@{theory})),
                           apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy))),
                       mop(SE w64,
                           bop(Lsl,
                               cc[rep(mop(Cast w1,bop(Bit,var_w("offset",8),ln 7)),ln 3,
                                      (Word_Lib.mk_wordT 3)),var_w("offset",8)],
                               mop(Cast HOLogic.natT,var_w("t",2))))),
                   let'
                     (var("s",@{typ "3 word \<times> 3 word \<times> 64 word \<times> state"}),
                      itb([(eq(var_w("t",2),lw(0,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   rep(apply
                                         (const
                                            ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                             @{theory}),var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
                               const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lw(1,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(1,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   cc[rep(apply
                                            (const
                                               ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                                @{theory}),var("state",qTy)),ln 2,
                                          (Word_Lib.mk_wordT 2)),lw(0,1)]),
                               const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lw(2,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(2,2)),
                            tp[bop(BXor,ex(var_w("v0",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                   cc[rep(apply
                                            (const
                                               ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                                @{theory}),var("state",qTy)),ln 1,w1),lw(0,2)]),
                               const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lw(4,64),
                               var("state",qTy)]),
                           (eq(var_w("t",2),lw(3,2)),
                            tp[lw(0,3),const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lw(8,64),
                               var("state",qTy)])],
                          mop(Snd,
                              lx(@{typ
                                 "unit \<times>
                                  3 word \<times> 3 word \<times> 64 word \<times> state"}))),
                      itb([(bop(Ugt,
                                bop(Add,cc[lw(0,1),var_w("v0",64)],
                                    cc[lw(0,1),
                                       mop(Fst,
                                           mop(Snd,
                                               mop(Snd,
                                                   var("s",
                                                       @{typ
                                                       "3 word \<times>
                                                        3 word \<times> 64 word \<times> state"}))))]),
                                bop(Add,
                                    cc[lw(0,1),
                                       call("getBase",w64,var("v",@{typ Capability}),@{theory})],
                                    cc[lw(0,1),
                                       call("getLength",w64,var("v",@{typ Capability}),@{theory})])),
                            apply
                              (call
                                 ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                  tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                  @{theory}),
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s",
                                               @{typ
                                               "3 word \<times>
                                                3 word \<times> 64 word \<times> state"})))))),
                           (bop(Ult,var_w("v0",64),
                                call("getBase",w64,var("v",@{typ Capability}),@{theory})),
                            apply
                              (call
                                 ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                  tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                  @{theory}),
                               mop(Snd,
                                   mop(Snd,
                                       mop(Snd,
                                           var("s",
                                               @{typ
                                               "3 word \<times>
                                                3 word \<times> 64 word \<times> state"}))))))],
                          let'
                            (tp[var("v",
                                    @{typ
                                    "3 word \<times>
                                     3 word \<times>
                                     64 word \<times> bool \<times> 64 word \<times> bool"}),
                                var("s",
                                    @{typ "3 word \<times> 3 word \<times> 64 word \<times> state"})],
                             let'
                               (tp[var("v0",
                                       @{typ
                                       "3 word \<times>
                                        64 word \<times> bool \<times> 64 word \<times> bool"}),
                                   var("s0",
                                       @{typ
                                       "3 word \<times> 3 word \<times> 64 word \<times> state"})],
                                let'
                                  (tp[var_w("v1",64),
                                      var("s0",
                                          @{typ
                                          "3 word \<times> 3 word \<times> 64 word \<times> state"})],
                                   let'
                                     (tp[var_w("v",64),
                                         var("s3",@{typ "3 word \<times> 64 word \<times> state"})],
                                      let'
                                        (tp[var_w("v",64),var("s3",@{typ "64 word \<times> state"})],
                                         let'
                                           (tp[var_w("v",64),var("s3",qTy)],
                                            let'
                                              (var("s0",qTy),
                                               mop(Snd,
                                                   mop(Snd,
                                                       mop(Snd,
                                                           var("s",
                                                               @{typ
                                                               "3 word \<times>
                                                                3 word \<times>
                                                                64 word \<times> state"})))),
                                               tp[apply
                                                    (call
                                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                        var_w("rs",5),@{theory}),var("s0",qTy)),
                                                  var("s0",qTy)]),
                                            tp[var_w("v",64),
                                               mop(Fst,
                                                   mop(Snd,
                                                       mop(Snd,
                                                           var("s",
                                                               @{typ
                                                               "3 word \<times>
                                                                3 word \<times>
                                                                64 word \<times> state"})))),
                                               var("s3",qTy)]),
                                         tp[var_w("v",64),
                                            mop(Fst,
                                                mop(Snd,
                                                    var("s",
                                                        @{typ
                                                        "3 word \<times>
                                                         3 word \<times> 64 word \<times> state"}))),
                                            var("s3",@{typ "64 word \<times> state"})]),
                                      tp[var_w("v",64),
                                         mop(Fst,
                                             var("s",
                                                 @{typ
                                                 "3 word \<times>
                                                  3 word \<times> 64 word \<times> state"})),
                                         var("s3",@{typ "3 word \<times> 64 word \<times> state"})]),
                                   tp[tp[mop(Fst,
                                             mop(Snd,
                                                 var("s",
                                                     @{typ
                                                     "3 word \<times>
                                                      3 word \<times> 64 word \<times> state"}))),
                                         bop(Lsl,var_w("v1",64),
                                             bop(Mul,ln 8,
                                                 mop(Cast HOLogic.natT,
                                                     mop(Fst,
                                                         var("s0",
                                                             @{typ
                                                             "3 word \<times>
                                                              3 word \<times> 64 word \<times> state"}))))),
                                         lt,var_w("v0",64),lf],
                                      var("s0",
                                          @{typ
                                          "3 word \<times> 3 word \<times> 64 word \<times> state"})]),
                                tp[tp[mop(Fst,
                                          mop(Snd,
                                              var("s",
                                                  @{typ
                                                  "3 word \<times>
                                                   3 word \<times> 64 word \<times> state"}))),
                                      var("v0",
                                          @{typ
                                          "3 word \<times>
                                           64 word \<times> bool \<times> 64 word \<times> bool"})],
                                   var("s0",
                                       @{typ
                                       "3 word \<times> 3 word \<times> 64 word \<times> state"})]),
                             mop(Snd,
                                 apply
                                   (call
                                      ("StoreMemoryCap",
                                       @{typ "state \<Rightarrow> (bool \<times> state)"},
                                       var("v",
                                           @{typ
                                           "3 word \<times>
                                            3 word \<times>
                                            64 word \<times> bool \<times> 64 word \<times> bool"}),
                                       @{theory}),
                                    mop(Snd,
                                        mop(Snd,
                                            mop(Snd,
                                                var("s",
                                                    @{typ
                                                    "3 word \<times>
                                                     3 word \<times> 64 word \<times> state"})))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLLC",
   close
     (tp[var_w("cd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                call
                  ("getBase",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory}),
                call
                  ("getOffset",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory})),
            itb([(mop(Not,
                      call
                        ("StatusRegister.CU2",HOLogic.boolT,
                         call
                           ("CP0.Status",@{typ StatusRegister},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),
                  apply
                    (const
                       ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                     var("state",qTy))),
                 (apply
                    (call
                       ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                        @{theory}),var("state",qTy)),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                        @{theory}),var("state",qTy))),
                 (apply
                    (call
                       ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                        @{theory}),var("state",qTy)),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                        @{theory}),var("state",qTy))),
                 (mop(Not,
                      call
                        ("getTag",HOLogic.boolT,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory})),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (call
                    ("getSealed",HOLogic.boolT,
                     apply
                       (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                        var("state",qTy)),@{theory}),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (bop(Ugt,
                      bop(Add,cc[lw(0,1),var_w("v",64)],
                          mop(Cast (Word_Lib.mk_wordT 65),
                              const("CAPBYTEWIDTH",HOLogic.natT,@{theory}))),
                      bop(Add,
                          cc[lw(0,1),
                             call
                               ("getBase",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory})],
                          cc[lw(0,1),
                             call
                               ("getLength",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory})])),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (bop(Ult,var_w("v",64),
                      call
                        ("getBase",w64,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory})),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (mop(Not,call("isCapAligned",HOLogic.boolT,var_w("v",64),@{theory})),
                  apply
                    (call
                       ("SignalException",@{typ "state \<Rightarrow> state"},
                        lc("AdEL","ExceptionType",@{theory}),@{theory}),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.BadVAddr",
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),var_w("v",64)],@{theory}),@{theory}),
                        var("state",qTy))))],
                let'
                  (tp[var("v",@{typ Capability}),var("s",qTy)],
                   apply
                     (call
                        ("LoadCap",@{typ "state \<Rightarrow> (Capability \<times> state)"},
                         tp[var_w("v",64),lt],@{theory}),var("state",qTy)),
                   ite(mop(Not,
                           apply
                             (const
                                ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                              var("s",qTy))),
                       apply
                         (call
                            ("write'CAPR",@{typ "state \<Rightarrow> state"},
                             tp[ite(mop(Not,
                                        call
                                          ("Perms.Permit_Load_Capability",HOLogic.boolT,
                                           call
                                             ("getPerms",@{typ Perms},
                                              apply
                                                (call
                                                   ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                    var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                           @{theory})),
                                    call
                                      ("setTag",@{typ Capability},tp[var("v",@{typ Capability}),lf],
                                       @{theory}),var("v",@{typ Capability})),var_w("cd",5)],
                             @{theory}),var("s",qTy)),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CLLx",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("stt",3)],
      close
        (var("state",qTy),
         let'
           (var_w("t",2),ex(var_w("stt",3),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            let'
              (var("v",@{typ Capability}),
               apply
                 (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                  var("state",qTy)),
               let'
                 (var_w("addr",64),
                  bop(Add,call("getBase",w64,var("v",@{typ Capability}),@{theory}),
                      call("getOffset",w64,var("v",@{typ Capability}),@{theory})),
                  let'
                    (var_w("size",64),
                     mop(Cast w64,bop(Lsl,lw(1,64),mop(Cast HOLogic.natT,var_w("t",2)))),
                     let'
                       (tp[var_w("v0",3),var("s",qTy)],
                        itb([(eq(var_w("t",2),lw(0,2)),
                              tp[bop(BXor,ex(var_w("addr",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                     rep(apply
                                           (const
                                              ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                               @{theory}),var("state",qTy)),ln 3,
                                         (Word_Lib.mk_wordT 3))),var("state",qTy)]),
                             (eq(var_w("t",2),lw(1,2)),
                              tp[bop(BXor,ex(var_w("addr",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                     cc[rep(apply
                                              (const
                                                 ("BigEndianCPU",
                                                  @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                               var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2)),lw(0,1)]),
                                 var("state",qTy)]),
                             (eq(var_w("t",2),lw(2,2)),
                              tp[bop(BXor,ex(var_w("addr",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                     cc[rep(apply
                                              (const
                                                 ("BigEndianCPU",
                                                  @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                               var("state",qTy)),ln 1,w1),lw(0,2)]),var("state",qTy)]),
                             (eq(var_w("t",2),lw(3,2)),tp[lw(0,3),var("state",qTy)])],
                            lx(@{typ "3 word \<times> state"})),
                        itb([(mop(Not,
                                  call
                                    ("StatusRegister.CU2",HOLogic.boolT,
                                     call
                                       ("CP0.Status",@{typ StatusRegister},
                                        apply
                                          (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                           var("s",qTy)),@{theory}),@{theory})),
                              apply
                                (const
                                   ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},
                                    @{theory}),var("s",qTy))),
                             (apply
                                (call
                                   ("register_inaccessible",@{typ "state \<Rightarrow> bool"},
                                    var_w("cb",5),@{theory}),var("s",qTy)),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),
                                       var_w("cb",5)],@{theory}),var("s",qTy))),
                             (mop(Not,
                                  call("getTag",HOLogic.boolT,var("v",@{typ Capability}),@{theory})),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],
                                    @{theory}),var("s",qTy))),
                             (call("getSealed",HOLogic.boolT,var("v",@{typ Capability}),@{theory}),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],
                                    @{theory}),var("s",qTy))),
                             (mop(Not,
                                  call
                                    ("Perms.Permit_Load",HOLogic.boolT,
                                     call
                                       ("getPerms",@{typ Perms},var("v",@{typ Capability}),@{theory}),
                                     @{theory})),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcPermLoad","CapExceptionType",@{theory}),
                                       var_w("cb",5)],@{theory}),var("s",qTy))),
                             (bop(Ugt,
                                  bop(Add,cc[lw(0,1),var_w("addr",64)],cc[lw(0,1),var_w("size",64)]),
                                  bop(Add,
                                      cc[lw(0,1),
                                         call("getBase",w64,var("v",@{typ Capability}),@{theory})],
                                      cc[lw(0,1),
                                         call("getLength",w64,var("v",@{typ Capability}),@{theory})])),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                    @{theory}),var("s",qTy))),
                             (bop(Ult,var_w("addr",64),
                                  call
                                    ("getBase",w64,
                                     apply
                                       (call
                                          ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                           var_w("cb",5),@{theory}),var("s",qTy)),@{theory})),
                              apply
                                (call
                                   ("SignalCapException",@{typ "state \<Rightarrow> state"},
                                    tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                                    @{theory}),var("s",qTy)))],
                            let'
                              (tp[var_w("v1",64),var("s",qTy)],
                               apply
                                 (call
                                    ("LoadMemoryCap",
                                     @{typ "state \<Rightarrow> (64 word \<times> state)"},
                                     tp[ite(eq(var_w("t",2),lw(0,2)),lw(0,3),
                                            rep(lw(1,1),mop(Cast HOLogic.natT,var_w("t",2)),
                                                (Word_Lib.mk_wordT 3))),lt,var_w("addr",64),lt],
                                     @{theory}),var("s",qTy)),
                               ite(mop(Not,
                                       apply
                                         (const
                                            ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},
                                             @{theory}),var("s",qTy))),
                                   let'
                                     (var_v"final_data",
                                      ex(mop(Cast(@{typ "bool list"}),var_w("v1",64)),
                                         bop(Sub,
                                             bop(Add,
                                                 bop(Mul,mop(Cast HOLogic.natT,var_w("v0",3)),ln 8),
                                                 bop(Mul,mop(Cast HOLogic.natT,var_w("size",64)),
                                                     ln 8)),ln 1),
                                         bop(Mul,mop(Cast HOLogic.natT,var_w("v0",3)),ln 8),
                                         @{typ "bool list"}),
                                      ite(mop(Not,bop(Bit,var_w("stt",3),ln 2)),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[mop(Cast w64,
                                                       call
                                                         ("ZeroExtendBitString",@{typ "bool list"},
                                                          tp[ln 64,var_v"final_data"],@{theory})),
                                                   var_w("rd",5)],@{theory}),var("s",qTy)),
                                          apply
                                            (call
                                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                                tp[mop(Cast w64,
                                                       call
                                                         ("SignExtendBitString",@{typ "bool list"},
                                                          tp[ln 64,var_v"final_data"],@{theory})),
                                                   var_w("rd",5)],@{theory}),var("s",qTy)))),
                                   var("s",qTy))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSCC",
   close
     (tp[var_w("cs",5),var_w("cb",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                call
                  ("getBase",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory}),
                call
                  ("getOffset",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory})),
            itb([(mop(Not,
                      call
                        ("StatusRegister.CU2",HOLogic.boolT,
                         call
                           ("CP0.Status",@{typ StatusRegister},
                            apply
                              (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                               var("state",qTy)),@{theory}),@{theory})),
                  apply
                    (const
                       ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                     var("state",qTy))),
                 (apply
                    (call
                       ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                        @{theory}),var("state",qTy)),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                        @{theory}),var("state",qTy))),
                 (apply
                    (call
                       ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                        @{theory}),var("state",qTy)),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                        @{theory}),var("state",qTy))),
                 (mop(Not,
                      call
                        ("getTag",HOLogic.boolT,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory})),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (call
                    ("getSealed",HOLogic.boolT,
                     apply
                       (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                        var("state",qTy)),@{theory}),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (mop(Not,
                      call
                        ("Perms.Permit_Store_Capability",HOLogic.boolT,
                         call
                           ("getPerms",@{typ Perms},
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory}),@{theory})),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcPermStoreCap","CapExceptionType",@{theory}),var_w("cb",5)],
                        @{theory}),var("state",qTy))),
                 (bop(And,
                      mop(Not,
                          call
                            ("Perms.Permit_Store_Local_Capability",HOLogic.boolT,
                             call
                               ("getPerms",@{typ Perms},
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory}),@{theory})),
                      bop(And,
                          call
                            ("getTag",HOLogic.boolT,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                   @{theory}),var("state",qTy)),@{theory}),
                          mop(Not,
                              call
                                ("Perms.Global",HOLogic.boolT,
                                 call
                                   ("getPerms",@{typ Perms},
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cs",5),@{theory}),var("state",qTy)),@{theory}),
                                 @{theory})))),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcPermStoreLocalCap","CapExceptionType",@{theory}),var_w("cb",5)],
                        @{theory}),var("state",qTy))),
                 (bop(Ugt,
                      bop(Add,cc[lw(0,1),var_w("v",64)],
                          mop(Cast (Word_Lib.mk_wordT 65),
                              const("CAPBYTEWIDTH",HOLogic.natT,@{theory}))),
                      bop(Add,
                          cc[lw(0,1),
                             call
                               ("getBase",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory})],
                          cc[lw(0,1),
                             call
                               ("getLength",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("state",qTy)),@{theory})])),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (bop(Ult,var_w("v",64),
                      call
                        ("getBase",w64,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory})),
                  apply
                    (call
                       ("SignalCapException",@{typ "state \<Rightarrow> state"},
                        tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                     var("state",qTy))),
                 (mop(Not,call("isCapAligned",HOLogic.boolT,var_w("v",64),@{theory})),
                  apply
                    (call
                       ("SignalException",@{typ "state \<Rightarrow> state"},
                        lc("AdES","ExceptionType",@{theory}),@{theory}),
                     apply
                       (call
                          ("write'CP0",@{typ "state \<Rightarrow> state"},
                           rupd
                             ("CP0.BadVAddr",
                              tp[apply
                                   (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                    var("state",qTy)),var_w("v",64)],@{theory}),@{theory}),
                        var("state",qTy))))],
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (tp[var_b"v",var("s",qTy)],
                      apply
                        (call
                           ("StoreCap",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[var_w("v",64),
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                     @{theory}),var("state",qTy)),lt],@{theory}),var("state",qTy)),
                      tp[ite(var_b"v",lw(1,64),lw(0,64)),var("s",qTy)]),
                   ite(mop(Not,
                           apply
                             (const
                                ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                              var("s",qTy))),
                       apply
                         (call
                            ("write'GPR",@{typ "state \<Rightarrow> state"},
                             tp[var_w("v",64),var_w("rd",5)],@{theory}),var("s",qTy)),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSCx",
   close
     (tp[var_w("rs",5),var_w("cb",5),var_w("rd",5),var_w("t",2)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,
                call
                  ("getBase",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory}),
                call
                  ("getOffset",w64,
                   apply
                     (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                      var("state",qTy)),@{theory})),
            let'
              (var_w("access_length",3),
               ite(eq(var_w("t",2),lw(0,2)),lw(0,3),
                   rep(lw(1,1),mop(Cast HOLogic.natT,var_w("t",2)),(Word_Lib.mk_wordT 3))),
               itb([(mop(Not,
                         call
                           ("StatusRegister.CU2",HOLogic.boolT,
                            call
                              ("CP0.Status",@{typ StatusRegister},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory})),
                     apply
                       (const
                          ("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                        var("state",qTy))),
                    (apply
                       (call
                          ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                           @{theory}),var("state",qTy)),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (mop(Not,
                         call
                           ("getTag",HOLogic.boolT,
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (call
                       ("getSealed",HOLogic.boolT,
                        apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),@{theory}),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                        var("state",qTy))),
                    (mop(Not,
                         call
                           ("Perms.Permit_Store",HOLogic.boolT,
                            call
                              ("getPerms",@{typ Perms},
                               apply
                                 (call
                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                     @{theory}),var("state",qTy)),@{theory}),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcPermStore","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (bop(Ugt,
                         bop(Add,cc[lw(0,1),var_w("v",64)],
                             cc[lw(0,1),
                                mop(Cast w64,bop(Lsl,lw(1,64),mop(Cast HOLogic.natT,var_w("t",2))))]),
                         bop(Add,
                             cc[lw(0,1),
                                call
                                  ("getBase",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory})],
                             cc[lw(0,1),
                                call
                                  ("getLength",w64,
                                   apply
                                     (call
                                        ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                         var_w("cb",5),@{theory}),var("state",qTy)),@{theory})])),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy))),
                    (bop(Ult,var_w("v",64),
                         call
                           ("getBase",w64,
                            apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("state",qTy)),@{theory})),
                     apply
                       (call
                          ("SignalCapException",@{typ "state \<Rightarrow> state"},
                           tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                           @{theory}),var("state",qTy)))],
                   let'
                     (tp[var_w("v",64),var("s",qTy)],
                      let'
                        (tp[var_b"v",var("s",qTy)],
                         apply
                           (call
                              ("StoreMemoryCap",@{typ "state \<Rightarrow> (bool \<times> state)"},
                               tp[var_w("access_length",3),var_w("access_length",3),
                                  apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                        @{theory}),var("state",qTy)),lt,var_w("v",64),lt],@{theory}),
                            var("state",qTy)),tp[ite(var_b"v",lw(1,64),lw(0,64)),var("s",qTy)]),
                      ite(mop(Not,
                              apply
                                (const
                                   ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                                 var("s",qTy))),
                          apply
                            (call
                               ("write'GPR",@{typ "state \<Rightarrow> state"},
                                tp[var_w("v",64),var_w("rd",5)],@{theory}),var("s",qTy)),
                          var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CMOVN",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   eq(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),lw(0,64))),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),var_w("cd",5)],@{theory}),var("state",qTy)))],
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CMOVZ",
   close
     (tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (eq(apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),lw(0,64)),
               apply
                 (call
                    ("write'CAPR",@{typ "state \<Rightarrow> state"},
                     tp[apply
                          (call
                             ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                           var("state",qTy)),var_w("cd",5)],@{theory}),var("state",qTy)))],
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CMove",
   close
     (tp[var_w("cd",5),var_w("cs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),var_w("cd",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CJR",
   close
     (var_w("cb",5),
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU2",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory})),
             apply
               (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_b"v",var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call
                           ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                            @{theory}),var("s0",qTy)),var("s0",qTy)]),
                itb([(var_b"v",
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          call
                            ("getTag",HOLogic.boolT,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("s",qTy)),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                         var("s",qTy))),
                     (call
                        ("getSealed",HOLogic.boolT,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("s",qTy)),@{theory}),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          call
                            ("Perms.Permit_Execute",HOLogic.boolT,
                             call
                               ("getPerms",@{typ Perms},
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("s",qTy)),@{theory}),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (bop(Ugt,
                          bop(Add,
                              cc[lw(0,1),
                                 call
                                   ("getOffset",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("s",qTy)),@{theory})],
                              lw(4,65)),
                          cc[lw(0,1),
                             call
                               ("getLength",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("s",qTy)),@{theory})]),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          eq(ex(bop(Add,
                                    call
                                      ("getBase",w64,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                    call
                                      ("getOffset",w64,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("s",qTy)),@{theory})),
                                ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                      apply
                        (call
                           ("SignalException",@{typ "state \<Rightarrow> state"},
                            lc("AdEL","ExceptionType",@{theory}),@{theory}),
                         apply
                           (call
                              ("write'CP0",@{typ "state \<Rightarrow> state"},
                               rupd
                                 ("CP0.BadVAddr",
                                  tp[apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("s",qTy)),
                                     bop(Add,
                                         call
                                           ("getBase",w64,
                                            apply
                                              (call
                                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                  var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                         call
                                           ("getOffset",w64,
                                            apply
                                              (call
                                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                  var_w("cb",5),@{theory}),var("s",qTy)),@{theory}))],
                                  @{theory}),@{theory}),var("s",qTy))))],
                    rupd
                      ("state.BranchToPCC",
                       tp[var("s",qTy),
                          mop(Some,
                              tp[call
                                   ("getOffset",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                 apply
                                   (call
                                      ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                       @{theory}),var("s",qTy))])],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CJALR",
   close
     (tp[var_w("cd",5),var_w("cb",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU2",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory})),
             apply
               (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_b"v",var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call
                           ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                            @{theory}),var("s0",qTy)),var("s0",qTy)]),
                itb([(var_b"v",
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                            @{theory}),var("s",qTy))),
                     (apply
                        (call
                           ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                            @{theory}),var("s",qTy)),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          call
                            ("getTag",HOLogic.boolT,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                   @{theory}),var("s",qTy)),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                         var("s",qTy))),
                     (call
                        ("getSealed",HOLogic.boolT,
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("s",qTy)),@{theory}),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          call
                            ("Perms.Permit_Execute",HOLogic.boolT,
                             call
                               ("getPerms",@{typ Perms},
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("s",qTy)),@{theory}),@{theory})),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (bop(Ugt,
                          bop(Add,
                              cc[lw(0,1),
                                 call
                                   ("getOffset",w64,
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("s",qTy)),@{theory})],
                              lw(4,65)),
                          cc[lw(0,1),
                             call
                               ("getLength",w64,
                                apply
                                  (call
                                     ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                      @{theory}),var("s",qTy)),@{theory})]),
                      apply
                        (call
                           ("SignalCapException",@{typ "state \<Rightarrow> state"},
                            tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cb",5)],
                            @{theory}),var("s",qTy))),
                     (mop(Not,
                          eq(ex(bop(Add,
                                    call
                                      ("getBase",w64,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                    call
                                      ("getOffset",w64,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("s",qTy)),@{theory})),
                                ln 1,ln 0,(Word_Lib.mk_wordT 2)),lw(0,2))),
                      apply
                        (call
                           ("SignalException",@{typ "state \<Rightarrow> state"},
                            lc("AdEL","ExceptionType",@{theory}),@{theory}),
                         apply
                           (call
                              ("write'CP0",@{typ "state \<Rightarrow> state"},
                               rupd
                                 ("CP0.BadVAddr",
                                  tp[apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("s",qTy)),
                                     bop(Add,
                                         call
                                           ("getBase",w64,
                                            apply
                                              (call
                                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                  var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                         call
                                           ("getOffset",w64,
                                            apply
                                              (call
                                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                  var_w("cb",5),@{theory}),var("s",qTy)),@{theory}))],
                                  @{theory}),@{theory}),var("s",qTy))))],
                    let'
                      (tp[var("v",@{typ Capability}),var("s",qTy)],
                       let'
                         (var("s0",qTy),
                          apply
                            (call
                               ("write'CAPR",@{typ "state \<Rightarrow> state"},
                                tp[call
                                     ("setOffset",@{typ Capability},
                                      tp[apply
                                           (const
                                              ("PCC",@{typ "state \<Rightarrow> Capability"},
                                               @{theory}),var("s",qTy)),
                                         bop(Add,
                                             apply
                                               (const
                                                  ("PC",@{typ "state \<Rightarrow> 64 word"},
                                                   @{theory}),var("s",qTy)),lw(8,64))],@{theory}),
                                   var_w("cd",5)],@{theory}),var("s",qTy)),
                          tp[apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cd",5),
                                   @{theory}),var("s0",qTy)),var("s0",qTy)]),
                       rupd
                         ("state.BranchToPCC",
                          tp[var("s",qTy),
                             mop(Some,
                                 tp[call
                                      ("getOffset",w64,
                                       apply
                                         (call
                                            ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                             var_w("cb",5),@{theory}),var("s",qTy)),@{theory}),
                                    apply
                                      (call
                                         ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                          var_w("cb",5),@{theory}),var("s",qTy))])],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CSeal",
   close
     (tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("ct",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("ct",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Seal",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermSeal","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (bop(Uge,
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getLength",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (bop(Uge,
                   bop(Add,
                       call
                         ("getBase",w64,
                          apply
                            (call
                               ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                @{theory}),var("state",qTy)),@{theory}),
                       call
                         ("getOffset",w64,
                          apply
                            (call
                               ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                @{theory}),var("state",qTy)),@{theory})),
                   mop(Cast w64,bop(Exp,ln 2,const("OTYPEWIDTH",HOLogic.natT,@{theory})))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("canRepSeal",HOLogic.boolT,
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),lt],@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcInexact","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy)))],
             apply
               (call
                  ("write'CAPR",@{typ "state \<Rightarrow> state"},
                   tp[call
                        ("setType",@{typ Capability},
                         tp[call
                              ("setSealed",@{typ Capability},
                               tp[apply
                                    (call
                                       ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                        var_w("cs",5),@{theory}),var("state",qTy)),lt],@{theory}),
                            ex(bop(Add,
                                   call
                                     ("getBase",w64,
                                      apply
                                        (call
                                           ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                            var_w("ct",5),@{theory}),var("state",qTy)),@{theory}),
                                   call
                                     ("getOffset",w64,
                                      apply
                                        (call
                                           ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                            var_w("ct",5),@{theory}),var("state",qTy)),@{theory})),
                               bop(Sub,const("OTYPEWIDTH",HOLogic.natT,@{theory}),ln 1),ln 0,
                               (Word_Lib.mk_wordT 24))],@{theory}),var_w("cd",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CUnseal",
   close
     (tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cd",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cd",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("ct",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("ct",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("getSealed",HOLogic.boolT,
                  apply
                    (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                     var("state",qTy)),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(bop(Add,
                          call
                            ("getBase",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                   @{theory}),var("state",qTy)),@{theory}),
                          call
                            ("getOffset",w64,
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                                   @{theory}),var("state",qTy)),@{theory})),
                      mop(Cast w64,
                          call
                            ("getType",(Word_Lib.mk_wordT 24),
                             apply
                               (call
                                  ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                   @{theory}),var("state",qTy)),@{theory})))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcType","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Seal",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermSeal","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy))),
              (bop(Uge,
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getLength",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("ct",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("ct",5)],@{theory}),
                  var("state",qTy)))],
             let'
               (var("s0",@{typ Capability}),
                call
                  ("setType",@{typ Capability},
                   tp[call
                        ("setSealed",@{typ Capability},
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                                  @{theory}),var("state",qTy)),lf],@{theory}),lw(0,24)],@{theory}),
                apply
                  (call
                     ("write'CAPR",@{typ "state \<Rightarrow> state"},
                      tp[call
                           ("setPerms",@{typ Capability},
                            tp[var("s0",@{typ Capability}),
                               rupd
                                 ("Perms.Global",
                                  tp[call
                                       ("getPerms",@{typ Perms},var("s0",@{typ Capability}),
                                        @{theory}),
                                     bop(And,
                                         call
                                           ("Perms.Global",HOLogic.boolT,
                                            call
                                              ("getPerms",@{typ Perms},
                                               apply
                                                 (call
                                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                     var_w("cs",5),@{theory}),var("state",qTy)),
                                               @{theory}),@{theory}),
                                         call
                                           ("Perms.Global",HOLogic.boolT,
                                            call
                                              ("getPerms",@{typ Perms},
                                               apply
                                                 (call
                                                    ("CAPR",@{typ "state \<Rightarrow> Capability"},
                                                     var_w("ct",5),@{theory}),var("state",qTy)),
                                               @{theory}),@{theory}))],@{theory})],@{theory}),
                         var_w("cd",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CCall",
   close
     (tp[var_w("cs",5),var_w("cb",5),var_w("selector",11)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),
                      call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcType","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Execute",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("Perms.Permit_Execute",HOLogic.boolT,
                  call
                    ("getPerms",@{typ Perms},
                     apply
                       (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                        var("state",qTy)),@{theory}),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (bop(Uge,
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getLength",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy)))],
             apply
               (call
                  ("SignalCapException",@{typ "state \<Rightarrow> state"},
                   tp[lc("capExcCall","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CCallFast",
   close
     (tp[var_w("cs",5),var_w("cb",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU2",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         apply
                           (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                         @{theory}),@{theory})),
               apply
                 (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cs",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cs",5)],
                     @{theory}),var("state",qTy))),
              (apply
                 (call
                    ("register_inaccessible",@{typ "state \<Rightarrow> bool"},var_w("cb",5),
                     @{theory}),var("state",qTy)),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcAccessSysReg","CapExceptionType",@{theory}),var_w("cb",5)],
                     @{theory}),var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getTag",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcTag","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("getSealed",HOLogic.boolT,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcSeal","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),
                      call
                        ("getType",(Word_Lib.mk_wordT 24),
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}))),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcType","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_CCall",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermCCall","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_CCall",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermCCall","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   call
                     ("Perms.Permit_Execute",HOLogic.boolT,
                      call
                        ("getPerms",@{typ Perms},
                         apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("state",qTy)),@{theory}),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy))),
              (call
                 ("Perms.Permit_Execute",HOLogic.boolT,
                  call
                    ("getPerms",@{typ Perms},
                     apply
                       (call("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),@{theory}),
                        var("state",qTy)),@{theory}),@{theory}),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcPermExe","CapExceptionType",@{theory}),var_w("cb",5)],@{theory}),
                  var("state",qTy))),
              (bop(Uge,
                   call
                     ("getOffset",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   call
                     ("getLength",w64,
                      apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("state",qTy)),@{theory})),
               apply
                 (call
                    ("SignalCapException",@{typ "state \<Rightarrow> state"},
                     tp[lc("capExcLength","CapExceptionType",@{theory}),var_w("cs",5)],@{theory}),
                  var("state",qTy)))],
             let'
               (tp[var("v",@{typ Capability}),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (call
                           ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),@{theory}),
                         var("s0",qTy)),var("s0",qTy)]),
                let'
                  (tp[var("v",@{typ Capability}),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (call
                           ("write'PCC",@{typ "state \<Rightarrow> state"},
                            call
                              ("setType",@{typ Capability},
                               tp[call
                                    ("setSealed",@{typ Capability},
                                     tp[var("v",@{typ Capability}),lf],@{theory}),lw(0,24)],
                               @{theory}),@{theory}),var("s",qTy)),
                      tp[apply
                           (call
                              ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cs",5),
                               @{theory}),var("s0",qTy)),var("s0",qTy)]),
                   let'
                     (tp[var("v",@{typ Capability}),var("s",qTy)],
                      let'
                        (var("s0",qTy),
                         rupd
                           ("state.CCallBranch",
                            tp[apply
                                 (call
                                    ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                                     mop(Some,
                                         call("getOffset",w64,var("v",@{typ Capability}),@{theory})),
                                     @{theory}),var("s",qTy)),lt],@{theory}),
                         tp[apply
                              (call
                                 ("CAPR",@{typ "state \<Rightarrow> Capability"},var_w("cb",5),
                                  @{theory}),var("s0",qTy)),var("s0",qTy)]),
                      apply
                        (call
                           ("write'IDC",@{typ "state \<Rightarrow> state"},
                            call
                              ("setType",@{typ Capability},
                               tp[call
                                    ("setSealed",@{typ Capability},
                                     tp[var("v",@{typ Capability}),lf],@{theory}),lw(0,24)],
                               @{theory}),@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CReturn",
   close
     (var("state",qTy),
      ite(mop(Not,
              call
                ("StatusRegister.CU2",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                    @{theory}),@{theory})),
          apply
            (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
             var("state",qTy)),
          apply
            (call
               ("SignalCapException_noReg",@{typ "state \<Rightarrow> state"},
                lc("capExcRet","CapExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnknownCapInstruction",
   close
     (var("state",qTy),
      ite(mop(Not,
              call
                ("StatusRegister.CU2",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                    @{theory}),@{theory})),
          apply
            (const("SignalCP2UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
             var("state",qTy)),
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDI: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Add,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   mop(SE (Word_Lib.mk_wordT 33),var_w("immediate",16))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rt",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDIU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Add,ex(var_w("v",64),ln 31,ln 0,w32),mop(SE w32,var_w("immediate",16)))),
                     var_w("rt",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Add,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),mop(SE (Word_Lib.mk_wordT 65),var_w("immediate",16))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rt",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Lt,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),mop(SE w64,var_w("immediate",16)))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Ult,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),mop(SE w64,var_w("immediate",16)))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ANDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ORI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XORI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LUI",
   close
     (tp[var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,cc[var_w("immediate",16),lw(0,16)]),var_w("rt",5)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADD",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADD: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Add,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("s",qTy)),ln 32,ln 0,(Word_Lib.mk_wordT 33))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rd",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Add,ex(var_w("v",64),ln 31,ln 0,w32),
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32))),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUB",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SUB: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Sub,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("s",qTy)),ln 32,ln 0,(Word_Lib.mk_wordT 33))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rd",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SUBU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Sub,ex(var_w("v",64),ln 31,ln 0,w32),
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32))),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADD",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Add,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rd",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSUB",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Sub,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rd",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Sub,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLT",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Lt,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Ult,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AND",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'OR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XOR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'NOR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(BNot,
                      bop(BOr,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVN",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)),lw(0,64))),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVZ",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADD",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MADD: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Add,var_w("v",64),
                         bop(Mul,
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MADDU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Add,var_w("v",64),
                         bop(Mul,
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUB",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MSUB: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Sub,var_w("v",64),
                         bop(Mul,
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MSUBU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Sub,var_w("v",64),
                         bop(Mul,
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MUL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MUL: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call("write'hi",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
               apply
                 (call("write'lo",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                  apply
                    (call
                       ("write'GPR",@{typ "state \<Rightarrow> state"},
                        tp[mop(SE w64,
                               bop(Mul,ex(var_w("v",64),ln 31,ln 0,w32),
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32))),
                           var_w("rd",5)],@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MULT: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",64),
               bop(Mul,mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),
                   mop(SE w64,
                       ex(apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("s",qTy)),ln 31,ln 0,w32))),
               apply
                 (call
                    ("write'HI",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),
                  apply
                    (call
                       ("write'LO",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MULTU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",64),
               bop(Mul,mop(Cast w64,ex(var_w("v",64),ln 31,ln 0,w32)),
                   mop(Cast w64,
                       ex(apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("s",qTy)),ln 31,ln 0,w32))),
               apply
                 (call
                    ("write'HI",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),
                  apply
                    (call
                       ("write'LO",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMULT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",128),
            bop(Mul,
                mop(SE (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("write'HI",@{typ "state \<Rightarrow> state"},ex(var_w("v",128),ln 127,ln 64,w64),
                  @{theory}),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     ex(var_w("v",128),ln 63,ln 0,w64),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMULTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",128),
            bop(Mul,
                mop(Cast (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(Cast (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("write'HI",@{typ "state \<Rightarrow> state"},ex(var_w("v",128),ln 127,ln 64,w64),
                  @{theory}),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     ex(var_w("v",128),ln 63,ln 0,w64),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIV",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                  var("state",qTy)),
               let'
                 (var("s1",qTy),
                  ite(bop(Or,call("NotWordValue",HOLogic.boolT,var_w("v",64),@{theory}),
                          call("NotWordValue",HOLogic.boolT,var_w("v0",64),@{theory})),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},ls"DIV: NotWordValue",
                                   @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
                  ite(eq(var_w("v0",64),lw(0,64)),
                      apply
                        (call("write'hi",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                         apply
                           (call("write'lo",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                            var("s1",qTy))),
                      apply
                        (call
                           ("write'HI",@{typ "state \<Rightarrow> state"},
                            mop(SE w64,
                                bop(Rem,ex(var_w("v",64),ln 31,ln 0,w32),
                                    ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),
                         apply
                           (call
                              ("write'LO",@{typ "state \<Rightarrow> state"},
                               mop(SE w64,
                                   bop(Quot,ex(var_w("v",64),ln 31,ln 0,w32),
                                       ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),var("s1",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIVU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                  var("state",qTy)),
               let'
                 (var("s1",qTy),
                  ite(bop(Or,call("NotWordValue",HOLogic.boolT,var_w("v",64),@{theory}),
                          call("NotWordValue",HOLogic.boolT,var_w("v0",64),@{theory})),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},
                                   ls"DIVU: NotWordValue",@{theory}),@{theory}),var("state",qTy))),
                      var("state",qTy)),
                  ite(eq(var_w("v0",64),lw(0,64)),
                      apply
                        (call("write'hi",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                         apply
                           (call("write'lo",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                            var("s1",qTy))),
                      apply
                        (call
                           ("write'HI",@{typ "state \<Rightarrow> state"},
                            mop(SE w64,
                                bop(Mod,ex(var_w("v",64),ln 31,ln 0,w32),
                                    ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),
                         apply
                           (call
                              ("write'LO",@{typ "state \<Rightarrow> state"},
                               mop(SE w64,
                                   bop(Div,ex(var_w("v",64),ln 31,ln 0,w32),
                                       ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),var("s1",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DDIV",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
               var("state",qTy)),
            ite(eq(var_w("v",64),lw(0,64)),
                apply
                  (call("write'hi",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                   apply
                     (call("write'lo",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                      var("state",qTy))),
                let'
                  (var_w("v0",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'HI",@{typ "state \<Rightarrow> state"},
                         bop(Rem,var_w("v0",64),var_w("v",64)),@{theory}),
                      apply
                        (call
                           ("write'LO",@{typ "state \<Rightarrow> state"},
                            bop(Quot,var_w("v0",64),var_w("v",64)),@{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DDIVU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
               var("state",qTy)),
            ite(eq(var_w("v",64),lw(0,64)),
                apply
                  (call("write'hi",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                   apply
                     (call("write'lo",@{typ "state \<Rightarrow> state"},lo w64,@{theory}),
                      var("state",qTy))),
                let'
                  (var_w("v0",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'HI",@{typ "state \<Rightarrow> state"},
                         bop(Mod,var_w("v0",64),var_w("v",64)),@{theory}),
                      apply
                        (call
                           ("write'LO",@{typ "state \<Rightarrow> state"},
                            bop(Div,var_w("v0",64),var_w("v",64)),@{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFHI",
   close
     (var_w("rd",5),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},tp[var_w("v",64),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFLO",
   close
     (var_w("rd",5),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},tp[var_w("v",64),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTHI",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         apply
           (call
              ("write'HI",@{typ "state \<Rightarrow> state"},
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTLO",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         apply
           (call
              ("write'LO",@{typ "state \<Rightarrow> state"},
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      bop(Lsl,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 31,ln 0,w32),
                          mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRL: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Lsr,ex(var_w("v",64),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRA",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRA: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Asr,ex(var_w("v",64),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      bop(Lsl,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 31,ln 0,w32),
                          mop(Cast HOLogic.natT,
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                       @{theory}),var("state",qTy)),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRLV: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Lsr,
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,ex(var_w("v",64),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                     var_w("rd",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRAV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRAV: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Asr,
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,ex(var_w("v",64),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                     var_w("rd",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRA",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRAV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLL32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRL32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRA32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGE",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Uge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Ult,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TEQ",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TNE",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEIU",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Uge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTIU",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Ult,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TEQI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TNEI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),mop(SE w64,var_w("immediate",16)))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadByte",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),
                        const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lf,var_w("v",64),lf],@{theory}),
                  var("state",qTy)),
               ite(mop(Not,
                       apply
                         (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                          var("s",qTy))),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          rep(apply
                                (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                 var("s",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
                      let'
                        (var_w("membyte",8),
                         ex(var_w("v0",64),
                            bop(Add,ln 7,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w8),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("membyte",8)),
                                      mop(SE w64,var_w("membyte",8))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadHalf",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),
                        const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),lf],
                     @{theory}),var("state",qTy)),
               ite(mop(Not,
                       apply
                         (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                          var("s",qTy))),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          cc[rep(apply
                                   (const
                                      ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("s",qTy)),ln 2,(Word_Lib.mk_wordT 2)),lw(0,1)]),
                      let'
                        (var_w("memhalf",16),
                         ex(var_w("v0",64),
                            bop(Add,ln 15,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w16),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("memhalf",16)),
                                      mop(SE w64,var_w("memhalf",16))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadWord",
   close
     (tp[var_b"link",var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                        const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),var_b"link"],
                     @{theory}),var("state",qTy)),
               ite(mop(Not,
                       apply
                         (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                          var("s",qTy))),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          cc[apply
                               (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("s",qTy)),lw(0,2)]),
                      let'
                        (var_w("memword",32),
                         ex(var_w("v0",64),
                            bop(Add,ln 31,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w32),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("memword",32)),
                                      mop(SE w64,var_w("memword",32))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadDoubleword",
   close
     (tp[var_b"link",var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (call
                 ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                  tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                     const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                     apply
                       (call
                          ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                           bop(Add,mop(SE w64,var_w("offset",16)),
                               apply
                                 (call
                                    ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                     @{theory}),var("state",qTy))),@{theory}),var("state",qTy)),
                     var_b"link"],@{theory}),var("state",qTy)),
            ite(mop(Not,
                    apply
                      (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                       var("s",qTy))),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy)),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LB",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadByte",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LBU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadByte",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LH",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadHalf",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LHU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadHalf",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LW",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lt,var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadDoubleword",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LLD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadDoubleword",@{typ "state \<Rightarrow> state"},
               tp[lt,var_w("base",5),var_w("rt",5),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (var_w("v1",1),
                  bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                      apply
                        (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                         var("state",qTy))),
                  let'
                    (tp[var_w("v2",64),var("s",qTy)],
                     apply
                       (call
                          ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                           tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                              cc[lw(0,1),var_w("v0",2)],lf,var_w("v",64),lf],@{theory}),
                        var("state",qTy)),
                     ite(mop(Not,
                             apply
                               (const
                                  ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                                var("s",qTy))),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            itb([(bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[cc[ex(var_w("v2",64),ln 7,ln 0,w8),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                           (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(var_w("v2",64),ln 15,ln 0,w16),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,
                                           w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(var_w("v2",64),ln 23,ln 0,(Word_Lib.mk_wordT 24)),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[ex(var_w("v2",64),ln 31,ln 0,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[cc[ex(var_w("v2",64),ln 39,ln 32,w8),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                           (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(var_w("v2",64),ln 47,ln 32,w16),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,
                                           w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(var_w("v2",64),ln 55,ln 32,(Word_Lib.mk_wordT 24)),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[ex(var_w("v2",64),ln 63,ln 32,w32),var("s",qTy)])],
                                lx(@{typ "32 word \<times> state"})),
                            apply
                              (call
                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                  tp[mop(SE w64,var_w("v",32)),var_w("rt",5)],@{theory}),
                               var("s",qTy))),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (var_w("v1",1),
                  bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                      apply
                        (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                         var("state",qTy))),
                  let'
                    (tp[var_w("v2",64),var("s",qTy)],
                     apply
                       (call
                          ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                           tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                              bop(Sub,const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                                  cc[lw(0,1),var_w("v0",2)]),lf,var_w("v",64),lf],@{theory}),
                        var("state",qTy)),
                     ite(mop(Not,
                             apply
                               (const
                                  ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                                var("s",qTy))),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            itb([(bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[ex(var_w("v2",64),ln 31,ln 0,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 24,
                                           w8),ex(var_w("v2",64),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 16,
                                           w16),ex(var_w("v2",64),ln 31,ln 16,w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 8,
                                           (Word_Lib.mk_wordT 24)),ex(var_w("v2",64),ln 31,ln 24,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[ex(var_w("v2",64),ln 63,ln 32,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 24,
                                           w8),ex(var_w("v2",64),ln 63,ln 40,(Word_Lib.mk_wordT 24))],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 16,
                                           w16),ex(var_w("v2",64),ln 63,ln 48,w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 8,
                                           (Word_Lib.mk_wordT 24)),ex(var_w("v2",64),ln 63,ln 56,w8)],
                                     var("s",qTy)])],lx(@{typ "32 word \<times> state"})),
                            apply
                              (call
                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                  tp[mop(SE w64,var_w("v",32)),var_w("rt",5)],@{theory}),
                               var("s",qTy))),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3),lf,
                           var_w("v",64),lf],@{theory}),var("state",qTy)),
                  ite(mop(Not,
                          apply
                            (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                             var("s",qTy))),
                      let'
                        (tp[var_w("v",64),var("s",qTy)],
                         itb([(eq(var_w("v0",3),lw(0,3)),
                               tp[cc[ex(var_w("v1",64),ln 7,ln 0,w8),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 55,ln 0,
                                        (Word_Lib.mk_wordT 56))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(1,3)),
                               tp[cc[ex(var_w("v1",64),ln 15,ln 0,w16),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 47,ln 0,
                                        (Word_Lib.mk_wordT 48))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(2,3)),
                               tp[cc[ex(var_w("v1",64),ln 23,ln 0,(Word_Lib.mk_wordT 24)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 39,ln 0,
                                        (Word_Lib.mk_wordT 40))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(3,3)),
                               tp[cc[ex(var_w("v1",64),ln 31,ln 0,w32),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(4,3)),
                               tp[cc[ex(var_w("v1",64),ln 39,ln 0,(Word_Lib.mk_wordT 40)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                        (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(5,3)),
                               tp[cc[ex(var_w("v1",64),ln 47,ln 0,(Word_Lib.mk_wordT 48)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,w16)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(6,3)),
                               tp[cc[ex(var_w("v1",64),ln 55,ln 0,(Word_Lib.mk_wordT 56)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(7,3)),
                               tp[ex(var_w("v1",64),ln 63,ln 0,w64),var("s",qTy)])],
                             lx(@{typ "64 word \<times> state"})),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy))),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                           bop(Sub,const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3)),
                           lf,var_w("v",64),lf],@{theory}),var("state",qTy)),
                  ite(mop(Not,
                          apply
                            (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                             var("s",qTy))),
                      let'
                        (tp[var_w("v",64),var("s",qTy)],
                         itb([(eq(var_w("v0",3),lw(0,3)),
                               tp[ex(var_w("v1",64),ln 63,ln 0,w64),var("s",qTy)]),
                              (eq(var_w("v0",3),lw(1,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 56,w8),
                                     ex(var_w("v1",64),ln 63,ln 8,(Word_Lib.mk_wordT 56))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(2,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 48,w16),
                                     ex(var_w("v1",64),ln 63,ln 16,(Word_Lib.mk_wordT 48))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(3,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 40,
                                        (Word_Lib.mk_wordT 24)),
                                     ex(var_w("v1",64),ln 63,ln 24,(Word_Lib.mk_wordT 40))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(4,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 32,w32),
                                     ex(var_w("v1",64),ln 63,ln 32,w32)],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(5,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 24,
                                        (Word_Lib.mk_wordT 40)),
                                     ex(var_w("v1",64),ln 63,ln 40,(Word_Lib.mk_wordT 24))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(6,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 16,
                                        (Word_Lib.mk_wordT 48)),ex(var_w("v1",64),ln 63,ln 48,w16)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(7,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 8,
                                        (Word_Lib.mk_wordT 56)),ex(var_w("v1",64),ln 63,ln 56,w8)],
                                  var("s",qTy)])],lx(@{typ "64 word \<times> state"})),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy))),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SB",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            mop(Snd,
                apply
                  (call
                     ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                      tp[const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),
                         const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lf,
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),
                             bop(Mul,ln 8,
                                 mop(Cast HOLogic.natT,
                                     bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                         rep(apply
                                               (const
                                                  ("BigEndianCPU",
                                                   @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3)))))),
                         var_w("v",64),lf],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SH",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            mop(Snd,
                apply
                  (call
                     ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                      tp[const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),
                         const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),
                             bop(Mul,ln 8,
                                 mop(Cast HOLogic.natT,
                                     bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                         cc[rep(apply
                                                  (const
                                                     ("BigEndianCPU",
                                                      @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                   var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2)),
                                            lw(0,1)])))),var_w("v",64),lf],@{theory}),
                   var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("storeWord",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"cond"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            apply
              (call
                 ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                     const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                     bop(Lsl,
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)),
                         bop(Mul,ln 8,
                             mop(Cast HOLogic.natT,
                                 bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                     cc[apply
                                          (const
                                             ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                              @{theory}),var("state",qTy)),lw(0,2)])))),
                     var_w("v",64),var_b"cond"],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("storeDoubleword",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"cond"],
      close
        (var("state",qTy),
         apply
           (call
              ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
               tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                  const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                  apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),
                  apply
                    (call
                       ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                        bop(Add,mop(SE w64,var_w("offset",16)),
                            apply
                              (call
                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                  @{theory}),var("state",qTy))),@{theory}),var("state",qTy)),
                  var_b"cond"],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SW",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("storeWord",@{typ "state \<Rightarrow> (bool \<times> state)"},
                   tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("storeDoubleword",@{typ "state \<Rightarrow> (bool \<times> state)"},
                   tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SC",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("storeWord",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
               var("state",qTy)),
            ite(mop(Not,
                    apply
                      (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                       var("s",qTy))),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ite(var_b"v",lw(1,64),lw(0,64)),var_w("rt",5)],@{theory}),var("s",qTy)),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SCD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("storeDoubleword",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
               var("state",qTy)),
            ite(mop(Not,
                    apply
                      (const("exceptionSignalled",@{typ "state \<Rightarrow> bool"},@{theory}),
                       var("s",qTy))),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ite(var_b"v",lw(1,64),lw(0,64)),var_w("rt",5)],@{theory}),var("s",qTy)),
                var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (tp[var_w("v2",64),var("s0",qTy)],
                  itb([(eq(var_w("v0",2),lw(0,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 24,w8)),
                           var("state",qTy)]),
                       (eq(var_w("v0",2),lw(1,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 16,w16)),
                           var("state",qTy)]),
                       (eq(var_w("v0",2),lw(2,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 8,
                                  (Word_Lib.mk_wordT 24))),var("state",qTy)]),
                       (eq(var_w("v0",2),lw(3,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 0,w32)),
                           var("state",qTy)])],lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                               mop(Cast (Word_Lib.mk_wordT 3),var_w("v0",2)),lf,
                               ite(eq(bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                                          apply
                                            (const
                                               ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                                @{theory}),var("state",qTy))),lw(1,1)),
                                   bop(Lsl,var_w("v2",64),ln 32),var_w("v2",64)),
                               ite(apply
                                     (const
                                        ("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),
                                      var("s0",qTy)),var_w("v",64),
                                   bop(BAnd,var_w("v",64),mop(BNot,lw(3,64)))),lf],@{theory}),
                         var("s0",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (var_w("v1",1),
                  bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                      apply
                        (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                         var("state",qTy))),
                  let'
                    (tp[var_w("v1",64),var("s",qTy)],
                     itb([(bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                           tp[mop(Cast w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                           @{theory}),var("state",qTy)),ln 31,ln 0,w32)),
                              var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 23,
                                         ln 0,(Word_Lib.mk_wordT 24))),ln 8),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 15,
                                         ln 0,w16)),ln 16),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,
                                         w8)),ln 24),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 31,
                                         ln 0,w32)),ln 32),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 23,
                                         ln 0,(Word_Lib.mk_wordT 24))),ln 40),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 15,
                                         ln 0,w16)),ln 48),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,
                                         w8)),ln 56),var("state",qTy)])],
                         lx(@{typ "64 word \<times> state"})),
                     mop(Snd,
                         apply
                           (call
                              ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                               tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                                  bop(Sub,const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                                      mop(Cast (Word_Lib.mk_wordT 3),var_w("v0",2))),lf,
                                  var_w("v1",64),
                                  ite(apply
                                        (const
                                           ("BigEndianMem",@{typ "state \<Rightarrow> bool"},
                                            @{theory}),var("s",qTy)),
                                      bop(BAnd,var_w("v",64),mop(BNot,lw(3,64))),var_w("v",64)),lf],
                               @{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  itb([(eq(var_w("v0",3),lw(0,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 56,w8)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(1,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 48,w16)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(2,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 40,
                                  (Word_Lib.mk_wordT 24))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(3,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 32,w32)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(4,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 24,
                                  (Word_Lib.mk_wordT 40))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(5,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 16,
                                  (Word_Lib.mk_wordT 48))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(6,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 8,
                                  (Word_Lib.mk_wordT 56))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(7,3)),
                        tp[apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy)),var("state",qTy)])],
                      lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3),lf,
                               var_w("v1",64),
                               ite(apply
                                     (const
                                        ("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),
                                      var("s",qTy)),var_w("v",64),
                                   bop(BAnd,var_w("v",64),mop(BNot,lw(7,64)))),lf],@{theory}),
                         var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call
                 ("getVirtualAddress",@{typ "state \<Rightarrow> 64 word"},
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),@{theory}),var("state",qTy)),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  itb([(eq(var_w("v0",3),lw(0,3)),
                        tp[apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy)),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(1,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 55,ln 0,
                                      (Word_Lib.mk_wordT 56))),ln 8),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(2,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 47,ln 0,
                                      (Word_Lib.mk_wordT 48))),ln 16),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(3,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 39,ln 0,
                                      (Word_Lib.mk_wordT 40))),ln 24),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(4,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 31,ln 0,
                                      w32)),ln 32),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(5,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 23,ln 0,
                                      (Word_Lib.mk_wordT 24))),ln 40),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(6,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 15,ln 0,
                                      w16)),ln 48),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(7,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,w8)),
                               ln 56),var("state",qTy)])],lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                               bop(Sub,const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                                   var_w("v0",3)),lf,var_w("v1",64),
                               ite(apply
                                     (const
                                        ("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),
                                      var("s",qTy)),bop(BAnd,var_w("v",64),mop(BNot,lw(7,64))),
                                   var_w("v",64)),lf],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'SYNC",close(var_w("stype",5),lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BREAK",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},lc("Bp","ExceptionType",@{theory}),
            @{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SYSCALL",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("Sys","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'CPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMTC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'CPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                apply
                  (call
                     ("CPR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                      tp[ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),var_w("rt",5)],@{theory}),
                   var("s",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMFC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                apply
                  (call
                     ("CPR",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                      tp[ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'J",
   close
     (var_w("instr_index",26),
      close
        (var("state",qTy),
         apply
           (call
              ("write'BranchTo",@{typ "state \<Rightarrow> state"},
               mop(Some,
                   cc[ex(apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),ln 63,ln 28,(Word_Lib.mk_wordT 36)),
                      var_w("instr_index",26),lw(0,2)]),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JAL",
   close
     (var_w("instr_index",26),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[bop(Add,
                            apply
                              (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                               var("state",qTy)),lw(8,64)),lw(31,5)],@{theory}),var("state",qTy)),
               tp[apply(const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                  var("s0",qTy)]),
            apply
              (call
                 ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                  mop(Some,
                      cc[ex(var_w("v",64),ln 63,ln 28,(Word_Lib.mk_wordT 36)),
                         var_w("instr_index",26),lw(0,2)]),@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JALR",
   close
     (tp[var_w("rs",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'BranchTo",@{typ "state \<Rightarrow> state"},
               mop(Some,
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy))),@{theory}),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,
                         apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),lw(8,64)),var_w("rd",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JR",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         apply
           (call
              ("write'BranchTo",@{typ "state \<Rightarrow> state"},
               mop(Some,
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy))),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BEQ",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy))),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BNE",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLEZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Le,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGTZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Gt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             apply
               (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZAL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,
                         apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),lw(8,64)),lw(31,5)],@{theory}),var("state",qTy)),
            ite(bop(Lt,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),lw(0,64)),
                apply
                  (call
                     ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                      mop(Some,
                          bop(Add,
                              bop(Add,
                                  apply
                                    (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                     var("s",qTy)),lw(4,64)),
                              bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),var("s",qTy)),
                apply
                  (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZAL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,
                         apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),lw(8,64)),lw(31,5)],@{theory}),var("state",qTy)),
            ite(bop(Ge,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),lw(0,64)),
                apply
                  (call
                     ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                      mop(Some,
                          bop(Add,
                              bop(Add,
                                  apply
                                    (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                     var("s",qTy)),lw(4,64)),
                              bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),var("s",qTy)),
                apply
                  (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BEQL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy))),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BNEL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLEZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Le,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGTZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Gt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                   mop(Some,
                       bop(Add,
                           bop(Add,
                               apply
                                 (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                  var("state",qTy)),lw(4,64)),
                           bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                let'
                  (var("s0",qTy),
                   apply
                     (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy)),
                   tp[apply
                        (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                      var("s0",qTy)]),
                apply
                  (call
                     ("write'PC",@{typ "state \<Rightarrow> state"},bop(Add,var_w("v",64),lw(4,64)),
                      @{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZALL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,
                         apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),lw(8,64)),lw(31,5)],@{theory}),var("state",qTy)),
            ite(bop(Lt,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),lw(0,64)),
                apply
                  (call
                     ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                      mop(Some,
                          bop(Add,
                              bop(Add,
                                  apply
                                    (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                     var("s",qTy)),lw(4,64)),
                              bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),var("s",qTy)),
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                         var("s",qTy)),
                      tp[apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                         var("s0",qTy)]),
                   apply
                     (call
                        ("write'PC",@{typ "state \<Rightarrow> state"},
                         bop(Add,var_w("v",64),lw(4,64)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZALL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,
                         apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                            var("state",qTy)),lw(8,64)),lw(31,5)],@{theory}),var("state",qTy)),
            ite(bop(Ge,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),lw(0,64)),
                apply
                  (call
                     ("write'BranchTo",@{typ "state \<Rightarrow> state"},
                      mop(Some,
                          bop(Add,
                              bop(Add,
                                  apply
                                    (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                     var("s",qTy)),lw(4,64)),
                              bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))),@{theory}),var("s",qTy)),
                let'
                  (tp[var_w("v",64),var("s",qTy)],
                   let'
                     (var("s0",qTy),
                      apply
                        (const("CheckBranch",@{typ "state \<Rightarrow> state"},@{theory}),
                         var("s",qTy)),
                      tp[apply
                           (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),var("s0",qTy)),
                         var("s0",qTy)]),
                   apply
                     (call
                        ("write'PC",@{typ "state \<Rightarrow> state"},
                         bop(Add,var_w("v",64),lw(4,64)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'RDHWR",
   close
     (tp[var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       apply
                         (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("state",qTy)),
                       @{theory}),@{theory}),
                 bop(Or,
                     apply
                       (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                        var("state",qTy)),
                     bop(Bit,
                         call
                           ("reg'HWREna",w32,
                            call
                              ("CP0.HWREna",@{typ HWREna},
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),@{theory}),
                         mop(Cast HOLogic.natT,var_w("rd",5))))),
             itb([(eq(var_w("rd",5),lw(0,5)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(Cast w64,call("state.procID",w8,var("state",qTy),@{theory})),
                            var_w("rt",5)],@{theory}),var("state",qTy))),
                  (eq(var_w("rd",5),lw(2,5)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,
                                call
                                  ("CP0.Count",w32,
                                   apply
                                     (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                      var("state",qTy)),@{theory})),var_w("rt",5)],@{theory}),
                      var("state",qTy))),
                  (eq(var_w("rd",5),lw(3,5)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},tp[lw(1,64),var_w("rt",5)],
                         @{theory}),var("state",qTy))),
                  (eq(var_w("rd",5),lw(26,5)),rupd("state.done",tp[var("state",qTy),lt],@{theory})),
                  (eq(var_w("rd",5),lw(27,5)),
                   apply
                     (const("resetStats",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),(eq(var_w("rd",5),lw(28,5)),var("state",qTy)),
                  (eq(var_w("rd",5),lw(29,5)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[call
                              ("CP0.UsrLocal",w64,
                               apply
                                 (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                  var("state",qTy)),@{theory}),var_w("rt",5)],@{theory}),
                      var("state",qTy))),
                  (eq(var_w("rd",5),lw(30,5)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(Cast w64,
                                bop(Sub,
                                    call("state.totalCore",HOLogic.natT,var("state",qTy),@{theory}),
                                    ln 1)),var_w("rt",5)],@{theory}),var("state",qTy)))],
                 apply
                   (call
                      ("SignalException",@{typ "state \<Rightarrow> state"},
                       lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CACHE",
   close
     (tp[var_w("base",5),var_w("opn",5),var_w("offset",16)],
      close
        (var("state",qTy),
         ite(bop(And,
                 mop(Not,
                     call
                       ("StatusRegister.CU0",HOLogic.boolT,
                        call
                          ("CP0.Status",@{typ StatusRegister},
                           apply
                             (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                              var("state",qTy)),@{theory}),@{theory})),
                 mop(Not,
                     apply
                       (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),
                        var("state",qTy)))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
             mop(Snd,
                 apply
                   (call
                      ("AddressTranslation",
                       @{typ
                       "state \<Rightarrow>
                        ((40 word \<times> 3 word \<times> bool \<times> bool) \<times> state)"},
                       tp[bop(Add,
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                    @{theory}),var("state",qTy)),mop(SE w64,var_w("offset",16))),
                          lc("LOAD","AccessType",@{theory})],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'WAIT",lu)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ReservedInstruction",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Unpredictable",
   close
     (var("state",qTy),
      mop(Snd,
          apply
            (call
               ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                call
                  ("exception.UNPREDICTABLE",@{typ exception},ls"Unpredictable instruction",
                   @{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Run",
   close
     (var("v0",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("v0",@{typ instruction}),
            [(Term.Const(@{const_name "BREAK"},@{typ instruction}),
              apply
                (const("dfn'BREAK",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "ERET"},@{typ instruction}),
              apply(const("dfn'ERET",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}),
              apply
                (const("dfn'ReservedInstruction",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (Term.Const(@{const_name "SYSCALL"},@{typ instruction}),
              apply
                (const("dfn'SYSCALL",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBP"},@{typ instruction}),
              apply(const("dfn'TLBP",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBR"},@{typ instruction}),
              apply(const("dfn'TLBR",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBWI"},@{typ instruction}),
              apply
                (const("dfn'TLBWI",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBWR"},@{typ instruction}),
              apply
                (const("dfn'TLBWR",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Unpredictable"},@{typ instruction}),
              apply
                (const("dfn'Unpredictable",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (Term.Const(@{const_name "WAIT"},@{typ instruction}),var("state",qTy)),
             (call
                ("instruction.CACHE",@{typ instruction},
                 var("v195",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
              apply
                (call
                   ("dfn'CACHE",@{typ "state \<Rightarrow> state"},
                    var("v195",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                 var("state",qTy))),
             (call("instruction.COP1",@{typ instruction},var_u"v196",@{theory}),
              apply
                (call("dfn'COP1",@{typ "state \<Rightarrow> state"},var_u"v196",@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.RDHWR",@{typ instruction},var("v197",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              apply
                (call
                   ("dfn'RDHWR",@{typ "state \<Rightarrow> state"},
                    var("v197",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
             (call("instruction.SYNC",@{typ instruction},var_w("v198",5),@{theory}),var("state",qTy)),
             (call("instruction.ArithI",@{typ instruction},var("v1",@{typ ArithI}),@{theory}),
              cs(var("v1",@{typ ArithI}),
                 [(call
                     ("ArithI.ADDI",@{typ ArithI},
                      var("v2",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDI",@{typ "state \<Rightarrow> state"},
                         var("v2",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ADDIU",@{typ ArithI},
                      var("v3",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDIU",@{typ "state \<Rightarrow> state"},
                         var("v3",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ANDI",@{typ ArithI},
                      var("v4",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ANDI",@{typ "state \<Rightarrow> state"},
                         var("v4",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.DADDI",@{typ ArithI},
                      var("v5",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDI",@{typ "state \<Rightarrow> state"},
                         var("v5",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.DADDIU",@{typ ArithI},
                      var("v6",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDIU",@{typ "state \<Rightarrow> state"},
                         var("v6",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.LUI",@{typ ArithI},var("v7",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LUI",@{typ "state \<Rightarrow> state"},
                         var("v7",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("ArithI.ORI",@{typ ArithI},
                      var("v8",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ORI",@{typ "state \<Rightarrow> state"},
                         var("v8",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTI",@{typ ArithI},
                      var("v9",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTI",@{typ "state \<Rightarrow> state"},
                         var("v9",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTIU",@{typ ArithI},
                      var("v10",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTIU",@{typ "state \<Rightarrow> state"},
                         var("v10",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.XORI",@{typ ArithI},
                      var("v11",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XORI",@{typ "state \<Rightarrow> state"},
                         var("v11",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.ArithR",@{typ instruction},var("v12",@{typ ArithR}),@{theory}),
              cs(var("v12",@{typ ArithR}),
                 [(call
                     ("ArithR.ADD",@{typ ArithR},
                      var("v13",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADD",@{typ "state \<Rightarrow> state"},
                         var("v13",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.ADDU",@{typ ArithR},
                      var("v14",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDU",@{typ "state \<Rightarrow> state"},
                         var("v14",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.AND",@{typ ArithR},
                      var("v15",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'AND",@{typ "state \<Rightarrow> state"},
                         var("v15",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DADD",@{typ ArithR},
                      var("v16",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADD",@{typ "state \<Rightarrow> state"},
                         var("v16",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DADDU",@{typ ArithR},
                      var("v17",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDU",@{typ "state \<Rightarrow> state"},
                         var("v17",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DSUB",@{typ ArithR},
                      var("v18",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSUB",@{typ "state \<Rightarrow> state"},
                         var("v18",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DSUBU",@{typ ArithR},
                      var("v19",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSUBU",@{typ "state \<Rightarrow> state"},
                         var("v19",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.MOVN",@{typ ArithR},
                      var("v20",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVN",@{typ "state \<Rightarrow> state"},
                         var("v20",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.MOVZ",@{typ ArithR},
                      var("v21",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVZ",@{typ "state \<Rightarrow> state"},
                         var("v21",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.NOR",@{typ ArithR},
                      var("v22",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'NOR",@{typ "state \<Rightarrow> state"},
                         var("v22",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.OR",@{typ ArithR},
                      var("v23",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'OR",@{typ "state \<Rightarrow> state"},
                         var("v23",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLT",@{typ ArithR},
                      var("v24",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLT",@{typ "state \<Rightarrow> state"},
                         var("v24",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLTU",@{typ ArithR},
                      var("v25",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTU",@{typ "state \<Rightarrow> state"},
                         var("v25",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUB",@{typ ArithR},
                      var("v26",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUB",@{typ "state \<Rightarrow> state"},
                         var("v26",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUBU",@{typ ArithR},
                      var("v27",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUBU",@{typ "state \<Rightarrow> state"},
                         var("v27",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.XOR",@{typ ArithR},
                      var("v28",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XOR",@{typ "state \<Rightarrow> state"},
                         var("v28",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Branch",@{typ instruction},var("v29",@{typ Branch}),@{theory}),
              cs(var("v29",@{typ Branch}),
                 [(call
                     ("Branch.BEQ",@{typ Branch},
                      var("v30",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BEQ",@{typ "state \<Rightarrow> state"},
                         var("v30",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BEQL",@{typ Branch},
                      var("v31",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BEQL",@{typ "state \<Rightarrow> state"},
                         var("v31",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BGEZ",@{typ Branch},var("v32",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZ",@{typ "state \<Rightarrow> state"},
                         var("v32",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZAL",@{typ Branch},var("v33",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZAL",@{typ "state \<Rightarrow> state"},
                         var("v33",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZALL",@{typ Branch},var("v34",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZALL",@{typ "state \<Rightarrow> state"},
                         var("v34",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZL",@{typ Branch},var("v35",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZL",@{typ "state \<Rightarrow> state"},
                         var("v35",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGTZ",@{typ Branch},var("v36",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGTZ",@{typ "state \<Rightarrow> state"},
                         var("v36",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGTZL",@{typ Branch},var("v37",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGTZL",@{typ "state \<Rightarrow> state"},
                         var("v37",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLEZ",@{typ Branch},var("v38",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLEZ",@{typ "state \<Rightarrow> state"},
                         var("v38",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLEZL",@{typ Branch},var("v39",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLEZL",@{typ "state \<Rightarrow> state"},
                         var("v39",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZ",@{typ Branch},var("v40",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZ",@{typ "state \<Rightarrow> state"},
                         var("v40",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZAL",@{typ Branch},var("v41",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZAL",@{typ "state \<Rightarrow> state"},
                         var("v41",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZALL",@{typ Branch},var("v42",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZALL",@{typ "state \<Rightarrow> state"},
                         var("v42",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZL",@{typ Branch},var("v43",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZL",@{typ "state \<Rightarrow> state"},
                         var("v43",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BNE",@{typ Branch},
                      var("v44",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BNE",@{typ "state \<Rightarrow> state"},
                         var("v44",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BNEL",@{typ Branch},
                      var("v45",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BNEL",@{typ "state \<Rightarrow> state"},
                         var("v45",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call("Branch.J",@{typ Branch},var_w("v46",26),@{theory}),
                   apply
                     (call("dfn'J",@{typ "state \<Rightarrow> state"},var_w("v46",26),@{theory}),
                      var("state",qTy))),
                  (call("Branch.JAL",@{typ Branch},var_w("v47",26),@{theory}),
                   apply
                     (call("dfn'JAL",@{typ "state \<Rightarrow> state"},var_w("v47",26),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.JALR",@{typ Branch},var("v48",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'JALR",@{typ "state \<Rightarrow> state"},
                         var("v48",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("Branch.JR",@{typ Branch},var_w("v49",5),@{theory}),
                   apply
                     (call("dfn'JR",@{typ "state \<Rightarrow> state"},var_w("v49",5),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.COP2",@{typ instruction},var("v50",@{typ COP2}),@{theory}),
              cs(var("v50",@{typ COP2}),
                 [(call("COP2.CHERICOP2",@{typ COP2},var("v51",@{typ CHERICOP2}),@{theory}),
                   cs(var("v51",@{typ CHERICOP2}),
                      [(Term.Const(@{const_name "CReturn"},@{typ CHERICOP2}),
                        apply
                          (const("dfn'CReturn",@{typ "state \<Rightarrow> state"},@{theory}),
                           var("state",qTy))),
                       (Term.Const(@{const_name "DumpCapReg"},@{typ CHERICOP2}),var("state",qTy)),
                       (Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}),
                        apply
                          (const
                             ("dfn'UnknownCapInstruction",@{typ "state \<Rightarrow> state"},
                              @{theory}),var("state",qTy))),
                       (call
                          ("CHERICOP2.CBTS",@{typ CHERICOP2},
                           var("v78",@{typ "5 word \<times> 16 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CBTS",@{typ "state \<Rightarrow> state"},
                              var("v78",@{typ "5 word \<times> 16 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CBTU",@{typ CHERICOP2},
                           var("v79",@{typ "5 word \<times> 16 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CBTU",@{typ "state \<Rightarrow> state"},
                              var("v79",@{typ "5 word \<times> 16 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CCall",@{typ CHERICOP2},
                           var("v80",@{typ "5 word \<times> 5 word \<times> 11 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CCall",@{typ "state \<Rightarrow> state"},
                              var("v80",@{typ "5 word \<times> 5 word \<times> 11 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CCallFast",@{typ CHERICOP2},
                           var("v81",@{typ "5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CCallFast",@{typ "state \<Rightarrow> state"},
                              var("v81",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                       (call("CHERICOP2.CClearHi",@{typ CHERICOP2},var_w("v82",16),@{theory}),
                        apply
                          (call
                             ("dfn'CClearHi",@{typ "state \<Rightarrow> state"},var_w("v82",16),
                              @{theory}),var("state",qTy))),
                       (call("CHERICOP2.CClearLo",@{typ CHERICOP2},var_w("v83",16),@{theory}),
                        apply
                          (call
                             ("dfn'CClearLo",@{typ "state \<Rightarrow> state"},var_w("v83",16),
                              @{theory}),var("state",qTy))),
                       (call
                          ("CHERICOP2.CEQ",@{typ CHERICOP2},
                           var("v84",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CEQ",@{typ "state \<Rightarrow> state"},
                              var("v84",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CEXEQ",@{typ CHERICOP2},
                           var("v85",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CEXEQ",@{typ "state \<Rightarrow> state"},
                              var("v85",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CJALR",@{typ CHERICOP2},
                           var("v86",@{typ "5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CJALR",@{typ "state \<Rightarrow> state"},
                              var("v86",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                       (call("CHERICOP2.CJR",@{typ CHERICOP2},var_w("v87",5),@{theory}),
                        apply
                          (call
                             ("dfn'CJR",@{typ "state \<Rightarrow> state"},var_w("v87",5),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CLE",@{typ CHERICOP2},
                           var("v88",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLE",@{typ "state \<Rightarrow> state"},
                              var("v88",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CLEU",@{typ CHERICOP2},
                           var("v89",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLEU",@{typ "state \<Rightarrow> state"},
                              var("v89",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CLLC",@{typ CHERICOP2},
                           var("v90",@{typ "5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLLC",@{typ "state \<Rightarrow> state"},
                              var("v90",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                       (call
                          ("CHERICOP2.CLLx",@{typ CHERICOP2},
                           var("v91",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLLx",@{typ "state \<Rightarrow> state"},
                              var("v91",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CLT",@{typ CHERICOP2},
                           var("v92",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLT",@{typ "state \<Rightarrow> state"},
                              var("v92",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CLTU",@{typ CHERICOP2},
                           var("v93",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLTU",@{typ "state \<Rightarrow> state"},
                              var("v93",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CMOVN",@{typ CHERICOP2},
                           var("v94",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CMOVN",@{typ "state \<Rightarrow> state"},
                              var("v94",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CMOVZ",@{typ CHERICOP2},
                           var("v95",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CMOVZ",@{typ "state \<Rightarrow> state"},
                              var("v95",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CMove",@{typ CHERICOP2},
                           var("v96",@{typ "5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CMove",@{typ "state \<Rightarrow> state"},
                              var("v96",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                       (call
                          ("CHERICOP2.CNE",@{typ CHERICOP2},
                           var("v97",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CNE",@{typ "state \<Rightarrow> state"},
                              var("v97",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CNEXEQ",@{typ CHERICOP2},
                           var("v98",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CNEXEQ",@{typ "state \<Rightarrow> state"},
                              var("v98",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CSCC",@{typ CHERICOP2},
                           var("v99",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CSCC",@{typ "state \<Rightarrow> state"},
                              var("v99",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CSCx",@{typ CHERICOP2},
                           var("v100",
                               @{typ "5 word \<times> 5 word \<times> 5 word \<times> 2 word"}),
                           @{theory}),
                        apply
                          (call
                             ("dfn'CSCx",@{typ "state \<Rightarrow> state"},
                              var("v100",
                                  @{typ "5 word \<times> 5 word \<times> 5 word \<times> 2 word"}),
                              @{theory}),var("state",qTy))),
                       (call
                          ("CHERICOP2.CSeal",@{typ CHERICOP2},
                           var("v101",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CSeal",@{typ "state \<Rightarrow> state"},
                              var("v101",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CSub",@{typ CHERICOP2},
                           var("v102",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CSub",@{typ "state \<Rightarrow> state"},
                              var("v102",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call
                          ("CHERICOP2.CUnseal",@{typ CHERICOP2},
                           var("v103",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CUnseal",@{typ "state \<Rightarrow> state"},
                              var("v103",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                           var("state",qTy))),
                       (call("CHERICOP2.ClearHi",@{typ CHERICOP2},var_w("v104",16),@{theory}),
                        apply
                          (call
                             ("dfn'ClearHi",@{typ "state \<Rightarrow> state"},var_w("v104",16),
                              @{theory}),var("state",qTy))),
                       (call("CHERICOP2.ClearLo",@{typ CHERICOP2},var_w("v105",16),@{theory}),
                        apply
                          (call
                             ("dfn'ClearLo",@{typ "state \<Rightarrow> state"},var_w("v105",16),
                              @{theory}),var("state",qTy))),
                       (call("CHERICOP2.CCheck",@{typ CHERICOP2},var("v52",@{typ CCheck}),@{theory}),
                        cs(var("v52",@{typ CCheck}),
                           [(call
                               ("CCheck.CCheckPerm",@{typ CCheck},
                                var("v53",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CCheckPerm",@{typ "state \<Rightarrow> state"},
                                   var("v53",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CCheck.CCheckType",@{typ CCheck},
                                var("v54",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CCheckType",@{typ "state \<Rightarrow> state"},
                                   var("v54",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy)))],@{context})),
                       (call("CHERICOP2.CGet",@{typ CHERICOP2},var("v55",@{typ CGet}),@{theory}),
                        cs(var("v55",@{typ CGet}),
                           [(call
                               ("CGet.CGetBase",@{typ CGet},
                                var("v56",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetBase",@{typ "state \<Rightarrow> state"},
                                   var("v56",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call("CGet.CGetCause",@{typ CGet},var_w("v57",5),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetCause",@{typ "state \<Rightarrow> state"},
                                   var_w("v57",5),@{theory}),var("state",qTy))),
                            (call
                               ("CGet.CGetLen",@{typ CGet},
                                var("v58",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetLen",@{typ "state \<Rightarrow> state"},
                                   var("v58",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CGetOffset",@{typ CGet},
                                var("v59",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetOffset",@{typ "state \<Rightarrow> state"},
                                   var("v59",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call("CGet.CGetPCC",@{typ CGet},var_w("v60",5),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetPCC",@{typ "state \<Rightarrow> state"},var_w("v60",5),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CGet.CGetPCCSetOffset",@{typ CGet},
                                var("v61",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetPCCSetOffset",@{typ "state \<Rightarrow> state"},
                                   var("v61",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CGetPerm",@{typ CGet},
                                var("v62",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetPerm",@{typ "state \<Rightarrow> state"},
                                   var("v62",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CGetSealed",@{typ CGet},
                                var("v63",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetSealed",@{typ "state \<Rightarrow> state"},
                                   var("v63",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CGetTag",@{typ CGet},
                                var("v64",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetTag",@{typ "state \<Rightarrow> state"},
                                   var("v64",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CGetType",@{typ CGet},
                                var("v65",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CGetType",@{typ "state \<Rightarrow> state"},
                                   var("v65",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CGet.CToPtr",@{typ CGet},
                                var("v66",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CToPtr",@{typ "state \<Rightarrow> state"},
                                   var("v66",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy)))],@{context})),
                       (call("CHERICOP2.CSet",@{typ CHERICOP2},var("v67",@{typ CSet}),@{theory}),
                        cs(var("v67",@{typ CSet}),
                           [(call
                               ("CSet.CAndPerm",@{typ CSet},
                                var("v68",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CAndPerm",@{typ "state \<Rightarrow> state"},
                                   var("v68",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CClearTag",@{typ CSet},
                                var("v69",@{typ "5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CClearTag",@{typ "state \<Rightarrow> state"},
                                   var("v69",@{typ "5 word \<times> 5 word"}),@{theory}),
                                var("state",qTy))),
                            (call
                               ("CSet.CFromPtr",@{typ CSet},
                                var("v70",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CFromPtr",@{typ "state \<Rightarrow> state"},
                                   var("v70",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CIncOffset",@{typ CSet},
                                var("v71",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CIncOffset",@{typ "state \<Rightarrow> state"},
                                   var("v71",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CIncOffsetImmediate",@{typ CSet},
                                var("v72",@{typ "5 word \<times> 5 word \<times> 11 word"}),
                                @{theory}),
                             apply
                               (call
                                  ("dfn'CIncOffsetImmediate",@{typ "state \<Rightarrow> state"},
                                   var("v72",@{typ "5 word \<times> 5 word \<times> 11 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CSetBounds",@{typ CSet},
                                var("v73",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CSetBounds",@{typ "state \<Rightarrow> state"},
                                   var("v73",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CSetBoundsExact",@{typ CSet},
                                var("v74",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CSetBoundsExact",@{typ "state \<Rightarrow> state"},
                                   var("v74",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy))),
                            (call
                               ("CSet.CSetBoundsImmediate",@{typ CSet},
                                var("v75",@{typ "5 word \<times> 5 word \<times> 11 word"}),
                                @{theory}),
                             apply
                               (call
                                  ("dfn'CSetBoundsImmediate",@{typ "state \<Rightarrow> state"},
                                   var("v75",@{typ "5 word \<times> 5 word \<times> 11 word"}),
                                   @{theory}),var("state",qTy))),
                            (call("CSet.CSetCause",@{typ CSet},var_w("v76",5),@{theory}),
                             apply
                               (call
                                  ("dfn'CSetCause",@{typ "state \<Rightarrow> state"},
                                   var_w("v76",5),@{theory}),var("state",qTy))),
                            (call
                               ("CSet.CSetOffset",@{typ CSet},
                                var("v77",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                             apply
                               (call
                                  ("dfn'CSetOffset",@{typ "state \<Rightarrow> state"},
                                   var("v77",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                                   @{theory}),var("state",qTy)))],@{context}))],@{context}))],
                 @{context})),
             (call("instruction.CP",@{typ instruction},var("v106",@{typ CP}),@{theory}),
              cs(var("v106",@{typ CP}),
                 [(call
                     ("CP.DMFC0",@{typ CP},
                      var("v107",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMFC0",@{typ "state \<Rightarrow> state"},
                         var("v107",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.DMTC0",@{typ CP},
                      var("v108",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMTC0",@{typ "state \<Rightarrow> state"},
                         var("v108",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.MFC0",@{typ CP},
                      var("v109",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MFC0",@{typ "state \<Rightarrow> state"},
                         var("v109",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.MTC0",@{typ CP},
                      var("v110",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MTC0",@{typ "state \<Rightarrow> state"},
                         var("v110",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.LDC2",@{typ instruction},var("v111",@{typ LDC2}),@{theory}),
              cs(var("v111",@{typ LDC2}),
                 [(call("LDC2.CHERILDC2",@{typ LDC2},var("v112",@{typ CHERILDC2}),@{theory}),
                   cs(var("v112",@{typ CHERILDC2}),
                      [(call
                          ("CHERILDC2.CLC",@{typ CHERILDC2},
                           var("v113",
                               @{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
                           @{theory}),
                        apply
                          (call
                             ("dfn'CLC",@{typ "state \<Rightarrow> state"},
                              var("v113",
                                  @{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
                              @{theory}),var("state",qTy)))],@{context}))],@{context})),
             (call("instruction.LWC2",@{typ instruction},var("v114",@{typ LWC2}),@{theory}),
              cs(var("v114",@{typ LWC2}),
                 [(call("LWC2.CHERILWC2",@{typ LWC2},var("v115",@{typ CHERILWC2}),@{theory}),
                   cs(var("v115",@{typ CHERILWC2}),
                      [(call
                          ("CHERILWC2.CLoad",@{typ CHERILWC2},
                           var("v116",
                               @{typ
                               "5 word \<times>
                                5 word \<times>
                                5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CLoad",@{typ "state \<Rightarrow> state"},
                              var("v116",
                                  @{typ
                                  "5 word \<times>
                                   5 word \<times>
                                   5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),
                              @{theory}),var("state",qTy)))],@{context}))],@{context})),
             (call("instruction.Load",@{typ instruction},var("v117",@{typ Load}),@{theory}),
              cs(var("v117",@{typ Load}),
                 [(call
                     ("Load.LB",@{typ Load},
                      var("v118",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LB",@{typ "state \<Rightarrow> state"},
                         var("v118",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LBU",@{typ Load},
                      var("v119",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LBU",@{typ "state \<Rightarrow> state"},
                         var("v119",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LD",@{typ Load},
                      var("v120",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LD",@{typ "state \<Rightarrow> state"},
                         var("v120",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LDL",@{typ Load},
                      var("v121",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDL",@{typ "state \<Rightarrow> state"},
                         var("v121",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LDR",@{typ Load},
                      var("v122",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDR",@{typ "state \<Rightarrow> state"},
                         var("v122",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LH",@{typ Load},
                      var("v123",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LH",@{typ "state \<Rightarrow> state"},
                         var("v123",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LHU",@{typ Load},
                      var("v124",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LHU",@{typ "state \<Rightarrow> state"},
                         var("v124",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LL",@{typ Load},
                      var("v125",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LL",@{typ "state \<Rightarrow> state"},
                         var("v125",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LLD",@{typ Load},
                      var("v126",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LLD",@{typ "state \<Rightarrow> state"},
                         var("v126",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LW",@{typ Load},
                      var("v127",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LW",@{typ "state \<Rightarrow> state"},
                         var("v127",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWL",@{typ Load},
                      var("v128",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWL",@{typ "state \<Rightarrow> state"},
                         var("v128",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWR",@{typ Load},
                      var("v129",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWR",@{typ "state \<Rightarrow> state"},
                         var("v129",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWU",@{typ Load},
                      var("v130",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWU",@{typ "state \<Rightarrow> state"},
                         var("v130",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.MultDiv",@{typ instruction},var("v131",@{typ MultDiv}),@{theory}),
              cs(var("v131",@{typ MultDiv}),
                 [(call
                     ("MultDiv.DDIV",@{typ MultDiv},var("v132",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DDIV",@{typ "state \<Rightarrow> state"},
                         var("v132",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DDIVU",@{typ MultDiv},var("v133",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DDIVU",@{typ "state \<Rightarrow> state"},
                         var("v133",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DIV",@{typ MultDiv},var("v134",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DIV",@{typ "state \<Rightarrow> state"},
                         var("v134",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DIVU",@{typ MultDiv},var("v135",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DIVU",@{typ "state \<Rightarrow> state"},
                         var("v135",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DMULT",@{typ MultDiv},var("v136",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DMULT",@{typ "state \<Rightarrow> state"},
                         var("v136",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DMULTU",@{typ MultDiv},var("v137",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DMULTU",@{typ "state \<Rightarrow> state"},
                         var("v137",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MADD",@{typ MultDiv},var("v138",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADD",@{typ "state \<Rightarrow> state"},
                         var("v138",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MADDU",@{typ MultDiv},var("v139",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADDU",@{typ "state \<Rightarrow> state"},
                         var("v139",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("MultDiv.MFHI",@{typ MultDiv},var_w("v140",5),@{theory}),
                   apply
                     (call("dfn'MFHI",@{typ "state \<Rightarrow> state"},var_w("v140",5),@{theory}),
                      var("state",qTy))),
                  (call("MultDiv.MFLO",@{typ MultDiv},var_w("v141",5),@{theory}),
                   apply
                     (call("dfn'MFLO",@{typ "state \<Rightarrow> state"},var_w("v141",5),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MSUB",@{typ MultDiv},var("v142",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUB",@{typ "state \<Rightarrow> state"},
                         var("v142",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MSUBU",@{typ MultDiv},var("v143",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUBU",@{typ "state \<Rightarrow> state"},
                         var("v143",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("MultDiv.MTHI",@{typ MultDiv},var_w("v144",5),@{theory}),
                   apply
                     (call("dfn'MTHI",@{typ "state \<Rightarrow> state"},var_w("v144",5),@{theory}),
                      var("state",qTy))),
                  (call("MultDiv.MTLO",@{typ MultDiv},var_w("v145",5),@{theory}),
                   apply
                     (call("dfn'MTLO",@{typ "state \<Rightarrow> state"},var_w("v145",5),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MUL",@{typ MultDiv},
                      var("v146",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MUL",@{typ "state \<Rightarrow> state"},
                         var("v146",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MULT",@{typ MultDiv},var("v147",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MULT",@{typ "state \<Rightarrow> state"},
                         var("v147",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MULTU",@{typ MultDiv},var("v148",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MULTU",@{typ "state \<Rightarrow> state"},
                         var("v148",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy)))],
                 @{context})),
             (call("instruction.SDC2",@{typ instruction},var("v149",@{typ SDC2}),@{theory}),
              cs(var("v149",@{typ SDC2}),
                 [(call("SDC2.CHERISDC2",@{typ SDC2},var("v150",@{typ CHERISDC2}),@{theory}),
                   cs(var("v150",@{typ CHERISDC2}),
                      [(call
                          ("CHERISDC2.CSC",@{typ CHERISDC2},
                           var("v151",
                               @{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
                           @{theory}),
                        apply
                          (call
                             ("dfn'CSC",@{typ "state \<Rightarrow> state"},
                              var("v151",
                                  @{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
                              @{theory}),var("state",qTy)))],@{context}))],@{context})),
             (call("instruction.SWC2",@{typ instruction},var("v152",@{typ SWC2}),@{theory}),
              cs(var("v152",@{typ SWC2}),
                 [(call("SWC2.CHERISWC2",@{typ SWC2},var("v153",@{typ CHERISWC2}),@{theory}),
                   cs(var("v153",@{typ CHERISWC2}),
                      [(call
                          ("CHERISWC2.CStore",@{typ CHERISWC2},
                           var("v154",
                               @{typ
                               "5 word \<times>
                                5 word \<times> 5 word \<times> 8 word \<times> 2 word"}),@{theory}),
                        apply
                          (call
                             ("dfn'CStore",@{typ "state \<Rightarrow> state"},
                              var("v154",
                                  @{typ
                                  "5 word \<times>
                                   5 word \<times> 5 word \<times> 8 word \<times> 2 word"}),
                              @{theory}),var("state",qTy)))],@{context}))],@{context})),
             (call("instruction.Shift",@{typ instruction},var("v155",@{typ Shift}),@{theory}),
              cs(var("v155",@{typ Shift}),
                 [(call
                     ("Shift.DSLL",@{typ Shift},
                      var("v156",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLL",@{typ "state \<Rightarrow> state"},
                         var("v156",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSLL32",@{typ Shift},
                      var("v157",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLL32",@{typ "state \<Rightarrow> state"},
                         var("v157",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSLLV",@{typ Shift},
                      var("v158",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLLV",@{typ "state \<Rightarrow> state"},
                         var("v158",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRA",@{typ Shift},
                      var("v159",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRA",@{typ "state \<Rightarrow> state"},
                         var("v159",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRA32",@{typ Shift},
                      var("v160",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRA32",@{typ "state \<Rightarrow> state"},
                         var("v160",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRAV",@{typ Shift},
                      var("v161",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRAV",@{typ "state \<Rightarrow> state"},
                         var("v161",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRL",@{typ Shift},
                      var("v162",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRL",@{typ "state \<Rightarrow> state"},
                         var("v162",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRL32",@{typ Shift},
                      var("v163",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRL32",@{typ "state \<Rightarrow> state"},
                         var("v163",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRLV",@{typ Shift},
                      var("v164",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRLV",@{typ "state \<Rightarrow> state"},
                         var("v164",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLL",@{typ Shift},
                      var("v165",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLL",@{typ "state \<Rightarrow> state"},
                         var("v165",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLLV",@{typ Shift},
                      var("v166",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLLV",@{typ "state \<Rightarrow> state"},
                         var("v166",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRA",@{typ Shift},
                      var("v167",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRA",@{typ "state \<Rightarrow> state"},
                         var("v167",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRAV",@{typ Shift},
                      var("v168",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRAV",@{typ "state \<Rightarrow> state"},
                         var("v168",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRL",@{typ Shift},
                      var("v169",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRL",@{typ "state \<Rightarrow> state"},
                         var("v169",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRLV",@{typ Shift},
                      var("v170",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRLV",@{typ "state \<Rightarrow> state"},
                         var("v170",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Store",@{typ instruction},var("v171",@{typ Store}),@{theory}),
              cs(var("v171",@{typ Store}),
                 [(call
                     ("Store.SB",@{typ Store},
                      var("v172",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SB",@{typ "state \<Rightarrow> state"},
                         var("v172",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SC",@{typ Store},
                      var("v173",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SC",@{typ "state \<Rightarrow> state"},
                         var("v173",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SCD",@{typ Store},
                      var("v174",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SCD",@{typ "state \<Rightarrow> state"},
                         var("v174",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SD",@{typ Store},
                      var("v175",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SD",@{typ "state \<Rightarrow> state"},
                         var("v175",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SDL",@{typ Store},
                      var("v176",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDL",@{typ "state \<Rightarrow> state"},
                         var("v176",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SDR",@{typ Store},
                      var("v177",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDR",@{typ "state \<Rightarrow> state"},
                         var("v177",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SH",@{typ Store},
                      var("v178",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SH",@{typ "state \<Rightarrow> state"},
                         var("v178",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SW",@{typ Store},
                      var("v179",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SW",@{typ "state \<Rightarrow> state"},
                         var("v179",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SWL",@{typ Store},
                      var("v180",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWL",@{typ "state \<Rightarrow> state"},
                         var("v180",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SWR",@{typ Store},
                      var("v181",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWR",@{typ "state \<Rightarrow> state"},
                         var("v181",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Trap",@{typ instruction},var("v182",@{typ Trap}),@{theory}),
              cs(var("v182",@{typ Trap}),
                 [(call
                     ("Trap.TEQ",@{typ Trap},var("v183",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TEQ",@{typ "state \<Rightarrow> state"},
                         var("v183",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TEQI",@{typ Trap},var("v184",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TEQI",@{typ "state \<Rightarrow> state"},
                         var("v184",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGE",@{typ Trap},var("v185",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGE",@{typ "state \<Rightarrow> state"},
                         var("v185",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEI",@{typ Trap},var("v186",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGEI",@{typ "state \<Rightarrow> state"},
                         var("v186",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEIU",@{typ Trap},var("v187",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TGEIU",@{typ "state \<Rightarrow> state"},
                         var("v187",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEU",@{typ Trap},var("v188",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGEU",@{typ "state \<Rightarrow> state"},
                         var("v188",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLT",@{typ Trap},var("v189",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLT",@{typ "state \<Rightarrow> state"},
                         var("v189",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTI",@{typ Trap},var("v190",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLTI",@{typ "state \<Rightarrow> state"},
                         var("v190",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTIU",@{typ Trap},var("v191",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TLTIU",@{typ "state \<Rightarrow> state"},
                         var("v191",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTU",@{typ Trap},var("v192",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLTU",@{typ "state \<Rightarrow> state"},
                         var("v192",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TNE",@{typ Trap},var("v193",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TNE",@{typ "state \<Rightarrow> state"},
                         var("v193",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TNEI",@{typ Trap},var("v194",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TNEI",@{typ "state \<Rightarrow> state"},
                         var("v194",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy)))],
                 @{context}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP1Decode",close(var_w("v",26),call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP3Decode",close(var_w("v",26),call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LDC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LWC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SDC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SWC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("MOVCIDecode",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      call("instruction.COP1",@{typ instruction},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP2Decode",
   close
     (var_w("v",26),
      call
        ("instruction.COP2",@{typ instruction},
         call
           ("COP2.CHERICOP2",@{typ COP2},
            let'
              (tp[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                  var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",
                  var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                  var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
               call
                 ("boolify'26",
                  @{typ
                  "bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                  var_w("v",26),@{theory}),
               itb([(var_b"b'25",
                     ite(bop(And,mop(Not,var_b"b'24"),mop(Not,var_b"b'23")),
                         itb([(bop(And,var_b"b'22",mop(Not,var_b"b'21")),
                               call
                                 ("CHERICOP2.CSet",@{typ CHERICOP2},
                                  call
                                    ("CSet.CSetBoundsImmediate",@{typ CSet},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 11),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                               var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),var_b"b'21"),
                               call
                                 ("CHERICOP2.CSet",@{typ CHERICOP2},
                                  call
                                    ("CSet.CIncOffsetImmediate",@{typ CSet},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 11),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                               var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,var_b"b'3",
                                           bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))),
                               call
                                 ("CHERICOP2.CLLx",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),cc[mop(Cast w1,ll[var_b"b'2"]),lw(0,2)]],
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,var_b"b'3",bop(And,mop(Not,var_b"b'1"),var_b"b'0")))),
                               call
                                 ("CHERICOP2.CLLx",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),cc[mop(Cast w1,ll[var_b"b'2"]),lw(1,2)]],
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,var_b"b'3",bop(And,var_b"b'1",mop(Not,var_b"b'0"))))),
                               call
                                 ("CHERICOP2.CLLx",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),cc[mop(Cast w1,ll[var_b"b'2"]),lw(2,2)]],
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,var_b"b'3",
                                           bop(And,mop(Not,var_b"b'2"),
                                               bop(And,var_b"b'1",var_b"b'0"))))),
                               call
                                 ("CHERICOP2.CLLx",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),lw(3,3)],@{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,var_b"b'3",
                                           bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0"))))),
                               call
                                 ("CHERICOP2.CLLC",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"])],@{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'2")))),
                               call
                                 ("CHERICOP2.CSCx",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                     mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'1",var_b"b'0"])],
                                  @{theory})),
                              (bop(And,mop(Not,var_b"b'22"),
                                   bop(And,mop(Not,var_b"b'21"),
                                       bop(And,mop(Not,var_b"b'3"),
                                           bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0"))))),
                               call
                                 ("CHERICOP2.CSCC",@{typ CHERICOP2},
                                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                            var_b"b'16"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                            var_b"b'11"]),
                                     mop(Cast (Word_Lib.mk_wordT 5),
                                         ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                                  @{theory}))],
                             Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2})),
                         Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}))),
                    (var_b"b'23",
                     itb([(var_b"b'24",
                           ite(bop(And,var_b"b'22",
                                   bop(And,var_b"b'21",
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'19"),mop(Not,var_b"b'18"))))),
                               itb([(bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")),
                                     call
                                       ("CHERICOP2.ClearLo",@{typ CHERICOP2},
                                        mop(Cast w16,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                               var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        @{theory})),
                                    (bop(And,mop(Not,var_b"b'17"),var_b"b'16"),
                                     call
                                       ("CHERICOP2.ClearHi",@{typ CHERICOP2},
                                        mop(Cast w16,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                               var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        @{theory})),
                                    (bop(And,var_b"b'17",mop(Not,var_b"b'16")),
                                     call
                                       ("CHERICOP2.CClearLo",@{typ CHERICOP2},
                                        mop(Cast w16,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                               var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        @{theory})),
                                    (bop(And,var_b"b'17",var_b"b'16"),
                                     call
                                       ("CHERICOP2.CClearHi",@{typ CHERICOP2},
                                        mop(Cast w16,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                               var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                               var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        @{theory}))],
                                   Term.Const
                                     (@{const_name "UnknownCapInstruction"},@{typ CHERICOP2})),
                               Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}))),
                          (mop(Not,var_b"b'22"),
                           itb([(bop(And,mop(Not,var_b"b'21"),
                                     bop(And,var_b"b'2",bop(And,var_b"b'1",mop(Not,var_b"b'0")))),
                                 Term.Const(@{const_name "DumpCapReg"},@{typ CHERICOP2})),
                                (bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'10"),
                                         bop(And,mop(Not,var_b"b'9"),
                                             bop(And,mop(Not,var_b"b'8"),
                                                 bop(And,mop(Not,var_b"b'7"),
                                                     bop(And,mop(Not,var_b"b'6"),
                                                         bop(And,mop(Not,var_b"b'5"),
                                                             bop(And,mop(Not,var_b"b'4"),
                                                                 bop(And,mop(Not,var_b"b'3"),
                                                                     bop(And,mop(Not,var_b"b'2"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'1"),
                                                                             var_b"b'0"))))))))))),
                                 call
                                   ("CHERICOP2.CCallFast",@{typ CHERICOP2},
                                    tp[mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                              var_b"b'16"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                              var_b"b'11"])],@{theory})),
                                (bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,mop(Not,var_b"b'19"),
                                             bop(And,mop(Not,var_b"b'18"),
                                                 bop(And,mop(Not,var_b"b'17"),
                                                     bop(And,mop(Not,var_b"b'16"),
                                                         bop(And,mop(Not,var_b"b'15"),
                                                             bop(And,mop(Not,var_b"b'14"),
                                                                 bop(And,mop(Not,var_b"b'13"),
                                                                     bop(And,mop(Not,var_b"b'12"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'11"),
                                                                             bop(And,var_b"b'10",
                                                                                 bop(And,var_b"b'9",
                                                                                     bop(And,
                                                                                         var_b"b'8",
                                                                                         bop(And,
                                                                                             var_b"b'7",
                                                                                             bop(And,
                                                                                                 var_b"b'6",
                                                                                                 bop(And,
                                                                                                     var_b"b'5",
                                                                                                     bop(And,
                                                                                                         var_b"b'4",
                                                                                                         bop(And,
                                                                                                             var_b"b'3",
                                                                                                             bop(And,
                                                                                                                 var_b"b'2",
                                                                                                                 bop(And,
                                                                                                                     var_b"b'1",
                                                                                                                     var_b"b'0"))))))))))))))))))))),
                                 Term.Const(@{const_name "CReturn"},@{typ CHERICOP2})),
                                (var_b"b'21",
                                 call
                                   ("CHERICOP2.CCall",@{typ CHERICOP2},
                                    tp[mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                              var_b"b'16"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                              var_b"b'11"]),
                                       mop(Cast (Word_Lib.mk_wordT 11),
                                           ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                              var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                              var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}))],
                               Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2})))],
                         Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}))),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetPerm",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetType",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetBase",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,var_b"b'7",
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetLen",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,var_b"b'8",
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetTag",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,var_b"b'8",
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetSealed",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,var_b"b'8",
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetOffset",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'15"),
                                     bop(And,mop(Not,var_b"b'14"),
                                         bop(And,mop(Not,var_b"b'13"),
                                             bop(And,mop(Not,var_b"b'12"),
                                                 bop(And,mop(Not,var_b"b'11"),
                                                     bop(And,var_b"b'10",
                                                         bop(And,var_b"b'9",
                                                             bop(And,var_b"b'8",
                                                                 bop(And,var_b"b'7",
                                                                     bop(And,var_b"b'6",
                                                                         bop(And,var_b"b'5",
                                                                             bop(And,var_b"b'4",
                                                                                 bop(And,var_b"b'3",
                                                                                     bop(And,
                                                                                         var_b"b'2",
                                                                                         bop(And,
                                                                                             var_b"b'1",
                                                                                             var_b"b'0")))))))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetPCC",@{typ CGet},
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,mop(Not,var_b"b'9"),
                                         bop(And,var_b"b'8",
                                             bop(And,var_b"b'7",
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetPCCSetOffset",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSeal",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,var_b"b'2",
                                                 bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CUnseal",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,var_b"b'2",
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CAndPerm",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CSetOffset",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CSetBounds",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CSetBoundsExact",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,var_b"b'9",
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,var_b"b'7",
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CClearTag",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CIncOffset",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CToPtr",@{typ CGet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CFromPtr",@{typ CSet},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CSub",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,var_b"b'9",
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CMove",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CMOVZ",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,var_b"b'3",
                                             bop(And,var_b"b'2",
                                                 bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CMOVN",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,var_b"b'2",
                                                 bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CEQ",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,var_b"b'2",
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CNE",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,var_b"b'2",
                                                 bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CLT",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,var_b"b'2",bop(And,var_b"b'1",var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CLE",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CLTU",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CLEU",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'5"),
                                     bop(And,var_b"b'4",
                                         bop(And,var_b"b'3",
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))),
                     call
                       ("CHERICOP2.CEXEQ",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,var_b"b'5",
                                     bop(And,mop(Not,var_b"b'4"),
                                         bop(And,mop(Not,var_b"b'3"),
                                             bop(And,mop(Not,var_b"b'2"),
                                                 bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))),
                     call
                       ("CHERICOP2.CNEXEQ",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'15"),
                                     bop(And,mop(Not,var_b"b'14"),
                                         bop(And,mop(Not,var_b"b'13"),
                                             bop(And,mop(Not,var_b"b'12"),
                                                 bop(And,var_b"b'11",
                                                     bop(And,var_b"b'10",
                                                         bop(And,var_b"b'9",
                                                             bop(And,var_b"b'8",
                                                                 bop(And,var_b"b'7",
                                                                     bop(And,var_b"b'6",
                                                                         bop(And,var_b"b'5",
                                                                             bop(And,var_b"b'4",
                                                                                 bop(And,var_b"b'3",
                                                                                     bop(And,
                                                                                         var_b"b'2",
                                                                                         bop(And,
                                                                                             var_b"b'1",
                                                                                             var_b"b'0")))))))))))))))))),
                     call
                       ("CHERICOP2.CGet",@{typ CHERICOP2},
                        call
                          ("CGet.CGetCause",@{typ CGet},
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'15"),
                                     bop(And,mop(Not,var_b"b'14"),
                                         bop(And,mop(Not,var_b"b'13"),
                                             bop(And,var_b"b'12",
                                                 bop(And,mop(Not,var_b"b'11"),
                                                     bop(And,var_b"b'10",
                                                         bop(And,var_b"b'9",
                                                             bop(And,var_b"b'8",
                                                                 bop(And,var_b"b'7",
                                                                     bop(And,var_b"b'6",
                                                                         bop(And,var_b"b'5",
                                                                             bop(And,var_b"b'4",
                                                                                 bop(And,var_b"b'3",
                                                                                     bop(And,
                                                                                         var_b"b'2",
                                                                                         bop(And,
                                                                                             var_b"b'1",
                                                                                             var_b"b'0")))))))))))))))))),
                     call
                       ("CHERICOP2.CSet",@{typ CHERICOP2},
                        call
                          ("CSet.CSetCause",@{typ CSet},
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'24",bop(And,mop(Not,var_b"b'22"),var_b"b'21")),
                     call
                       ("CHERICOP2.CBTU",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast w16,
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                        @{theory})),
                    (bop(And,var_b"b'24",bop(And,var_b"b'22",mop(Not,var_b"b'21"))),
                     call
                       ("CHERICOP2.CBTS",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast w16,
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'15"),
                                     bop(And,mop(Not,var_b"b'14"),
                                         bop(And,mop(Not,var_b"b'13"),
                                             bop(And,var_b"b'12",
                                                 bop(And,var_b"b'11",
                                                     bop(And,var_b"b'10",
                                                         bop(And,var_b"b'9",
                                                             bop(And,var_b"b'8",
                                                                 bop(And,var_b"b'7",
                                                                     bop(And,var_b"b'6",
                                                                         bop(And,var_b"b'5",
                                                                             bop(And,var_b"b'4",
                                                                                 bop(And,var_b"b'3",
                                                                                     bop(And,
                                                                                         var_b"b'2",
                                                                                         bop(And,
                                                                                             var_b"b'1",
                                                                                             var_b"b'0")))))))))))))))))),
                     call
                       ("CHERICOP2.CJR",@{typ CHERICOP2},
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,var_b"b'9",
                                         bop(And,var_b"b'8",
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CJALR",@{typ CHERICOP2},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                        @{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,var_b"b'9",
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CCheck",@{typ CHERICOP2},
                        call
                          ("CCheck.CCheckPerm",@{typ CCheck},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'10"),
                                     bop(And,var_b"b'9",
                                         bop(And,mop(Not,var_b"b'8"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",
                                                     bop(And,var_b"b'5",
                                                         bop(And,var_b"b'4",
                                                             bop(And,var_b"b'3",
                                                                 bop(And,var_b"b'2",
                                                                     bop(And,var_b"b'1",var_b"b'0"))))))))))))),
                     call
                       ("CHERICOP2.CCheck",@{typ CHERICOP2},
                        call
                          ("CCheck.CCheckType",@{typ CCheck},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}),@{theory}))],
                   Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}))),@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LWC2Decode",
   close
     (tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("v",3)],
      cs(call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("v",3),@{theory}),
         [(tp[lf,var_b"t'1",var_b"t'0"],
           call
             ("instruction.LWC2",@{typ instruction},
              call
                ("LWC2.CHERILWC2",@{typ LWC2},
                 call
                   ("CHERILWC2.CLoad",@{typ CHERILWC2},
                    tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),lw(0,1),
                       mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"t'1",var_b"t'0"])],@{theory}),
                 @{theory}),@{theory})),
          (tp[lt,lf,lf],
           call
             ("instruction.LWC2",@{typ instruction},
              call
                ("LWC2.CHERILWC2",@{typ LWC2},
                 call
                   ("CHERILWC2.CLoad",@{typ CHERILWC2},
                    tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),lw(1,1),lw(0,2)],
                    @{theory}),@{theory}),@{theory})),
          (tp[lt,lf,lt],
           call
             ("instruction.LWC2",@{typ instruction},
              call
                ("LWC2.CHERILWC2",@{typ LWC2},
                 call
                   ("CHERILWC2.CLoad",@{typ CHERILWC2},
                    tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),lw(1,1),lw(1,2)],
                    @{theory}),@{theory}),@{theory})),
          (tp[lt,lt,lf],
           call
             ("instruction.LWC2",@{typ instruction},
              call
                ("LWC2.CHERILWC2",@{typ LWC2},
                 call
                   ("CHERILWC2.CLoad",@{typ CHERILWC2},
                    tp[var_w("rd",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),lw(1,1),lw(2,2)],
                    @{theory}),@{theory}),@{theory})),
          (tp[var_a HOLogic.boolT,var_a HOLogic.boolT,var_a HOLogic.boolT],
           call
             ("instruction.COP2",@{typ instruction},
              call
                ("COP2.CHERICOP2",@{typ COP2},
                 Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}),@{theory}),
              @{theory}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SWC2Decode",
   close
     (tp[var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("v",3)],
      cs(call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("v",3),@{theory}),
         [(tp[lf,var_b"t'1",var_b"t'0"],
           call
             ("instruction.SWC2",@{typ instruction},
              call
                ("SWC2.CHERISWC2",@{typ SWC2},
                 call
                   ("CHERISWC2.CStore",@{typ CHERISWC2},
                    tp[var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),
                       mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"t'1",var_b"t'0"])],@{theory}),
                 @{theory}),@{theory})),
          (tp[var_a HOLogic.boolT,var_a HOLogic.boolT,var_a HOLogic.boolT],
           call
             ("instruction.COP2",@{typ instruction},
              call
                ("COP2.CHERICOP2",@{typ COP2},
                 Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}),@{theory}),
              @{theory}))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LDC2Decode",
   close
     (var("a",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
      call
        ("instruction.LDC2",@{typ instruction},
         call
           ("LDC2.CHERILDC2",@{typ LDC2},
            call
              ("CHERILDC2.CLC",@{typ CHERILDC2},
               var("a",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),@{theory}),
            @{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SDC2Decode",
   close
     (var("a",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),
      call
        ("instruction.SDC2",@{typ instruction},
         call
           ("SDC2.CHERISDC2",@{typ SDC2},
            call
              ("CHERISDC2.CSC",@{typ CHERISDC2},
               var("a",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 11 word"}),@{theory}),
            @{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Decode",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'26",
               itb([(var_b"b'28",
                     itb([(var_b"b'31",
                           itb([(var_b"b'30",
                                 itb([(bop(And,mop(Not,var_b"b'29"),var_b"b'27"),
                                       call
                                         ("instruction.Load",@{typ instruction},
                                          call
                                            ("Load.LD",@{typ Load},
                                             tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'25",var_b"b'24",var_b"b'23",
                                                       var_b"b'22",var_b"b'21"]),
                                                mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                       var_b"b'17",var_b"b'16"]),
                                                mop(Cast w16,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12",var_b"b'11",var_b"b'10",
                                                       var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                                       var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                                       var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                                      (bop(And,var_b"b'29",var_b"b'27"),
                                       call
                                         ("instruction.Store",@{typ instruction},
                                          call
                                            ("Store.SD",@{typ Store},
                                             tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'25",var_b"b'24",var_b"b'23",
                                                       var_b"b'22",var_b"b'21"]),
                                                mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                       var_b"b'17",var_b"b'16"]),
                                                mop(Cast w16,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12",var_b"b'11",var_b"b'10",
                                                       var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                                       var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                                       var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                                      (bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27")),
                                       call
                                         ("LDC1Decode",@{typ instruction},
                                          tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                    var_b"b'16"]),
                                             mop(Cast w16,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                    var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                    var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                    var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                             mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                    var_b"b'21"])],@{theory})),
                                      (bop(And,var_b"b'29",mop(Not,var_b"b'27")),
                                       call
                                         ("SDC1Decode",@{typ instruction},
                                          tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                    var_b"b'16"]),
                                             mop(Cast w16,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                    var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                    var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                    var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                             mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                    var_b"b'21"])],@{theory}))],
                                     Term.Const
                                       (@{const_name "ReservedInstruction"},@{typ instruction}))),
                                (bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27")),
                                 call
                                   ("instruction.Load",@{typ instruction},
                                    call
                                      ("Load.LHU",@{typ Load},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'29"),var_b"b'27"),
                                 call
                                   ("instruction.Load",@{typ instruction},
                                    call
                                      ("Load.LWU",@{typ Load},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,var_b"b'29",mop(Not,var_b"b'27")),
                                 call
                                   ("instruction.Store",@{typ instruction},
                                    call
                                      ("Store.SDR",@{typ Store},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,var_b"b'29",var_b"b'27"),
                                 call
                                   ("instruction.CACHE",@{typ instruction},
                                    tp[mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                              var_b"b'21"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                              var_b"b'16"]),
                                       mop(Cast w16,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                              var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                              var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                              var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                    @{theory}))],
                               Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'19"),
                                               bop(And,mop(Not,var_b"b'18"),
                                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BGTZ",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,var_b"b'29",
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'25"),
                                           bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'21")))))))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.LUI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'19"),
                                               bop(And,mop(Not,var_b"b'18"),
                                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BGTZL",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BNE",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'29",mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.ORI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BNEL",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,var_b"b'29",
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'25"),
                                           bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,mop(Not,var_b"b'21"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,var_b"b'5",
                                                                                   bop(And,
                                                                                       var_b"b'4",
                                                                                       bop(And,
                                                                                           var_b"b'3",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'2"),
                                                                                               bop(And,
                                                                                                   var_b"b'1",
                                                                                                   var_b"b'0")))))))))))))))))),
                           call
                             ("instruction.RDHWR",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                              @{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (var_b"b'29",
                     itb([(bop(And,mop(Not,var_b"b'31"),
                               bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.ADDIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.SLTIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.DADDIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",var_b"b'27")),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LDR",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SH",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SW",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                           call
                             ("SWC1Decode",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast w16,
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                        var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                        var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                        var_b"b'0"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                              @{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZ",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZ",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TGEI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TGEIU",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TLTI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TLTIU",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,var_b"b'18",
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TEQI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,var_b"b'18",
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TNEI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,var_b"b'24",
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,var_b"b'21",
                                                     bop(And,var_b"b'20",
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             mop(Not,var_b"b'18"))))))))))),
                     Term.Const(@{const_name "Unpredictable"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZAL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZAL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZALL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZALL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.JAL",@{typ Branch},
                           mop(Cast (Word_Lib.mk_wordT 26),
                               ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                  var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                  var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LH",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LW",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                     call
                       ("COP1Decode",@{typ instruction},
                        mop(Cast (Word_Lib.mk_wordT 26),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",var_b"b'27")),
                     call
                       ("COP3Decode",@{typ instruction},
                        mop(Cast (Word_Lib.mk_wordT 26),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory})),
                    (bop(And,var_b"b'31",bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                     call
                       ("LWC1Decode",@{typ instruction},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast w16,
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                        @{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'30",
               itb([(var_b"b'29",
                     itb([(var_b"b'28",
                           itb([(bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'15"),
                                             bop(And,mop(Not,var_b"b'14"),
                                                 bop(And,mop(Not,var_b"b'13"),
                                                     bop(And,mop(Not,var_b"b'12"),
                                                         bop(And,mop(Not,var_b"b'11"),
                                                             bop(And,mop(Not,var_b"b'10"),
                                                                 bop(And,mop(Not,var_b"b'9"),
                                                                     bop(And,mop(Not,var_b"b'8"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'7"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'6"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'3"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'2"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'1"),
                                                                                                     mop(Not,
                                                                                                         var_b"b'0")))))))))))))))))),
                                 call
                                   ("instruction.MultDiv",@{typ instruction},
                                    call
                                      ("MultDiv.MADD",@{typ MultDiv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"])],@{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'15"),
                                             bop(And,mop(Not,var_b"b'14"),
                                                 bop(And,mop(Not,var_b"b'13"),
                                                     bop(And,mop(Not,var_b"b'12"),
                                                         bop(And,mop(Not,var_b"b'11"),
                                                             bop(And,mop(Not,var_b"b'10"),
                                                                 bop(And,mop(Not,var_b"b'9"),
                                                                     bop(And,mop(Not,var_b"b'8"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'7"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'6"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'3"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'2"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'1"),
                                                                                                     var_b"b'0"))))))))))))))))),
                                 call
                                   ("instruction.MultDiv",@{typ instruction},
                                    call
                                      ("MultDiv.MADDU",@{typ MultDiv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"])],@{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'15"),
                                             bop(And,mop(Not,var_b"b'14"),
                                                 bop(And,mop(Not,var_b"b'13"),
                                                     bop(And,mop(Not,var_b"b'12"),
                                                         bop(And,mop(Not,var_b"b'11"),
                                                             bop(And,mop(Not,var_b"b'10"),
                                                                 bop(And,mop(Not,var_b"b'9"),
                                                                     bop(And,mop(Not,var_b"b'8"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'7"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'6"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'3"),
                                                                                             bop(And,
                                                                                                 var_b"b'2",
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'1"),
                                                                                                     mop(Not,
                                                                                                         var_b"b'0")))))))))))))))))),
                                 call
                                   ("instruction.MultDiv",@{typ instruction},
                                    call
                                      ("MultDiv.MSUB",@{typ MultDiv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"])],@{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'15"),
                                             bop(And,mop(Not,var_b"b'14"),
                                                 bop(And,mop(Not,var_b"b'13"),
                                                     bop(And,mop(Not,var_b"b'12"),
                                                         bop(And,mop(Not,var_b"b'11"),
                                                             bop(And,mop(Not,var_b"b'10"),
                                                                 bop(And,mop(Not,var_b"b'9"),
                                                                     bop(And,mop(Not,var_b"b'8"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'7"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'6"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'5"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'4"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'3"),
                                                                                             bop(And,
                                                                                                 var_b"b'2",
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'1"),
                                                                                                     var_b"b'0"))))))))))))))))),
                                 call
                                   ("instruction.MultDiv",@{typ instruction},
                                    call
                                      ("MultDiv.MSUBU",@{typ MultDiv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"])],@{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'31"),
                                     bop(And,mop(Not,var_b"b'27"),
                                         bop(And,mop(Not,var_b"b'10"),
                                             bop(And,mop(Not,var_b"b'9"),
                                                 bop(And,mop(Not,var_b"b'8"),
                                                     bop(And,mop(Not,var_b"b'7"),
                                                         bop(And,mop(Not,var_b"b'6"),
                                                             bop(And,mop(Not,var_b"b'5"),
                                                                 bop(And,mop(Not,var_b"b'4"),
                                                                     bop(And,mop(Not,var_b"b'3"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'2"),
                                                                             bop(And,var_b"b'1",
                                                                                 mop(Not,var_b"b'0"))))))))))))),
                                 call
                                   ("instruction.MultDiv",@{typ instruction},
                                    call
                                      ("MultDiv.MUL",@{typ MultDiv},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory}),@{theory})),
                                (bop(And,var_b"b'31",mop(Not,var_b"b'27")),
                                 call
                                   ("instruction.Store",@{typ instruction},
                                    call
                                      ("Store.SCD",@{typ Store},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,var_b"b'31",var_b"b'27"),
                                 call
                                   ("SDC2Decode",@{typ instruction},
                                    tp[mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                              var_b"b'21"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                              var_b"b'16"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                              var_b"b'11"]),
                                       mop(Cast (Word_Lib.mk_wordT 11),
                                           ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                              var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                              var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}))],
                               Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                          (bop(And,mop(Not,var_b"b'31"),mop(Not,var_b"b'27")),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.DADDI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),var_b"b'27"),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LDL",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",mop(Not,var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SC",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",var_b"b'27"),
                           call
                             ("SWC2Decode",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                 mop(Cast w8,
                                     ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                        var_b"b'5",var_b"b'4",var_b"b'3"]),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                              @{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (var_b"b'31",
                     itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LL",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LLD",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                           call
                             ("LWC2Decode",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                 mop(Cast w8,
                                     ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                        var_b"b'5",var_b"b'4",var_b"b'3"]),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                              @{theory})),
                          (bop(And,var_b"b'28",var_b"b'27"),
                           call
                             ("LDC2Decode",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                 mop(Cast (Word_Lib.mk_wordT 11),
                                     ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                        var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                        var_b"b'0"])],@{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'5"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'4"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'3"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'2"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'1"),
                                                                                                                                 var_b"b'0"))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBR"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'5"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'4"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'3"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'2"),
                                                                                                                             bop(And,
                                                                                                                                 var_b"b'1",
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBWI"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'5"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'4"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'3"),
                                                                                                                         bop(And,
                                                                                                                             var_b"b'2",
                                                                                                                             bop(And,
                                                                                                                                 var_b"b'1",
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBWR"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'5"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'4"),
                                                                                                                     bop(And,
                                                                                                                         var_b"b'3",
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'2"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'1"),
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBP"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'5"),
                                                                                                                 bop(And,
                                                                                                                     var_b"b'4",
                                                                                                                     bop(And,
                                                                                                                         var_b"b'3",
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'2"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'1"),
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "ERET"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'10"),
                                                     bop(And,mop(Not,var_b"b'9"),
                                                         bop(And,mop(Not,var_b"b'8"),
                                                             bop(And,mop(Not,var_b"b'7"),
                                                                 bop(And,mop(Not,var_b"b'6"),
                                                                     bop(And,mop(Not,var_b"b'5"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'4"),
                                                                             mop(Not,var_b"b'3"))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.MFC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,var_b"b'21",
                                                 bop(And,mop(Not,var_b"b'10"),
                                                     bop(And,mop(Not,var_b"b'9"),
                                                         bop(And,mop(Not,var_b"b'8"),
                                                             bop(And,mop(Not,var_b"b'7"),
                                                                 bop(And,mop(Not,var_b"b'6"),
                                                                     bop(And,mop(Not,var_b"b'5"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'4"),
                                                                             mop(Not,var_b"b'3"))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.DMFC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,var_b"b'23",
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'10"),
                                                     bop(And,mop(Not,var_b"b'9"),
                                                         bop(And,mop(Not,var_b"b'8"),
                                                             bop(And,mop(Not,var_b"b'7"),
                                                                 bop(And,mop(Not,var_b"b'6"),
                                                                     bop(And,mop(Not,var_b"b'5"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'4"),
                                                                             mop(Not,var_b"b'3"))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.MTC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,var_b"b'23",
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,var_b"b'21",
                                                 bop(And,mop(Not,var_b"b'10"),
                                                     bop(And,mop(Not,var_b"b'9"),
                                                         bop(And,mop(Not,var_b"b'8"),
                                                             bop(And,mop(Not,var_b"b'7"),
                                                                 bop(And,mop(Not,var_b"b'6"),
                                                                     bop(And,mop(Not,var_b"b'5"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'4"),
                                                                             mop(Not,var_b"b'3"))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.DMTC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'28",
                         bop(And,var_b"b'27",
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,mop(Not,var_b"b'19"),
                                     bop(And,mop(Not,var_b"b'18"),
                                         bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLEZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BEQL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),
                         bop(And,mop(Not,var_b"b'27"),
                             bop(And,var_b"b'25",
                                 bop(And,mop(Not,var_b"b'24"),
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'19"),
                                                         bop(And,mop(Not,var_b"b'18"),
                                                             bop(And,mop(Not,var_b"b'17"),
                                                                 bop(And,mop(Not,var_b"b'16"),
                                                                     bop(And,mop(Not,var_b"b'15"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'14"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'13"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'12"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'11"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'10"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'9"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'8"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'7"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'6"),
                                                                                                             bop(And,
                                                                                                                 var_b"b'5",
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'4"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'3"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'2"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'1"),
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "WAIT"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("COP2Decode",@{typ instruction},
                        mop(Cast (Word_Lib.mk_wordT 26),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'31",
               itb([(var_b"b'29",
                     itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SB",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SWL",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SDL",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'28",var_b"b'27"),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SWR",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LB",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LWL",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LBU",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",var_b"b'27"),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LWR",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'29",
               itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.ADDI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.SLTI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.ANDI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",var_b"b'27"),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.XORI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("MOVCIDecode",@{typ instruction},
                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SLL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRA",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SLLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRAV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,mop(Not,var_b"b'4"),
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.JR",@{typ Branch},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.JALR",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.MOVZ",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.MOVN",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               Term.Const(@{const_name "SYSCALL"},@{typ instruction})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               Term.Const(@{const_name "BREAK"},@{typ instruction})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'15"),
                                                                   bop(And,mop(Not,var_b"b'14"),
                                                                       bop(And,mop(Not,var_b"b'13"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'12"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'11"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'4"),
                                                                                           bop(And,
                                                                                               var_b"b'3",
                                                                                               bop(And,
                                                                                                   var_b"b'2",
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.SYNC",@{typ instruction},
                  mop(Cast (Word_Lib.mk_wordT 5),
                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'1"),
                                                                                                       mop(Not,
                                                                                                           var_b"b'0"))))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MFHI",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'1"),
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MTHI",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       mop(Not,
                                                                                                           var_b"b'0"))))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MFLO",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MTLO",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRAV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MULT",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MULTU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,var_b"b'1",
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DIV",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,var_b"b'1",
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DIVU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DMULT",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DMULTU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,var_b"b'1",
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DDIV",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,var_b"b'1",
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DDIVU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.ADD",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.ADDU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SUB",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SUBU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.AND",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.OR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.XOR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.NOR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SLT",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SLTU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DADD",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DADDU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DSUB",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DSUBU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TGE",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,mop(Not,var_b"b'1"),var_b"b'0"))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TGEU",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,var_b"b'1",mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TLT",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TLTU",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,var_b"b'2",
                                       bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TEQ",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,var_b"b'2",bop(And,var_b"b'1",mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TNE",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRA",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLL32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRL32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRA32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.J",@{typ Branch},
                     mop(Cast (Word_Lib.mk_wordT 26),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                            var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",
                            var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                            var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                            var_b"b'1",var_b"b'0"]),@{theory}),@{theory})),
              (bop(And,var_b"b'28",
                   bop(And,var_b"b'27",
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16"))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.BLEZ",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast w16,
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                  @{theory})),
              (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.BEQ",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast w16,
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                  @{theory}))],Term.Const(@{const_name "ReservedInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP1InstructionToString",close(var("i",@{typ instruction}),ls"default COP1 instruction"))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("COP1Encode",close(var("i",@{typ instruction}),cc[lw(17,6),lw(0,26)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("gr",close(var_w("n",5),cc[ls"$",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("n",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("cr",close(var_w("n",5),cc[ls"c",mop(Cast(@{typ string}),mop(Cast HOLogic.natT,var_w("n",5)))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("imm",
   close
     (var("n",@{typ "'N::len word"}),
      ite(bop(Ult,var("n",@{typ "'N::len word"}),ly(10,"N")),
          mop(Cast(@{typ string}),var("n",@{typ "'N::len word"})),
          cc[ls"0x",mop(ToLower,mop(Cast(@{typ string}),var("n",@{typ "'N::len word"})))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr",
   close
     (tp[var_s"op",var_w("cr1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr",
   close
     (tp[var_s"op",var_w("r1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),call("gr",@{typ string},var_w("r1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_imm",
   close
     (tp[var_s"op",var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr_imm",
   close
     (tp[var_s"op",var_w("gr1",5),var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("gr",@{typ string},var_w("gr1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_imm",
   close
     (tp[var_s"op",var_w("cr1",5),var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_gr",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("r1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("gr",@{typ string},var_w("r1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr_cr",
   close
     (tp[var_s"op",var_w("r1",5),var_w("cr1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("gr",@{typ string},var_w("r1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_cr",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("cr2",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_cr_gr",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("cr2",5),var_w("r1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory}),ls", ",
         call("gr",@{typ string},var_w("r1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_cr_imm",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("cr2",5),var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_cr_cr",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("cr2",5),var_w("cr3",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr3",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr_cr_cr",
   close
     (tp[var_s"op",var_w("r1",5),var_w("cr1",5),var_w("cr2",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("gr",@{typ string},var_w("r1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr_cr_gr_imm",
   close
     (tp[var_s"op",var_w("r1",5),var_w("cr1",5),var_w("r2",5),var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("gr",@{typ string},var_w("r1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("gr",@{typ string},var_w("r2",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_cr_cr_gr_imm",
   close
     (tp[var_s"op",var_w("cr1",5),var_w("cr2",5),var_w("r1",5),var("i",@{typ "'N::len word"})],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("cr",@{typ string},var_w("cr1",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr2",5),@{theory}),ls", ",
         call("gr",@{typ string},var_w("r1",5),@{theory}),ls", ",
         call("imm",@{typ string},var("i",@{typ "'N::len word"}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("op_gr_gr_cr",
   close
     (tp[var_s"op",var_w("r1",5),var_w("r2",5),var_w("cr1",5)],
      cc[mop(PadRight,tp[lsc #" ",ln 12,var_s"op"]),
         call("gr",@{typ string},var_w("r1",5),@{theory}),ls", ",
         call("gr",@{typ string},var_w("r2",5),@{theory}),ls", ",
         call("cr",@{typ string},var_w("cr1",5),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP2InstructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.COP2",@{typ instruction},
              call("COP2.CHERICOP2",@{typ COP2},var("j",@{typ CHERICOP2}),@{theory}),@{theory}),
           cs(var("j",@{typ CHERICOP2}),
              [(Term.Const(@{const_name "DumpCapReg"},@{typ CHERICOP2}),ls"mtc2 ?,?,6"),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetBase",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_gr_cr",@{typ string},tp[ls"cgetbase",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetOffset",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_gr_cr",@{typ string},tp[ls"cgetoffset",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetLen",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call("op_gr_cr",@{typ string},tp[ls"cgetlen",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetTag",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call("op_gr_cr",@{typ string},tp[ls"cgettag",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetSealed",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_gr_cr",@{typ string},tp[ls"cgetsealed",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetPerm",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_gr_cr",@{typ string},tp[ls"cgetperm",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetType",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_gr_cr",@{typ string},tp[ls"cgettype",var_w("rd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetPCC",@{typ CGet},var_w("cd",5),@{theory}),@{theory}),
                call("op_cr",@{typ string},tp[ls"cgetpcc",var_w("cd",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call
                     ("CGet.CGetPCCSetOffset",@{typ CGet},tp[var_w("cd",5),var_w("rs",5)],@{theory}),
                   @{theory}),
                call
                  ("op_cr_gr",@{typ string},tp[ls"cgetpccsetoffset",var_w("cd",5),var_w("rs",5)],
                   @{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call("CGet.CGetCause",@{typ CGet},var_w("rd",5),@{theory}),@{theory}),
                call("op_gr",@{typ string},tp[ls"cgetcause",var_w("rd",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call("CSet.CSetCause",@{typ CSet},var_w("rt",5),@{theory}),@{theory}),
                call("op_gr",@{typ string},tp[ls"csetcause",var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CSetBounds",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"csetbounds",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CSetBoundsExact",@{typ CSet},
                      tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"csetboundsexact",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CSetBoundsImmediate",@{typ CSet},
                      tp[var_w("cd",5),var_w("cb",5),var_w("len",11)],@{theory}),@{theory}),
                call
                  ("op_cr_cr_imm",@{typ string},
                   tp[ls"csetboundimmediate",var_w("cd",5),var_w("cb",5),var_w("len",11)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CIncOffset",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"cincoffset",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CIncOffsetImmediate",@{typ CSet},
                      tp[var_w("cd",5),var_w("cb",5),var_w("inc",11)],@{theory}),@{theory}),
                call
                  ("op_cr_cr_imm",@{typ string},
                   tp[ls"cincoffsetimmediate",var_w("cd",5),var_w("cb",5),var_w("inc",11)],@{theory})),
               (call("CHERICOP2.ClearLo",@{typ CHERICOP2},var_w("mask",16),@{theory}),
                call("op_imm",@{typ string},tp[ls"clearlo",var_w("mask",16)],@{theory})),
               (call("CHERICOP2.ClearHi",@{typ CHERICOP2},var_w("mask",16),@{theory}),
                call("op_imm",@{typ string},tp[ls"clearhi",var_w("mask",16)],@{theory})),
               (call("CHERICOP2.CClearLo",@{typ CHERICOP2},var_w("mask",16),@{theory}),
                call("op_imm",@{typ string},tp[ls"cclearlo",var_w("mask",16)],@{theory})),
               (call("CHERICOP2.CClearHi",@{typ CHERICOP2},var_w("mask",16),@{theory}),
                call("op_imm",@{typ string},tp[ls"cclearhi",var_w("mask",16)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call("CSet.CClearTag",@{typ CSet},tp[var_w("cd",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_cr_cr",@{typ string},tp[ls"ccleartag",var_w("cd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CAndPerm",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"candperm",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CSetOffset",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"csetoffset",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CSub",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("ct",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"csub",var_w("rd",5),var_w("cb",5),var_w("ct",5)],@{theory})),
               (call
                  ("CHERICOP2.CCheck",@{typ CHERICOP2},
                   call("CCheck.CCheckPerm",@{typ CCheck},tp[var_w("cs",5),var_w("rt",5)],@{theory}),
                   @{theory}),
                call
                  ("op_cr_gr",@{typ string},tp[ls"ccheckperm",var_w("cs",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CCheck",@{typ CHERICOP2},
                   call("CCheck.CCheckType",@{typ CCheck},tp[var_w("cs",5),var_w("cb",5)],@{theory}),
                   @{theory}),
                call
                  ("op_cr_cr",@{typ string},tp[ls"cchecktype",var_w("cs",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CSet",@{typ CHERICOP2},
                   call
                     ("CSet.CFromPtr",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),@{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"cfromptr",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CGet",@{typ CHERICOP2},
                   call
                     ("CGet.CToPtr",@{typ CGet},tp[var_w("rd",5),var_w("cb",5),var_w("ct",5)],
                      @{theory}),@{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"ctoptr",var_w("rd",5),var_w("cb",5),var_w("ct",5)],@{theory})),
               (call
                  ("CHERICOP2.CEQ",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"ceq",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CNE",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cne",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CLT",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"clt",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CLE",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cle",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CLTU",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cltu",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CLEU",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cleu",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CEXEQ",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cexeq",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CNEXEQ",@{typ CHERICOP2},
                   tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cnexeq",var_w("rd",5),var_w("cb",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CBTU",@{typ CHERICOP2},tp[var_w("cb",5),var_w("offset",16)],@{theory}),
                call
                  ("op_cr_imm",@{typ string},tp[ls"cbtu",var_w("cb",5),var_w("offset",16)],@{theory})),
               (call
                  ("CHERICOP2.CBTS",@{typ CHERICOP2},tp[var_w("cb",5),var_w("offset",16)],@{theory}),
                call
                  ("op_cr_imm",@{typ string},tp[ls"cbts",var_w("cb",5),var_w("offset",16)],@{theory})),
               (call("CHERICOP2.CJR",@{typ CHERICOP2},var_w("cb",5),@{theory}),
                call("op_cr",@{typ string},tp[ls"cjr",var_w("cb",5)],@{theory})),
               (call("CHERICOP2.CJALR",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cb",5)],@{theory}),
                call("op_cr_cr",@{typ string},tp[ls"cjalr",var_w("cb",5),var_w("cd",5)],@{theory})),
               (call
                  ("CHERICOP2.CSeal",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],
                   @{theory}),
                call
                  ("op_cr_cr_cr",@{typ string},
                   tp[ls"cseal",var_w("cd",5),var_w("cs",5),var_w("ct",5)],@{theory})),
               (call
                  ("CHERICOP2.CUnseal",@{typ CHERICOP2},
                   tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],@{theory}),
                call
                  ("op_cr_cr_cr",@{typ string},
                   tp[ls"cunseal",var_w("cd",5),var_w("cs",5),var_w("ct",5)],@{theory})),
               (call
                  ("CHERICOP2.CCall",@{typ CHERICOP2},
                   tp[var_w("cs",5),var_w("cb",5),var_w("selector",11)],@{theory}),
                call
                  ("op_cr_cr_imm",@{typ string},
                   tp[ls"ccall",var_w("cs",5),var_w("cb",5),var_w("selector",11)],@{theory})),
               (call
                  ("CHERICOP2.CCallFast",@{typ CHERICOP2},tp[var_w("cs",5),var_w("cb",5)],@{theory}),
                call
                  ("op_cr_cr",@{typ string},tp[ls"ccallfast",var_w("cs",5),var_w("cb",5)],@{theory})),
               (Term.Const(@{const_name "CReturn"},@{typ CHERICOP2}),ls"creturn"),
               (call
                  ("CHERICOP2.CLLx",@{typ CHERICOP2},tp[var_w("rd",5),var_w("cb",5),var_w("stt",3)],
                   @{theory}),
                itb([(eq(var_w("stt",3),lw(0,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllbu",var_w("rd",5),var_w("cb",5)],
                         @{theory})),
                     (eq(var_w("stt",3),lw(1,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllhu",var_w("rd",5),var_w("cb",5)],
                         @{theory})),
                     (eq(var_w("stt",3),lw(2,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllwu",var_w("rd",5),var_w("cb",5)],
                         @{theory})),
                     (eq(var_w("stt",3),lw(3,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"clld",var_w("rd",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("stt",3),lw(4,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllb",var_w("rd",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("stt",3),lw(5,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllh",var_w("rd",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("stt",3),lw(6,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllw",var_w("rd",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("stt",3),lw(7,3)),
                      call
                        ("op_gr_cr",@{typ string},tp[ls"cllx",var_w("rd",5),var_w("cb",5)],@{theory}))],
                    lx(@{typ string}))),
               (call("CHERICOP2.CLLC",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cb",5)],@{theory}),
                call("op_cr_cr",@{typ string},tp[ls"cllc",var_w("cd",5),var_w("cb",5)],@{theory})),
               (call
                  ("CHERICOP2.CSCx",@{typ CHERICOP2},
                   tp[var_w("rs",5),var_w("cb",5),var_w("rd",5),var_w("tt",2)],@{theory}),
                itb([(eq(var_w("tt",2),lw(0,2)),
                      call
                        ("op_gr_gr_cr",@{typ string},
                         tp[ls"cscb",var_w("rd",5),var_w("rs",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("tt",2),lw(1,2)),
                      call
                        ("op_gr_gr_cr",@{typ string},
                         tp[ls"csch",var_w("rd",5),var_w("rs",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("tt",2),lw(2,2)),
                      call
                        ("op_gr_gr_cr",@{typ string},
                         tp[ls"cscw",var_w("rd",5),var_w("rs",5),var_w("cb",5)],@{theory})),
                     (eq(var_w("tt",2),lw(3,2)),
                      call
                        ("op_gr_gr_cr",@{typ string},
                         tp[ls"cscd",var_w("rd",5),var_w("rs",5),var_w("cb",5)],@{theory}))],
                    lx(@{typ string}))),
               (call
                  ("CHERICOP2.CSCC",@{typ CHERICOP2},tp[var_w("cs",5),var_w("cb",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op_gr_cr_cr",@{typ string},
                   tp[ls"cscc",var_w("rd",5),var_w("cs",5),var_w("cb",5)],@{theory})),
               (call("CHERICOP2.CMove",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cs",5)],@{theory}),
                call("op_cr_cr",@{typ string},tp[ls"cmove",var_w("cd",5),var_w("cs",5)],@{theory})),
               (call
                  ("CHERICOP2.CMOVN",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                   @{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"cmovn",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (call
                  ("CHERICOP2.CMOVZ",@{typ CHERICOP2},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                   @{theory}),
                call
                  ("op_cr_cr_gr",@{typ string},
                   tp[ls"cmovz",var_w("cd",5),var_w("cb",5),var_w("rt",5)],@{theory})),
               (Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}),
                ls"unknown_cap_inst")],@{context})),
          (var_a @{typ instruction},ls"unmatched_cap_inst")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LWC2InstructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.LWC2",@{typ instruction},
              call("LWC2.CHERILWC2",@{typ LWC2},var("j",@{typ CHERILWC2}),@{theory}),@{theory}),
           cs(var("j",@{typ CHERILWC2}),
              [(call
                  ("CHERILWC2.CLoad",@{typ CHERILWC2},
                   var("v#0",
                       @{typ
                       "5 word \<times>
                        5 word \<times> 5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),
                   @{theory}),
                cs(var("v#0",
                       @{typ
                       "5 word \<times>
                        5 word \<times> 5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),
                   [(tp[var_w("v",5),var_w("v0",5),var_w("v1",5),var_w("v2",8),var_w("v3",1),
                        var_w("v4",2)],
                     itb([(eq(var_w("v3",1),lw(0,1)),
                           itb([(eq(var_w("v4",2),lw(0,2)),
                                 call
                                   ("op_gr_cr_gr_imm",@{typ string},
                                    tp[ls"clbu",var_w("v",5),var_w("v0",5),var_w("v1",5),
                                       var_w("v2",8)],@{theory})),
                                (eq(var_w("v4",2),lw(1,2)),
                                 call
                                   ("op_gr_cr_gr_imm",@{typ string},
                                    tp[ls"clhu",var_w("v",5),var_w("v0",5),var_w("v1",5),
                                       var_w("v2",8)],@{theory})),
                                (eq(var_w("v4",2),lw(2,2)),
                                 call
                                   ("op_gr_cr_gr_imm",@{typ string},
                                    tp[ls"clwu",var_w("v",5),var_w("v0",5),var_w("v1",5),
                                       var_w("v2",8)],@{theory})),
                                (eq(var_w("v4",2),lw(3,2)),
                                 call
                                   ("op_gr_cr_gr_imm",@{typ string},
                                    tp[ls"cld",var_w("v",5),var_w("v0",5),var_w("v1",5),
                                       var_w("v2",8)],@{theory}))],lx(@{typ string}))),
                          (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(0,2))),
                           call
                             ("op_gr_cr_gr_imm",@{typ string},
                              tp[ls"clb",var_w("v",5),var_w("v0",5),var_w("v1",5),var_w("v2",8)],
                              @{theory})),
                          (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(1,2))),
                           call
                             ("op_gr_cr_gr_imm",@{typ string},
                              tp[ls"clh",var_w("v",5),var_w("v0",5),var_w("v1",5),var_w("v2",8)],
                              @{theory})),
                          (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(2,2))),
                           call
                             ("op_gr_cr_gr_imm",@{typ string},
                              tp[ls"clw",var_w("v",5),var_w("v0",5),var_w("v1",5),var_w("v2",8)],
                              @{theory}))],ls"unmatched_cap_inst"))],@{context}))],@{context})),
          (var_a @{typ instruction},ls"unmatched_cap_inst")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LDC2InstructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.LDC2",@{typ instruction},
              call("LDC2.CHERILDC2",@{typ LDC2},var("j",@{typ CHERILDC2}),@{theory}),@{theory}),
           cs(var("j",@{typ CHERILDC2}),
              [(call
                  ("CHERILDC2.CLC",@{typ CHERILDC2},
                   tp[var_w("cd",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],@{theory}),
                call
                  ("op_cr_cr_gr_imm",@{typ string},
                   tp[ls"clc",var_w("cd",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
                   @{theory}))],@{context})),(var_a @{typ instruction},ls"unmatched_cap_inst")],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SWC2InstructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.SWC2",@{typ instruction},
              call("SWC2.CHERISWC2",@{typ SWC2},var("j",@{typ CHERISWC2}),@{theory}),@{theory}),
           cs(var("j",@{typ CHERISWC2}),
              [(call
                  ("CHERISWC2.CStore",@{typ CHERISWC2},
                   tp[var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("t",2)],
                   @{theory}),
                itb([(eq(var_w("t",2),lw(0,2)),
                      call
                        ("op_gr_cr_gr_imm",@{typ string},
                         tp[ls"csb",var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8)],
                         @{theory})),
                     (eq(var_w("t",2),lw(1,2)),
                      call
                        ("op_gr_cr_gr_imm",@{typ string},
                         tp[ls"csh",var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8)],
                         @{theory})),
                     (eq(var_w("t",2),lw(2,2)),
                      call
                        ("op_gr_cr_gr_imm",@{typ string},
                         tp[ls"csw",var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8)],
                         @{theory})),
                     (eq(var_w("t",2),lw(3,2)),
                      call
                        ("op_gr_cr_gr_imm",@{typ string},
                         tp[ls"csd",var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8)],
                         @{theory}))],lx(@{typ string})))],@{context})),
          (var_a @{typ instruction},ls"unmatched_cap_inst")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SDC2InstructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call
             ("instruction.SDC2",@{typ instruction},
              call("SDC2.CHERISDC2",@{typ SDC2},var("j",@{typ CHERISDC2}),@{theory}),@{theory}),
           cs(var("j",@{typ CHERISDC2}),
              [(call
                  ("CHERISDC2.CSC",@{typ CHERISDC2},
                   tp[var_w("cs",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],@{theory}),
                call
                  ("op_cr_cr_gr_imm",@{typ string},
                   tp[ls"csc",var_w("cs",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
                   @{theory}))],@{context})),(var_a @{typ instruction},ls"unmatched_cap_inst")],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CHERICOP2Encode",
   close
     (var("j",@{typ CHERICOP2}),
      close
        (var("state",qTy),
         cs(var("j",@{typ CHERICOP2}),
            [(Term.Const(@{const_name "DumpCapReg"},@{typ CHERICOP2}),
              tp[cc[lw(4,5),lw(0,18),lw(6,3)],var("state",qTy)]),
             (call("CHERICOP2.CGet",@{typ CHERICOP2},var("v#0",@{typ CGet}),@{theory}),
              cs(var("v#0",@{typ CGet}),
                 [(call("CGet.CGetPerm",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(0,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetType",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(1,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetBase",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(2,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetLen",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(3,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetTag",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(4,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetSealed",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(5,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetOffset",@{typ CGet},tp[var_w("rd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),lw(6,5),lw(63,6)],var("state",qTy)]),
                  (call("CGet.CGetPCC",@{typ CGet},var_w("cd",5),@{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),lw(0,5),lw(31,5),lw(63,6)],var("state",qTy)]),
                  (call
                     ("CGet.CGetPCCSetOffset",@{typ CGet},tp[var_w("cd",5),var_w("rs",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("rs",5),lw(7,5),lw(63,6)],var("state",qTy)]),
                  (call
                     ("CGet.CToPtr",@{typ CGet},tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(18,6)],
                      var("state",qTy)]),
                  (call("CGet.CGetCause",@{typ CGet},var_w("rd",5),@{theory}),
                   tp[cc[lw(0,5),var_w("rd",5),lw(1,5),lw(31,5),lw(63,6)],var("state",qTy)]),
                  (var_a @{typ CGet},tp[lx (Word_Lib.mk_wordT 26),var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CSeal",@{typ CHERICOP2},
                 var("v#1",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#1",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("ct",5),lw(11,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CUnseal",@{typ CHERICOP2},
                 var("v#2",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#2",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cs",5),var_w("ct",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("ct",5),lw(12,6)],
                      var("state",qTy)])],@{context})),
             (call("CHERICOP2.CSet",@{typ CHERICOP2},var("v#3",@{typ CSet}),@{theory}),
              cs(var("v#3",@{typ CSet}),
                 [(call
                     ("CSet.CAndPerm",@{typ CSet},tp[var_w("cd",5),var_w("cs",5),var_w("rt",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rt",5),lw(13,6)],
                      var("state",qTy)]),
                  (call
                     ("CSet.CSetOffset",@{typ CSet},tp[var_w("cd",5),var_w("cs",5),var_w("rt",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rt",5),lw(15,6)],
                      var("state",qTy)]),
                  (call
                     ("CSet.CSetBounds",@{typ CSet},tp[var_w("cd",5),var_w("cs",5),var_w("rt",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rt",5),lw(16,6)],
                      var("state",qTy)]),
                  (call
                     ("CSet.CSetBoundsExact",@{typ CSet},
                      tp[var_w("cd",5),var_w("cs",5),var_w("rt",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rt",5),lw(9,6)],var("state",qTy)]),
                  (call("CSet.CClearTag",@{typ CSet},tp[var_w("cd",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cb",5),lw(11,5),lw(63,6)],var("state",qTy)]),
                  (call
                     ("CSet.CIncOffset",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rt",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cb",5),var_w("rt",5),lw(17,6)],
                      var("state",qTy)]),
                  (call
                     ("CSet.CFromPtr",@{typ CSet},tp[var_w("cd",5),var_w("cb",5),var_w("rs",5)],
                      @{theory}),
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cb",5),var_w("rs",5),lw(19,6)],
                      var("state",qTy)]),
                  (call("CSet.CSetCause",@{typ CSet},var_w("rs",5),@{theory}),
                   tp[cc[lw(0,5),var_w("rs",5),lw(2,5),lw(31,5),lw(63,6)],var("state",qTy)]),
                  (var_a @{typ CSet},tp[lx (Word_Lib.mk_wordT 26),var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CSub",@{typ CHERICOP2},
                 var("v#4",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#4",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rt",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rt",5),var_w("cb",5),var_w("cs",5),lw(10,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CMove",@{typ CHERICOP2},var("v#5",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              cs(var("v#5",@{typ "5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),lw(10,5),lw(63,6)],var("state",qTy)])],
                 @{context})),
             (call
                ("CHERICOP2.CMOVZ",@{typ CHERICOP2},
                 var("v#6",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#6",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cs",5),var_w("rs",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rs",5),lw(27,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CMOVN",@{typ CHERICOP2},
                 var("v#7",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#7",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cs",5),var_w("rs",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cs",5),var_w("rs",5),lw(28,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CEQ",@{typ CHERICOP2},
                 var("v#8",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#8",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(20,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CNE",@{typ CHERICOP2},
                 var("v#9",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#9",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(21,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CLT",@{typ CHERICOP2},
                 var("v#10",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#10",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(22,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CLE",@{typ CHERICOP2},
                 var("v#11",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#11",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(23,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CLTU",@{typ CHERICOP2},
                 var("v#12",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#12",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(24,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CLEU",@{typ CHERICOP2},
                 var("v#13",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#13",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(25,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CEXEQ",@{typ CHERICOP2},
                 var("v#14",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#14",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(26,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CNEXEQ",@{typ CHERICOP2},
                 var("v#15",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#15",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("rd",5),var_w("cb",5),var_w("cs",5)],
                   tp[cc[lw(0,5),var_w("rd",5),var_w("cb",5),var_w("cs",5),lw(33,6)],
                      var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CBTU",@{typ CHERICOP2},var("v#16",@{typ "5 word \<times> 16 word"}),
                 @{theory}),
              cs(var("v#16",@{typ "5 word \<times> 16 word"}),
                 [(tp[var_w("cd",5),var_w("offset",16)],
                   tp[cc[lw(9,5),var_w("cd",5),var_w("offset",16)],var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CBTS",@{typ CHERICOP2},var("v#17",@{typ "5 word \<times> 16 word"}),
                 @{theory}),
              cs(var("v#17",@{typ "5 word \<times> 16 word"}),
                 [(tp[var_w("cd",5),var_w("offset",16)],
                   tp[cc[lw(10,5),var_w("cd",5),var_w("offset",16)],var("state",qTy)])],@{context})),
             (call("CHERICOP2.CJR",@{typ CHERICOP2},var_w("v#18",5),@{theory}),
              tp[cc[lw(0,5),var_w("v#18",5),lw(3,5),lw(31,5),lw(63,6)],var("state",qTy)]),
             (call
                ("CHERICOP2.CJALR",@{typ CHERICOP2},var("v#19",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              cs(var("v#19",@{typ "5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cb",5)],
                   tp[cc[lw(0,5),var_w("cd",5),var_w("cb",5),lw(12,5),lw(63,6)],var("state",qTy)])],
                 @{context})),
             (call
                ("CHERICOP2.CCallFast",@{typ CHERICOP2},var("v#20",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              cs(var("v#20",@{typ "5 word \<times> 5 word"}),
                 [(tp[var_w("cs",5),var_w("cb",5)],
                   tp[cc[lw(5,5),var_w("cs",5),var_w("cb",5),lw(0,5),lw(1,6)],var("state",qTy)])],
                 @{context})),
             (call
                ("CHERICOP2.CCall",@{typ CHERICOP2},
                 var("v#21",@{typ "5 word \<times> 5 word \<times> 11 word"}),@{theory}),
              cs(var("v#21",@{typ "5 word \<times> 5 word \<times> 11 word"}),
                 [(tp[var_w("cs",5),var_w("cb",5),var_w("selector",11)],
                   tp[cc[lw(5,5),var_w("cs",5),var_w("cb",5),var_w("selector",11)],var("state",qTy)])],
                 @{context})),
             (call("CHERICOP2.CCheck",@{typ CHERICOP2},var("v#22",@{typ CCheck}),@{theory}),
              cs(var("v#22",@{typ CCheck}),
                 [(call("CCheck.CCheckPerm",@{typ CCheck},tp[var_w("cs",5),var_w("rt",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("cs",5),var_w("rt",5),lw(8,5),lw(63,6)],var("state",qTy)]),
                  (call("CCheck.CCheckType",@{typ CCheck},tp[var_w("cs",5),var_w("cb",5)],@{theory}),
                   tp[cc[lw(0,5),var_w("cs",5),var_w("cb",5),lw(9,5),lw(63,6)],var("state",qTy)]),
                  (var_a @{typ CCheck},tp[lx (Word_Lib.mk_wordT 26),var("state",qTy)])],@{context})),
             (call("CHERICOP2.ClearLo",@{typ CHERICOP2},var_w("v#23",16),@{theory}),
              tp[cc[lw(15,5),lw(0,5),var_w("v#23",16)],var("state",qTy)]),
             (call("CHERICOP2.ClearHi",@{typ CHERICOP2},var_w("v#24",16),@{theory}),
              tp[cc[lw(15,5),lw(1,5),var_w("v#24",16)],var("state",qTy)]),
             (call("CHERICOP2.CClearLo",@{typ CHERICOP2},var_w("v#25",16),@{theory}),
              tp[cc[lw(15,5),lw(2,5),var_w("v#25",16)],var("state",qTy)]),
             (call("CHERICOP2.CClearHi",@{typ CHERICOP2},var_w("v#26",16),@{theory}),
              tp[cc[lw(15,5),lw(3,5),var_w("v#26",16)],var("state",qTy)]),
             (call
                ("CHERICOP2.CLLx",@{typ CHERICOP2},
                 var("v#27",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
              cs(tp[mop(Fst,var("v#27",@{typ "5 word \<times> 5 word \<times> 3 word"})),
                    mop(Fst,mop(Snd,var("v#27",@{typ "5 word \<times> 5 word \<times> 3 word"}))),
                    call
                      ("boolify'3",@{typ "bool \<times> bool \<times> bool"},
                       mop(Snd,mop(Snd,var("v#27",@{typ "5 word \<times> 5 word \<times> 3 word"}))),
                       @{theory})],
                 [(tp[var_w("rd",5),var_w("cb",5),var_b"s'0",lf,lf],
                   tp[cc[lw(16,5),var_w("rd",5),var_w("cb",5),lw(0,7),lw(1,1),
                         mop(Cast w1,ll[var_b"s'0"]),lw(0,2)],var("state",qTy)]),
                  (tp[var_w("rd",5),var_w("cb",5),var_b"s'0",lf,lt],
                   tp[cc[lw(16,5),var_w("rd",5),var_w("cb",5),lw(0,7),lw(1,1),
                         mop(Cast w1,ll[var_b"s'0"]),lw(1,2)],var("state",qTy)]),
                  (tp[var_w("rd",5),var_w("cb",5),var_b"s'0",lt,lf],
                   tp[cc[lw(16,5),var_w("rd",5),var_w("cb",5),lw(0,7),lw(1,1),
                         mop(Cast w1,ll[var_b"s'0"]),lw(2,2)],var("state",qTy)]),
                  (tp[var_w("rd",5),var_w("cb",5),lf,lt,lt],
                   tp[cc[lw(16,5),var_w("rd",5),var_w("cb",5),lw(0,7),lw(11,4)],var("state",qTy)]),
                  (tp[var_w("rd",5),var_w("cb",5),lt,lt,lt],
                   let'
                     (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                      apply
                        (call
                           ("next_unknown",
                            @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                            ls"instruction-encoding",@{theory}),var("state",qTy)),
                      tp[apply
                           (lx(@{typ "(nat \<times> string) \<Rightarrow> 26 word"}),
                            var("v",@{typ "nat \<times> string"})),var("s",qTy)])),
                  (tp[var_a (Word_Lib.mk_wordT 5),var_a (Word_Lib.mk_wordT 5),var_a HOLogic.boolT,
                      var_a HOLogic.boolT,var_a HOLogic.boolT],
                   tp[lx (Word_Lib.mk_wordT 26),var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CLLC",@{typ CHERICOP2},var("v#28",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              cs(var("v#28",@{typ "5 word \<times> 5 word"}),
                 [(tp[var_w("cd",5),var_w("cb",5)],
                   tp[cc[lw(16,5),var_w("cd",5),var_w("cb",5),lw(0,7),lw(15,4)],var("state",qTy)])],
                 @{context})),
             (call
                ("CHERICOP2.CSCx",@{typ CHERICOP2},
                 var("v#29",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 2 word"}),
                 @{theory}),
              cs(var("v#29",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 2 word"}),
                 [(tp[var_w("rs",5),var_w("cb",5),var_w("rd",5),var_w("tt",2)],
                   tp[cc[lw(16,5),var_w("rs",5),var_w("cb",5),var_w("rd",5),lw(0,2),lw(0,2),
                         var_w("tt",2)],var("state",qTy)])],@{context})),
             (call
                ("CHERICOP2.CSCC",@{typ CHERICOP2},
                 var("v#30",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
              cs(var("v#30",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                 [(tp[var_w("cs",5),var_w("cb",5),var_w("rd",5)],
                   tp[cc[lw(16,5),var_w("cs",5),var_w("cb",5),var_w("rd",5),lw(0,2),lw(7,4)],
                      var("state",qTy)])],@{context})),
             (Term.Const(@{const_name "UnknownCapInstruction"},@{typ CHERICOP2}),
              tp[cc[lw(31,5),lw(0,21)],var("state",qTy)]),
             (var_a @{typ CHERICOP2},tp[lx (Word_Lib.mk_wordT 26),var("state",qTy)])],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("COP2Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call
                ("instruction.COP2",@{typ instruction},
                 call("COP2.CHERICOP2",@{typ COP2},var("j",@{typ CHERICOP2}),@{theory}),@{theory}),
              let'
                (tp[var_w("v",26),var("s",qTy)],
                 apply
                   (call
                      ("CHERICOP2Encode",@{typ "state \<Rightarrow> (26 word \<times> state)"},
                       var("j",@{typ CHERICOP2}),@{theory}),var("state",qTy)),
                 tp[cc[lw(18,6),var_w("v",26)],var("s",qTy)])),
             (var_a @{typ instruction},
              let'
                (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                 apply
                   (call
                      ("next_unknown",
                       @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                       ls"instruction-encoding",@{theory}),var("state",qTy)),
                 tp[apply
                      (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                       var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LWC2Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call("instruction.LWC2",@{typ instruction},var("v#0",@{typ LWC2}),@{theory}),
              cs(var("v#0",@{typ LWC2}),
                 [(call("LWC2.CHERILWC2",@{typ LWC2},var("v#1",@{typ CHERILWC2}),@{theory}),
                   cs(var("v#1",@{typ CHERILWC2}),
                      [(call
                          ("CHERILWC2.CLoad",@{typ CHERILWC2},
                           var("v#2",
                               @{typ
                               "5 word \<times>
                                5 word \<times>
                                5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),@{theory}),
                        cs(var("v#2",
                               @{typ
                               "5 word \<times>
                                5 word \<times>
                                5 word \<times> 8 word \<times> 1 word \<times> 2 word"}),
                           [(tp[var_w("v",5),var_w("v0",5),var_w("v1",5),var_w("v2",8),
                                var_w("v3",1),var_w("v4",2)],
                             itb([(eq(var_w("v3",1),lw(0,1)),
                                   tp[cc[lw(50,6),var_w("v",5),var_w("v0",5),var_w("v1",5),
                                         var_w("v2",8),lw(0,1),var_w("v4",2)],var("state",qTy)]),
                                  (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(0,2))),
                                   tp[cc[lw(50,6),var_w("v",5),var_w("v0",5),var_w("v1",5),
                                         var_w("v2",8),lw(4,3)],var("state",qTy)]),
                                  (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(1,2))),
                                   tp[cc[lw(50,6),var_w("v",5),var_w("v0",5),var_w("v1",5),
                                         var_w("v2",8),lw(5,3)],var("state",qTy)]),
                                  (bop(And,eq(var_w("v3",1),lw(1,1)),eq(var_w("v4",2),lw(2,2))),
                                   tp[cc[lw(50,6),var_w("v",5),var_w("v0",5),var_w("v1",5),
                                         var_w("v2",8),lw(6,3)],var("state",qTy)])],
                                 let'
                                   (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                                    apply
                                      (call
                                         ("next_unknown",
                                          @{typ
                                          "state \<Rightarrow>
                                           ((nat \<times> string) \<times> state)"},
                                          ls"instruction-encoding",@{theory}),var("state",qTy)),
                                    tp[apply
                                         (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                                          var("v",@{typ "nat \<times> string"})),var("s",qTy)])))],
                           @{context}))],@{context}))],@{context})),
             (var_a @{typ instruction},
              let'
                (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                 apply
                   (call
                      ("next_unknown",
                       @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                       ls"instruction-encoding",@{theory}),var("state",qTy)),
                 tp[apply
                      (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                       var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LDC2Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call
                ("instruction.LDC2",@{typ instruction},
                 call
                   ("LDC2.CHERILDC2",@{typ LDC2},
                    call
                      ("CHERILDC2.CLC",@{typ CHERILDC2},
                       tp[var_w("c",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],@{theory}),
                    @{theory}),@{theory}),
              tp[cc[lw(54,6),var_w("c",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
                 var("state",qTy)]),
             (var_a @{typ instruction},
              let'
                (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                 apply
                   (call
                      ("next_unknown",
                       @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                       ls"instruction-encoding",@{theory}),var("state",qTy)),
                 tp[apply
                      (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                       var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SWC2Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call
                ("instruction.SWC2",@{typ instruction},
                 call
                   ("SWC2.CHERISWC2",@{typ SWC2},
                    call
                      ("CHERISWC2.CStore",@{typ CHERISWC2},
                       tp[var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),var_w("t",2)],
                       @{theory}),@{theory}),@{theory}),
              tp[cc[lw(58,6),var_w("rs",5),var_w("cb",5),var_w("rt",5),var_w("offset",8),lw(0,1),
                    var_w("t",2)],var("state",qTy)]),
             (var_a @{typ instruction},
              let'
                (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                 apply
                   (call
                      ("next_unknown",
                       @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                       ls"instruction-encoding",@{theory}),var("state",qTy)),
                 tp[apply
                      (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                       var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SDC2Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call
                ("instruction.SDC2",@{typ instruction},
                 call
                   ("SDC2.CHERISDC2",@{typ SDC2},
                    call
                      ("CHERISDC2.CSC",@{typ CHERISDC2},
                       tp[var_w("c",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],@{theory}),
                    @{theory}),@{theory}),
              tp[cc[lw(62,6),var_w("c",5),var_w("cb",5),var_w("rt",5),var_w("offset",11)],
                 var("state",qTy)]),
             (var_a @{typ instruction},
              let'
                (tp[var("v",@{typ "nat \<times> string"}),var("s",qTy)],
                 apply
                   (call
                      ("next_unknown",
                       @{typ "state \<Rightarrow> ((nat \<times> string) \<times> state)"},
                       ls"instruction-encoding",@{theory}),var("state",qTy)),
                 tp[apply
                      (lx(@{typ "(nat \<times> string) \<Rightarrow> 32 word"}),
                       var("v",@{typ "nat \<times> string"})),var("s",qTy)]))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("instructionToString",
   close
     (var("i",@{typ instruction}),
      cs(var("i",@{typ instruction}),
         [(call("instruction.Shift",@{typ instruction},var("v#0",@{typ Shift}),@{theory}),
           cs(var("v#0",@{typ Shift}),
              [(call
                  ("Shift.SLL",@{typ Shift},
                   var("v#18",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#18",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     itb([(bop(And,eq(var_w("rt",5),lw(0,5)),
                               bop(And,eq(var_w("rd",5),lw(0,5)),eq(var_w("imm5",5),lw(0,5)))),
                           ls"nop"),
                          (bop(And,eq(var_w("rt",5),lw(0,5)),
                               bop(And,eq(var_w("rd",5),lw(0,5)),eq(var_w("imm5",5),lw(1,5)))),
                           ls"ssnop")],
                         call
                           ("op2ri",@{typ string},
                            tp[ls"sll",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory})))],
                   @{context})),
               (call
                  ("Shift.SRL",@{typ Shift},
                   var("v#19",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#19",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"srl",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.SRA",@{typ Shift},
                   var("v#20",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#20",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"sra",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.SLLV",@{typ Shift},
                   var("v#21",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#21",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},tp[ls"sllv",var_w("rd",5),var_w("rt",5),var_w("rs",5)],
                        @{theory}))],@{context})),
               (call
                  ("Shift.SRLV",@{typ Shift},
                   var("v#22",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#22",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},tp[ls"srlv",var_w("rd",5),var_w("rt",5),var_w("rs",5)],
                        @{theory}))],@{context})),
               (call
                  ("Shift.SRAV",@{typ Shift},
                   var("v#23",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#23",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},tp[ls"srav",var_w("rd",5),var_w("rt",5),var_w("rs",5)],
                        @{theory}))],@{context})),
               (call
                  ("Shift.DSLLV",@{typ Shift},
                   var("v#24",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#24",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},
                        tp[ls"dsllv",var_w("rd",5),var_w("rt",5),var_w("rs",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRLV",@{typ Shift},
                   var("v#25",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#25",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},
                        tp[ls"dsrlv",var_w("rd",5),var_w("rt",5),var_w("rs",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRAV",@{typ Shift},
                   var("v#26",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#26",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                     call
                       ("op3r",@{typ string},
                        tp[ls"dsrav",var_w("rd",5),var_w("rt",5),var_w("rs",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSLL",@{typ Shift},
                   var("v#27",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#27",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsll",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRL",@{typ Shift},
                   var("v#28",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#28",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsrl",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRA",@{typ Shift},
                   var("v#29",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#29",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsra",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSLL32",@{typ Shift},
                   var("v#30",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#30",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsll32",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRL32",@{typ Shift},
                   var("v#31",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#31",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsrl32",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context})),
               (call
                  ("Shift.DSRA32",@{typ Shift},
                   var("v#32",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                cs(var("v#32",@{typ "5 word \<times> 5 word \<times> 5 word"}),
                   [(tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                     call
                       ("op2ri",@{typ string},
                        tp[ls"dsra32",var_w("rd",5),var_w("rt",5),var_w("imm5",5)],@{theory}))],
                   @{context}))],@{context})),
          (call("instruction.Branch",@{typ instruction},var("v#1",@{typ Branch}),@{theory}),
           cs(var("v#1",@{typ Branch}),
              [(call("Branch.JR",@{typ Branch},var_w("v#33",5),@{theory}),
                call("op1r",@{typ string},tp[ls"jr",var_w("v#33",5)],@{theory})),
               (call
                  ("Branch.JALR",@{typ Branch},var("v#34",@{typ "5 word \<times> 5 word"}),@{theory}),
                cs(var("v#34",@{typ "5 word \<times> 5 word"}),
                   [(tp[var_w("rs",5),var_w("rd",5)],
                     call("op2r",@{typ string},tp[ls"jalr",var_w("rd",5),var_w("rs",5)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BLTZ",@{typ Branch},var("v#35",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#35",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"bltz",var_w("rs",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BGEZ",@{typ Branch},var("v#36",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#36",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"bgez",var_w("rs",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BLTZL",@{typ Branch},var("v#37",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#37",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"bltzl",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BGEZL",@{typ Branch},var("v#38",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#38",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"bgezl",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BLTZAL",@{typ Branch},var("v#39",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#39",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"bltzal",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BGEZAL",@{typ Branch},var("v#40",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#40",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"bgezal",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BLTZALL",@{typ Branch},var("v#41",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#41",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"bltzall",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BGEZALL",@{typ Branch},var("v#42",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#42",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"bgezall",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call("Branch.J",@{typ Branch},var_w("v#43",26),@{theory}),
                call("op1ai",@{typ string},tp[ls"j",var_w("v#43",26)],@{theory})),
               (call("Branch.JAL",@{typ Branch},var_w("v#44",26),@{theory}),
                call("op1ai",@{typ string},tp[ls"jal",var_w("v#44",26)],@{theory})),
               (call
                  ("Branch.BEQ",@{typ Branch},
                   var("v#45",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                cs(var("v#45",@{typ "5 word \<times> 5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                     ite(bop(And,eq(var_w("rs",5),lw(0,5)),eq(var_w("rt",5),lw(0,5))),
                         call("op1ai",@{typ string},tp[ls"b",var_w("imm",16)],@{theory}),
                         call
                           ("op2rai",@{typ string},
                            tp[ls"beq",var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory})))],
                   @{context})),
               (call
                  ("Branch.BNE",@{typ Branch},
                   var("v#46",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                cs(var("v#46",@{typ "5 word \<times> 5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                     call
                       ("op2rai",@{typ string},
                        tp[ls"bne",var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BLEZ",@{typ Branch},var("v#47",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#47",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"blez",var_w("rs",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BGTZ",@{typ Branch},var("v#48",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#48",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rai",@{typ string},tp[ls"bgtz",var_w("rs",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BEQL",@{typ Branch},
                   var("v#49",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                cs(var("v#49",@{typ "5 word \<times> 5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                     call
                       ("op2rlai",@{typ string},
                        tp[ls"beql",var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BNEL",@{typ Branch},
                   var("v#50",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                cs(var("v#50",@{typ "5 word \<times> 5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                     call
                       ("op2rlai",@{typ string},
                        tp[ls"bnel",var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}))],
                   @{context})),
               (call
                  ("Branch.BLEZL",@{typ Branch},var("v#51",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#51",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"blezl",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context})),
               (call
                  ("Branch.BGTZL",@{typ Branch},var("v#52",@{typ "5 word \<times> 16 word"}),
                   @{theory}),
                cs(var("v#52",@{typ "5 word \<times> 16 word"}),
                   [(tp[var_w("rs",5),var_w("imm",16)],
                     call
                       ("op1rlai",@{typ string},tp[ls"bgtzl",var_w("rs",5),var_w("imm",16)],
                        @{theory}))],@{context}))],@{context})),
          (call("instruction.MultDiv",@{typ instruction},var("v#2",@{typ MultDiv}),@{theory}),
           cs(var("v#2",@{typ MultDiv}),
              [(call("MultDiv.MFHI",@{typ MultDiv},var_w("rd",5),@{theory}),
                call("op1r",@{typ string},tp[ls"mfhi",var_w("rd",5)],@{theory})),
               (call("MultDiv.MTHI",@{typ MultDiv},var_w("rd",5),@{theory}),
                call("op1r",@{typ string},tp[ls"mthi",var_w("rd",5)],@{theory})),
               (call("MultDiv.MFLO",@{typ MultDiv},var_w("rs",5),@{theory}),
                call("op1r",@{typ string},tp[ls"mflo",var_w("rs",5)],@{theory})),
               (call("MultDiv.MTLO",@{typ MultDiv},var_w("rs",5),@{theory}),
                call("op1r",@{typ string},tp[ls"mtlo",var_w("rs",5)],@{theory})),
               (call("MultDiv.MADD",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"madd",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.MADDU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"maddu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.MSUB",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"msub",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.MSUBU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"msubu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call
                  ("MultDiv.MUL",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"mul",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call("MultDiv.MULT",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"mult",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.MULTU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"multu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DIV",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"div",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DIVU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"divu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DMULT",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"dmult",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DMULTU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"dmultu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DDIV",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"ddiv",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("MultDiv.DDIVU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"ddivu",var_w("rs",5),var_w("rt",5)],@{theory}))],
              @{context})),
          (call("instruction.ArithR",@{typ instruction},var("v#3",@{typ ArithR}),@{theory}),
           cs(var("v#3",@{typ ArithR}),
              [(call
                  ("ArithR.MOVN",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"movn",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.MOVZ",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"movz",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.ADD",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"add",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.ADDU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"addu",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.SUB",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"sub",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.SUBU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"subu",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.AND",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"and",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.OR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],@{theory}),
                call
                  ("op3r",@{typ string},tp[ls"or",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.XOR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"xor",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.NOR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"nor",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.SLT",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"slt",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.SLTU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"sltu",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.DADD",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"dadd",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.DADDU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"daddu",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.DSUB",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"dsub",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory})),
               (call
                  ("ArithR.DSUBU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                   @{theory}),
                call
                  ("op3r",@{typ string},tp[ls"dsubu",var_w("rd",5),var_w("rs",5),var_w("rt",5)],
                   @{theory}))],@{context})),
          (call("instruction.Trap",@{typ instruction},var("v#4",@{typ Trap}),@{theory}),
           cs(var("v#4",@{typ Trap}),
              [(call("Trap.TGE",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"tge",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TGEU",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"tgeu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TLT",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"tlt",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TLTU",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"tltu",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TEQ",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"teq",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TNE",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                call("op2r",@{typ string},tp[ls"tne",var_w("rs",5),var_w("rt",5)],@{theory})),
               (call("Trap.TGEI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"tgei",var_w("rs",5),var_w("imm",16)],@{theory})),
               (call("Trap.TGEIU",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"tgeiu",var_w("rs",5),var_w("imm",16)],@{theory})),
               (call("Trap.TLTI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"tlti",var_w("rs",5),var_w("imm",16)],@{theory})),
               (call("Trap.TLTIU",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"tltiu",var_w("rs",5),var_w("imm",16)],@{theory})),
               (call("Trap.TEQI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"teqi",var_w("rs",5),var_w("imm",16)],@{theory})),
               (call("Trap.TNEI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"tnei",var_w("rs",5),var_w("imm",16)],@{theory}))],
              @{context})),
          (call("instruction.CP",@{typ instruction},var("v#5",@{typ CP}),@{theory}),
           cs(var("v#5",@{typ CP}),
              [(call("CP.MFC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                call
                  ("op2roi",@{typ string},tp[ls"mfc0",var_w("rt",5),var_w("rd",5),var_w("sel",3)],
                   @{theory})),
               (call("CP.DMFC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                call
                  ("op2roi",@{typ string},tp[ls"dmfc0",var_w("rt",5),var_w("rd",5),var_w("sel",3)],
                   @{theory})),
               (call("CP.MTC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                call
                  ("op2roi",@{typ string},tp[ls"mtc0",var_w("rt",5),var_w("rd",5),var_w("sel",3)],
                   @{theory})),
               (call("CP.DMTC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                call
                  ("op2roi",@{typ string},tp[ls"dmtc0",var_w("rt",5),var_w("rd",5),var_w("sel",3)],
                   @{theory}))],@{context})),
          (call("instruction.ArithI",@{typ instruction},var("v#6",@{typ ArithI}),@{theory}),
           cs(var("v#6",@{typ ArithI}),
              [(call
                  ("ArithI.ADDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"addi",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.ADDIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"addiu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.SLTI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"slti",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.SLTIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"sltiu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.ANDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"andi",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.ORI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"ori",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.XORI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"xori",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call("ArithI.LUI",@{typ ArithI},tp[var_w("rt",5),var_w("imm",16)],@{theory}),
                call("op1ri",@{typ string},tp[ls"lui",var_w("rt",5),var_w("imm",16)],@{theory})),
               (call
                  ("ArithI.DADDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"daddi",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("ArithI.DADDIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("op2ri",@{typ string},tp[ls"daddiu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory}))],@{context})),
          (call("instruction.Load",@{typ instruction},var("v#7",@{typ Load}),@{theory}),
           cs(var("v#7",@{typ Load}),
              [(call
                  ("Load.LDL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"ldl",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LDR",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"ldr",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LB",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lb",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LH",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lh",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LWL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lwl",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LW",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lw",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LBU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lbu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LHU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lhu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LWR",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lwr",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LWU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lwu",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"ll",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LLD",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"lld",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Load.LD",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"ld",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory}))],@{context})),
          (call("instruction.Store",@{typ instruction},var("v#8",@{typ Store}),@{theory}),
           cs(var("v#8",@{typ Store}),
              [(call
                  ("Store.SB",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sb",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SH",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sh",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SWL",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("opmem",@{typ string},tp[ls"swl",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SW",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sw",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SDL",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sdl",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SDR",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sdr",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SWR",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("opmem",@{typ string},tp[ls"swr",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SC",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sc",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SCD",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                   @{theory}),
                call
                  ("opmem",@{typ string},tp[ls"scd",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory})),
               (call
                  ("Store.SD",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                call
                  ("opmem",@{typ string},tp[ls"sd",var_w("rt",5),var_w("rs",5),var_w("imm",16)],
                   @{theory}))],@{context})),
          (call
             ("instruction.CACHE",@{typ instruction},
              var("v#9",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
           cs(var("v#9",@{typ "5 word \<times> 5 word \<times> 16 word"}),
              [(tp[var_w("rs",5),var_w("opn",5),var_w("imm",16)],
                cc[ls"cache ",call("ihex",@{typ string},var_w("opn",5),@{theory}),ls", ",
                   call("ihex",@{typ string},var_w("imm",16),@{theory}),ls"(",
                   call("reg_name",@{typ string},var_w("rs",5),@{theory}),ls")"])],@{context})),
          (Term.Const(@{const_name "SYSCALL"},@{typ instruction}),ls"syscall"),
          (Term.Const(@{const_name "BREAK"},@{typ instruction}),ls"break"),
          (call("instruction.SYNC",@{typ instruction},var_w("v#10",5),@{theory}),
           cc[ls"sync ",call("ihex",@{typ string},var_w("v#10",5),@{theory})]),
          (Term.Const(@{const_name "TLBR"},@{typ instruction}),ls"tlbr"),
          (Term.Const(@{const_name "TLBWI"},@{typ instruction}),ls"tlbwi"),
          (Term.Const(@{const_name "TLBWR"},@{typ instruction}),ls"tlbwr"),
          (Term.Const(@{const_name "TLBP"},@{typ instruction}),ls"tlbp"),
          (Term.Const(@{const_name "ERET"},@{typ instruction}),ls"eret"),
          (call
             ("instruction.RDHWR",@{typ instruction},var("v#11",@{typ "5 word \<times> 5 word"}),
              @{theory}),
           cs(var("v#11",@{typ "5 word \<times> 5 word"}),
              [(tp[var_w("rt",5),var_w("rd",5)],
                call("op2r",@{typ string},tp[ls"rdhwr",var_w("rt",5),var_w("rd",5)],@{theory}))],
              @{context})),(Term.Const(@{const_name "WAIT"},@{typ instruction}),ls"wait"),
          (call("instruction.COP1",@{typ instruction},var_u"v#12",@{theory}),
           call("COP1InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (call("instruction.COP2",@{typ instruction},var("v#13",@{typ COP2}),@{theory}),
           call("COP2InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (call("instruction.LWC2",@{typ instruction},var("v#14",@{typ LWC2}),@{theory}),
           call("LWC2InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (call("instruction.LDC2",@{typ instruction},var("v#15",@{typ LDC2}),@{theory}),
           call("LDC2InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (call("instruction.SWC2",@{typ instruction},var("v#16",@{typ SWC2}),@{theory}),
           call("SWC2InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (call("instruction.SDC2",@{typ instruction},var("v#17",@{typ SDC2}),@{theory}),
           call("SDC2InstructionToString",@{typ string},var("i",@{typ instruction}),@{theory})),
          (Term.Const(@{const_name "Unpredictable"},@{typ instruction}),ls"???"),
          (Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}),ls"???")],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Encode",
   close
     (var("i",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("i",@{typ instruction}),
            [(call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SLL",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(0,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SRL",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(2,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SRA",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(3,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SLLV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(4,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SRLV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(6,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.SRAV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(7,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.JR",@{typ Branch},var_w("rs",5),@{theory}),@{theory}),
              tp[call("form1",w32,tp[var_w("rs",5),lw(0,5),lw(0,5),lw(0,5),lw(8,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.JALR",@{typ Branch},tp[var_w("rs",5),var_w("rd",5)],@{theory}),
                 @{theory}),
              tp[call("form1",w32,tp[var_w("rs",5),lw(0,5),var_w("rd",5),lw(0,5),lw(9,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MFHI",@{typ MultDiv},var_w("rd",5),@{theory}),@{theory}),
              tp[call("form1",w32,tp[lw(0,5),lw(0,5),var_w("rd",5),lw(0,5),lw(16,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MTHI",@{typ MultDiv},var_w("rs",5),@{theory}),@{theory}),
              tp[call("form1",w32,tp[var_w("rs",5),lw(0,5),lw(0,5),lw(0,5),lw(17,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MFLO",@{typ MultDiv},var_w("rd",5),@{theory}),@{theory}),
              tp[call("form1",w32,tp[lw(0,5),lw(0,5),var_w("rd",5),lw(0,5),lw(18,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MTLO",@{typ MultDiv},var_w("rs",5),@{theory}),@{theory}),
              tp[call("form1",w32,tp[var_w("rs",5),lw(0,5),lw(0,5),lw(0,5),lw(19,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSLLV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(20,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRLV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(22,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRAV",@{typ Shift},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(23,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MADD",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call("form5",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MADDU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call("form5",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(1,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MSUB",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call("form5",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(4,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MSUBU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call("form5",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(5,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call
                   ("MultDiv.MUL",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call("form5",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(2,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MULT",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(24,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.MULTU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(25,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DIV",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(26,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DIVU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(27,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DMULT",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(28,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DMULTU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(29,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DDIV",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(30,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.MultDiv",@{typ instruction},
                 call("MultDiv.DDIVU",@{typ MultDiv},tp[var_w("rs",5),var_w("rt",5)],@{theory}),
                 @{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(31,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.MOVZ",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(10,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.MOVN",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(11,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.ADD",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(32,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.ADDU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(33,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.SUB",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(34,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.SUBU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(35,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.AND",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(36,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.OR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(37,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.XOR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(38,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.NOR",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(39,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.SLT",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(42,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.SLTU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(43,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.DADD",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(44,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.DADDU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(45,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.DSUB",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(46,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.ArithR",@{typ instruction},
                 call
                   ("ArithR.DSUBU",@{typ ArithR},tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),var_w("rd",5),lw(0,5),lw(47,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TGE",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(48,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TGEU",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(49,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TLT",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(50,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TLTU",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(51,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TEQ",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(52,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TNE",@{typ Trap},tp[var_w("rs",5),var_w("rt",5)],@{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[var_w("rs",5),var_w("rt",5),lw(0,5),lw(0,5),lw(54,6)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSLL",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(56,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRL",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(58,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRA",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(59,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSLL32",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(60,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRL32",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(62,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Shift",@{typ instruction},
                 call
                   ("Shift.DSRA32",@{typ Shift},tp[var_w("rt",5),var_w("rd",5),var_w("imm5",5)],
                    @{theory}),@{theory}),
              tp[call
                   ("form1",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("imm5",5),lw(63,6)],
                    @{theory}),var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLTZ",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(0,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGEZ",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(1,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLTZL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(2,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGEZL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(3,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TGEI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),@{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(8,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TGEIU",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(9,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TLTI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),@{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(10,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TLTIU",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(11,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TEQI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),@{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(12,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Trap",@{typ instruction},
                 call("Trap.TNEI",@{typ Trap},tp[var_w("rs",5),var_w("imm",16)],@{theory}),@{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(14,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLTZAL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(16,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGEZAL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(17,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLTZALL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(18,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGEZALL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form2",w32,tp[var_w("rs",5),lw(19,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.J",@{typ Branch},var_w("imm",26),@{theory}),@{theory}),
              tp[cc[lw(2,6),var_w("imm",26)],var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.JAL",@{typ Branch},var_w("imm",26),@{theory}),@{theory}),
              tp[cc[lw(3,6),var_w("imm",26)],var("state",qTy)]),
             (call
                ("instruction.CP",@{typ instruction},
                 call("CP.MFC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 @{theory}),
              tp[call("form3",w32,tp[lw(0,5),var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.CP",@{typ instruction},
                 call("CP.DMFC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 @{theory}),
              tp[call("form3",w32,tp[lw(1,5),var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.CP",@{typ instruction},
                 call("CP.MTC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 @{theory}),
              tp[call("form3",w32,tp[lw(4,5),var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.CP",@{typ instruction},
                 call("CP.DMTC0",@{typ CP},tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 @{theory}),
              tp[call("form3",w32,tp[lw(5,5),var_w("rt",5),var_w("rd",5),var_w("sel",3)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call
                   ("Branch.BEQ",@{typ Branch},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call("form4",w32,tp[lw(4,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call
                   ("Branch.BNE",@{typ Branch},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call("form4",w32,tp[lw(5,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLEZ",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form4",w32,tp[lw(6,6),var_w("rs",5),lw(0,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGTZ",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form4",w32,tp[lw(7,6),var_w("rs",5),lw(0,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.ADDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call("form4",w32,tp[lw(8,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.ADDIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call("form4",w32,tp[lw(9,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.SLTI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(10,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.SLTIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(11,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.ANDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(12,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.ORI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(13,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.XORI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(14,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call("ArithI.LUI",@{typ ArithI},tp[var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form4",w32,tp[lw(15,6),lw(0,5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call
                   ("Branch.BEQL",@{typ Branch},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(20,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call
                   ("Branch.BNEL",@{typ Branch},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(21,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BLEZL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form4",w32,tp[lw(22,6),var_w("rs",5),lw(0,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Branch",@{typ instruction},
                 call("Branch.BGTZL",@{typ Branch},tp[var_w("rs",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call("form4",w32,tp[lw(23,6),var_w("rs",5),lw(0,5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.DADDI",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(24,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.ArithI",@{typ instruction},
                 call
                   ("ArithI.DADDIU",@{typ ArithI},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(25,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LDL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(26,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LDR",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(27,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LB",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(32,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LH",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(33,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LWL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(34,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LW",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(35,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LBU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(36,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LHU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(37,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LWR",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(38,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LWU",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(39,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SB",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(40,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SH",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(41,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SWL",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(42,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SW",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(43,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SDL",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(44,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SDR",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(45,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SWR",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(46,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LL",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(48,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LLD",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(52,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Load",@{typ instruction},
                 call
                   ("Load.LD",@{typ Load},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 @{theory}),
              tp[call
                   ("form4",w32,tp[lw(55,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SC",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(56,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SCD",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(60,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.Store",@{typ instruction},
                 call
                   ("Store.SD",@{typ Store},tp[var_w("rs",5),var_w("rt",5),var_w("imm",16)],
                    @{theory}),@{theory}),
              tp[call
                   ("form4",w32,tp[lw(63,6),var_w("rs",5),var_w("rt",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (call
                ("instruction.CACHE",@{typ instruction},
                 tp[var_w("rs",5),var_w("opn",5),var_w("imm",16)],@{theory}),
              tp[call
                   ("form4",w32,tp[lw(47,6),var_w("rs",5),var_w("opn",5),var_w("imm",16)],@{theory}),
                 var("state",qTy)]),
             (Term.Const(@{const_name "SYSCALL"},@{typ instruction}),
              tp[mop(Cast w32,lw(12,6)),var("state",qTy)]),
             (Term.Const(@{const_name "BREAK"},@{typ instruction}),
              tp[mop(Cast w32,lw(13,6)),var("state",qTy)]),
             (call("instruction.SYNC",@{typ instruction},var_w("imm5",5),@{theory}),
              tp[mop(Cast w32,cc[var_w("imm5",5),lw(15,6)]),var("state",qTy)]),
             (Term.Const(@{const_name "TLBR"},@{typ instruction}),
              tp[lw(1107296257,32),var("state",qTy)]),
             (Term.Const(@{const_name "TLBWI"},@{typ instruction}),
              tp[lw(1107296258,32),var("state",qTy)]),
             (Term.Const(@{const_name "TLBWR"},@{typ instruction}),
              tp[lw(1107296262,32),var("state",qTy)]),
             (Term.Const(@{const_name "TLBP"},@{typ instruction}),
              tp[lw(1107296264,32),var("state",qTy)]),
             (Term.Const(@{const_name "ERET"},@{typ instruction}),
              tp[lw(1107296280,32),var("state",qTy)]),
             (call("instruction.RDHWR",@{typ instruction},tp[var_w("rt",5),var_w("rd",5)],@{theory}),
              tp[call("form6",w32,tp[var_w("rt",5),var_w("rd",5),lw(59,6)],@{theory}),
                 var("state",qTy)]),
             (Term.Const(@{const_name "WAIT"},@{typ instruction}),
              tp[lw(1107296288,32),var("state",qTy)]),
             (call("instruction.COP1",@{typ instruction},var_a HOLogic.unitT,@{theory}),
              tp[call("COP1Encode",w32,var("i",@{typ instruction}),@{theory}),var("state",qTy)]),
             (call("instruction.COP2",@{typ instruction},var_a @{typ COP2},@{theory}),
              apply
                (call
                   ("COP2Encode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    var("i",@{typ instruction}),@{theory}),var("state",qTy))),
             (call("instruction.LWC2",@{typ instruction},var_a @{typ LWC2},@{theory}),
              apply
                (call
                   ("LWC2Encode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    var("i",@{typ instruction}),@{theory}),var("state",qTy))),
             (call("instruction.LDC2",@{typ instruction},var_a @{typ LDC2},@{theory}),
              apply
                (call
                   ("LDC2Encode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    var("i",@{typ instruction}),@{theory}),var("state",qTy))),
             (call("instruction.SWC2",@{typ instruction},var_a @{typ SWC2},@{theory}),
              apply
                (call
                   ("SWC2Encode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    var("i",@{typ instruction}),@{theory}),var("state",qTy))),
             (call("instruction.SDC2",@{typ instruction},var_a @{typ SDC2},@{theory}),
              apply
                (call
                   ("SDC2Encode",@{typ "state \<Rightarrow> (32 word \<times> state)"},
                    var("i",@{typ instruction}),@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Unpredictable"},@{typ instruction}),
              tp[lw(133169152,32),var("state",qTy)]),
             (Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}),
              tp[lw(0,32),var("state",qTy)])],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("hasCP1",lf)
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("COP1Init",close(var_a HOLogic.unitT,lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("log_instruction",
   close
     (tp[var_w("w",32),var("inst",@{typ instruction})],
      close
        (var("state",qTy),
         cc[ls"instr ",mop(Cast(@{typ string}),call("state.procID",w8,var("state",qTy),@{theory})),
            ls" ",
            mop(Cast(@{typ string}),call("state.instCnt",HOLogic.natT,var("state",qTy),@{theory})),
            ls" ",
            mop(Drop,
                tp[ln 2,
                   call
                     ("hex",@{typ string},
                      bop(Add,
                          apply
                            (const("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                             var("state",qTy)),
                          call
                            ("getBase",w64,
                             apply
                               (const("PCC",@{typ "state \<Rightarrow> Capability"},@{theory}),
                                var("state",qTy)),@{theory})),@{theory})]),ls" : ",
            mop(Drop,tp[ln 2,call("hex",@{typ string},var_w("w",32),@{theory})]),ls"   ",
            call("instructionToString",@{typ string},var("inst",@{typ instruction}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Next",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ "32 word option"}),var("s",qTy)],
         apply
           (const("Fetch",@{typ "state \<Rightarrow> ((32 word option) \<times> state)"},@{theory}),
            rupd("state.currentInst",tp[var("state",qTy),lo w32],@{theory})),
         let'
           (var("s",qTy),
            rupd("state.currentInst",tp[var("s",qTy),var("v",@{typ "32 word option"})],@{theory}),
            let'
              (tp[var("v",@{typ "64 word option"}),var("s",qTy)],
               let'
                 (var("s0",qTy),
                  cs(call("state.currentInst",@{typ "32 word option"},var("s",qTy),@{theory}),
                     [(mop(Some,var_w("w",32)),
                       apply
                         (call
                            ("Run",@{typ "state \<Rightarrow> state"},
                             call("Decode",@{typ instruction},var_w("w",32),@{theory}),@{theory}),
                          var("s",qTy))),(lo w32,var("s",qTy))],@{context}),
                  tp[apply
                       (const("BranchDelay",@{typ "state \<Rightarrow> (64 word option)"},@{theory}),
                        var("s0",qTy)),var("s0",qTy)]),
               let'
                 (tp[var("v",@{typ CP0}),var("s",qTy)],
                  let'
                    (var("s0",qTy),
                     apply
                       (call
                          ("write'exceptionSignalled",@{typ "state \<Rightarrow> state"},lf,
                           @{theory}),
                        cs(tp[var("v",@{typ "64 word option"}),
                              apply
                                (const
                                   ("BranchTo",@{typ "state \<Rightarrow> (64 word option)"},
                                    @{theory}),var("s",qTy)),
                              call
                                ("state.BranchDelayPCC",
                                 @{typ "(64 word \<times> Capability) option"},var("s",qTy),
                                 @{theory}),
                              call
                                ("state.BranchToPCC",@{typ "(64 word \<times> Capability) option"},
                                 var("s",qTy),@{theory})],
                           [(tp[lo w64,lo w64,lo(@{typ "64 word \<times> Capability"}),
                                lo(@{typ "64 word \<times> Capability"})],
                             ite(mop(Not,
                                     apply
                                       (const
                                          ("exceptionSignalled",@{typ "state \<Rightarrow> bool"},
                                           @{theory}),var("s",qTy))),
                                 apply
                                   (call
                                      ("write'PC",@{typ "state \<Rightarrow> state"},
                                       bop(Add,
                                           apply
                                             (const
                                                ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                              var("s",qTy)),lw(4,64)),@{theory}),var("s",qTy)),
                                 var("s",qTy))),
                            (tp[mop(Some,var_w("addr",64)),lo w64,
                                lo(@{typ "64 word \<times> Capability"}),
                                lo(@{typ "64 word \<times> Capability"})],
                             apply
                               (call
                                  ("write'PC",@{typ "state \<Rightarrow> state"},var_w("addr",64),
                                   @{theory}),
                                rupd
                                  ("state.CCallBranchDelay",
                                   tp[apply
                                        (call
                                           ("write'BranchDelay",@{typ "state \<Rightarrow> state"},
                                            lo w64,@{theory}),var("s",qTy)),lf],@{theory}))),
                            (tp[lo w64,mop(Some,var_w("addr",64)),
                                lo(@{typ "64 word \<times> Capability"}),
                                lo(@{typ "64 word \<times> Capability"})],
                             let'
                               (var("s",qTy),
                                apply
                                  (call
                                     ("write'BranchDelay",@{typ "state \<Rightarrow> state"},
                                      mop(Some,var_w("addr",64)),@{theory}),var("s",qTy)),
                                let'
                                  (tp[var_w("v",64),var("s",qTy)],
                                   let'
                                     (var("s0",qTy),
                                      rupd
                                        ("state.CCallBranch",
                                         tp[apply
                                              (call
                                                 ("write'BranchTo",
                                                  @{typ "state \<Rightarrow> state"},lo w64,
                                                  @{theory}),
                                               rupd
                                                 ("state.CCallBranchDelay",
                                                  tp[var("s",qTy),
                                                     call
                                                       ("state.CCallBranch",HOLogic.boolT,
                                                        var("s",qTy),@{theory})],@{theory})),lf],
                                         @{theory}),
                                      tp[apply
                                           (const
                                              ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                            var("s0",qTy)),var("s0",qTy)]),
                                   apply
                                     (call
                                        ("write'PC",@{typ "state \<Rightarrow> state"},
                                         bop(Add,var_w("v",64),lw(4,64)),@{theory}),var("s",qTy))))),
                            (tp[lo w64,lo w64,
                                mop(Some,tp[var_w("addr",64),var("cap",@{typ Capability})]),
                                lo(@{typ "64 word \<times> Capability"})],
                             apply
                               (call
                                  ("write'PCC",@{typ "state \<Rightarrow> state"},
                                   var("cap",@{typ Capability}),@{theory}),
                                apply
                                  (call
                                     ("write'PC",@{typ "state \<Rightarrow> state"},
                                      var_w("addr",64),@{theory}),
                                   rupd
                                     ("state.CCallBranchDelay",
                                      tp[rupd
                                           ("state.BranchDelayPCC",
                                            tp[var("s",qTy),lo(@{typ "64 word \<times> Capability"})],
                                            @{theory}),lf],@{theory})))),
                            (tp[lo w64,lo w64,lo(@{typ "64 word \<times> Capability"}),
                                mop(Some,tp[var_w("addr",64),var("cap",@{typ Capability})])],
                             let'
                               (var("s",qTy),
                                rupd
                                  ("state.BranchDelayPCC",
                                   tp[var("s",qTy),
                                      mop(Some,tp[var_w("addr",64),var("cap",@{typ Capability})])],
                                   @{theory}),
                                let'
                                  (tp[var_w("v",64),var("s",qTy)],
                                   let'
                                     (var("s0",qTy),
                                      rupd
                                        ("state.CCallBranch",
                                         tp[rupd
                                              ("state.BranchToPCC",
                                               tp[rupd
                                                    ("state.CCallBranchDelay",
                                                     tp[var("s",qTy),
                                                        call
                                                          ("state.CCallBranch",HOLogic.boolT,
                                                           var("s",qTy),@{theory})],@{theory}),
                                                  lo(@{typ "64 word \<times> Capability"})],
                                               @{theory}),lf],@{theory}),
                                      tp[apply
                                           (const
                                              ("PC",@{typ "state \<Rightarrow> 64 word"},@{theory}),
                                            var("s0",qTy)),var("s0",qTy)]),
                                   apply
                                     (call
                                        ("write'PC",@{typ "state \<Rightarrow> state"},
                                         bop(Add,var_w("v",64),lw(4,64)),@{theory}),var("s",qTy))))),
                            (var_a
                               (@{typ
                                "(64 word option) \<times>
                                 (64 word option) \<times>
                                 ((64 word \<times> Capability) option) \<times>
                                 (64 word \<times> Capability) option"}),
                             mop(Snd,
                                 apply
                                   (call
                                      ("raise'exception",
                                       @{typ "state \<Rightarrow> (unit \<times> state)"},
                                       call
                                         ("exception.UNPREDICTABLE",@{typ exception},
                                          ls"Branch follows branch",@{theory}),@{theory}),
                                    var("s",qTy))))],@{context})),
                     tp[apply(const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),var("s0",qTy)),
                        var("s0",qTy)]),
                  apply
                    (call
                       ("write'CP0",@{typ "state \<Rightarrow> state"},
                        rupd
                          ("CP0.Count",
                           tp[var("v",@{typ CP0}),
                              bop(Add,
                                  call
                                    ("CP0.Count",w32,
                                     apply
                                       (const("CP0",@{typ "state \<Rightarrow> CP0"},@{theory}),
                                        var("s",qTy)),@{theory}),lw(1,32))],@{theory}),@{theory}),
                     var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("hasCP2",lt)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("COP2Init",
   close
     (var_a HOLogic.unitT,
      close
        (var("state",qTy),
         let'
           (var("s0",@{typ CapCause}),
            rupd
              ("CapCause.RegNum",
               tp[rupd("CapCause.ExcCode",tp[lx @{typ CapCause},lw(0,8)],@{theory}),lw(0,8)],
               @{theory}),
            mop(Snd,
                mop(Snd,
                    apply
                      (forloop
                         (tp[ln 0,ln 31,
                             close
                               (var_n"i",
                                close
                                  (var("state",@{typ "CapCause \<times> state"}),
                                   tp[lu,mop(Fst,var("state",@{typ "CapCause \<times> state"})),
                                      apply
                                        (call
                                           ("write'CAPR",@{typ "state \<Rightarrow> state"},
                                            tp[const("defaultCap",@{typ Capability},@{theory}),
                                               mop(Cast (Word_Lib.mk_wordT 5),var_n"i")],@{theory}),
                                         mop(Snd,var("state",@{typ "CapCause \<times> state"})))]))]),
                       tp[var("s0",@{typ CapCause}),
                          apply
                            (call
                               ("write'PCC",@{typ "state \<Rightarrow> state"},
                                const("defaultCap",@{typ Capability},@{theory}),@{theory}),
                             rupd
                               ("state.capcause",tp[var("state",qTy),var("s0",@{typ CapCause})],
                                @{theory}))])))))))
end
\<close>
end