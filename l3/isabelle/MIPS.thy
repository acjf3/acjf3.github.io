(* MIPS.thy - generated by L3 - 27/10/2017 *)
theory MIPS
imports "$ISABELLE_HOME/src/HOL/Word/Word" "L3_Lib"
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "L3.ML"

record Index = Index :: "8 word" P :: bool index'rst :: "23 word"

record Random = Random :: "8 word" random'rst :: "24 word"

record Wired = Wired :: "8 word" wired'rst :: "24 word"

record EntryLo =
  C :: "3 word" D :: bool G :: bool PFN :: "28 word" V :: bool entrylo'rst :: "30 word"

record PageMask = Mask :: "12 word" pagemask'rst :: "20 word"

record EntryHi = ASID :: "8 word" R :: "2 word" VPN2 :: "27 word" entryhi'rst :: "27 word"

record StatusRegister =
  BEV :: bool
  CU0 :: bool
  CU1 :: bool
  ERL :: bool
  EXL :: bool
  FR :: bool
  IE :: bool
  IM :: "8 word"
  KSU :: "2 word"
  KX :: bool
  RE :: bool
  SX :: bool
  UX :: bool
  statusregister'rst :: "11 word"

record ConfigRegister =
  AR :: "3 word"
  AT :: "2 word"
  BE :: bool
  K0 :: "3 word"
  M :: bool
  MT :: "3 word"
  configregister'rst :: "19 word"

record ConfigRegister1 =
  C2 :: bool
  CA :: bool
  DA :: "3 word"
  DL :: "3 word"
  DS :: "3 word"
  EP :: bool
  FP :: bool
  IA :: "3 word"
  IL :: "3 word"
  IS :: "3 word"
  M :: bool
  MD :: bool
  MMUSize :: "6 word"
  PC :: bool
  WR :: bool

record ConfigRegister2 =
  M :: bool
  SA :: "4 word"
  SL :: "4 word"
  SS :: "4 word"
  SU :: "4 word"
  TA :: "4 word"
  TL :: "4 word"
  TS :: "4 word"
  TU :: "3 word"

record ConfigRegister3 =
  DSPP :: bool
  LPA :: bool
  M :: bool
  MT :: bool
  SM :: bool
  SP :: bool
  TL :: bool
  ULRI :: bool
  VEIC :: bool
  VInt :: bool
  configregister3'rst :: "22 word"

record ConfigRegister6 = LTLB :: bool TLBSize :: "16 word" configregister6'rst :: "15 word"

record CauseRegister =
  BD :: bool
  CE :: "2 word"
  ExcCode :: "5 word"
  IP :: "8 word"
  TI :: bool
  causeregister'rst :: "15 word"

record Context = BadVPN2 :: "19 word" PTEBase :: "41 word" context'rst :: "4 word"

record XContext = BadVPN2 :: "27 word" PTEBase :: "31 word" R :: "2 word" xcontext'rst :: "4 word"

record HWREna = CC :: bool CCRes :: bool CPUNum :: bool UL :: bool hwrena'rst :: "28 word"

record CP0 =
  BadVAddr :: "64 word"
  Cause :: CauseRegister
  Compare :: "32 word"
  Config :: ConfigRegister
  Config1 :: ConfigRegister1
  Config2 :: ConfigRegister2
  Config3 :: ConfigRegister3
  Config6 :: ConfigRegister6
  Context :: Context
  Count :: "32 word"
  Debug :: "32 word"
  EPC :: "64 word"
  EntryHi :: EntryHi
  EntryLo0 :: EntryLo
  EntryLo1 :: EntryLo
  ErrCtl :: "32 word"
  ErrorEPC :: "64 word"
  HWREna :: HWREna
  Index :: Index
  LLAddr :: "64 word"
  PRId :: "32 word"
  PageMask :: PageMask
  Random :: Random
  Status :: StatusRegister
  UsrLocal :: "64 word"
  Wired :: Wired
  XContext :: XContext

datatype ExceptionType = Int | Mod | TLBL | TLBS | AdEL | AdES | Sys | Bp | ResI | CpU | Ov | Tr |
  XTLBRefillL | XTLBRefillS

datatype LorS = LOAD | STORE

record FCSR =
  ABS2008 :: bool
  CauseE :: bool
  CauseI :: bool
  CauseO :: bool
  CauseU :: bool
  CauseV :: bool
  CauseZ :: bool
  EnableI :: bool
  EnableO :: bool
  EnableU :: bool
  EnableV :: bool
  EnableZ :: bool
  FCC :: "8 word"
  FS :: bool
  FlagI :: bool
  FlagO :: bool
  FlagU :: bool
  FlagV :: bool
  FlagZ :: bool
  NAN2008 :: bool
  RM :: "2 word"
  fcsr'rst :: "3 word"

record FIR =
  ASE :: bool
  D :: bool
  F64 :: bool
  L :: bool
  PS :: bool
  PrID :: "8 word"
  Rev :: "8 word"
  S :: bool
  W :: bool
  fir'rst :: "9 word"

datatype Branch =
    BEQ "5 word \<times> 5 word \<times> 16 word"
  | BEQL "5 word \<times> 5 word \<times> 16 word"
  | BGEZ "5 word \<times> 16 word"
  | BGEZAL "5 word \<times> 16 word"
  | BGEZALL "5 word \<times> 16 word"
  | BGEZL "5 word \<times> 16 word"
  | BGTZ "5 word \<times> 16 word"
  | BGTZL "5 word \<times> 16 word"
  | BLEZ "5 word \<times> 16 word"
  | BLEZL "5 word \<times> 16 word"
  | BLTZ "5 word \<times> 16 word"
  | BLTZAL "5 word \<times> 16 word"
  | BLTZALL "5 word \<times> 16 word"
  | BLTZL "5 word \<times> 16 word"
  | BNE "5 word \<times> 5 word \<times> 16 word"
  | BNEL "5 word \<times> 5 word \<times> 16 word"
  | J "26 word"
  | JAL "26 word"
  | JALR "5 word \<times> 5 word"
  | JR "5 word"

datatype CP =
    DMFC0 "5 word \<times> 5 word \<times> 3 word"
  | DMTC0 "5 word \<times> 5 word \<times> 3 word"
  | MFC0 "5 word \<times> 5 word \<times> 3 word"
  | MTC0 "5 word \<times> 5 word \<times> 3 word"

datatype Store =
    SB "5 word \<times> 5 word \<times> 16 word"
  | SC "5 word \<times> 5 word \<times> 16 word"
  | SCD "5 word \<times> 5 word \<times> 16 word"
  | SD "5 word \<times> 5 word \<times> 16 word"
  | SDL "5 word \<times> 5 word \<times> 16 word"
  | SDR "5 word \<times> 5 word \<times> 16 word"
  | SH "5 word \<times> 5 word \<times> 16 word"
  | SW "5 word \<times> 5 word \<times> 16 word"
  | SWL "5 word \<times> 5 word \<times> 16 word"
  | SWR "5 word \<times> 5 word \<times> 16 word"

datatype Load =
    LB "5 word \<times> 5 word \<times> 16 word"
  | LBU "5 word \<times> 5 word \<times> 16 word"
  | LD "5 word \<times> 5 word \<times> 16 word"
  | LDL "5 word \<times> 5 word \<times> 16 word"
  | LDR "5 word \<times> 5 word \<times> 16 word"
  | LH "5 word \<times> 5 word \<times> 16 word"
  | LHU "5 word \<times> 5 word \<times> 16 word"
  | LL "5 word \<times> 5 word \<times> 16 word"
  | LLD "5 word \<times> 5 word \<times> 16 word"
  | LW "5 word \<times> 5 word \<times> 16 word"
  | LWL "5 word \<times> 5 word \<times> 16 word"
  | LWR "5 word \<times> 5 word \<times> 16 word"
  | LWU "5 word \<times> 5 word \<times> 16 word"

datatype Trap =
    TEQ "5 word \<times> 5 word"
  | TEQI "5 word \<times> 16 word"
  | TGE "5 word \<times> 5 word"
  | TGEI "5 word \<times> 16 word"
  | TGEIU "5 word \<times> 16 word"
  | TGEU "5 word \<times> 5 word"
  | TLT "5 word \<times> 5 word"
  | TLTI "5 word \<times> 16 word"
  | TLTIU "5 word \<times> 16 word"
  | TLTU "5 word \<times> 5 word"
  | TNE "5 word \<times> 5 word"
  | TNEI "5 word \<times> 16 word"

datatype Shift =
    DSLL "5 word \<times> 5 word \<times> 5 word"
  | DSLL32 "5 word \<times> 5 word \<times> 5 word"
  | DSLLV "5 word \<times> 5 word \<times> 5 word"
  | DSRA "5 word \<times> 5 word \<times> 5 word"
  | DSRA32 "5 word \<times> 5 word \<times> 5 word"
  | DSRAV "5 word \<times> 5 word \<times> 5 word"
  | DSRL "5 word \<times> 5 word \<times> 5 word"
  | DSRL32 "5 word \<times> 5 word \<times> 5 word"
  | DSRLV "5 word \<times> 5 word \<times> 5 word"
  | SLL "5 word \<times> 5 word \<times> 5 word"
  | SLLV "5 word \<times> 5 word \<times> 5 word"
  | SRA "5 word \<times> 5 word \<times> 5 word"
  | SRAV "5 word \<times> 5 word \<times> 5 word"
  | SRL "5 word \<times> 5 word \<times> 5 word"
  | SRLV "5 word \<times> 5 word \<times> 5 word"

datatype MultDiv =
    DDIV "5 word \<times> 5 word"
  | DDIVU "5 word \<times> 5 word"
  | DIV "5 word \<times> 5 word"
  | DIVU "5 word \<times> 5 word"
  | DMULT "5 word \<times> 5 word"
  | DMULTU "5 word \<times> 5 word"
  | MADD "5 word \<times> 5 word"
  | MADDU "5 word \<times> 5 word"
  | MFHI "5 word"
  | MFLO "5 word"
  | MSUB "5 word \<times> 5 word"
  | MSUBU "5 word \<times> 5 word"
  | MTHI "5 word"
  | MTLO "5 word"
  | MUL "5 word \<times> 5 word \<times> 5 word"
  | MULT "5 word \<times> 5 word"
  | MULTU "5 word \<times> 5 word"

datatype ArithR =
    ADD "5 word \<times> 5 word \<times> 5 word"
  | ADDU "5 word \<times> 5 word \<times> 5 word"
  | AND "5 word \<times> 5 word \<times> 5 word"
  | DADD "5 word \<times> 5 word \<times> 5 word"
  | DADDU "5 word \<times> 5 word \<times> 5 word"
  | DSUB "5 word \<times> 5 word \<times> 5 word"
  | DSUBU "5 word \<times> 5 word \<times> 5 word"
  | MOVN "5 word \<times> 5 word \<times> 5 word"
  | MOVZ "5 word \<times> 5 word \<times> 5 word"
  | NOR "5 word \<times> 5 word \<times> 5 word"
  | OR "5 word \<times> 5 word \<times> 5 word"
  | SLT "5 word \<times> 5 word \<times> 5 word"
  | SLTU "5 word \<times> 5 word \<times> 5 word"
  | SUB "5 word \<times> 5 word \<times> 5 word"
  | SUBU "5 word \<times> 5 word \<times> 5 word"
  | XOR "5 word \<times> 5 word \<times> 5 word"

datatype ArithI =
    ADDI "5 word \<times> 5 word \<times> 16 word"
  | ADDIU "5 word \<times> 5 word \<times> 16 word"
  | ANDI "5 word \<times> 5 word \<times> 16 word"
  | DADDI "5 word \<times> 5 word \<times> 16 word"
  | DADDIU "5 word \<times> 5 word \<times> 16 word"
  | LUI "5 word \<times> 16 word"
  | ORI "5 word \<times> 5 word \<times> 16 word"
  | SLTI "5 word \<times> 5 word \<times> 16 word"
  | SLTIU "5 word \<times> 5 word \<times> 16 word"
  | XORI "5 word \<times> 5 word \<times> 16 word"

datatype COP1 =
    ABS_D "5 word \<times> 5 word"
  | ABS_S "5 word \<times> 5 word"
  | ADD_D "5 word \<times> 5 word \<times> 5 word"
  | ADD_S "5 word \<times> 5 word \<times> 5 word"
  | BC1F "16 word \<times> 3 word"
  | BC1FL "16 word \<times> 3 word"
  | BC1T "16 word \<times> 3 word"
  | BC1TL "16 word \<times> 3 word"
  | CEIL_L_D "5 word \<times> 5 word"
  | CEIL_L_S "5 word \<times> 5 word"
  | CEIL_W_D "5 word \<times> 5 word"
  | CEIL_W_S "5 word \<times> 5 word"
  | CFC1 "5 word \<times> 5 word"
  | CTC1 "5 word \<times> 5 word"
  | CVT_D_L "5 word \<times> 5 word"
  | CVT_D_S "5 word \<times> 5 word"
  | CVT_D_W "5 word \<times> 5 word"
  | CVT_L_D "5 word \<times> 5 word"
  | CVT_L_S "5 word \<times> 5 word"
  | CVT_S_D "5 word \<times> 5 word"
  | CVT_S_L "5 word \<times> 5 word"
  | CVT_S_W "5 word \<times> 5 word"
  | CVT_W_D "5 word \<times> 5 word"
  | CVT_W_S "5 word \<times> 5 word"
  | C_cond_D "5 word \<times> 5 word \<times> 3 word \<times> 3 word"
  | C_cond_S "5 word \<times> 5 word \<times> 3 word \<times> 3 word"
  | DIV_D "5 word \<times> 5 word \<times> 5 word"
  | DIV_S "5 word \<times> 5 word \<times> 5 word"
  | DMFC1 "5 word \<times> 5 word"
  | DMTC1 "5 word \<times> 5 word"
  | FLOOR_L_D "5 word \<times> 5 word"
  | FLOOR_L_S "5 word \<times> 5 word"
  | FLOOR_W_D "5 word \<times> 5 word"
  | FLOOR_W_S "5 word \<times> 5 word"
  | LDC1 "5 word \<times> 16 word \<times> 5 word"
  | LDXC1 "5 word \<times> 5 word \<times> 5 word"
  | LWC1 "5 word \<times> 16 word \<times> 5 word"
  | LWXC1 "5 word \<times> 5 word \<times> 5 word"
  | MADD_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | MADD_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | MFC1 "5 word \<times> 5 word"
  | MOVF "5 word \<times> 5 word \<times> 3 word"
  | MOVF_D "5 word \<times> 5 word \<times> 3 word"
  | MOVF_S "5 word \<times> 5 word \<times> 3 word"
  | MOVN_D "5 word \<times> 5 word \<times> 5 word"
  | MOVN_S "5 word \<times> 5 word \<times> 5 word"
  | MOVT "5 word \<times> 5 word \<times> 3 word"
  | MOVT_D "5 word \<times> 5 word \<times> 3 word"
  | MOVT_S "5 word \<times> 5 word \<times> 3 word"
  | MOVZ_D "5 word \<times> 5 word \<times> 5 word"
  | MOVZ_S "5 word \<times> 5 word \<times> 5 word"
  | MOV_D "5 word \<times> 5 word"
  | MOV_S "5 word \<times> 5 word"
  | MSUB_D "5 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | MSUB_S "5 word \<times> 5 word \<times> 5 word \<times> 5 word"
  | MTC1 "5 word \<times> 5 word"
  | MUL_D "5 word \<times> 5 word \<times> 5 word"
  | MUL_S "5 word \<times> 5 word \<times> 5 word"
  | NEG_D "5 word \<times> 5 word"
  | NEG_S "5 word \<times> 5 word"
  | ROUND_L_D "5 word \<times> 5 word"
  | ROUND_L_S "5 word \<times> 5 word"
  | ROUND_W_D "5 word \<times> 5 word"
  | ROUND_W_S "5 word \<times> 5 word"
  | SDC1 "5 word \<times> 16 word \<times> 5 word"
  | SDXC1 "5 word \<times> 5 word \<times> 5 word"
  | SQRT_D "5 word \<times> 5 word"
  | SQRT_S "5 word \<times> 5 word"
  | SUB_D "5 word \<times> 5 word \<times> 5 word"
  | SUB_S "5 word \<times> 5 word \<times> 5 word"
  | SWC1 "5 word \<times> 16 word \<times> 5 word"
  | SWXC1 "5 word \<times> 5 word \<times> 5 word"
  | TRUNC_L_D "5 word \<times> 5 word"
  | TRUNC_L_S "5 word \<times> 5 word"
  | TRUNC_W_D "5 word \<times> 5 word"
  | TRUNC_W_S "5 word \<times> 5 word"
  | UnknownFPInstruction

datatype instruction =
    ArithI ArithI
  | ArithR ArithR
  | BREAK
  | Branch Branch
  | CACHE "5 word \<times> 5 word \<times> 16 word"
  | COP1 COP1
  | CP CP
  | ERET
  | Load Load
  | MultDiv MultDiv
  | RDHWR "5 word \<times> 5 word"
  | ReservedInstruction
  | SYNC "5 word"
  | SYSCALL
  | Shift Shift
  | Store Store
  | TLBP
  | TLBR
  | TLBWI
  | TLBWR
  | Trap Trap
  | Unpredictable
  | WAIT

datatype exception = NoException | UNPREDICTABLE string

record state =
  BranchDelay :: "(64 word option) option"
  BranchTo :: "(bool \<times> 64 word) option"
  CP0 :: CP0
  FGR :: "5 word \<Rightarrow> 64 word"
  LLbit :: "bool option"
  MEM :: "64 word \<Rightarrow> 8 word"
  PC :: "64 word"
  exception :: exception
  exceptionSignalled :: bool
  fcsr :: FCSR
  fir :: FIR
  gpr :: "5 word \<Rightarrow> 64 word"
  hi :: "64 word option"
  lo :: "64 word option"

fun nat_to_ExceptionType :: "nat \<Rightarrow> ExceptionType" where
  "nat_to_ExceptionType x =
   (if x = 0 then MIPS.Int
    else if x = 1 then MIPS.Mod
    else if x = 2 then MIPS.TLBL
    else if x = 3 then MIPS.TLBS
    else if x = 4 then MIPS.AdEL
    else if x = 5 then MIPS.AdES
    else if x = 6 then MIPS.Sys
    else if x = 7 then MIPS.Bp
    else if x = 8 then MIPS.ResI
    else if x = 9 then MIPS.CpU
    else if x = 10 then MIPS.Ov
    else if x = 11 then MIPS.Tr
    else if x = 12 then MIPS.XTLBRefillL
    else if x = 13 then MIPS.XTLBRefillS
    else HOL.undefined)"

fun nat_to_LorS :: "nat \<Rightarrow> LorS" where
  "nat_to_LorS x =
   (if x = 0 then MIPS.LOAD else if x = 1 then MIPS.STORE
    else HOL.undefined)"

fun ExceptionType_to_nat :: "ExceptionType \<Rightarrow> nat" where
  "ExceptionType_to_nat x =
   (case x of
       MIPS.Int => 0
     | MIPS.Mod => 1
     | MIPS.TLBL => 2
     | MIPS.TLBS => 3
     | MIPS.AdEL => 4
     | MIPS.AdES => 5
     | MIPS.Sys => 6
     | MIPS.Bp => 7
     | MIPS.ResI => 8
     | MIPS.CpU => 9
     | MIPS.Ov => 10
     | MIPS.Tr => 11
     | MIPS.XTLBRefillL => 12
     | MIPS.XTLBRefillS => 13)"

fun LorS_to_nat :: "LorS \<Rightarrow> nat" where
  "LorS_to_nat x =
   (case x of
       MIPS.LOAD => 0 | MIPS.STORE => 1)"

fun ExceptionType_to_string :: "ExceptionType \<Rightarrow> string" where
  "ExceptionType_to_string x =
   (case x of
       MIPS.Int => ''Int''
     | MIPS.Mod => ''Mod''
     | MIPS.TLBL => ''TLBL''
     | MIPS.TLBS => ''TLBS''
     | MIPS.AdEL => ''AdEL''
     | MIPS.AdES => ''AdES''
     | MIPS.Sys => ''Sys''
     | MIPS.Bp => ''Bp''
     | MIPS.ResI => ''ResI''
     | MIPS.CpU => ''CpU''
     | MIPS.Ov => ''Ov''
     | MIPS.Tr => ''Tr''
     | MIPS.XTLBRefillL => ''XTLBRefillL''
     | MIPS.XTLBRefillS => ''XTLBRefillS'')"

fun LorS_to_string :: "LorS \<Rightarrow> string" where
  "LorS_to_string x =
   (case x of
       MIPS.LOAD => ''LOAD'' | MIPS.STORE => ''STORE'')"

fun string_to_ExceptionType :: "string \<Rightarrow> ExceptionType" where
  "string_to_ExceptionType x =
   (if x = ''Int'' then MIPS.Int
    else if x = ''Mod'' then MIPS.Mod
    else if x = ''TLBL'' then MIPS.TLBL
    else if x = ''TLBS'' then MIPS.TLBS
    else if x = ''AdEL'' then MIPS.AdEL
    else if x = ''AdES'' then MIPS.AdES
    else if x = ''Sys'' then MIPS.Sys
    else if x = ''Bp'' then MIPS.Bp
    else if x = ''ResI'' then MIPS.ResI
    else if x = ''CpU'' then MIPS.CpU
    else if x = ''Ov'' then MIPS.Ov
    else if x = ''Tr'' then MIPS.Tr
    else if x = ''XTLBRefillL'' then MIPS.XTLBRefillL
    else if x = ''XTLBRefillS'' then MIPS.XTLBRefillS
    else HOL.undefined)"

fun string_to_LorS :: "string \<Rightarrow> LorS" where
  "string_to_LorS x =
   (if x = ''LOAD'' then MIPS.LOAD else if x = ''STORE'' then MIPS.STORE
    else HOL.undefined)"

fun boolify'5 :: "5 word \<Rightarrow>
  (bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'5 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4] \<Rightarrow>
     (b0,b1,b2,b3,b4))"

fun boolify'26 :: "26 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'26 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25))"

fun boolify'32 :: "32 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'32 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27,b28,b29,b30,b31))"

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("raise'exception",
   close
     (var("e",@{typ exception}),
      close
        (var("state",qTy),
         tp[lx(@{typ 'a}),
            ite(eq(call("state.exception",@{typ exception},var("state",qTy),@{theory}),
                   Term.Const(@{const_name "NoException"},@{typ exception})),
                rupd("state.exception",tp[var("state",qTy),var("e",@{typ exception})],@{theory}),
                var("state",qTy))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Index",
   close
     (var_w("x",32),
      record
        ("Index",
         [ex(var_w("x",32),ln 7,ln 0,w8),bop(Bit,var_w("x",32),ln 31),
          ex(var_w("x",32),ln 30,ln 8,(Word_Lib.mk_wordT 23))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Index",
   close
     (var("x",@{typ Index}),
      cc[mop(Cast w1,call("Index.P",HOLogic.boolT,var("x",@{typ Index}),@{theory})),
         call("Index.index'rst",(Word_Lib.mk_wordT 23),var("x",@{typ Index}),@{theory}),
         call("Index.Index",w8,var("x",@{typ Index}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Index",
   close(tp[var_a w32,var("x",@{typ Index})],call("reg'Index",w32,var("x",@{typ Index}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Index",
   close
     (tp[var_a @{typ Index},var_w("x",32)],call("rec'Index",@{typ Index},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Random",
   close
     (var_w("x",32),
      record
        ("Random",
         [ex(var_w("x",32),ln 7,ln 0,w8),ex(var_w("x",32),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Random",
   close
     (var("x",@{typ Random}),
      cc[call("Random.random'rst",(Word_Lib.mk_wordT 24),var("x",@{typ Random}),@{theory}),
         call("Random.Random",w8,var("x",@{typ Random}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Random",
   close
     (tp[var_a w32,var("x",@{typ Random})],call("reg'Random",w32,var("x",@{typ Random}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Random",
   close
     (tp[var_a @{typ Random},var_w("x",32)],call("rec'Random",@{typ Random},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Wired",
   close
     (var_w("x",32),
      record
        ("Wired",
         [ex(var_w("x",32),ln 7,ln 0,w8),ex(var_w("x",32),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Wired",
   close
     (var("x",@{typ Wired}),
      cc[call("Wired.wired'rst",(Word_Lib.mk_wordT 24),var("x",@{typ Wired}),@{theory}),
         call("Wired.Wired",w8,var("x",@{typ Wired}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Wired",
   close(tp[var_a w32,var("x",@{typ Wired})],call("reg'Wired",w32,var("x",@{typ Wired}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Wired",
   close
     (tp[var_a @{typ Wired},var_w("x",32)],call("rec'Wired",@{typ Wired},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'EntryLo",
   close
     (var_w("x",64),
      record
        ("EntryLo",
         [ex(var_w("x",64),ln 5,ln 3,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",64),ln 2),
          bop(Bit,var_w("x",64),ln 0),ex(var_w("x",64),ln 33,ln 6,(Word_Lib.mk_wordT 28)),
          bop(Bit,var_w("x",64),ln 1),ex(var_w("x",64),ln 63,ln 34,(Word_Lib.mk_wordT 30))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'EntryLo",
   close
     (var("x",@{typ EntryLo}),
      cc[call("EntryLo.entrylo'rst",(Word_Lib.mk_wordT 30),var("x",@{typ EntryLo}),@{theory}),
         call("EntryLo.PFN",(Word_Lib.mk_wordT 28),var("x",@{typ EntryLo}),@{theory}),
         call("EntryLo.C",(Word_Lib.mk_wordT 3),var("x",@{typ EntryLo}),@{theory}),
         mop(Cast w1,call("EntryLo.D",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         mop(Cast w1,call("EntryLo.V",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory})),
         mop(Cast w1,call("EntryLo.G",HOLogic.boolT,var("x",@{typ EntryLo}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'EntryLo",
   close
     (tp[var_a w64,var("x",@{typ EntryLo})],
      call("reg'EntryLo",w64,var("x",@{typ EntryLo}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'EntryLo",
   close
     (tp[var_a @{typ EntryLo},var_w("x",64)],
      call("rec'EntryLo",@{typ EntryLo},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'PageMask",
   close
     (var_w("x",32),
      record
        ("PageMask",
         [ex(var_w("x",32),ln 24,ln 13,(Word_Lib.mk_wordT 12)),
          cc[ex(var_w("x",32),ln 12,ln 0,(Word_Lib.mk_wordT 13)),
             ex(var_w("x",32),ln 31,ln 25,(Word_Lib.mk_wordT 7))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'PageMask",
   close
     (var("x",@{typ PageMask}),
      let'
        (var_w("pagemask'rst",20),
         call("PageMask.pagemask'rst",(Word_Lib.mk_wordT 20),var("x",@{typ PageMask}),@{theory}),
         cc[ex(var_w("pagemask'rst",20),ln 6,ln 0,(Word_Lib.mk_wordT 7)),
            call("PageMask.Mask",(Word_Lib.mk_wordT 12),var("x",@{typ PageMask}),@{theory}),
            ex(var_w("pagemask'rst",20),ln 19,ln 7,(Word_Lib.mk_wordT 13))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'PageMask",
   close
     (tp[var_a w32,var("x",@{typ PageMask})],
      call("reg'PageMask",w32,var("x",@{typ PageMask}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'PageMask",
   close
     (tp[var_a @{typ PageMask},var_w("x",32)],
      call("rec'PageMask",@{typ PageMask},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'EntryHi",
   close
     (var_w("x",64),
      record
        ("EntryHi",
         [ex(var_w("x",64),ln 7,ln 0,w8),ex(var_w("x",64),ln 63,ln 62,(Word_Lib.mk_wordT 2)),
          ex(var_w("x",64),ln 39,ln 13,(Word_Lib.mk_wordT 27)),
          cc[ex(var_w("x",64),ln 12,ln 8,(Word_Lib.mk_wordT 5)),
             ex(var_w("x",64),ln 61,ln 40,(Word_Lib.mk_wordT 22))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'EntryHi",
   close
     (var("x",@{typ EntryHi}),
      let'
        (var_w("entryhi'rst",27),
         call("EntryHi.entryhi'rst",(Word_Lib.mk_wordT 27),var("x",@{typ EntryHi}),@{theory}),
         cc[call("EntryHi.R",(Word_Lib.mk_wordT 2),var("x",@{typ EntryHi}),@{theory}),
            ex(var_w("entryhi'rst",27),ln 21,ln 0,(Word_Lib.mk_wordT 22)),
            call("EntryHi.VPN2",(Word_Lib.mk_wordT 27),var("x",@{typ EntryHi}),@{theory}),
            ex(var_w("entryhi'rst",27),ln 26,ln 22,(Word_Lib.mk_wordT 5)),
            call("EntryHi.ASID",w8,var("x",@{typ EntryHi}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'EntryHi",
   close
     (tp[var_a w64,var("x",@{typ EntryHi})],
      call("reg'EntryHi",w64,var("x",@{typ EntryHi}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'EntryHi",
   close
     (tp[var_a @{typ EntryHi},var_w("x",64)],
      call("rec'EntryHi",@{typ EntryHi},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'StatusRegister",
   close
     (var_w("x",32),
      record
        ("StatusRegister",
         [bop(Bit,var_w("x",32),ln 22),bop(Bit,var_w("x",32),ln 28),bop(Bit,var_w("x",32),ln 29),
          bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 26),
          bop(Bit,var_w("x",32),ln 0),ex(var_w("x",32),ln 15,ln 8,w8),
          ex(var_w("x",32),ln 4,ln 3,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",32),ln 7),
          bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 5),
          cc[ex(var_w("x",32),ln 21,ln 16,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 24,ln 23,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 27,ln 27,w1),
             ex(var_w("x",32),ln 31,ln 30,(Word_Lib.mk_wordT 2))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'StatusRegister",
   close
     (var("x",@{typ StatusRegister}),
      let'
        (var_w("statusregister'rst",11),
         call
           ("StatusRegister.statusregister'rst",(Word_Lib.mk_wordT 11),
            var("x",@{typ StatusRegister}),@{theory}),
         cc[ex(var_w("statusregister'rst",11),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("StatusRegister.CU1",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.CU0",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",11),ln 2,ln 2,w1),
            mop(Cast w1,
                call("StatusRegister.FR",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.RE",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",11),ln 4,ln 3,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("StatusRegister.BEV",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            ex(var_w("statusregister'rst",11),ln 10,ln 5,(Word_Lib.mk_wordT 6)),
            call("StatusRegister.IM",w8,var("x",@{typ StatusRegister}),@{theory}),
            mop(Cast w1,
                call("StatusRegister.KX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.SX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.UX",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            call
              ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),var("x",@{typ StatusRegister}),@{theory}),
            mop(Cast w1,
                call("StatusRegister.ERL",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.EXL",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory})),
            mop(Cast w1,
                call("StatusRegister.IE",HOLogic.boolT,var("x",@{typ StatusRegister}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'StatusRegister",
   close
     (tp[var_a w32,var("x",@{typ StatusRegister})],
      call("reg'StatusRegister",w32,var("x",@{typ StatusRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'StatusRegister",
   close
     (tp[var_a @{typ StatusRegister},var_w("x",32)],
      call("rec'StatusRegister",@{typ StatusRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister",
   close
     (var_w("x",32),
      record
        ("ConfigRegister",
         [ex(var_w("x",32),ln 12,ln 10,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 14,ln 13,(Word_Lib.mk_wordT 2)),bop(Bit,var_w("x",32),ln 15),
          ex(var_w("x",32),ln 2,ln 0,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 31),
          ex(var_w("x",32),ln 9,ln 7,(Word_Lib.mk_wordT 3)),
          cc[ex(var_w("x",32),ln 6,ln 3,w4),ex(var_w("x",32),ln 30,ln 16,(Word_Lib.mk_wordT 15))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister",
   close
     (var("x",@{typ ConfigRegister}),
      let'
        (var_w("configregister'rst",19),
         call
           ("ConfigRegister.configregister'rst",(Word_Lib.mk_wordT 19),
            var("x",@{typ ConfigRegister}),@{theory}),
         cc[mop(Cast w1,
                call("ConfigRegister.M",HOLogic.boolT,var("x",@{typ ConfigRegister}),@{theory})),
            ex(var_w("configregister'rst",19),ln 14,ln 0,(Word_Lib.mk_wordT 15)),
            mop(Cast w1,
                call("ConfigRegister.BE",HOLogic.boolT,var("x",@{typ ConfigRegister}),@{theory})),
            call("ConfigRegister.AT",(Word_Lib.mk_wordT 2),var("x",@{typ ConfigRegister}),@{theory}),
            call("ConfigRegister.AR",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory}),
            call("ConfigRegister.MT",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory}),
            ex(var_w("configregister'rst",19),ln 18,ln 15,w4),
            call("ConfigRegister.K0",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister})],
      call("reg'ConfigRegister",w32,var("x",@{typ ConfigRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister",
   close
     (tp[var_a @{typ ConfigRegister},var_w("x",32)],
      call("rec'ConfigRegister",@{typ ConfigRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister1",
   close
     (var_w("x",32),
      record
        ("ConfigRegister1",
         [bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 2),
          ex(var_w("x",32),ln 9,ln 7,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 12,ln 10,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 15,ln 13,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 0),ex(var_w("x",32),ln 18,ln 16,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 21,ln 19,(Word_Lib.mk_wordT 3)),
          ex(var_w("x",32),ln 24,ln 22,(Word_Lib.mk_wordT 3)),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 5),ex(var_w("x",32),ln 30,ln 25,(Word_Lib.mk_wordT 6)),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 3)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister1",
   close
     (var("x",@{typ ConfigRegister1}),
      cc[mop(Cast w1,
             call("ConfigRegister1.M",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         call
           ("ConfigRegister1.MMUSize",(Word_Lib.mk_wordT 6),var("x",@{typ ConfigRegister1}),
            @{theory}),
         call("ConfigRegister1.IS",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.IL",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.IA",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DS",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DL",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         call("ConfigRegister1.DA",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister1}),@{theory}),
         mop(Cast w1,
             call("ConfigRegister1.C2",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.MD",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.PC",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.WR",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.CA",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.EP",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory})),
         mop(Cast w1,
             call("ConfigRegister1.FP",HOLogic.boolT,var("x",@{typ ConfigRegister1}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister1",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister1})],
      call("reg'ConfigRegister1",w32,var("x",@{typ ConfigRegister1}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister1",
   close
     (tp[var_a @{typ ConfigRegister1},var_w("x",32)],
      call("rec'ConfigRegister1",@{typ ConfigRegister1},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister2",
   close
     (var_w("x",32),
      record
        ("ConfigRegister2",
         [bop(Bit,var_w("x",32),ln 31),ex(var_w("x",32),ln 3,ln 0,w4),
          ex(var_w("x",32),ln 7,ln 4,w4),ex(var_w("x",32),ln 11,ln 8,w4),
          ex(var_w("x",32),ln 15,ln 12,w4),ex(var_w("x",32),ln 19,ln 16,w4),
          ex(var_w("x",32),ln 23,ln 20,w4),ex(var_w("x",32),ln 27,ln 24,w4),
          ex(var_w("x",32),ln 30,ln 28,(Word_Lib.mk_wordT 3))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister2",
   close
     (var("x",@{typ ConfigRegister2}),
      cc[mop(Cast w1,
             call("ConfigRegister2.M",HOLogic.boolT,var("x",@{typ ConfigRegister2}),@{theory})),
         call("ConfigRegister2.TU",(Word_Lib.mk_wordT 3),var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TS",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TL",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.TA",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SU",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SS",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SL",w4,var("x",@{typ ConfigRegister2}),@{theory}),
         call("ConfigRegister2.SA",w4,var("x",@{typ ConfigRegister2}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister2",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister2})],
      call("reg'ConfigRegister2",w32,var("x",@{typ ConfigRegister2}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister2",
   close
     (tp[var_a @{typ ConfigRegister2},var_w("x",32)],
      call("rec'ConfigRegister2",@{typ ConfigRegister2},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister3",
   close
     (var_w("x",32),
      record
        ("ConfigRegister3",
         [bop(Bit,var_w("x",32),ln 10),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 4),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 6),
          bop(Bit,var_w("x",32),ln 5),
          cc[ex(var_w("x",32),ln 3,ln 3,w1),ex(var_w("x",32),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 12,ln 11,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 30,ln 14,(Word_Lib.mk_wordT 17))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister3",
   close
     (var("x",@{typ ConfigRegister3}),
      let'
        (var_w("configregister3'rst",22),
         call
           ("ConfigRegister3.configregister3'rst",(Word_Lib.mk_wordT 22),
            var("x",@{typ ConfigRegister3}),@{theory}),
         cc[mop(Cast w1,
                call("ConfigRegister3.M",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 16,ln 0,(Word_Lib.mk_wordT 17)),
            mop(Cast w1,
                call("ConfigRegister3.ULRI",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 18,ln 17,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("ConfigRegister3.DSPP",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 20,ln 19,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,
                call("ConfigRegister3.LPA",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.VEIC",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.VInt",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.SP",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            ex(var_w("configregister3'rst",22),ln 21,ln 21,w1),
            mop(Cast w1,
                call("ConfigRegister3.MT",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.SM",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory})),
            mop(Cast w1,
                call("ConfigRegister3.TL",HOLogic.boolT,var("x",@{typ ConfigRegister3}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister3",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister3})],
      call("reg'ConfigRegister3",w32,var("x",@{typ ConfigRegister3}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister3",
   close
     (tp[var_a @{typ ConfigRegister3},var_w("x",32)],
      call("rec'ConfigRegister3",@{typ ConfigRegister3},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'ConfigRegister6",
   close
     (var_w("x",32),
      record
        ("ConfigRegister6",
         [bop(Bit,var_w("x",32),ln 2),ex(var_w("x",32),ln 31,ln 16,w16),
          cc[ex(var_w("x",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 15,ln 3,(Word_Lib.mk_wordT 13))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'ConfigRegister6",
   close
     (var("x",@{typ ConfigRegister6}),
      let'
        (var_w("configregister6'rst",15),
         call
           ("ConfigRegister6.configregister6'rst",(Word_Lib.mk_wordT 15),
            var("x",@{typ ConfigRegister6}),@{theory}),
         cc[call("ConfigRegister6.TLBSize",w16,var("x",@{typ ConfigRegister6}),@{theory}),
            ex(var_w("configregister6'rst",15),ln 12,ln 0,(Word_Lib.mk_wordT 13)),
            mop(Cast w1,
                call("ConfigRegister6.LTLB",HOLogic.boolT,var("x",@{typ ConfigRegister6}),@{theory})),
            ex(var_w("configregister6'rst",15),ln 14,ln 13,(Word_Lib.mk_wordT 2))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'ConfigRegister6",
   close
     (tp[var_a w32,var("x",@{typ ConfigRegister6})],
      call("reg'ConfigRegister6",w32,var("x",@{typ ConfigRegister6}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'ConfigRegister6",
   close
     (tp[var_a @{typ ConfigRegister6},var_w("x",32)],
      call("rec'ConfigRegister6",@{typ ConfigRegister6},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'CauseRegister",
   close
     (var_w("x",32),
      record
        ("CauseRegister",
         [bop(Bit,var_w("x",32),ln 31),ex(var_w("x",32),ln 29,ln 28,(Word_Lib.mk_wordT 2)),
          ex(var_w("x",32),ln 6,ln 2,(Word_Lib.mk_wordT 5)),ex(var_w("x",32),ln 15,ln 8,w8),
          bop(Bit,var_w("x",32),ln 30),
          cc[ex(var_w("x",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 7,ln 7,w1),
             ex(var_w("x",32),ln 27,ln 16,(Word_Lib.mk_wordT 12))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'CauseRegister",
   close
     (var("x",@{typ CauseRegister}),
      let'
        (var_w("causeregister'rst",15),
         call
           ("CauseRegister.causeregister'rst",(Word_Lib.mk_wordT 15),var("x",@{typ CauseRegister}),
            @{theory}),
         cc[mop(Cast w1,
                call("CauseRegister.BD",HOLogic.boolT,var("x",@{typ CauseRegister}),@{theory})),
            mop(Cast w1,
                call("CauseRegister.TI",HOLogic.boolT,var("x",@{typ CauseRegister}),@{theory})),
            call("CauseRegister.CE",(Word_Lib.mk_wordT 2),var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 11,ln 0,(Word_Lib.mk_wordT 12)),
            call("CauseRegister.IP",w8,var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 12,ln 12,w1),
            call
              ("CauseRegister.ExcCode",(Word_Lib.mk_wordT 5),var("x",@{typ CauseRegister}),@{theory}),
            ex(var_w("causeregister'rst",15),ln 14,ln 13,(Word_Lib.mk_wordT 2))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'CauseRegister",
   close
     (tp[var_a w32,var("x",@{typ CauseRegister})],
      call("reg'CauseRegister",w32,var("x",@{typ CauseRegister}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'CauseRegister",
   close
     (tp[var_a @{typ CauseRegister},var_w("x",32)],
      call("rec'CauseRegister",@{typ CauseRegister},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'Context",
   close
     (var_w("x",64),
      record
        ("Context",
         [ex(var_w("x",64),ln 22,ln 4,(Word_Lib.mk_wordT 19)),
          ex(var_w("x",64),ln 63,ln 23,(Word_Lib.mk_wordT 41)),ex(var_w("x",64),ln 3,ln 0,w4)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'Context",
   close
     (var("x",@{typ Context}),
      cc[call("Context.PTEBase",(Word_Lib.mk_wordT 41),var("x",@{typ Context}),@{theory}),
         call("Context.BadVPN2",(Word_Lib.mk_wordT 19),var("x",@{typ Context}),@{theory}),
         call("Context.context'rst",w4,var("x",@{typ Context}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'Context",
   close
     (tp[var_a w64,var("x",@{typ Context})],
      call("reg'Context",w64,var("x",@{typ Context}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'Context",
   close
     (tp[var_a @{typ Context},var_w("x",64)],
      call("rec'Context",@{typ Context},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'XContext",
   close
     (var_w("x",64),
      record
        ("XContext",
         [ex(var_w("x",64),ln 30,ln 4,(Word_Lib.mk_wordT 27)),
          ex(var_w("x",64),ln 63,ln 33,(Word_Lib.mk_wordT 31)),
          ex(var_w("x",64),ln 32,ln 31,(Word_Lib.mk_wordT 2)),ex(var_w("x",64),ln 3,ln 0,w4)],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'XContext",
   close
     (var("x",@{typ XContext}),
      cc[call("XContext.PTEBase",(Word_Lib.mk_wordT 31),var("x",@{typ XContext}),@{theory}),
         call("XContext.R",(Word_Lib.mk_wordT 2),var("x",@{typ XContext}),@{theory}),
         call("XContext.BadVPN2",(Word_Lib.mk_wordT 27),var("x",@{typ XContext}),@{theory}),
         call("XContext.xcontext'rst",w4,var("x",@{typ XContext}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'XContext",
   close
     (tp[var_a w64,var("x",@{typ XContext})],
      call("reg'XContext",w64,var("x",@{typ XContext}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'XContext",
   close
     (tp[var_a @{typ XContext},var_w("x",64)],
      call("rec'XContext",@{typ XContext},var_w("x",64),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HWREna",
   close
     (var_w("x",32),
      record
        ("HWREna",
         [bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 0),
          bop(Bit,var_w("x",32),ln 29),
          cc[ex(var_w("x",32),ln 1,ln 1,w1),ex(var_w("x",32),ln 28,ln 4,(Word_Lib.mk_wordT 25)),
             ex(var_w("x",32),ln 31,ln 30,(Word_Lib.mk_wordT 2))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HWREna",
   close
     (var("x",@{typ HWREna}),
      let'
        (var_w("hwrena'rst",28),
         call("HWREna.hwrena'rst",(Word_Lib.mk_wordT 28),var("x",@{typ HWREna}),@{theory}),
         cc[ex(var_w("hwrena'rst",28),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("HWREna.UL",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            ex(var_w("hwrena'rst",28),ln 26,ln 2,(Word_Lib.mk_wordT 25)),
            mop(Cast w1,call("HWREna.CCRes",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            mop(Cast w1,call("HWREna.CC",HOLogic.boolT,var("x",@{typ HWREna}),@{theory})),
            ex(var_w("hwrena'rst",28),ln 27,ln 27,w1),
            mop(Cast w1,call("HWREna.CPUNum",HOLogic.boolT,var("x",@{typ HWREna}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HWREna",
   close
     (tp[var_a w32,var("x",@{typ HWREna})],call("reg'HWREna",w32,var("x",@{typ HWREna}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HWREna",
   close
     (tp[var_a @{typ HWREna},var_w("x",32)],call("rec'HWREna",@{typ HWREna},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ConditionalBranch",
   close
     (tp[var_b"b",var_w("offset",16)],
      close
        (var("state",qTy),
         rupd
           ("state.BranchTo",
            tp[var("state",qTy),
               mop(Some,
                   ite(var_b"b",
                       tp[lf,
                          bop(Add,bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(4,64)),
                              bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))],
                       tp[lt,bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(4,64))]))],
            @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ConditionalBranchLikely",
   close
     (tp[var_b"b",var_w("offset",16)],
      close
        (var("state",qTy),
         itb([(var_b"b",
               rupd
                 ("state.BranchTo",
                  tp[var("state",qTy),
                     mop(Some,
                         tp[lf,
                            bop(Add,
                                bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(4,64)),
                                bop(Lsl,mop(SE w64,var_w("offset",16)),ln 2))])],@{theory})),
              (mop(IsSome,
                   call
                     ("state.BranchDelay",@{typ "(64 word option) option"},var("state",qTy),
                      @{theory})),
               rupd
                 ("state.BranchTo",
                  tp[var("state",qTy),
                     mop(Some,
                         tp[lt,bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64))])],
                  @{theory}))],
             rupd
               ("state.PC",
                tp[var("state",qTy),
                   bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(4,64))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("NotWordValue",
   close
     (var_w("value",64),
      let'
        (var_w("top",33),ex(var_w("value",64),ln 63,ln 31,(Word_Lib.mk_wordT 33)),
         bop(And,mop(Not,eq(var_w("top",33),lw(0,33))),
             mop(Not,eq(var_w("top",33),lw(8589934591,33)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ExceptionCode",
   close
     (var("ExceptionType",@{typ ExceptionType}),
      close
        (var("state",qTy),
         rupd
           ("state.CP0",
            tp[var("state",qTy),
               rupd
                 ("CP0.Cause",
                  tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                     rupd
                       ("CauseRegister.ExcCode",
                        tp[call
                             ("CP0.Cause",@{typ CauseRegister},
                              call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                           cs(var("ExceptionType",@{typ ExceptionType}),
                              [(lc("Int","ExceptionType",@{theory}),lw(0,5)),
                               (lc("Mod","ExceptionType",@{theory}),lw(1,5)),
                               (lc("TLBL","ExceptionType",@{theory}),lw(2,5)),
                               (lc("TLBS","ExceptionType",@{theory}),lw(3,5)),
                               (lc("AdEL","ExceptionType",@{theory}),lw(4,5)),
                               (lc("AdES","ExceptionType",@{theory}),lw(5,5)),
                               (lc("Sys","ExceptionType",@{theory}),lw(8,5)),
                               (lc("Bp","ExceptionType",@{theory}),lw(9,5)),
                               (lc("ResI","ExceptionType",@{theory}),lw(10,5)),
                               (lc("CpU","ExceptionType",@{theory}),lw(11,5)),
                               (lc("Ov","ExceptionType",@{theory}),lw(12,5)),
                               (lc("Tr","ExceptionType",@{theory}),lw(13,5)),
                               (lc("XTLBRefillL","ExceptionType",@{theory}),lw(2,5)),
                               (lc("XTLBRefillS","ExceptionType",@{theory}),lw(3,5))],@{context})],
                        @{theory})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalException",
   close
     (var("ExceptionType",@{typ ExceptionType}),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            ite(mop(Not,
                    call
                      ("StatusRegister.EXL",HOLogic.boolT,
                       call
                         ("CP0.Status",@{typ StatusRegister},
                          call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                       @{theory})),
                cs(call
                     ("state.BranchDelay",@{typ "(64 word option) option"},var("state",qTy),
                      @{theory}),
                   [(mop(Some,mop(Some,var_a w64)),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CP0",
                           tp[var("state",qTy),
                              rupd
                                ("CP0.EPC",
                                 tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                    bop(Sub,call("state.PC",w64,var("state",qTy),@{theory}),lw(4,64))],
                                 @{theory})],@{theory}),
                        rupd
                          ("state.CP0",
                           tp[var("s",qTy),
                              rupd
                                ("CP0.Cause",
                                 tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                    rupd
                                      ("CauseRegister.BD",
                                       tp[call
                                            ("CP0.Cause",@{typ CauseRegister},
                                             call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                             @{theory}),lt],@{theory})],@{theory})],@{theory}))),
                    (var_a(@{typ "(64 word option) option"}),
                     let'
                       (var("s",qTy),
                        rupd
                          ("state.CP0",
                           tp[var("state",qTy),
                              rupd
                                ("CP0.EPC",
                                 tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                    call("state.PC",w64,var("state",qTy),@{theory})],@{theory})],
                           @{theory}),
                        rupd
                          ("state.CP0",
                           tp[var("s",qTy),
                              rupd
                                ("CP0.Cause",
                                 tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                    rupd
                                      ("CauseRegister.BD",
                                       tp[call
                                            ("CP0.Cause",@{typ CauseRegister},
                                             call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                             @{theory}),lf],@{theory})],@{theory})],@{theory})))],
                   @{context}),var("state",qTy)),
            let'
              (var("s0",qTy),
               apply
                 (call
                    ("ExceptionCode",@{typ "state \<Rightarrow> state"},
                     var("ExceptionType",@{typ ExceptionType}),@{theory}),var("s",qTy)),
               let'
                 (var("s0",qTy),
                  rupd
                    ("state.CP0",
                     tp[var("s0",qTy),
                        rupd
                          ("CP0.Status",
                           tp[call("state.CP0",@{typ CP0},var("s0",qTy),@{theory}),
                              rupd
                                ("StatusRegister.EXL",
                                 tp[call
                                      ("CP0.Status",@{typ StatusRegister},
                                       call("state.CP0",@{typ CP0},var("s0",qTy),@{theory}),
                                       @{theory}),lt],@{theory})],@{theory})],@{theory}),
                  let'
                    (var_w("v0",64),
                     ite(call
                           ("StatusRegister.BEV",HOLogic.boolT,
                            call
                              ("CP0.Status",@{typ StatusRegister},
                               call("state.CP0",@{typ CP0},var("s0",qTy),@{theory}),@{theory}),
                            @{theory}),lw(18446744072631616000,64),lw(18446744071562067968,64)),
                     rupd
                       ("state.exceptionSignalled",
                        tp[rupd
                             ("state.PC",
                              tp[rupd
                                   ("state.BranchDelay",
                                    tp[var("s0",qTy),lo(@{typ "64 word option"})],@{theory}),
                                 bop(Sub,
                                     cc[ex(var_w("v0",64),ln 63,ln 30,(Word_Lib.mk_wordT 34)),
                                        bop(Add,
                                            ex(var_w("v0",64),ln 29,ln 0,(Word_Lib.mk_wordT 30)),
                                            ite(bop(And,
                                                    bop(Or,
                                                        eq(var("ExceptionType",@{typ ExceptionType}),
                                                           lc("XTLBRefillL","ExceptionType",
                                                              @{theory})),
                                                        eq(var("ExceptionType",@{typ ExceptionType}),
                                                           lc("XTLBRefillS","ExceptionType",
                                                              @{theory}))),
                                                    mop(Not,
                                                        call
                                                          ("StatusRegister.EXL",HOLogic.boolT,
                                                           call
                                                             ("CP0.Status",@{typ StatusRegister},
                                                              call
                                                                ("state.CP0",@{typ CP0},
                                                                 var("s",qTy),@{theory}),@{theory}),
                                                           @{theory}))),lw(128,30),lw(384,30)))],
                                     lw(4,64))],@{theory}),lt],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SignalCP1UnusableException",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("CpU","ExceptionType",@{theory}),@{theory}),
         rupd
           ("state.CP0",
            tp[var("state",qTy),
               rupd
                 ("CP0.Cause",
                  tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                     rupd
                       ("CauseRegister.CE",
                        tp[call
                             ("CP0.Cause",@{typ CauseRegister},
                              call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                           lw(1,2)],@{theory})],@{theory})],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("UserMode",
   close
     (var("state",qTy),
      bop(And,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
             lw(2,2)),
          mop(Not,
              bop(Or,
                  call
                    ("StatusRegister.EXL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                  call
                    ("StatusRegister.ERL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("SupervisorMode",
   close
     (var("state",qTy),
      bop(And,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
             lw(1,2)),
          mop(Not,
              bop(Or,
                  call
                    ("StatusRegister.EXL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                  call
                    ("StatusRegister.ERL",HOLogic.boolT,
                     call
                       ("CP0.Status",@{typ StatusRegister},
                        call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("KernelMode",
   close
     (var("state",qTy),
      bop(Or,
          eq(call
               ("StatusRegister.KSU",(Word_Lib.mk_wordT 2),
                call
                  ("CP0.Status",@{typ StatusRegister},
                   call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
             lw(0,2)),
          bop(Or,
              call
                ("StatusRegister.EXL",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
              call
                ("StatusRegister.ERL",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("GPR",
   close
     (var_w("n",5),
      close
        (var("state",qTy),
         ite(eq(var_w("n",5),lw(0,5)),lw(0,64),
             apply
               (call("state.gpr",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),@{theory}),
                var_w("n",5))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'GPR",
   close
     (tp[var_w("value",64),var_w("n",5)],
      close
        (var("state",qTy),
         ite(mop(Not,eq(var_w("n",5),lw(0,5))),
             rupd
               ("state.gpr",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.gpr",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("n",5),var_w("value",64))],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("HI",
   close
     (var("state",qTy),
      cs(call("state.hi",@{typ "64 word option"},var("state",qTy),@{theory}),
         [(mop(Some,var_w("v",64)),tp[var_w("v",64),var("state",qTy)]),
          (lo w64,
           apply
             (call
                ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                 call("exception.UNPREDICTABLE",@{typ exception},ls"HI",@{theory}),@{theory}),
              var("state",qTy)))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'HI",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         rupd("state.hi",tp[var("state",qTy),mop(Some,var_w("value",64))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LO",
   close
     (var("state",qTy),
      cs(call("state.lo",@{typ "64 word option"},var("state",qTy),@{theory}),
         [(mop(Some,var_w("v",64)),tp[var_w("v",64),var("state",qTy)]),
          (lo w64,
           apply
             (call
                ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                 call("exception.UNPREDICTABLE",@{typ exception},ls"LO",@{theory}),@{theory}),
              var("state",qTy)))],@{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'LO",
   close
     (var_w("value",64),
      close
        (var("state",qTy),
         rupd("state.lo",tp[var("state",qTy),mop(Some,var_w("value",64))],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("CPR",
   close
     (tp[var_n"n",var_w("reg",5),var_w("sel",3)],
      close
        (var("state",qTy),
         itb([(bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(8,5)),eq(var_w("sel",3),lw(0,3)))),
               call
                 ("CP0.BadVAddr",w64,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                  @{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(9,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("CP0.Count",w32,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(11,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("CP0.Compare",w32,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(12,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("reg'StatusRegister",w32,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(13,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("reg'CauseRegister",w32,
                      call
                        ("CP0.Cause",@{typ CauseRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(14,5)),eq(var_w("sel",3),lw(0,3)))),
               call("CP0.EPC",w64,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(15,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("CP0.PRId",w32,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("reg'ConfigRegister",w32,
                      call
                        ("CP0.Config",@{typ ConfigRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(17,5)),eq(var_w("sel",3),lw(0,3)))),
               call
                 ("CP0.LLAddr",w64,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(23,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("CP0.Debug",w32,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(26,5)),eq(var_w("sel",3),lw(0,3)))),
               mop(Cast w64,
                   call
                     ("CP0.ErrCtl",w32,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                      @{theory}))),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(30,5)),eq(var_w("sel",3),lw(0,3)))),
               call
                 ("CP0.ErrorEPC",w64,call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                  @{theory}))],lx w64))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("write'CPR",
   close
     (tp[var_w("value",64),var_n"n",var_w("reg",5),var_w("sel",3)],
      close
        (var("state",qTy),
         itb([(bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(9,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Count",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(11,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Compare",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(12,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Status",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           call
                             ("write'reg'StatusRegister",@{typ StatusRegister},
                              tp[call
                                   ("CP0.Status",@{typ StatusRegister},
                                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                    @{theory}),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                        @{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(13,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Cause",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           call
                             ("write'reg'CauseRegister",@{typ CauseRegister},
                              tp[call
                                   ("CP0.Cause",@{typ CauseRegister},
                                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                    @{theory}),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                        @{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(14,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.EPC",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),var_w("value",64)],
                        @{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(16,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Config",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           call
                             ("write'reg'ConfigRegister",@{typ ConfigRegister},
                              tp[call
                                   ("CP0.Config",@{typ ConfigRegister},
                                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                    @{theory}),ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],
                        @{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(23,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.Debug",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(26,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.ErrCtl",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                           ex(var_w("value",64),ln 31,ln 0,w32)],@{theory})],@{theory})),
              (bop(And,eq(var_n"n",ln 0),
                   bop(And,eq(var_w("reg",5),lw(30,5)),eq(var_w("sel",3),lw(0,3)))),
               rupd
                 ("state.CP0",
                  tp[var("state",qTy),
                     rupd
                       ("CP0.ErrorEPC",
                        tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),var_w("value",64)],
                        @{theory})],@{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("BYTE",lw(0,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("HALFWORD",lw(1,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("WORD",lw(3,3))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("DOUBLEWORD",lw(7,3))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndianMem",
   close
     (var("state",qTy),
      call
        ("ConfigRegister.BE",HOLogic.boolT,
         call
           ("CP0.Config",@{typ ConfigRegister},
            call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReverseEndian",
   close
     (var("state",qTy),
      mop(Cast w1,
          bop(And,
              call
                ("StatusRegister.RE",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
              apply(const("UserMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("BigEndianCPU",
   close
     (var("state",qTy),
      bop(BXor,
          mop(Cast w1,
              apply
                (const("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
          apply
            (const("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("AddressTranslation",
   close(tp[var_w("vAddr",64),var("LorS",@{typ LorS})],tp[var_w("vAddr",64),lw(2,3)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Aligned",
   close
     (tp[var_w("vAddr",64),var_w("MemType",3)],
      eq(bop(BAnd,mop(Cast (Word_Lib.mk_wordT 3),var_w("vAddr",64)),var_w("MemType",3)),lw(0,3))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("AdjustEndian",
   close
     (tp[var_w("MemType",3),var_w("pAddr",64)],
      close
        (var("state",qTy),
         itb([(eq(var_w("MemType",3),lw(0,3)),
               tp[bop(BXor,var_w("pAddr",64),
                      mop(Cast w64,
                          rep(apply
                                (const
                                   ("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                 var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3)))),var("state",qTy)]),
              (eq(var_w("MemType",3),lw(1,3)),
               tp[bop(BXor,var_w("pAddr",64),
                      mop(Cast w64,
                          cc[rep(apply
                                   (const
                                      ("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2)),lw(0,1)])),
                  var("state",qTy)]),
              (eq(var_w("MemType",3),lw(3,3)),
               tp[bop(BXor,var_w("pAddr",64),
                      mop(Cast w64,
                          cc[apply
                               (const("ReverseEndian",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("state",qTy)),lw(0,2)])),var("state",qTy)]),
              (eq(var_w("MemType",3),lw(7,3)),tp[var_w("pAddr",64),var("state",qTy)])],
             apply
               (call
                  ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"bad access length",@{theory}),
                   @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("ReadData",
   close
     (var_w("a",64),
      close
        (var("state",qTy),
         let'
           (var_w("a",64),bop(BAnd,var_w("a",64),mop(BNot,lw(7,64))),
            ite(apply
                  (const("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),
                   var("state",qTy)),
                cc[apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),var_w("a",64)),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(1,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(2,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(3,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(4,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(5,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(6,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(7,64)))],
                cc[apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(7,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(6,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(5,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(4,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(3,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(2,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),bop(Add,var_w("a",64),lw(1,64))),
                   apply
                     (call
                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},var("state",qTy),
                         @{theory}),var_w("a",64))])))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("LoadMemory",
   close
     (tp[var_w("MemType",3),var_w("AccessLength",3),var_b"needAlign",var_w("vAddr",64),
         var("link",@{typ "bool option"})],
      close
        (var("state",qTy),
         ite(bop(And,var_b"needAlign",
                 mop(Not,
                     call
                       ("Aligned",HOLogic.boolT,tp[var_w("vAddr",64),var_w("MemType",3)],@{theory}))),
             tp[lx w64,
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("AdEL","ExceptionType",@{theory}),@{theory}),
                   rupd
                     ("state.CP0",
                      tp[var("state",qTy),
                         rupd
                           ("CP0.BadVAddr",
                            tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                               var_w("vAddr",64)],@{theory})],@{theory}))],
             let'
               (tp[var_w("pAddr",64),var_a (Word_Lib.mk_wordT 3)],
                call
                  ("AddressTranslation",@{typ "64 word \<times> 3 word"},
                   tp[var_w("vAddr",64),lc("LOAD","LorS",@{theory})],@{theory}),
                ite(call("state.exceptionSignalled",HOLogic.boolT,var("state",qTy),@{theory}),
                    tp[lx w64,var("state",qTy)],
                    let'
                      (tp[var_w("v",64),var("s",qTy)],
                       apply
                         (call
                            ("AdjustEndian",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             tp[var_w("MemType",3),var_w("pAddr",64)],@{theory}),var("state",qTy)),
                       let'
                         (var("s0",qTy),
                          cs(var("link",@{typ "bool option"}),
                             [(mop(Some,lt),
                               let'
                                 (var("s",qTy),
                                  rupd("state.LLbit",tp[var("s",qTy),mop(Some,lt)],@{theory}),
                                  rupd
                                    ("state.CP0",
                                     tp[var("s",qTy),
                                        rupd
                                          ("CP0.LLAddr",
                                           tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                              var_w("v",64)],@{theory})],@{theory}))),
                              (mop(Some,lf),
                               rupd("state.LLbit",tp[var("s",qTy),lo HOLogic.boolT],@{theory})),
                              (lo HOLogic.boolT,var("s",qTy))],@{context}),
                          tp[apply
                               (call
                                  ("ReadData",@{typ "state \<Rightarrow> 64 word"},var_w("v",64),
                                   @{theory}),var("s0",qTy)),var("s0",qTy)]))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadByte",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),
                        const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lf,var_w("v",64),mop(Some,lf)],
                     @{theory}),var("state",qTy)),
               ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          rep(apply
                                (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                 var("s",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
                      let'
                        (var_w("membyte",8),
                         ex(var_w("v0",64),
                            bop(Add,ln 7,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w8),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("membyte",8)),
                                      mop(SE w64,var_w("membyte",8))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadHalf",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),
                        const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),
                        mop(Some,lf)],@{theory}),var("state",qTy)),
               ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          cc[rep(apply
                                   (const
                                      ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("s",qTy)),ln 2,(Word_Lib.mk_wordT 2)),lw(0,1)]),
                      let'
                        (var_w("memhalf",16),
                         ex(var_w("v0",64),
                            bop(Add,ln 15,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w16),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("memhalf",16)),
                                      mop(SE w64,var_w("memhalf",16))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadWord",
   close
     (tp[var_b"link",var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"unsigned"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (tp[var_w("v0",64),var("s",qTy)],
               apply
                 (call
                    ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                     tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                        const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),
                        mop(Some,var_b"link")],@{theory}),var("state",qTy)),
               ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                   let'
                     (var_w("v1",3),
                      bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                          cc[apply
                               (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("s",qTy)),lw(0,2)]),
                      let'
                        (var_w("memword",32),
                         ex(var_w("v0",64),
                            bop(Add,ln 31,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                            bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w32),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[ite(var_b"unsigned",mop(Cast w64,var_w("memword",32)),
                                      mop(SE w64,var_w("memword",32))),var_w("rt",5)],@{theory}),
                            var("s",qTy)))),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("loadDoubleword",
   close
     (tp[var_b"link",var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (call
                 ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                  tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                     const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                     bop(Add,mop(SE w64,var_w("offset",16)),
                         apply
                           (call
                              ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                            var("state",qTy))),mop(Some,var_b"link")],@{theory}),var("state",qTy)),
            ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy)),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Fetch",
   close
     (var("state",qTy),
      let'
        (var_w("v",64),call("state.PC",w64,var("state",qTy),@{theory}),
         let'
           (tp[var_w("v0",64),var("s",qTy)],
            apply
              (call
                 ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                  tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                     const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),lo HOLogic.boolT],
                  @{theory}),var("state",qTy)),
            ite(call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory}),
                tp[lo w32,var("s",qTy)],
                let'
                  (var_w("v1",3),
                   bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                       cc[apply
                            (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                             var("s",qTy)),lw(0,2)]),
                   tp[mop(Some,
                          ex(var_w("v0",64),
                             bop(Add,ln 31,bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                             bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w32)),var("s",qTy)]))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("WriteData",
   close
     (tp[var_w("a",64),var_w("MemElem",64),var_n"l",var_n"h"],
      close
        (var("state",qTy),
         let'
           (var_w("a",64),bop(BAnd,var_w("a",64),mop(BNot,lw(7,64))),
            ite(apply
                  (const("BigEndianMem",@{typ "state \<Rightarrow> bool"},@{theory}),
                   var("state",qTy)),
                let'
                  (var("s",qTy),
                   ite(bop(And,bop(Le,var_n"l",ln 7),bop(Le,ln 7,var_n"h")),
                       rupd
                         ("state.MEM",
                          tp[var("state",qTy),
                             fupd
                               (call
                                  ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                   var("state",qTy),@{theory}),var_w("a",64),
                                ex(var_w("MemElem",64),ln 63,ln 56,w8))],@{theory}),var("state",qTy)),
                   let'
                     (var("s",qTy),
                      ite(bop(And,bop(Le,var_n"l",ln 6),bop(Le,ln 6,var_n"h")),
                          rupd
                            ("state.MEM",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                      var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(1,64)),
                                   ex(var_w("MemElem",64),ln 55,ln 48,w8))],@{theory}),var("s",qTy)),
                      let'
                        (var("s",qTy),
                         ite(bop(And,bop(Le,var_n"l",ln 5),bop(Le,ln 5,var_n"h")),
                             rupd
                               ("state.MEM",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                         var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(2,64)),
                                      ex(var_w("MemElem",64),ln 47,ln 40,w8))],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            ite(bop(And,bop(Le,var_n"l",ln 4),bop(Le,ln 4,var_n"h")),
                                rupd
                                  ("state.MEM",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                            var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(3,64)),
                                         ex(var_w("MemElem",64),ln 39,ln 32,w8))],@{theory}),
                                var("s",qTy)),
                            let'
                              (var("s",qTy),
                               ite(bop(And,bop(Le,var_n"l",ln 3),bop(Le,ln 3,var_n"h")),
                                   rupd
                                     ("state.MEM",
                                      tp[var("s",qTy),
                                         fupd
                                           (call
                                              ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                               var("s",qTy),@{theory}),
                                            bop(Add,var_w("a",64),lw(4,64)),
                                            ex(var_w("MemElem",64),ln 31,ln 24,w8))],@{theory}),
                                   var("s",qTy)),
                               let'
                                 (var("s",qTy),
                                  ite(bop(And,bop(Le,var_n"l",ln 2),bop(Le,ln 2,var_n"h")),
                                      rupd
                                        ("state.MEM",
                                         tp[var("s",qTy),
                                            fupd
                                              (call
                                                 ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                                  var("s",qTy),@{theory}),
                                               bop(Add,var_w("a",64),lw(5,64)),
                                               ex(var_w("MemElem",64),ln 23,ln 16,w8))],@{theory}),
                                      var("s",qTy)),
                                  let'
                                    (var("s",qTy),
                                     ite(bop(And,bop(Le,var_n"l",ln 1),bop(Le,ln 1,var_n"h")),
                                         rupd
                                           ("state.MEM",
                                            tp[var("s",qTy),
                                               fupd
                                                 (call
                                                    ("state.MEM",
                                                     @{typ "64 word \<Rightarrow> 8 word"},
                                                     var("s",qTy),@{theory}),
                                                  bop(Add,var_w("a",64),lw(6,64)),
                                                  ex(var_w("MemElem",64),ln 15,ln 8,w8))],@{theory}),
                                         var("s",qTy)),
                                     ite(eq(var_n"l",ln 0),
                                         rupd
                                           ("state.MEM",
                                            tp[var("s",qTy),
                                               fupd
                                                 (call
                                                    ("state.MEM",
                                                     @{typ "64 word \<Rightarrow> 8 word"},
                                                     var("s",qTy),@{theory}),
                                                  bop(Add,var_w("a",64),lw(7,64)),
                                                  ex(var_w("MemElem",64),ln 7,ln 0,w8))],@{theory}),
                                         var("s",qTy))))))))),
                let'
                  (var("s",qTy),
                   ite(bop(And,bop(Le,var_n"l",ln 7),bop(Le,ln 7,var_n"h")),
                       rupd
                         ("state.MEM",
                          tp[var("state",qTy),
                             fupd
                               (call
                                  ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                   var("state",qTy),@{theory}),var_w("a",64),
                                ex(var_w("MemElem",64),ln 7,ln 0,w8))],@{theory}),var("state",qTy)),
                   let'
                     (var("s",qTy),
                      ite(bop(And,bop(Le,var_n"l",ln 6),bop(Le,ln 6,var_n"h")),
                          rupd
                            ("state.MEM",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                      var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(1,64)),
                                   ex(var_w("MemElem",64),ln 15,ln 8,w8))],@{theory}),var("s",qTy)),
                      let'
                        (var("s",qTy),
                         ite(bop(And,bop(Le,var_n"l",ln 5),bop(Le,ln 5,var_n"h")),
                             rupd
                               ("state.MEM",
                                tp[var("s",qTy),
                                   fupd
                                     (call
                                        ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                         var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(2,64)),
                                      ex(var_w("MemElem",64),ln 23,ln 16,w8))],@{theory}),
                             var("s",qTy)),
                         let'
                           (var("s",qTy),
                            ite(bop(And,bop(Le,var_n"l",ln 4),bop(Le,ln 4,var_n"h")),
                                rupd
                                  ("state.MEM",
                                   tp[var("s",qTy),
                                      fupd
                                        (call
                                           ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                            var("s",qTy),@{theory}),bop(Add,var_w("a",64),lw(3,64)),
                                         ex(var_w("MemElem",64),ln 31,ln 24,w8))],@{theory}),
                                var("s",qTy)),
                            let'
                              (var("s",qTy),
                               ite(bop(And,bop(Le,var_n"l",ln 3),bop(Le,ln 3,var_n"h")),
                                   rupd
                                     ("state.MEM",
                                      tp[var("s",qTy),
                                         fupd
                                           (call
                                              ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                               var("s",qTy),@{theory}),
                                            bop(Add,var_w("a",64),lw(4,64)),
                                            ex(var_w("MemElem",64),ln 39,ln 32,w8))],@{theory}),
                                   var("s",qTy)),
                               let'
                                 (var("s",qTy),
                                  ite(bop(And,bop(Le,var_n"l",ln 2),bop(Le,ln 2,var_n"h")),
                                      rupd
                                        ("state.MEM",
                                         tp[var("s",qTy),
                                            fupd
                                              (call
                                                 ("state.MEM",@{typ "64 word \<Rightarrow> 8 word"},
                                                  var("s",qTy),@{theory}),
                                               bop(Add,var_w("a",64),lw(5,64)),
                                               ex(var_w("MemElem",64),ln 47,ln 40,w8))],@{theory}),
                                      var("s",qTy)),
                                  let'
                                    (var("s",qTy),
                                     ite(bop(And,bop(Le,var_n"l",ln 1),bop(Le,ln 1,var_n"h")),
                                         rupd
                                           ("state.MEM",
                                            tp[var("s",qTy),
                                               fupd
                                                 (call
                                                    ("state.MEM",
                                                     @{typ "64 word \<Rightarrow> 8 word"},
                                                     var("s",qTy),@{theory}),
                                                  bop(Add,var_w("a",64),lw(6,64)),
                                                  ex(var_w("MemElem",64),ln 55,ln 48,w8))],@{theory}),
                                         var("s",qTy)),
                                     ite(eq(var_n"l",ln 0),
                                         rupd
                                           ("state.MEM",
                                            tp[var("s",qTy),
                                               fupd
                                                 (call
                                                    ("state.MEM",
                                                     @{typ "64 word \<Rightarrow> 8 word"},
                                                     var("s",qTy),@{theory}),
                                                  bop(Add,var_w("a",64),lw(7,64)),
                                                  ex(var_w("MemElem",64),ln 63,ln 56,w8))],@{theory}),
                                         var("s",qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("StoreMemory",
   close
     (tp[var_w("MemType",3),var_w("AccessLength",3),var_b"needAlign",var_w("MemElem",64),
         var_w("vAddr",64),var_b"cond"],
      close
        (var("state",qTy),
         ite(bop(And,var_b"needAlign",
                 mop(Not,
                     call
                       ("Aligned",HOLogic.boolT,tp[var_w("vAddr",64),var_w("MemType",3)],@{theory}))),
             tp[lf,
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("AdES","ExceptionType",@{theory}),@{theory}),
                   rupd
                     ("state.CP0",
                      tp[var("state",qTy),
                         rupd
                           ("CP0.BadVAddr",
                            tp[call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                               var_w("vAddr",64)],@{theory})],@{theory}))],
             let'
               (tp[var_w("pAddr",64),var_a (Word_Lib.mk_wordT 3)],
                call
                  ("AddressTranslation",@{typ "64 word \<times> 3 word"},
                   tp[var_w("vAddr",64),lc("STORE","LorS",@{theory})],@{theory}),
                ite(call("state.exceptionSignalled",HOLogic.boolT,var("state",qTy),@{theory}),
                    tp[lt,var("state",qTy)],
                    let'
                      (tp[var_w("v",64),var("s",qTy)],
                       apply
                         (call
                            ("AdjustEndian",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                             tp[var_w("MemType",3),var_w("pAddr",64)],@{theory}),var("state",qTy)),
                       let'
                         (tp[var_b"v0",var("s",qTy)],
                          ite(mop(Not,var_b"cond"),tp[lt,var("s",qTy)],
                              cs(call("state.LLbit",@{typ "bool option"},var("s",qTy),@{theory}),
                                 [(lo HOLogic.boolT,
                                   apply
                                     (call
                                        ("raise'exception",
                                         @{typ "state \<Rightarrow> (bool \<times> state)"},
                                         call
                                           ("exception.UNPREDICTABLE",@{typ exception},
                                            ls"conditional store: LLbit not set",@{theory}),
                                         @{theory}),var("s",qTy))),
                                  (mop(Some,lf),tp[lf,var("s",qTy)]),
                                  (mop(Some,lt),
                                   ite(eq(call
                                            ("CP0.LLAddr",w64,
                                             call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                             @{theory}),var_w("v",64)),tp[lt,var("s",qTy)],
                                       apply
                                         (call
                                            ("raise'exception",
                                             @{typ "state \<Rightarrow> (bool \<times> state)"},
                                             call
                                               ("exception.UNPREDICTABLE",@{typ exception},
                                                ls
                                                 "conditional store: address doesn't match previous LL address",
                                                @{theory}),@{theory}),var("s",qTy))))],@{context})),
                          tp[var_b"v0",
                             rupd
                               ("state.LLbit",
                                tp[ite(var_b"v0",
                                       let'
                                         (var_n"b",
                                          bop(Add,mop(Cast HOLogic.natT,var_w("AccessLength",3)),
                                              ln 1),
                                          let'
                                            (var_n"l",
                                             bop(Sub,ln 8,
                                                 bop(Add,var_n"b",
                                                     mop(Cast HOLogic.natT,
                                                         ex(var_w("vAddr",64),ln 2,ln 0,
                                                            (Word_Lib.mk_wordT 3))))),
                                             apply
                                               (call
                                                  ("WriteData",@{typ "state \<Rightarrow> state"},
                                                   tp[var_w("v",64),var_w("MemElem",64),var_n"l",
                                                      bop(Sub,bop(Add,var_n"l",var_n"b"),ln 1)],
                                                   @{theory}),var("s",qTy)))),var("s",qTy)),
                                   lo HOLogic.boolT],@{theory})]))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("storeWord",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"cond"],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            apply
              (call
                 ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                     const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                     bop(Lsl,
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)),
                         bop(Mul,ln 8,
                             mop(Cast HOLogic.natT,
                                 bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                     cc[apply
                                          (const
                                             ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                              @{theory}),var("state",qTy)),lw(0,2)])))),
                     var_w("v",64),var_b"cond"],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("storeDoubleword",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16),var_b"cond"],
      close
        (var("state",qTy),
         apply
           (call
              ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
               tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                  const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                  apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),
                  bop(Add,mop(SE w64,var_w("offset",16)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                         var("state",qTy))),var_b"cond"],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'FCSR",
   close
     (var_w("x",32),
      record
        ("FCSR",
         [bop(Bit,var_w("x",32),ln 19),bop(Bit,var_w("x",32),ln 17),bop(Bit,var_w("x",32),ln 12),
          bop(Bit,var_w("x",32),ln 14),bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 16),
          bop(Bit,var_w("x",32),ln 15),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 9),
          bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 11),bop(Bit,var_w("x",32),ln 10),
          cc[ex(var_w("x",32),ln 31,ln 25,(Word_Lib.mk_wordT 7)),ex(var_w("x",32),ln 23,ln 23,w1)],
          bop(Bit,var_w("x",32),ln 24),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 4),
          bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 5),
          bop(Bit,var_w("x",32),ln 18),ex(var_w("x",32),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
          ex(var_w("x",32),ln 22,ln 20,(Word_Lib.mk_wordT 3))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'FCSR",
   close
     (var("x",@{typ FCSR}),
      let'
        (var_w("FCC",8),call("FCSR.FCC",w8,var("x",@{typ FCSR}),@{theory}),
         cc[ex(var_w("FCC",8),ln 7,ln 1,(Word_Lib.mk_wordT 7)),
            mop(Cast w1,call("FCSR.FS",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            ex(var_w("FCC",8),ln 0,ln 0,w1),
            call("FCSR.fcsr'rst",(Word_Lib.mk_wordT 3),var("x",@{typ FCSR}),@{theory}),
            mop(Cast w1,call("FCSR.ABS2008",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.NAN2008",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseE",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseV",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseZ",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseO",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseU",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.CauseI",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.EnableV",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.EnableZ",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.EnableO",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.EnableU",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.EnableI",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.FlagV",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.FlagZ",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.FlagO",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.FlagU",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            mop(Cast w1,call("FCSR.FlagI",HOLogic.boolT,var("x",@{typ FCSR}),@{theory})),
            call("FCSR.RM",(Word_Lib.mk_wordT 2),var("x",@{typ FCSR}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'FCSR",
   close(tp[var_a w32,var("x",@{typ FCSR})],call("reg'FCSR",w32,var("x",@{typ FCSR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'FCSR",
   close(tp[var_a @{typ FCSR},var_w("x",32)],call("rec'FCSR",@{typ FCSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'FIR",
   close
     (var_w("x",32),
      record
        ("FIR",
         [bop(Bit,var_w("x",32),ln 19),bop(Bit,var_w("x",32),ln 17),bop(Bit,var_w("x",32),ln 22),
          bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 18),ex(var_w("x",32),ln 15,ln 8,w8),
          ex(var_w("x",32),ln 7,ln 0,w8),bop(Bit,var_w("x",32),ln 16),bop(Bit,var_w("x",32),ln 20),
          ex(var_w("x",32),ln 31,ln 23,(Word_Lib.mk_wordT 9))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'FIR",
   close
     (var("x",@{typ FIR}),
      cc[call("FIR.fir'rst",(Word_Lib.mk_wordT 9),var("x",@{typ FIR}),@{theory}),
         mop(Cast w1,call("FIR.F64",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.L",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.W",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.ASE",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.PS",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.D",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         mop(Cast w1,call("FIR.S",HOLogic.boolT,var("x",@{typ FIR}),@{theory})),
         call("FIR.PrID",w8,var("x",@{typ FIR}),@{theory}),
         call("FIR.Rev",w8,var("x",@{typ FIR}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'FIR",
   close(tp[var_a w32,var("x",@{typ FIR})],call("reg'FIR",w32,var("x",@{typ FIR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'FIR",
   close(tp[var_a @{typ FIR},var_w("x",32)],call("rec'FIR",@{typ FIR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("IntToWordMIPS",
   close
     (var_i"v",
      itb([(bop(Gt,var_i"v",li 2147483647),lw(2147483647,32)),
           (bop(Lt,var_i"v",mop(Neg,li 2147483648)),lw(2147483647,32))],mop(Cast w32,var_i"v"))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("IntToDWordMIPS",
   close
     (var_i"v",
      itb([(bop(Gt,var_i"v",li 9223372036854775807),lw(9223372036854775807,64)),
           (bop(Lt,var_i"v",mop(Neg,li 9223372036854775808)),lw(9223372036854775807,64))],
          mop(Cast w64,var_i"v"))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PostOpF32",
   close
     (var_w("v",32),
      close
        (var("state",qTy),
         ite(bop(And,
                 call
                   ("FCSR.FS",HOLogic.boolT,
                    call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                 mop(FPIsSubnormal false,var_w("v",32))),lw(0,32),var_w("v",32)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("PostOpF64",
   close
     (var_w("v",64),
      close
        (var("state",qTy),
         ite(bop(And,
                 call
                   ("FCSR.FS",HOLogic.boolT,
                    call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                 mop(FPIsSubnormal true,var_w("v",64))),lw(0,64),var_w("v",64)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP32_Abs1985",
   close
     (var_w("a",32),
      ite(mop(FPIsNan false,var_w("a",32)),var_w("a",32),mop(FPAbs false,var_w("a",32)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP32_Neg1985",
   close
     (var_w("a",32),
      ite(mop(FPIsNan false,var_w("a",32)),var_w("a",32),mop(FPNeg false,var_w("a",32)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP64_Abs1985",
   close
     (var_w("a",64),ite(mop(FPIsNan true,var_w("a",64)),var_w("a",64),mop(FPAbs true,var_w("a",64)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP64_Neg1985",
   close
     (var_w("a",64),ite(mop(FPIsNan true,var_w("a",64)),var_w("a",64),mop(FPNeg true,var_w("a",64)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP64_Unordered",
   close
     (tp[var_w("a",64),var_w("b",64)],
      bop(Or,mop(FPIsNan true,var_w("a",64)),mop(FPIsNan true,var_w("b",64)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FP32_Unordered",
   close
     (tp[var_w("a",32),var_w("b",32)],
      bop(Or,mop(FPIsNan false,var_w("a",32)),mop(FPIsNan false,var_w("b",32)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Rounding_Mode",
   close
     (var("state",qTy),
      let'
        (var_w("v",2),
         call
           ("FCSR.RM",(Word_Lib.mk_wordT 2),
            call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
         itb([(eq(var_w("v",2),lw(0,2)),@{term roundTiesToEven}),
              (eq(var_w("v",2),lw(1,2)),@{term roundTowardZero}),
              (eq(var_w("v",2),lw(2,2)),@{term roundTowardPositive}),
              (eq(var_w("v",2),lw(3,2)),@{term roundTowardNegative})],lx @{typ ieee_rounding}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ABS_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (call
                 ("FCSR.ABS2008",HOLogic.boolT,
                  call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(FPAbs true,
                            apply
                              (call
                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                  var("state",qTy),@{theory}),var_w("fs",5))))],@{theory}))],
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            call
                              ("FP64_Abs1985",w64,
                               apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),@{theory}),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ABS_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (call
                 ("FCSR.ABS2008",HOLogic.boolT,
                  call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            mop(FPAbs false,
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32))))],
                  @{theory}))],
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                call
                                  ("FP32_Abs1985",w32,
                                   ex(apply
                                        (call
                                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                            var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,
                                      w32),@{theory}),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADD_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPAdd true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("ft",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADD_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPAdd false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                          ln 0,w32),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BC1F",
   close
     (tp[var_w("i",16),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
                   tp[mop(Not,
                          bop(Bit,
                              call
                                ("FCSR.FCC",w8,
                                 call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                              mop(Cast HOLogic.natT,var_w("cc",3)))),var_w("i",16)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BC1FL",
   close
     (tp[var_w("i",16),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
                   tp[mop(Not,
                          bop(Bit,
                              call
                                ("FCSR.FCC",w8,
                                 call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                              mop(Cast HOLogic.natT,var_w("cc",3)))),var_w("i",16)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BC1T",
   close
     (tp[var_w("i",16),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
                   tp[bop(Bit,
                          call
                            ("FCSR.FCC",w8,
                             call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                          mop(Cast HOLogic.natT,var_w("cc",3))),var_w("i",16)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BC1TL",
   close
     (tp[var_w("i",16),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
                   tp[bop(Bit,
                          call
                            ("FCSR.FCC",w8,
                             call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
                          mop(Cast HOLogic.natT,var_w("cc",3))),var_w("i",16)],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'C_cond_D",
   close
     (tp[var_w("fs",5),var_w("ft",5),var_w("cnd",3),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_n"i",mop(Cast HOLogic.natT,var_w("cc",3)),
                let'
                  (tp[var("v",@{typ FCSR}),var("s",qTy)],
                   let'
                     (tp[var("v",@{typ "FCSR \<times> 8 word"}),var("s",qTy)],
                      let'
                        (tp[var_b"v0",var("s0",qTy)],
                         itb([(eq(var_w("cnd",3),lw(0,3)),tp[lf,var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(1,3)),
                               tp[call
                                    ("FP64_Unordered",HOLogic.boolT,
                                     tp[apply
                                          (call
                                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                              var("state",qTy),@{theory}),var_w("fs",5)),
                                        apply
                                          (call
                                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                              var("state",qTy),@{theory}),var_w("ft",5))],@{theory}),
                                  var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(2,3)),
                               tp[mop(FPEqual true,
                                      tp[apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("fs",5)),
                                         apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("ft",5))]),
                                  var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(3,3)),
                               tp[bop(Or,
                                      mop(FPEqual true,
                                          tp[apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("fs",5)),
                                             apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("ft",5))]),
                                      call
                                        ("FP64_Unordered",HOLogic.boolT,
                                         tp[apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("fs",5)),
                                            apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("ft",5))],
                                         @{theory})),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(4,3)),
                               tp[mop(FPLessThan true,
                                      tp[apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("fs",5)),
                                         apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("ft",5))]),
                                  var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(5,3)),
                               tp[mop(Not,
                                      mop(FPGreaterEqual true,
                                          tp[apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("fs",5)),
                                             apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("ft",5))])),
                                  var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(6,3)),
                               tp[mop(FPLessEqual true,
                                      tp[apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("fs",5)),
                                         apply
                                           (call
                                              ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                               var("state",qTy),@{theory}),var_w("ft",5))]),
                                  var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(7,3)),
                               tp[mop(Not,
                                      mop(FPGreaterThan true,
                                          tp[apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("fs",5)),
                                             apply
                                               (call
                                                  ("state.FGR",
                                                   @{typ "5 word \<Rightarrow> 64 word"},
                                                   var("state",qTy),@{theory}),var_w("ft",5))])),
                                  var("state",qTy)])],lx(@{typ "bool \<times> state"})),
                         tp[tp[call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                               bfi(var_n"i",var_n"i",mop(Cast w1,var_b"v0"),
                                   call
                                     ("FCSR.FCC",w8,
                                      call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                                      @{theory}))],var("s0",qTy)]),
                      tp[rupd("FCSR.FCC",var("v",@{typ "FCSR \<times> 8 word"}),@{theory}),
                         var("s",qTy)]),
                   rupd("state.fcsr",tp[var("s",qTy),var("v",@{typ FCSR})],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'C_cond_S",
   close
     (tp[var_w("fs",5),var_w("ft",5),var_w("cnd",3),var_w("cc",3)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_n"i",mop(Cast HOLogic.natT,var_w("cc",3)),
                let'
                  (tp[var("v",@{typ FCSR}),var("s",qTy)],
                   let'
                     (tp[var("v",@{typ "FCSR \<times> 8 word"}),var("s",qTy)],
                      let'
                        (tp[var_b"v0",var("s0",qTy)],
                         itb([(eq(var_w("cnd",3),lw(0,3)),tp[lf,var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(1,3)),
                               tp[call
                                    ("FP32_Unordered",HOLogic.boolT,
                                     tp[ex(apply
                                             (call
                                                ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                 var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                           ln 0,w32),
                                        ex(apply
                                             (call
                                                ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                 var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                           ln 0,w32)],@{theory}),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(2,3)),
                               tp[mop(FPEqual false,
                                      tp[ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                            ln 0,w32),
                                         ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                            ln 0,w32)]),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(3,3)),
                               tp[bop(Or,
                                      mop(FPEqual false,
                                          tp[ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("fs",5)),
                                                ln 31,ln 0,w32),
                                             ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("ft",5)),
                                                ln 31,ln 0,w32)]),
                                      call
                                        ("FP32_Unordered",HOLogic.boolT,
                                         tp[ex(apply
                                                 (call
                                                    ("state.FGR",
                                                     @{typ "5 word \<Rightarrow> 64 word"},
                                                     var("state",qTy),@{theory}),var_w("fs",5)),
                                               ln 31,ln 0,w32),
                                            ex(apply
                                                 (call
                                                    ("state.FGR",
                                                     @{typ "5 word \<Rightarrow> 64 word"},
                                                     var("state",qTy),@{theory}),var_w("ft",5)),
                                               ln 31,ln 0,w32)],@{theory})),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(4,3)),
                               tp[mop(FPLessThan false,
                                      tp[ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                            ln 0,w32),
                                         ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                            ln 0,w32)]),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(5,3)),
                               tp[mop(Not,
                                      mop(FPGreaterEqual false,
                                          tp[ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("fs",5)),
                                                ln 31,ln 0,w32),
                                             ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("ft",5)),
                                                ln 31,ln 0,w32)])),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(6,3)),
                               tp[mop(FPLessEqual false,
                                      tp[ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                            ln 0,w32),
                                         ex(apply
                                              (call
                                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                  var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                            ln 0,w32)]),var("state",qTy)]),
                              (eq(var_w("cnd",3),lw(7,3)),
                               tp[mop(Not,
                                      mop(FPGreaterThan false,
                                          tp[ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("fs",5)),
                                                ln 31,ln 0,w32),
                                             ex(apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("ft",5)),
                                                ln 31,ln 0,w32)])),var("state",qTy)])],
                             lx(@{typ "bool \<times> state"})),
                         tp[tp[call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                               bfi(var_n"i",var_n"i",mop(Cast w1,var_b"v0"),
                                   call
                                     ("FCSR.FCC",w8,
                                      call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                                      @{theory}))],var("s0",qTy)]),
                      tp[rupd("FCSR.FCC",var("v",@{typ "FCSR \<times> 8 word"}),@{theory}),
                         var("s",qTy)]),
                   rupd("state.fcsr",tp[var("s",qTy),var("v",@{typ FCSR})],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEIL_L_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardPositive},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEIL_L_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardPositive},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEIL_W_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardPositive},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CEIL_W_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardPositive},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_D_L",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(FPFromInt true,
                          tp[apply
                               (const
                                  ("Rounding_Mode",
                                   @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                var("state",qTy)),
                             mop(Cast HOLogic.intT,
                                 apply
                                   (call
                                      ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                       var("state",qTy),@{theory}),var_w("fs",5)))]))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_D_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(FP32To64,
                          ex(apply
                               (call
                                  ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                   var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                @{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_D_W",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var("s",qTy),
                ite(call
                      ("NotWordValue",HOLogic.boolT,
                       apply
                         (call
                            ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                             @{theory}),var_w("fs",5)),@{theory}),
                    mop(Snd,
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                              call
                                ("exception.UNPREDICTABLE",@{typ exception},
                                 ls"CVT.D.W: NotWordValue",@{theory}),@{theory}),var("state",qTy))),
                    var("state",qTy)),
                rupd
                  ("state.FGR",
                   tp[var("s",qTy),
                      fupd
                        (call
                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("s",qTy),@{theory}),
                         var_w("fd",5),
                         mop(FPFromInt true,
                             tp[apply
                                  (const
                                     ("Rounding_Mode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("s",qTy)),
                                mop(Cast HOLogic.intT,
                                    ex(apply
                                         (call
                                            ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                             var("s",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32))]))],
                   @{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_L_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[apply
                                  (const
                                     ("Rounding_Mode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_L_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[apply
                                  (const
                                     ("Rounding_Mode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_S_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          mop(FP64To32,
                              tp[apply
                                   (const
                                      ("Rounding_Mode",
                                       @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                    var("state",qTy)),
                                 apply
                                   (call
                                      ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                       var("state",qTy),@{theory}),var_w("fs",5))])))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_S_L",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          mop(FPFromInt false,
                              tp[apply
                                   (const
                                      ("Rounding_Mode",
                                       @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                    var("state",qTy)),
                                 mop(Cast HOLogic.intT,
                                     apply
                                       (call
                                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                           var("state",qTy),@{theory}),var_w("fs",5)))])))],
                @{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_S_W",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var("s",qTy),
                ite(call
                      ("NotWordValue",HOLogic.boolT,
                       apply
                         (call
                            ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                             @{theory}),var_w("fs",5)),@{theory}),
                    mop(Snd,
                        apply
                          (call
                             ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                              call
                                ("exception.UNPREDICTABLE",@{typ exception},
                                 ls"CVT.S.W: NotWordValue",@{theory}),@{theory}),var("state",qTy))),
                    var("state",qTy)),
                rupd
                  ("state.FGR",
                   tp[var("s",qTy),
                      fupd
                        (call
                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("s",qTy),@{theory}),
                         var_w("fd",5),
                         mop(SE w64,
                             mop(FPFromInt false,
                                 tp[apply
                                      (const
                                         ("Rounding_Mode",
                                          @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                          @{theory}),var("s",qTy)),
                                    mop(Cast HOLogic.intT,
                                        ex(apply
                                             (call
                                                ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                 var("s",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,
                                           w32))])))],@{theory}))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_W_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[apply
                                  (const
                                     ("Rounding_Mode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CVT_W_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[apply
                                  (const
                                     ("Rounding_Mode",
                                      @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                   var("state",qTy)),
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIV_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPDiv true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("ft",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIV_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPDiv false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                          ln 0,w32),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLOOR_L_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardNegative},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLOOR_L_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardNegative},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLOOR_W_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardNegative},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'FLOOR_W_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardNegative},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDC1",
   close
     (tp[var_w("ft",5),var_w("offset",16),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                apply
                  (call
                     ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                      tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                         const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                         bop(Add,mop(SE w64,var_w("offset",16)),
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                   @{theory}),var("state",qTy))),mop(Some,lf)],@{theory}),
                   var("state",qTy)),
                ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                    rupd
                      ("state.FGR",
                       tp[var("s",qTy),
                          fupd
                            (call
                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("s",qTy),
                                @{theory}),var_w("ft",5),var_w("v",64))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDXC1",
   close
     (tp[var_w("fd",5),var_w("index",5),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                apply
                  (call
                     ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                      tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                         const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                         bop(Add,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("index",5),
                                   @{theory}),var("state",qTy)),
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                   @{theory}),var("state",qTy))),mop(Some,lf)],@{theory}),
                   var("state",qTy)),
                ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                    rupd
                      ("state.FGR",
                       tp[var("s",qTy),
                          fupd
                            (call
                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("s",qTy),
                                @{theory}),var_w("fd",5),var_w("v",64))],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWC1",
   close
     (tp[var_w("ft",5),var_w("offset",16),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_w("v",64),
                bop(Add,mop(SE w64,var_w("offset",16)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                       var("state",qTy))),
                let'
                  (tp[var_w("v0",64),var("s",qTy)],
                   apply
                     (call
                        ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                            const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),
                            mop(Some,lf)],@{theory}),var("state",qTy)),
                   ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                       let'
                         (var_w("v1",3),
                          bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                              cc[apply
                                   (const
                                      ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("s",qTy)),lw(0,2)]),
                          rupd
                            ("state.FGR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("s",qTy),@{theory}),var_w("ft",5),
                                   mop(SE w64,
                                       ex(var_w("v0",64),
                                          bop(Add,ln 31,
                                              bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                                          bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w32)))],
                             @{theory})),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWXC1",
   close
     (tp[var_w("ft",5),var_w("index",5),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_w("v",64),
                bop(Add,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("index",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                       var("state",qTy))),
                let'
                  (tp[var_w("v0",64),var("s",qTy)],
                   apply
                     (call
                        ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                         tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                            const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,var_w("v",64),
                            mop(Some,lf)],@{theory}),var("state",qTy)),
                   ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                       let'
                         (var_w("v1",3),
                          bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                              cc[apply
                                   (const
                                      ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                    var("s",qTy)),lw(0,2)]),
                          rupd
                            ("state.FGR",
                             tp[var("s",qTy),
                                fupd
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("s",qTy),@{theory}),var_w("ft",5),
                                   mop(SE w64,
                                       ex(var_w("v0",64),
                                          bop(Add,ln 31,
                                              bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3)))),
                                          bop(Mul,ln 8,mop(Cast HOLogic.natT,var_w("v1",3))),w32)))],
                             @{theory})),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADD_D",
   close
     (tp[var_w("fd",5),var_w("fr",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPAdd true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                                         mop(FPMul true,
                                             tp[apply
                                                  (const
                                                     ("Rounding_Mode",
                                                      @{typ
                                                      "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                                      @{theory}),var("state",qTy)),
                                                apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("fs",5)),
                                                apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("ft",5))]),
                                         @{theory}),var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fr",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADD_S",
   close
     (tp[var_w("fd",5),var_w("fr",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPAdd false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       apply
                                         (call
                                            ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                             mop(FPMul false,
                                                 tp[apply
                                                      (const
                                                         ("Rounding_Mode",
                                                          @{typ
                                                          "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                                          @{theory}),var("state",qTy)),
                                                    ex(apply
                                                         (call
                                                            ("state.FGR",
                                                             @{typ "5 word \<Rightarrow> 64 word"},
                                                             var("state",qTy),@{theory}),
                                                          var_w("fs",5)),ln 31,ln 0,w32),
                                                    ex(apply
                                                         (call
                                                            ("state.FGR",
                                                             @{typ "5 word \<Rightarrow> 64 word"},
                                                             var("state",qTy),@{theory}),
                                                          var_w("ft",5)),ln 31,ln 0,w32)]),@{theory}),
                                          var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fr",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOV_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                            @{theory}),var_w("fs",5)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOV_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          ex(apply
                               (call
                                  ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                   var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                @{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVF",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   bop(Bit,
                       call
                         ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                          @{theory}),mop(Cast HOLogic.natT,var_w("cc",3)))),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[apply
                          (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                           var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)))],
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVF_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   bop(Bit,
                       call
                         ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                          @{theory}),mop(Cast HOLogic.natT,var_w("cc",3)))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        apply
                          (call
                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                              @{theory}),var_w("fs",5)))],@{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVF_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   bop(Bit,
                       call
                         ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                          @{theory}),mop(Cast HOLogic.natT,var_w("cc",3)))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            ex(apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                  @{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVN_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),lw(0,64))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        apply
                          (call
                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                              @{theory}),var_w("fs",5)))],@{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVN_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (mop(Not,
                   eq(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),lw(0,64))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            ex(apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                  @{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVT",
   close
     (tp[var_w("rd",5),var_w("rs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (bop(Bit,
                   call
                     ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                      @{theory}),mop(Cast HOLogic.natT,var_w("cc",3))),
               apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[apply
                          (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                           var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)))],
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVT_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (bop(Bit,
                   call
                     ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                      @{theory}),mop(Cast HOLogic.natT,var_w("cc",3))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        apply
                          (call
                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                              @{theory}),var_w("fs",5)))],@{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVT_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("cc",3)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (bop(Bit,
                   call
                     ("FCSR.FCC",w8,call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                      @{theory}),mop(Cast HOLogic.natT,var_w("cc",3))),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            ex(apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                  @{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVZ_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (eq(apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),lw(0,64)),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        apply
                          (call
                             ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                              @{theory}),var_w("fs",5)))],@{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVZ_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (eq(apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("state",qTy)),lw(0,64)),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            ex(apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)))],
                  @{theory}))],var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUB_D",
   close
     (tp[var_w("fd",5),var_w("fr",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPSub true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                                         mop(FPMul true,
                                             tp[apply
                                                  (const
                                                     ("Rounding_Mode",
                                                      @{typ
                                                      "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                                      @{theory}),var("state",qTy)),
                                                apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("fs",5)),
                                                apply
                                                  (call
                                                     ("state.FGR",
                                                      @{typ "5 word \<Rightarrow> 64 word"},
                                                      var("state",qTy),@{theory}),var_w("ft",5))]),
                                         @{theory}),var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fr",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUB_S",
   close
     (tp[var_w("fd",5),var_w("fr",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPSub false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       apply
                                         (call
                                            ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                             mop(FPMul false,
                                                 tp[apply
                                                      (const
                                                         ("Rounding_Mode",
                                                          @{typ
                                                          "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                                          @{theory}),var("state",qTy)),
                                                    ex(apply
                                                         (call
                                                            ("state.FGR",
                                                             @{typ "5 word \<Rightarrow> 64 word"},
                                                             var("state",qTy),@{theory}),
                                                          var_w("fs",5)),ln 31,ln 0,w32),
                                                    ex(apply
                                                         (call
                                                            ("state.FGR",
                                                             @{typ "5 word \<Rightarrow> 64 word"},
                                                             var("state",qTy),@{theory}),
                                                          var_w("ft",5)),ln 31,ln 0,w32)]),@{theory}),
                                          var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fr",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MUL_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPMul true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("ft",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MUL_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPMul false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                          ln 0,w32),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'NEG_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (call
                 ("FCSR.ABS2008",HOLogic.boolT,
                  call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(FPNeg true,
                            apply
                              (call
                                 ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                  var("state",qTy),@{theory}),var_w("fs",5))))],@{theory}))],
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            call
                              ("FP64_Neg1985",w64,
                               apply
                                 (call
                                    ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                     var("state",qTy),@{theory}),var_w("fs",5)),@{theory}),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'NEG_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),
              (call
                 ("FCSR.ABS2008",HOLogic.boolT,
                  call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory}),
               rupd
                 ("state.FGR",
                  tp[var("state",qTy),
                     fupd
                       (call
                          ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                           @{theory}),var_w("fd",5),
                        mop(SE w64,
                            mop(FPNeg false,
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32))))],
                  @{theory}))],
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                call
                                  ("FP32_Neg1985",w32,
                                   ex(apply
                                        (call
                                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                            var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,
                                      w32),@{theory}),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ROUND_L_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTiesToEven},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ROUND_L_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTiesToEven},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ROUND_W_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTiesToEven},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ROUND_W_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTiesToEven},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDC1",
   close
     (tp[var_w("ft",5),var_w("offset",16),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             mop(Snd,
                 apply
                   (call
                      ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                       tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                          const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                          apply
                            (call
                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                                @{theory}),var_w("ft",5)),
                          bop(Add,mop(SE w64,var_w("offset",16)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                    @{theory}),var("state",qTy))),lf],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDXC1",
   close
     (tp[var_w("fs",5),var_w("index",5),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             mop(Snd,
                 apply
                   (call
                      ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                       tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                          const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                          apply
                            (call
                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                                @{theory}),var_w("fs",5)),
                          bop(Add,
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("index",5),
                                    @{theory}),var("state",qTy)),
                              apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),
                                    @{theory}),var("state",qTy))),lf],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SQRT_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPSqrt true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SQRT_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPSqrt false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUB_D",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      apply
                        (call
                           ("PostOpF64",@{typ "state \<Rightarrow> 64 word"},
                            mop(FPSub true,
                                tp[apply
                                     (const
                                        ("Rounding_Mode",
                                         @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},@{theory}),
                                      var("state",qTy)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),
                                   apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("ft",5))]),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUB_S",
   close
     (tp[var_w("fd",5),var_w("fs",5),var_w("ft",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      mop(SE w64,
                          apply
                            (call
                               ("PostOpF32",@{typ "state \<Rightarrow> 32 word"},
                                mop(FPSub false,
                                    tp[apply
                                         (const
                                            ("Rounding_Mode",
                                             @{typ "state \<Rightarrow> L3_Lib.ieee_rounding"},
                                             @{theory}),var("state",qTy)),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("fs",5)),ln 31,
                                          ln 0,w32),
                                       ex(apply
                                            (call
                                               ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                                var("state",qTy),@{theory}),var_w("ft",5)),ln 31,
                                          ln 0,w32)]),@{theory}),var("state",qTy))))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWC1",
   close
     (tp[var_w("ft",5),var_w("offset",16),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_w("v",64),
                bop(Add,mop(SE w64,var_w("offset",16)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                       var("state",qTy))),
                mop(Snd,
                    apply
                      (call
                         ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                          tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                             const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                             bop(Lsl,
                                 apply
                                   (call
                                      ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                       var("state",qTy),@{theory}),var_w("ft",5)),
                                 bop(Mul,ln 8,
                                     mop(Cast HOLogic.natT,
                                         bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                             cc[apply
                                                  (const
                                                     ("BigEndianCPU",
                                                      @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                   var("state",qTy)),lw(0,2)])))),var_w("v",64),lf],
                          @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWXC1",
   close
     (tp[var_w("ft",5),var_w("index",5),var_w("base",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (var_w("v",64),
                bop(Add,
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("index",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                       var("state",qTy))),
                mop(Snd,
                    apply
                      (call
                         ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                          tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                             const("WORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                             bop(Lsl,
                                 apply
                                   (call
                                      ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                       var("state",qTy),@{theory}),var_w("ft",5)),
                                 bop(Mul,ln 8,
                                     mop(Cast HOLogic.natT,
                                         bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                             cc[apply
                                                  (const
                                                     ("BigEndianCPU",
                                                      @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                   var("state",qTy)),lw(0,2)])))),var_w("v",64),lf],
                          @{theory}),var("state",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TRUNC_L_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardZero},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TRUNC_L_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardZero},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),call("IntToDWordMIPS",w64,var_i"x",@{theory})),
                          (lo HOLogic.intT,lw(9223372036854775807,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TRUNC_W_D",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt true,
                             tp[@{term roundTowardZero},
                                apply
                                  (call
                                     ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                      var("state",qTy),@{theory}),var_w("fs",5))]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TRUNC_W_S",
   close
     (tp[var_w("fd",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fd",5),
                      cs(mop(FPToInt false,
                             tp[@{term roundTowardZero},
                                ex(apply
                                     (call
                                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                         var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)]),
                         [(mop(Some,var_i"x"),
                           mop(SE w64,call("IntToWordMIPS",w32,var_i"x",@{theory}))),
                          (lo HOLogic.intT,lw(2147483647,64))],@{context}))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMFC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call
                           ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                            @{theory}),var_w("fs",5)),var_w("rt",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMTC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fs",5),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[mop(SE w64,
                          ex(apply
                               (call
                                  ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},
                                   var("state",qTy),@{theory}),var_w("fs",5)),ln 31,ln 0,w32)),
                      var_w("rt",5)],@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             rupd
               ("state.FGR",
                tp[var("state",qTy),
                   fupd
                     (call
                        ("state.FGR",@{typ "5 word \<Rightarrow> 64 word"},var("state",qTy),
                         @{theory}),var_w("fs",5),
                      mop(SE w64,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 31,ln 0,w32)))],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CFC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 call
                   ("StatusRegister.CU1",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
             apply
               (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                var("state",qTy)),
             let'
               (tp[var_w("v",64),var("s",qTy)],
                itb([(eq(var_w("fs",5),lw(0,5)),
                      tp[mop(SE w64,
                             call
                               ("reg'FIR",w32,
                                call("state.fir",@{typ FIR},var("state",qTy),@{theory}),@{theory})),
                         var("state",qTy)]),
                     (eq(var_w("fs",5),lw(25,5)),
                      tp[mop(Cast w64,
                             call
                               ("FCSR.FCC",w8,
                                call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory})),
                         var("state",qTy)]),
                     (eq(var_w("fs",5),lw(31,5)),
                      tp[mop(SE w64,
                             call
                               ("reg'FCSR",w32,
                                call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),@{theory})),
                         var("state",qTy)])],
                    apply
                      (call
                         ("raise'exception",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             ls"Unsupported floating point control register",@{theory}),@{theory}),
                       var("state",qTy))),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CTC1",
   close
     (tp[var_w("rt",5),var_w("fs",5)],
      close
        (var("state",qTy),
         itb([(mop(Not,
                   call
                     ("StatusRegister.CU1",HOLogic.boolT,
                      call
                        ("CP0.Status",@{typ StatusRegister},
                         call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                      @{theory})),
               apply
                 (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
                  var("state",qTy))),(eq(var_w("fs",5),lw(0,5)),var("state",qTy)),
              (eq(var_w("fs",5),lw(25,5)),
               rupd
                 ("state.fcsr",
                  tp[var("state",qTy),
                     rupd
                       ("FCSR.FCC",
                        tp[call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                           ex(apply
                                (call
                                   ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                    @{theory}),var("state",qTy)),ln 7,ln 0,w8)],@{theory})],
                  @{theory})),
              (eq(var_w("fs",5),lw(31,5)),
               let'
                 (var("s",qTy),
                  rupd
                    ("state.fcsr",
                     tp[var("state",qTy),
                        call
                          ("write'reg'FCSR",@{typ FCSR},
                           tp[call("state.fcsr",@{typ FCSR},var("state",qTy),@{theory}),
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                       @{theory}),var("state",qTy)),ln 31,ln 0,w32)],@{theory})],
                     @{theory}),
                  rupd
                    ("state.fcsr",
                     tp[var("s",qTy),
                        rupd
                          ("FCSR.NAN2008",
                           tp[call("state.fcsr",@{typ FCSR},var("s",qTy),@{theory}),lt],@{theory})],
                     @{theory})))],
             mop(Snd,
                 apply
                   (call
                      ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                       call
                         ("exception.UNPREDICTABLE",@{typ exception},
                          ls"Unsupported floating point control register",@{theory}),@{theory}),
                    var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'UnknownFPInstruction",
   close
     (var("state",qTy),
      ite(mop(Not,
              call
                ("StatusRegister.CU1",HOLogic.boolT,
                 call
                   ("CP0.Status",@{typ StatusRegister},
                    call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory})),
          apply
            (const("SignalCP1UnusableException",@{typ "state \<Rightarrow> state"},@{theory}),
             var("state",qTy)),
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDI: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Add,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   mop(SE (Word_Lib.mk_wordT 33),var_w("immediate",16))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rt",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDIU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Add,ex(var_w("v",64),ln 31,ln 0,w32),mop(SE w32,var_w("immediate",16)))),
                     var_w("rt",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Add,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),mop(SE (Word_Lib.mk_wordT 65),var_w("immediate",16))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rt",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(SE w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Lt,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),mop(SE w64,var_w("immediate",16)))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTIU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Ult,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),mop(SE w64,var_w("immediate",16)))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ANDI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ORI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XORI",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),mop(Cast w64,var_w("immediate",16))),var_w("rt",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LUI",
   close
     (tp[var_w("rt",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,cc[var_w("immediate",16),lw(0,16)]),var_w("rt",5)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADD",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADD: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Add,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("s",qTy)),ln 32,ln 0,(Word_Lib.mk_wordT 33))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rd",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"ADDU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Add,ex(var_w("v",64),ln 31,ln 0,w32),
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32))),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUB",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SUB: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",33),
               bop(Sub,ex(var_w("v",64),ln 32,ln 0,(Word_Lib.mk_wordT 33)),
                   ex(apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("s",qTy)),ln 32,ln 0,(Word_Lib.mk_wordT 33))),
               ite(mop(Not,eq(bop(Bit,var_w("v",33),ln 32),bop(Bit,var_w("v",33),ln 31))),
                   apply
                     (call
                        ("SignalException",@{typ "state \<Rightarrow> state"},
                         lc("Ov","ExceptionType",@{theory}),@{theory}),var("s",qTy)),
                   apply
                     (call
                        ("write'GPR",@{typ "state \<Rightarrow> state"},
                         tp[mop(SE w64,ex(var_w("v",33),ln 31,ln 0,w32)),var_w("rd",5)],@{theory}),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SUBU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Sub,ex(var_w("v",64),ln 31,ln 0,w32),
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32))),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADD",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Add,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rd",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Add,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSUB",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",65),
            bop(Sub,
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 65),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            ite(mop(Not,eq(bop(Bit,var_w("v",65),ln 64),bop(Bit,var_w("v",65),ln 63))),
                apply
                  (call
                     ("SignalException",@{typ "state \<Rightarrow> state"},
                      lc("Ov","ExceptionType",@{theory}),@{theory}),var("state",qTy)),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[ex(var_w("v",65),ln 63,ln 0,w64),var_w("rd",5)],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Sub,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLT",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Lt,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLTU",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(Cast w64,
                      bop(Ult,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'AND",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BAnd,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'OR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BOr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'XOR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(BXor,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'NOR",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(BNot,
                      bop(BOr,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)))),var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVN",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)),lw(0,64))),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MOVZ",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy)),lw(0,64)),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),var_w("rd",5)],@{theory}),var("state",qTy)),
             var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADD",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MADD: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Add,var_w("v",64),
                         bop(Mul,
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MADDU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MADDU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Add,var_w("v",64),
                         bop(Mul,
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUB",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MSUB: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Sub,var_w("v",64),
                         bop(Mul,
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(SE w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MSUBU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MSUBU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy))),
            let'
              (tp[var_w("v",64),var("s",qTy)],
               let'
                 (tp[var_w("v",64),var("s",qTy)],
                  let'
                    (tp[var_w("v0",64),var("s",qTy)],
                     apply
                       (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
                        var("s",qTy)),
                     tp[cc[ex(var_w("v",64),ln 31,ln 0,w32),ex(var_w("v0",64),ln 31,ln 0,w32)],
                        var("s",qTy)]),
                  tp[bop(Sub,var_w("v",64),
                         bop(Mul,
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)),
                             mop(Cast w64,
                                 ex(apply
                                      (call
                                         ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                          @{theory}),var("s",qTy)),ln 31,ln 0,w32)))),var("s",qTy)]),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),
                  apply
                    (call
                       ("write'HI",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MUL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MUL: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            rupd
              ("state.hi",
               tp[rupd
                    ("state.lo",
                     tp[apply
                          (call
                             ("write'GPR",@{typ "state \<Rightarrow> state"},
                              tp[mop(SE w64,
                                     bop(Mul,ex(var_w("v",64),ln 31,ln 0,w32),
                                         ex(apply
                                              (call
                                                 ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                  var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 0,
                                            w32))),var_w("rd",5)],@{theory}),var("s",qTy)),lo w64],
                     @{theory}),lo w64],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MULT: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",64),
               bop(Mul,mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),
                   mop(SE w64,
                       ex(apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("s",qTy)),ln 31,ln 0,w32))),
               apply
                 (call
                    ("write'HI",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),
                  apply
                    (call
                       ("write'LO",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MULTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(bop(Or,
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                             var("state",qTy)),@{theory}),
                       call
                         ("NotWordValue",HOLogic.boolT,
                          apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("state",qTy)),@{theory})),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"MULTU: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            let'
              (var_w("v",64),
               bop(Mul,mop(Cast w64,ex(var_w("v",64),ln 31,ln 0,w32)),
                   mop(Cast w64,
                       ex(apply
                            (call
                               ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                             var("s",qTy)),ln 31,ln 0,w32))),
               apply
                 (call
                    ("write'HI",@{typ "state \<Rightarrow> state"},
                     mop(SE w64,ex(var_w("v",64),ln 63,ln 32,w32)),@{theory}),
                  apply
                    (call
                       ("write'LO",@{typ "state \<Rightarrow> state"},
                        mop(SE w64,ex(var_w("v",64),ln 31,ln 0,w32)),@{theory}),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMULT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",128),
            bop(Mul,
                mop(SE (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(SE (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("write'HI",@{typ "state \<Rightarrow> state"},ex(var_w("v",128),ln 127,ln 64,w64),
                  @{theory}),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     ex(var_w("v",128),ln 63,ln 0,w64),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMULTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",128),
            bop(Mul,
                mop(Cast (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy))),
                mop(Cast (Word_Lib.mk_wordT 128),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
            apply
              (call
                 ("write'HI",@{typ "state \<Rightarrow> state"},ex(var_w("v",128),ln 127,ln 64,w64),
                  @{theory}),
               apply
                 (call
                    ("write'LO",@{typ "state \<Rightarrow> state"},
                     ex(var_w("v",128),ln 63,ln 0,w64),@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIV",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                  var("state",qTy)),
               let'
                 (var("s1",qTy),
                  ite(bop(Or,call("NotWordValue",HOLogic.boolT,var_w("v",64),@{theory}),
                          call("NotWordValue",HOLogic.boolT,var_w("v0",64),@{theory})),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},ls"DIV: NotWordValue",
                                   @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
                  ite(eq(var_w("v0",64),lw(0,64)),
                      rupd
                        ("state.hi",tp[rupd("state.lo",tp[var("s1",qTy),lo w64],@{theory}),lo w64],
                         @{theory}),
                      apply
                        (call
                           ("write'HI",@{typ "state \<Rightarrow> state"},
                            mop(SE w64,
                                bop(Rem,ex(var_w("v",64),ln 31,ln 0,w32),
                                    ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),
                         apply
                           (call
                              ("write'LO",@{typ "state \<Rightarrow> state"},
                               mop(SE w64,
                                   bop(Quot,ex(var_w("v",64),ln 31,ln 0,w32),
                                       ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),var("s1",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DIVU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
               var("state",qTy)),
            let'
              (var_w("v0",64),
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                  var("state",qTy)),
               let'
                 (var("s1",qTy),
                  ite(bop(Or,call("NotWordValue",HOLogic.boolT,var_w("v",64),@{theory}),
                          call("NotWordValue",HOLogic.boolT,var_w("v0",64),@{theory})),
                      mop(Snd,
                          apply
                            (call
                               ("raise'exception",
                                @{typ "state \<Rightarrow> (unit \<times> state)"},
                                call
                                  ("exception.UNPREDICTABLE",@{typ exception},
                                   ls"DIVU: NotWordValue",@{theory}),@{theory}),var("state",qTy))),
                      var("state",qTy)),
                  ite(eq(var_w("v0",64),lw(0,64)),
                      rupd
                        ("state.hi",tp[rupd("state.lo",tp[var("s1",qTy),lo w64],@{theory}),lo w64],
                         @{theory}),
                      apply
                        (call
                           ("write'HI",@{typ "state \<Rightarrow> state"},
                            mop(SE w64,
                                bop(Mod,ex(var_w("v",64),ln 31,ln 0,w32),
                                    ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),
                         apply
                           (call
                              ("write'LO",@{typ "state \<Rightarrow> state"},
                               mop(SE w64,
                                   bop(Div,ex(var_w("v",64),ln 31,ln 0,w32),
                                       ex(var_w("v0",64),ln 31,ln 0,w32))),@{theory}),var("s1",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DDIV",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
               var("state",qTy)),
            ite(eq(var_w("v",64),lw(0,64)),
                rupd
                  ("state.hi",tp[rupd("state.lo",tp[var("state",qTy),lo w64],@{theory}),lo w64],
                   @{theory}),
                let'
                  (var_w("v0",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'HI",@{typ "state \<Rightarrow> state"},
                         bop(Rem,var_w("v0",64),var_w("v",64)),@{theory}),
                      apply
                        (call
                           ("write'LO",@{typ "state \<Rightarrow> state"},
                            bop(Quot,var_w("v0",64),var_w("v",64)),@{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DDIVU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            apply
              (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
               var("state",qTy)),
            ite(eq(var_w("v",64),lw(0,64)),
                rupd
                  ("state.hi",tp[rupd("state.lo",tp[var("state",qTy),lo w64],@{theory}),lo w64],
                   @{theory}),
                let'
                  (var_w("v0",64),
                   apply
                     (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                      var("state",qTy)),
                   apply
                     (call
                        ("write'HI",@{typ "state \<Rightarrow> state"},
                         bop(Mod,var_w("v0",64),var_w("v",64)),@{theory}),
                      apply
                        (call
                           ("write'LO",@{typ "state \<Rightarrow> state"},
                            bop(Div,var_w("v0",64),var_w("v",64)),@{theory}),var("state",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFHI",
   close
     (var_w("rd",5),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("HI",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},tp[var_w("v",64),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFLO",
   close
     (var_w("rd",5),
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            apply
              (const("LO",@{typ "state \<Rightarrow> (64 word \<times> state)"},@{theory}),
               var("state",qTy)),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},tp[var_w("v",64),var_w("rd",5)],
                  @{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTHI",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         apply
           (call
              ("write'HI",@{typ "state \<Rightarrow> state"},
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTLO",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         apply
           (call
              ("write'LO",@{typ "state \<Rightarrow> state"},
               apply
                 (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                  var("state",qTy)),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      bop(Lsl,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 31,ln 0,w32),
                          mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRL: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Lsr,ex(var_w("v",64),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRA",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRA: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Asr,ex(var_w("v",64),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,var_w("sa",5)))),var_w("rd",5)],@{theory}),
               var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SLLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[mop(SE w64,
                      bop(Lsl,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),ln 31,ln 0,w32),
                          mop(Cast HOLogic.natT,
                              ex(apply
                                   (call
                                      ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                       @{theory}),var("state",qTy)),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRLV: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Lsr,
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,ex(var_w("v",64),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                     var_w("rd",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SRAV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         let'
           (tp[var_w("v",64),var("s",qTy)],
            let'
              (var("s0",qTy),
               ite(call
                     ("NotWordValue",HOLogic.boolT,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),@{theory}),
                   mop(Snd,
                       apply
                         (call
                            ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                             call
                               ("exception.UNPREDICTABLE",@{typ exception},ls"SRAV: NotWordValue",
                                @{theory}),@{theory}),var("state",qTy))),var("state",qTy)),
               tp[apply
                    (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                     var("s0",qTy)),var("s0",qTy)]),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[mop(SE w64,
                         bop(Asr,
                             ex(apply
                                  (call
                                     ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                      @{theory}),var("s",qTy)),ln 31,ln 0,w32),
                             mop(Cast HOLogic.natT,ex(var_w("v",64),ln 4,ln 0,(Word_Lib.mk_wordT 5))))),
                     var_w("rd",5)],@{theory}),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRL",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRA",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),mop(Cast HOLogic.natT,var_w("sa",5))),var_w("rd",5)],
               @{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRLV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRAV",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),
                      mop(Cast HOLogic.natT,
                          ex(apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),
                                   @{theory}),var("state",qTy)),ln 5,ln 0,(Word_Lib.mk_wordT 6)))),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSLL32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsl,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRL32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Lsr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DSRA32",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sa",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("write'GPR",@{typ "state \<Rightarrow> state"},
               tp[bop(Asr,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),bop(Add,mop(Cast HOLogic.natT,var_w("sa",5)),ln 32)),
                  var_w("rd",5)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGE",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Uge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLT",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTU",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(bop(Ult,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                    var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TEQ",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                   var("state",qTy))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TNE",
   close
     (tp[var_w("rs",5),var_w("rt",5)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),
                    apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                       var("state",qTy)))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Ge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TGEIU",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Uge,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Lt,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLTIU",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(bop(Ult,
                 apply
                   (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                    var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TEQI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(eq(apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                   var("state",qTy)),mop(SE w64,var_w("immediate",16))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TNEI",
   close
     (tp[var_w("rs",5),var_w("immediate",16)],
      close
        (var("state",qTy),
         ite(mop(Not,
                 eq(apply
                      (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                       var("state",qTy)),mop(SE w64,var_w("immediate",16)))),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("Tr","ExceptionType",@{theory}),@{theory}),var("state",qTy)),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LB",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadByte",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LBU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadByte",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LH",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadHalf",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LHU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadHalf",@{typ "state \<Rightarrow> state"},
               tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LW",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWU",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadWord",@{typ "state \<Rightarrow> state"},
               tp[lt,var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
            var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadDoubleword",@{typ "state \<Rightarrow> state"},
               tp[lf,var_w("base",5),var_w("rt",5),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LLD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("loadDoubleword",@{typ "state \<Rightarrow> state"},
               tp[lt,var_w("base",5),var_w("rt",5),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),cc[lw(0,1),var_w("v0",2)],
                           lf,var_w("v",64),mop(Some,lf)],@{theory}),var("state",qTy)),
                  ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                      let'
                        (var_w("v2",1),
                         bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                             apply
                               (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("s",qTy))),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            itb([(bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[cc[ex(var_w("v1",64),ln 7,ln 0,w8),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                           (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(var_w("v1",64),ln 15,ln 0,w16),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,
                                           w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(var_w("v1",64),ln 23,ln 0,(Word_Lib.mk_wordT 24)),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[ex(var_w("v1",64),ln 31,ln 0,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[cc[ex(var_w("v1",64),ln 39,ln 32,w8),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                           (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(var_w("v1",64),ln 47,ln 32,w16),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,
                                           w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(var_w("v1",64),ln 55,ln 32,(Word_Lib.mk_wordT 24)),
                                        ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[ex(var_w("v1",64),ln 63,ln 32,w32),var("s",qTy)])],
                                lx(@{typ "32 word \<times> state"})),
                            apply
                              (call
                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                  tp[mop(SE w64,var_w("v",32)),var_w("rt",5)],@{theory}),
                               var("s",qTy)))),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LWR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                           bop(Sub,const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                               cc[lw(0,1),var_w("v0",2)]),lf,var_w("v",64),mop(Some,lf)],@{theory}),
                     var("state",qTy)),
                  ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                      let'
                        (var_w("v2",1),
                         bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                             apply
                               (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                                var("s",qTy))),
                         let'
                           (tp[var_w("v",32),var("s",qTy)],
                            itb([(bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[ex(var_w("v1",64),ln 31,ln 0,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 24,
                                           w8),ex(var_w("v1",64),ln 31,ln 8,(Word_Lib.mk_wordT 24))],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 16,
                                           w16),ex(var_w("v1",64),ln 31,ln 16,w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 8,
                                           (Word_Lib.mk_wordT 24)),ex(var_w("v1",64),ln 31,ln 24,w8)],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                                  tp[ex(var_w("v1",64),ln 63,ln 32,w32),var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 24,
                                           w8),ex(var_w("v1",64),ln 63,ln 40,(Word_Lib.mk_wordT 24))],
                                     var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 16,
                                           w16),ex(var_w("v1",64),ln 63,ln 48,w16)],var("s",qTy)]),
                                 (bop(And,eq(var_w("v2",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                                  tp[cc[ex(apply
                                             (call
                                                ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                                 var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 8,
                                           (Word_Lib.mk_wordT 24)),ex(var_w("v1",64),ln 63,ln 56,w8)],
                                     var("s",qTy)])],lx(@{typ "32 word \<times> state"})),
                            apply
                              (call
                                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                                  tp[mop(SE w64,var_w("v",32)),var_w("rt",5)],@{theory}),
                               var("s",qTy)))),var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3),lf,
                           var_w("v",64),mop(Some,lf)],@{theory}),var("state",qTy)),
                  ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                      let'
                        (tp[var_w("v",64),var("s",qTy)],
                         itb([(eq(var_w("v0",3),lw(0,3)),
                               tp[cc[ex(var_w("v1",64),ln 7,ln 0,w8),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 55,ln 0,
                                        (Word_Lib.mk_wordT 56))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(1,3)),
                               tp[cc[ex(var_w("v1",64),ln 15,ln 0,w16),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 47,ln 0,
                                        (Word_Lib.mk_wordT 48))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(2,3)),
                               tp[cc[ex(var_w("v1",64),ln 23,ln 0,(Word_Lib.mk_wordT 24)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 39,ln 0,
                                        (Word_Lib.mk_wordT 40))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(3,3)),
                               tp[cc[ex(var_w("v1",64),ln 31,ln 0,w32),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 31,ln 0,w32)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(4,3)),
                               tp[cc[ex(var_w("v1",64),ln 39,ln 0,(Word_Lib.mk_wordT 40)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 23,ln 0,
                                        (Word_Lib.mk_wordT 24))],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(5,3)),
                               tp[cc[ex(var_w("v1",64),ln 47,ln 0,(Word_Lib.mk_wordT 48)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 15,ln 0,w16)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(6,3)),
                               tp[cc[ex(var_w("v1",64),ln 55,ln 0,(Word_Lib.mk_wordT 56)),
                                     ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 7,ln 0,w8)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(7,3)),
                               tp[ex(var_w("v1",64),ln 63,ln 0,w64),var("s",qTy)])],
                             lx(@{typ "64 word \<times> state"})),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy))),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'LDR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  apply
                    (call
                       ("LoadMemory",@{typ "state \<Rightarrow> (64 word \<times> state)"},
                        tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                           bop(Sub,const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3)),
                           lf,var_w("v",64),mop(Some,lf)],@{theory}),var("state",qTy)),
                  ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                      let'
                        (tp[var_w("v",64),var("s",qTy)],
                         itb([(eq(var_w("v0",3),lw(0,3)),
                               tp[ex(var_w("v1",64),ln 63,ln 0,w64),var("s",qTy)]),
                              (eq(var_w("v0",3),lw(1,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 56,w8),
                                     ex(var_w("v1",64),ln 63,ln 8,(Word_Lib.mk_wordT 56))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(2,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 48,w16),
                                     ex(var_w("v1",64),ln 63,ln 16,(Word_Lib.mk_wordT 48))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(3,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 40,
                                        (Word_Lib.mk_wordT 24)),
                                     ex(var_w("v1",64),ln 63,ln 24,(Word_Lib.mk_wordT 40))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(4,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 32,w32),
                                     ex(var_w("v1",64),ln 63,ln 32,w32)],var("s",qTy)]),
                              (eq(var_w("v0",3),lw(5,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 24,
                                        (Word_Lib.mk_wordT 40)),
                                     ex(var_w("v1",64),ln 63,ln 40,(Word_Lib.mk_wordT 24))],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(6,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 16,
                                        (Word_Lib.mk_wordT 48)),ex(var_w("v1",64),ln 63,ln 48,w16)],
                                  var("s",qTy)]),
                              (eq(var_w("v0",3),lw(7,3)),
                               tp[cc[ex(apply
                                          (call
                                             ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                              var_w("rt",5),@{theory}),var("s",qTy)),ln 63,ln 8,
                                        (Word_Lib.mk_wordT 56)),ex(var_w("v1",64),ln 63,ln 56,w8)],
                                  var("s",qTy)])],lx(@{typ "64 word \<times> state"})),
                         apply
                           (call
                              ("write'GPR",@{typ "state \<Rightarrow> state"},
                               tp[var_w("v",64),var_w("rt",5)],@{theory}),var("s",qTy))),
                      var("s",qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SB",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            mop(Snd,
                apply
                  (call
                     ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                      tp[const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),
                         const("BYTE",(Word_Lib.mk_wordT 3),@{theory}),lf,
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),
                             bop(Mul,ln 8,
                                 mop(Cast HOLogic.natT,
                                     bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                         rep(apply
                                               (const
                                                  ("BigEndianCPU",
                                                   @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3)))))),
                         var_w("v",64),lf],@{theory}),var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SH",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            mop(Snd,
                apply
                  (call
                     ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                      tp[const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),
                         const("HALFWORD",(Word_Lib.mk_wordT 3),@{theory}),lt,
                         bop(Lsl,
                             apply
                               (call
                                  ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                   @{theory}),var("state",qTy)),
                             bop(Mul,ln 8,
                                 mop(Cast HOLogic.natT,
                                     bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                                         cc[rep(apply
                                                  (const
                                                     ("BigEndianCPU",
                                                      @{typ "state \<Rightarrow> 1 word"},@{theory}),
                                                   var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2)),
                                            lw(0,1)])))),var_w("v",64),lf],@{theory}),
                   var("state",qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SW",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("storeWord",@{typ "state \<Rightarrow> (bool \<times> state)"},
                   tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         mop(Snd,
             apply
               (call
                  ("storeDoubleword",@{typ "state \<Rightarrow> (bool \<times> state)"},
                   tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lf],@{theory}),
                var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SC",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("storeWord",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
               var("state",qTy)),
            ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[mop(Cast w64,var_b"v"),var_w("rt",5)],@{theory}),var("s",qTy)),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SCD",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (tp[var_b"v",var("s",qTy)],
            apply
              (call
                 ("storeDoubleword",@{typ "state \<Rightarrow> (bool \<times> state)"},
                  tp[var_w("base",5),var_w("rt",5),var_w("offset",16),lt],@{theory}),
               var("state",qTy)),
            ite(mop(Not,call("state.exceptionSignalled",HOLogic.boolT,var("s",qTy),@{theory})),
                apply
                  (call
                     ("write'GPR",@{typ "state \<Rightarrow> state"},
                      tp[mop(Cast w64,var_b"v"),var_w("rt",5)],@{theory}),var("s",qTy)),var("s",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (tp[var_w("v2",64),var("s0",qTy)],
                  itb([(eq(var_w("v0",2),lw(0,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 24,w8)),
                           var("state",qTy)]),
                       (eq(var_w("v0",2),lw(1,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 16,w16)),
                           var("state",qTy)]),
                       (eq(var_w("v0",2),lw(2,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 8,
                                  (Word_Lib.mk_wordT 24))),var("state",qTy)]),
                       (eq(var_w("v0",2),lw(3,2)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 31,ln 0,w32)),
                           var("state",qTy)])],lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                               mop(Cast (Word_Lib.mk_wordT 3),var_w("v0",2)),lf,
                               ite(eq(bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                                          apply
                                            (const
                                               ("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},
                                                @{theory}),var("state",qTy))),lw(1,1)),
                                   bop(Lsl,var_w("v2",64),ln 32),var_w("v2",64)),var_w("v",64),lf],
                            @{theory}),var("s0",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SWR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",2),
               bop(BXor,ex(var_w("v",64),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 2,(Word_Lib.mk_wordT 2))),
               let'
                 (var_w("v1",1),
                  bop(BXor,ex(var_w("v",64),ln 2,ln 2,w1),
                      apply
                        (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                         var("state",qTy))),
                  let'
                    (tp[var_w("v1",64),var("s",qTy)],
                     itb([(bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(0,2))),
                           tp[mop(Cast w64,
                                  ex(apply
                                       (call
                                          ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                           @{theory}),var("state",qTy)),ln 31,ln 0,w32)),
                              var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(1,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 23,
                                         ln 0,(Word_Lib.mk_wordT 24))),ln 8),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(2,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 15,
                                         ln 0,w16)),ln 16),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(0,1)),eq(var_w("v0",2),lw(3,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,
                                         w8)),ln 24),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(0,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 31,
                                         ln 0,w32)),ln 32),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(1,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 23,
                                         ln 0,(Word_Lib.mk_wordT 24))),ln 40),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(2,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 15,
                                         ln 0,w16)),ln 48),var("state",qTy)]),
                          (bop(And,eq(var_w("v1",1),lw(1,1)),eq(var_w("v0",2),lw(3,2))),
                           tp[bop(Lsl,
                                  mop(Cast w64,
                                      ex(apply
                                           (call
                                              ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                               var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,
                                         w8)),ln 56),var("state",qTy)])],
                         lx(@{typ "64 word \<times> state"})),
                     mop(Snd,
                         apply
                           (call
                              ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                               tp[const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                                  bop(Sub,const("WORD",(Word_Lib.mk_wordT 3),@{theory}),
                                      mop(Cast (Word_Lib.mk_wordT 3),var_w("v0",2))),lf,
                                  var_w("v1",64),var_w("v",64),lf],@{theory}),var("s",qTy))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDL",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  itb([(eq(var_w("v0",3),lw(0,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 56,w8)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(1,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 48,w16)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(2,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 40,
                                  (Word_Lib.mk_wordT 24))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(3,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 32,w32)),
                           var("state",qTy)]),
                       (eq(var_w("v0",3),lw(4,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 24,
                                  (Word_Lib.mk_wordT 40))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(5,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 16,
                                  (Word_Lib.mk_wordT 48))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(6,3)),
                        tp[mop(Cast w64,
                               ex(apply
                                    (call
                                       ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),
                                        @{theory}),var("state",qTy)),ln 63,ln 8,
                                  (Word_Lib.mk_wordT 56))),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(7,3)),
                        tp[apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy)),var("state",qTy)])],
                      lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),var_w("v0",3),lf,
                               var_w("v1",64),var_w("v",64),lf],@{theory}),var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SDR",
   close
     (tp[var_w("base",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         let'
           (var_w("v",64),
            bop(Add,mop(SE w64,var_w("offset",16)),
                apply
                  (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("base",5),@{theory}),
                   var("state",qTy))),
            let'
              (var_w("v0",3),
               bop(BXor,ex(var_w("v",64),ln 2,ln 0,(Word_Lib.mk_wordT 3)),
                   rep(apply
                         (const("BigEndianCPU",@{typ "state \<Rightarrow> 1 word"},@{theory}),
                          var("state",qTy)),ln 3,(Word_Lib.mk_wordT 3))),
               let'
                 (tp[var_w("v1",64),var("s",qTy)],
                  itb([(eq(var_w("v0",3),lw(0,3)),
                        tp[apply
                             (call
                                ("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                              var("state",qTy)),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(1,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 55,ln 0,
                                      (Word_Lib.mk_wordT 56))),ln 8),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(2,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 47,ln 0,
                                      (Word_Lib.mk_wordT 48))),ln 16),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(3,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 39,ln 0,
                                      (Word_Lib.mk_wordT 40))),ln 24),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(4,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 31,ln 0,
                                      w32)),ln 32),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(5,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 23,ln 0,
                                      (Word_Lib.mk_wordT 24))),ln 40),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(6,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 15,ln 0,
                                      w16)),ln 48),var("state",qTy)]),
                       (eq(var_w("v0",3),lw(7,3)),
                        tp[bop(Lsl,
                               mop(Cast w64,
                                   ex(apply
                                        (call
                                           ("GPR",@{typ "state \<Rightarrow> 64 word"},
                                            var_w("rt",5),@{theory}),var("state",qTy)),ln 7,ln 0,w8)),
                               ln 56),var("state",qTy)])],lx(@{typ "64 word \<times> state"})),
                  mop(Snd,
                      apply
                        (call
                           ("StoreMemory",@{typ "state \<Rightarrow> (bool \<times> state)"},
                            tp[const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                               bop(Sub,const("DOUBLEWORD",(Word_Lib.mk_wordT 3),@{theory}),
                                   var_w("v0",3)),lf,var_w("v1",64),var_w("v",64),lf],@{theory}),
                         var("s",qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'SYNC",close(var_w("stype",5),lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BREAK",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},lc("Bp","ExceptionType",@{theory}),
            @{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'SYSCALL",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("Sys","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ERET",
   close
     (var("state",qTy),
      itb([(mop(IsSome,
                call
                  ("state.BranchDelay",@{typ "(64 word option) option"},var("state",qTy),@{theory})),
            mop(Snd,
                apply
                  (call
                     ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                      call
                        ("exception.UNPREDICTABLE",@{typ exception},ls"ERET follows branch",
                         @{theory}),@{theory}),var("state",qTy)))),
           (bop(Or,
                call
                  ("StatusRegister.CU0",HOLogic.boolT,
                   call
                     ("CP0.Status",@{typ StatusRegister},
                      call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                apply
                  (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
            rupd
              ("state.LLbit",
               tp[ite(call
                        ("StatusRegister.ERL",HOLogic.boolT,
                         call
                           ("CP0.Status",@{typ StatusRegister},
                            call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),
                         @{theory}),
                      let'
                        (var("s",qTy),
                         rupd
                           ("state.PC",
                            tp[var("state",qTy),
                               bop(Sub,
                                   call
                                     ("CP0.ErrorEPC",w64,
                                      call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                      @{theory}),lw(4,64))],@{theory}),
                         rupd
                           ("state.CP0",
                            tp[var("s",qTy),
                               rupd
                                 ("CP0.Status",
                                  tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                     rupd
                                       ("StatusRegister.ERL",
                                        tp[call
                                             ("CP0.Status",@{typ StatusRegister},
                                              call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                              @{theory}),lf],@{theory})],@{theory})],@{theory})),
                      let'
                        (var("s",qTy),
                         rupd
                           ("state.PC",
                            tp[var("state",qTy),
                               bop(Sub,
                                   call
                                     ("CP0.EPC",w64,
                                      call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),
                                      @{theory}),lw(4,64))],@{theory}),
                         rupd
                           ("state.CP0",
                            tp[var("s",qTy),
                               rupd
                                 ("CP0.Status",
                                  tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                     rupd
                                       ("StatusRegister.EXL",
                                        tp[call
                                             ("CP0.Status",@{typ StatusRegister},
                                              call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                                              @{theory}),lf],@{theory})],@{theory})],@{theory}))),
                  mop(Some,lf)],@{theory}))],
          apply
            (call
               ("SignalException",@{typ "state \<Rightarrow> state"},
                lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MTC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'CPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMTC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'CPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                         var("state",qTy)),ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),
                var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'MFC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[mop(SE w64,
                          ex(apply
                               (call
                                  ("CPR",@{typ "state \<Rightarrow> 64 word"},
                                   tp[ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),var("state",qTy)),
                             ln 31,ln 0,w32)),var_w("rt",5)],@{theory}),var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'DMFC0",
   close
     (tp[var_w("rt",5),var_w("rd",5),var_w("sel",3)],
      close
        (var("state",qTy),
         ite(bop(Or,
                 call
                   ("StatusRegister.CU0",HOLogic.boolT,
                    call
                      ("CP0.Status",@{typ StatusRegister},
                       call("state.CP0",@{typ CP0},var("state",qTy),@{theory}),@{theory}),@{theory}),
                 apply
                   (const("KernelMode",@{typ "state \<Rightarrow> bool"},@{theory}),var("state",qTy))),
             apply
               (call
                  ("write'GPR",@{typ "state \<Rightarrow> state"},
                   tp[apply
                        (call
                           ("CPR",@{typ "state \<Rightarrow> 64 word"},
                            tp[ln 0,var_w("rd",5),var_w("sel",3)],@{theory}),var("state",qTy)),
                      var_w("rt",5)],@{theory}),var("state",qTy)),
             apply
               (call
                  ("SignalException",@{typ "state \<Rightarrow> state"},
                   lc("CpU","ExceptionType",@{theory}),@{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'J",
   close
     (var_w("instr_index",26),
      close
        (var("state",qTy),
         rupd
           ("state.BranchTo",
            tp[var("state",qTy),
               mop(Some,
                   tp[lf,
                      cc[ex(call("state.PC",w64,var("state",qTy),@{theory}),ln 63,ln 28,
                            (Word_Lib.mk_wordT 36)),var_w("instr_index",26),lw(0,2)]])],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JAL",
   close
     (var_w("instr_index",26),
      close
        (var("state",qTy),
         let'
           (var("s",qTy),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),lw(31,5)],
                  @{theory}),var("state",qTy)),
            rupd
              ("state.BranchTo",
               tp[var("s",qTy),
                  mop(Some,
                      tp[lf,
                         cc[ex(call("state.PC",w64,var("s",qTy),@{theory}),ln 63,ln 28,
                               (Word_Lib.mk_wordT 36)),var_w("instr_index",26),lw(0,2)]])],@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JR",
   close
     (var_w("rs",5),
      close
        (var("state",qTy),
         rupd
           ("state.BranchTo",
            tp[var("state",qTy),
               mop(Some,
                   tp[lf,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy))])],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'JALR",
   close
     (tp[var_w("rs",5),var_w("rd",5)],
      close
        (var("state",qTy),
         rupd
           ("state.BranchTo",
            tp[apply
                 (call
                    ("write'GPR",@{typ "state \<Rightarrow> state"},
                     tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),
                        var_w("rd",5)],@{theory}),var("state",qTy)),
               mop(Some,
                   tp[lf,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy))])],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BEQ",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[eq(apply
                       (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                        var("state",qTy)),
                     apply
                       (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                        var("state",qTy))),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BNE",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[mop(Not,
                      eq(apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                            var("state",qTy)),
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)))),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLEZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Le,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGTZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Gt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Lt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZ",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Ge,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZAL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Lt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),lw(31,5)],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZAL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranch",@{typ "state \<Rightarrow> state"},
               tp[bop(Ge,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),lw(31,5)],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BEQL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[eq(apply
                       (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                        var("state",qTy)),
                     apply
                       (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                        var("state",qTy))),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BNEL",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[mop(Not,
                      eq(apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                            var("state",qTy)),
                         apply
                           (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rt",5),@{theory}),
                            var("state",qTy)))),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLEZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Le,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGTZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Gt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Lt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Ge,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BLTZALL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Lt,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),lw(31,5)],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'BGEZALL",
   close
     (tp[var_w("rs",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("ConditionalBranchLikely",@{typ "state \<Rightarrow> state"},
               tp[bop(Ge,
                      apply
                        (call("GPR",@{typ "state \<Rightarrow> 64 word"},var_w("rs",5),@{theory}),
                         var("state",qTy)),lw(0,64)),var_w("offset",16)],@{theory}),
            apply
              (call
                 ("write'GPR",@{typ "state \<Rightarrow> state"},
                  tp[bop(Add,call("state.PC",w64,var("state",qTy),@{theory}),lw(8,64)),lw(31,5)],
                  @{theory}),var("state",qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("dfn'WAIT",lu)
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBP",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBR",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBWI",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'TLBWR",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'CACHE",
   close
     (tp[var_w("base",5),var_w("opn",5),var_w("offset",16)],
      close
        (var("state",qTy),
         apply
           (call
              ("SignalException",@{typ "state \<Rightarrow> state"},
               lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'RDHWR",
   close
     (tp[var_w("rt",5),var_w("rd",5)],
      close
        (var("state",qTy),
         apply
           (call
              ("SignalException",@{typ "state \<Rightarrow> state"},
               lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'ReservedInstruction",
   close
     (var("state",qTy),
      apply
        (call
           ("SignalException",@{typ "state \<Rightarrow> state"},
            lc("ResI","ExceptionType",@{theory}),@{theory}),var("state",qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'Unpredictable",
   close
     (var("state",qTy),
      mop(Snd,
          apply
            (call
               ("raise'exception",@{typ "state \<Rightarrow> (unit \<times> state)"},
                call
                  ("exception.UNPREDICTABLE",@{typ exception},ls"Unpredictable instruction",
                   @{theory}),@{theory}),var("state",qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Run",
   close
     (var("v0",@{typ instruction}),
      close
        (var("state",qTy),
         cs(var("v0",@{typ instruction}),
            [(Term.Const(@{const_name "BREAK"},@{typ instruction}),
              apply
                (const("dfn'BREAK",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "ERET"},@{typ instruction}),
              apply(const("dfn'ERET",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}),
              apply
                (const("dfn'ReservedInstruction",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (Term.Const(@{const_name "SYSCALL"},@{typ instruction}),
              apply
                (const("dfn'SYSCALL",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBP"},@{typ instruction}),
              apply(const("dfn'TLBP",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBR"},@{typ instruction}),
              apply(const("dfn'TLBR",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBWI"},@{typ instruction}),
              apply
                (const("dfn'TLBWI",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "TLBWR"},@{typ instruction}),
              apply
                (const("dfn'TLBWR",@{typ "state \<Rightarrow> state"},@{theory}),var("state",qTy))),
             (Term.Const(@{const_name "Unpredictable"},@{typ instruction}),
              apply
                (const("dfn'Unpredictable",@{typ "state \<Rightarrow> state"},@{theory}),
                 var("state",qTy))),
             (Term.Const(@{const_name "WAIT"},@{typ instruction}),var("state",qTy)),
             (call
                ("instruction.CACHE",@{typ instruction},
                 var("v204",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
              apply
                (call
                   ("dfn'CACHE",@{typ "state \<Rightarrow> state"},
                    var("v204",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                 var("state",qTy))),
             (call
                ("instruction.RDHWR",@{typ instruction},var("v205",@{typ "5 word \<times> 5 word"}),
                 @{theory}),
              apply
                (call
                   ("dfn'RDHWR",@{typ "state \<Rightarrow> state"},
                    var("v205",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
             (call("instruction.SYNC",@{typ instruction},var_w("v206",5),@{theory}),var("state",qTy)),
             (call("instruction.ArithI",@{typ instruction},var("v1",@{typ ArithI}),@{theory}),
              cs(var("v1",@{typ ArithI}),
                 [(call
                     ("ArithI.ADDI",@{typ ArithI},
                      var("v2",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDI",@{typ "state \<Rightarrow> state"},
                         var("v2",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ADDIU",@{typ ArithI},
                      var("v3",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDIU",@{typ "state \<Rightarrow> state"},
                         var("v3",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.ANDI",@{typ ArithI},
                      var("v4",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ANDI",@{typ "state \<Rightarrow> state"},
                         var("v4",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.DADDI",@{typ ArithI},
                      var("v5",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDI",@{typ "state \<Rightarrow> state"},
                         var("v5",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.DADDIU",@{typ ArithI},
                      var("v6",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDIU",@{typ "state \<Rightarrow> state"},
                         var("v6",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.LUI",@{typ ArithI},var("v7",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'LUI",@{typ "state \<Rightarrow> state"},
                         var("v7",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("ArithI.ORI",@{typ ArithI},
                      var("v8",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ORI",@{typ "state \<Rightarrow> state"},
                         var("v8",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTI",@{typ ArithI},
                      var("v9",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTI",@{typ "state \<Rightarrow> state"},
                         var("v9",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.SLTIU",@{typ ArithI},
                      var("v10",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTIU",@{typ "state \<Rightarrow> state"},
                         var("v10",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithI.XORI",@{typ ArithI},
                      var("v11",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XORI",@{typ "state \<Rightarrow> state"},
                         var("v11",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.ArithR",@{typ instruction},var("v12",@{typ ArithR}),@{theory}),
              cs(var("v12",@{typ ArithR}),
                 [(call
                     ("ArithR.ADD",@{typ ArithR},
                      var("v13",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADD",@{typ "state \<Rightarrow> state"},
                         var("v13",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.ADDU",@{typ ArithR},
                      var("v14",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADDU",@{typ "state \<Rightarrow> state"},
                         var("v14",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.AND",@{typ ArithR},
                      var("v15",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'AND",@{typ "state \<Rightarrow> state"},
                         var("v15",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DADD",@{typ ArithR},
                      var("v16",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADD",@{typ "state \<Rightarrow> state"},
                         var("v16",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DADDU",@{typ ArithR},
                      var("v17",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DADDU",@{typ "state \<Rightarrow> state"},
                         var("v17",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DSUB",@{typ ArithR},
                      var("v18",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSUB",@{typ "state \<Rightarrow> state"},
                         var("v18",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.DSUBU",@{typ ArithR},
                      var("v19",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSUBU",@{typ "state \<Rightarrow> state"},
                         var("v19",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.MOVN",@{typ ArithR},
                      var("v20",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVN",@{typ "state \<Rightarrow> state"},
                         var("v20",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.MOVZ",@{typ ArithR},
                      var("v21",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVZ",@{typ "state \<Rightarrow> state"},
                         var("v21",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.NOR",@{typ ArithR},
                      var("v22",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'NOR",@{typ "state \<Rightarrow> state"},
                         var("v22",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.OR",@{typ ArithR},
                      var("v23",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'OR",@{typ "state \<Rightarrow> state"},
                         var("v23",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLT",@{typ ArithR},
                      var("v24",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLT",@{typ "state \<Rightarrow> state"},
                         var("v24",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SLTU",@{typ ArithR},
                      var("v25",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLTU",@{typ "state \<Rightarrow> state"},
                         var("v25",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUB",@{typ ArithR},
                      var("v26",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUB",@{typ "state \<Rightarrow> state"},
                         var("v26",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.SUBU",@{typ ArithR},
                      var("v27",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUBU",@{typ "state \<Rightarrow> state"},
                         var("v27",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("ArithR.XOR",@{typ ArithR},
                      var("v28",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'XOR",@{typ "state \<Rightarrow> state"},
                         var("v28",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Branch",@{typ instruction},var("v29",@{typ Branch}),@{theory}),
              cs(var("v29",@{typ Branch}),
                 [(call
                     ("Branch.BEQ",@{typ Branch},
                      var("v30",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BEQ",@{typ "state \<Rightarrow> state"},
                         var("v30",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BEQL",@{typ Branch},
                      var("v31",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BEQL",@{typ "state \<Rightarrow> state"},
                         var("v31",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BGEZ",@{typ Branch},var("v32",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZ",@{typ "state \<Rightarrow> state"},
                         var("v32",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZAL",@{typ Branch},var("v33",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZAL",@{typ "state \<Rightarrow> state"},
                         var("v33",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZALL",@{typ Branch},var("v34",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZALL",@{typ "state \<Rightarrow> state"},
                         var("v34",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGEZL",@{typ Branch},var("v35",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGEZL",@{typ "state \<Rightarrow> state"},
                         var("v35",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGTZ",@{typ Branch},var("v36",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGTZ",@{typ "state \<Rightarrow> state"},
                         var("v36",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BGTZL",@{typ Branch},var("v37",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BGTZL",@{typ "state \<Rightarrow> state"},
                         var("v37",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLEZ",@{typ Branch},var("v38",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLEZ",@{typ "state \<Rightarrow> state"},
                         var("v38",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLEZL",@{typ Branch},var("v39",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLEZL",@{typ "state \<Rightarrow> state"},
                         var("v39",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZ",@{typ Branch},var("v40",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZ",@{typ "state \<Rightarrow> state"},
                         var("v40",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZAL",@{typ Branch},var("v41",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZAL",@{typ "state \<Rightarrow> state"},
                         var("v41",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZALL",@{typ Branch},var("v42",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZALL",@{typ "state \<Rightarrow> state"},
                         var("v42",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BLTZL",@{typ Branch},var("v43",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'BLTZL",@{typ "state \<Rightarrow> state"},
                         var("v43",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Branch.BNE",@{typ Branch},
                      var("v44",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BNE",@{typ "state \<Rightarrow> state"},
                         var("v44",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.BNEL",@{typ Branch},
                      var("v45",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BNEL",@{typ "state \<Rightarrow> state"},
                         var("v45",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call("Branch.J",@{typ Branch},var_w("v46",26),@{theory}),
                   apply
                     (call("dfn'J",@{typ "state \<Rightarrow> state"},var_w("v46",26),@{theory}),
                      var("state",qTy))),
                  (call("Branch.JAL",@{typ Branch},var_w("v47",26),@{theory}),
                   apply
                     (call("dfn'JAL",@{typ "state \<Rightarrow> state"},var_w("v47",26),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Branch.JALR",@{typ Branch},var("v48",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'JALR",@{typ "state \<Rightarrow> state"},
                         var("v48",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("Branch.JR",@{typ Branch},var_w("v49",5),@{theory}),
                   apply
                     (call("dfn'JR",@{typ "state \<Rightarrow> state"},var_w("v49",5),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.COP1",@{typ instruction},var("v50",@{typ COP1}),@{theory}),
              cs(var("v50",@{typ COP1}),
                 [(Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}),
                   apply
                     (const("dfn'UnknownFPInstruction",@{typ "state \<Rightarrow> state"},@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.ABS_D",@{typ COP1},var("v51",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ABS_D",@{typ "state \<Rightarrow> state"},
                         var("v51",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ABS_S",@{typ COP1},var("v52",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ABS_S",@{typ "state \<Rightarrow> state"},
                         var("v52",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ADD_D",@{typ COP1},
                      var("v53",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADD_D",@{typ "state \<Rightarrow> state"},
                         var("v53",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.ADD_S",@{typ COP1},
                      var("v54",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'ADD_S",@{typ "state \<Rightarrow> state"},
                         var("v54",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.BC1F",@{typ COP1},var("v55",@{typ "16 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BC1F",@{typ "state \<Rightarrow> state"},
                         var("v55",@{typ "16 word \<times> 3 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.BC1FL",@{typ COP1},var("v56",@{typ "16 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BC1FL",@{typ "state \<Rightarrow> state"},
                         var("v56",@{typ "16 word \<times> 3 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.BC1T",@{typ COP1},var("v57",@{typ "16 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BC1T",@{typ "state \<Rightarrow> state"},
                         var("v57",@{typ "16 word \<times> 3 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.BC1TL",@{typ COP1},var("v58",@{typ "16 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'BC1TL",@{typ "state \<Rightarrow> state"},
                         var("v58",@{typ "16 word \<times> 3 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CEIL_L_D",@{typ COP1},var("v59",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CEIL_L_D",@{typ "state \<Rightarrow> state"},
                         var("v59",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CEIL_L_S",@{typ COP1},var("v60",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CEIL_L_S",@{typ "state \<Rightarrow> state"},
                         var("v60",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CEIL_W_D",@{typ COP1},var("v61",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CEIL_W_D",@{typ "state \<Rightarrow> state"},
                         var("v61",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CEIL_W_S",@{typ COP1},var("v62",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CEIL_W_S",@{typ "state \<Rightarrow> state"},
                         var("v62",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CFC1",@{typ COP1},var("v63",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CFC1",@{typ "state \<Rightarrow> state"},
                         var("v63",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CTC1",@{typ COP1},var("v64",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'CTC1",@{typ "state \<Rightarrow> state"},
                         var("v64",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_D_L",@{typ COP1},var("v65",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_D_L",@{typ "state \<Rightarrow> state"},
                         var("v65",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_D_S",@{typ COP1},var("v66",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_D_S",@{typ "state \<Rightarrow> state"},
                         var("v66",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_D_W",@{typ COP1},var("v67",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_D_W",@{typ "state \<Rightarrow> state"},
                         var("v67",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_L_D",@{typ COP1},var("v68",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_L_D",@{typ "state \<Rightarrow> state"},
                         var("v68",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_L_S",@{typ COP1},var("v69",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_L_S",@{typ "state \<Rightarrow> state"},
                         var("v69",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_S_D",@{typ COP1},var("v70",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_S_D",@{typ "state \<Rightarrow> state"},
                         var("v70",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_S_L",@{typ COP1},var("v71",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_S_L",@{typ "state \<Rightarrow> state"},
                         var("v71",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_S_W",@{typ COP1},var("v72",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_S_W",@{typ "state \<Rightarrow> state"},
                         var("v72",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_W_D",@{typ COP1},var("v73",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_W_D",@{typ "state \<Rightarrow> state"},
                         var("v73",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.CVT_W_S",@{typ COP1},var("v74",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'CVT_W_S",@{typ "state \<Rightarrow> state"},
                         var("v74",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.C_cond_D",@{typ COP1},
                      var("v75",@{typ "5 word \<times> 5 word \<times> 3 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'C_cond_D",@{typ "state \<Rightarrow> state"},
                         var("v75",@{typ "5 word \<times> 5 word \<times> 3 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.C_cond_S",@{typ COP1},
                      var("v76",@{typ "5 word \<times> 5 word \<times> 3 word \<times> 3 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'C_cond_S",@{typ "state \<Rightarrow> state"},
                         var("v76",@{typ "5 word \<times> 5 word \<times> 3 word \<times> 3 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.DIV_D",@{typ COP1},
                      var("v77",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIV_D",@{typ "state \<Rightarrow> state"},
                         var("v77",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.DIV_S",@{typ COP1},
                      var("v78",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DIV_S",@{typ "state \<Rightarrow> state"},
                         var("v78",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.DMFC1",@{typ COP1},var("v79",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMFC1",@{typ "state \<Rightarrow> state"},
                         var("v79",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.DMTC1",@{typ COP1},var("v80",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMTC1",@{typ "state \<Rightarrow> state"},
                         var("v80",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.FLOOR_L_D",@{typ COP1},var("v81",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FLOOR_L_D",@{typ "state \<Rightarrow> state"},
                         var("v81",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.FLOOR_L_S",@{typ COP1},var("v82",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FLOOR_L_S",@{typ "state \<Rightarrow> state"},
                         var("v82",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.FLOOR_W_D",@{typ COP1},var("v83",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FLOOR_W_D",@{typ "state \<Rightarrow> state"},
                         var("v83",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.FLOOR_W_S",@{typ COP1},var("v84",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'FLOOR_W_S",@{typ "state \<Rightarrow> state"},
                         var("v84",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.LDC1",@{typ COP1},
                      var("v85",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDC1",@{typ "state \<Rightarrow> state"},
                         var("v85",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.LDXC1",@{typ COP1},
                      var("v86",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDXC1",@{typ "state \<Rightarrow> state"},
                         var("v86",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.LWC1",@{typ COP1},
                      var("v87",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWC1",@{typ "state \<Rightarrow> state"},
                         var("v87",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.LWXC1",@{typ COP1},
                      var("v88",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWXC1",@{typ "state \<Rightarrow> state"},
                         var("v88",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MADD_D",@{typ COP1},
                      var("v89",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADD_D",@{typ "state \<Rightarrow> state"},
                         var("v89",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.MADD_S",@{typ COP1},
                      var("v90",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADD_S",@{typ "state \<Rightarrow> state"},
                         var("v90",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.MFC1",@{typ COP1},var("v91",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MFC1",@{typ "state \<Rightarrow> state"},
                         var("v91",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.MOVF",@{typ COP1},
                      var("v92",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVF",@{typ "state \<Rightarrow> state"},
                         var("v92",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVF_D",@{typ COP1},
                      var("v93",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVF_D",@{typ "state \<Rightarrow> state"},
                         var("v93",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVF_S",@{typ COP1},
                      var("v94",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVF_S",@{typ "state \<Rightarrow> state"},
                         var("v94",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVN_D",@{typ COP1},
                      var("v95",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVN_D",@{typ "state \<Rightarrow> state"},
                         var("v95",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVN_S",@{typ COP1},
                      var("v96",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVN_S",@{typ "state \<Rightarrow> state"},
                         var("v96",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVT",@{typ COP1},
                      var("v97",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVT",@{typ "state \<Rightarrow> state"},
                         var("v97",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVT_D",@{typ COP1},
                      var("v98",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVT_D",@{typ "state \<Rightarrow> state"},
                         var("v98",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVT_S",@{typ COP1},
                      var("v99",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVT_S",@{typ "state \<Rightarrow> state"},
                         var("v99",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVZ_D",@{typ COP1},
                      var("v100",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVZ_D",@{typ "state \<Rightarrow> state"},
                         var("v100",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOVZ_S",@{typ COP1},
                      var("v101",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOVZ_S",@{typ "state \<Rightarrow> state"},
                         var("v101",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MOV_D",@{typ COP1},var("v102",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOV_D",@{typ "state \<Rightarrow> state"},
                         var("v102",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.MOV_S",@{typ COP1},var("v103",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MOV_S",@{typ "state \<Rightarrow> state"},
                         var("v103",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.MSUB_D",@{typ COP1},
                      var("v104",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUB_D",@{typ "state \<Rightarrow> state"},
                         var("v104",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.MSUB_S",@{typ COP1},
                      var("v105",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUB_S",@{typ "state \<Rightarrow> state"},
                         var("v105",@{typ "5 word \<times> 5 word \<times> 5 word \<times> 5 word"}),
                         @{theory}),var("state",qTy))),
                  (call
                     ("COP1.MTC1",@{typ COP1},var("v106",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MTC1",@{typ "state \<Rightarrow> state"},
                         var("v106",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.MUL_D",@{typ COP1},
                      var("v107",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MUL_D",@{typ "state \<Rightarrow> state"},
                         var("v107",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.MUL_S",@{typ COP1},
                      var("v108",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MUL_S",@{typ "state \<Rightarrow> state"},
                         var("v108",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.NEG_D",@{typ COP1},var("v109",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'NEG_D",@{typ "state \<Rightarrow> state"},
                         var("v109",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.NEG_S",@{typ COP1},var("v110",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'NEG_S",@{typ "state \<Rightarrow> state"},
                         var("v110",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ROUND_L_D",@{typ COP1},var("v111",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ROUND_L_D",@{typ "state \<Rightarrow> state"},
                         var("v111",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ROUND_L_S",@{typ COP1},var("v112",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ROUND_L_S",@{typ "state \<Rightarrow> state"},
                         var("v112",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ROUND_W_D",@{typ COP1},var("v113",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ROUND_W_D",@{typ "state \<Rightarrow> state"},
                         var("v113",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.ROUND_W_S",@{typ COP1},var("v114",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'ROUND_W_S",@{typ "state \<Rightarrow> state"},
                         var("v114",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.SDC1",@{typ COP1},
                      var("v115",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDC1",@{typ "state \<Rightarrow> state"},
                         var("v115",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.SDXC1",@{typ COP1},
                      var("v116",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDXC1",@{typ "state \<Rightarrow> state"},
                         var("v116",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.SQRT_D",@{typ COP1},var("v117",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SQRT_D",@{typ "state \<Rightarrow> state"},
                         var("v117",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.SQRT_S",@{typ COP1},var("v118",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'SQRT_S",@{typ "state \<Rightarrow> state"},
                         var("v118",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.SUB_D",@{typ COP1},
                      var("v119",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUB_D",@{typ "state \<Rightarrow> state"},
                         var("v119",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.SUB_S",@{typ COP1},
                      var("v120",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SUB_S",@{typ "state \<Rightarrow> state"},
                         var("v120",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.SWC1",@{typ COP1},
                      var("v121",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWC1",@{typ "state \<Rightarrow> state"},
                         var("v121",@{typ "5 word \<times> 16 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.SWXC1",@{typ COP1},
                      var("v122",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWXC1",@{typ "state \<Rightarrow> state"},
                         var("v122",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("COP1.TRUNC_L_D",@{typ COP1},var("v123",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TRUNC_L_D",@{typ "state \<Rightarrow> state"},
                         var("v123",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.TRUNC_L_S",@{typ COP1},var("v124",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TRUNC_L_S",@{typ "state \<Rightarrow> state"},
                         var("v124",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.TRUNC_W_D",@{typ COP1},var("v125",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TRUNC_W_D",@{typ "state \<Rightarrow> state"},
                         var("v125",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("COP1.TRUNC_W_S",@{typ COP1},var("v126",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TRUNC_W_S",@{typ "state \<Rightarrow> state"},
                         var("v126",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy)))],
                 @{context})),
             (call("instruction.CP",@{typ instruction},var("v127",@{typ CP}),@{theory}),
              cs(var("v127",@{typ CP}),
                 [(call
                     ("CP.DMFC0",@{typ CP},
                      var("v128",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMFC0",@{typ "state \<Rightarrow> state"},
                         var("v128",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.DMTC0",@{typ CP},
                      var("v129",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DMTC0",@{typ "state \<Rightarrow> state"},
                         var("v129",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.MFC0",@{typ CP},
                      var("v130",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MFC0",@{typ "state \<Rightarrow> state"},
                         var("v130",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("CP.MTC0",@{typ CP},
                      var("v131",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MTC0",@{typ "state \<Rightarrow> state"},
                         var("v131",@{typ "5 word \<times> 5 word \<times> 3 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Load",@{typ instruction},var("v132",@{typ Load}),@{theory}),
              cs(var("v132",@{typ Load}),
                 [(call
                     ("Load.LB",@{typ Load},
                      var("v133",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LB",@{typ "state \<Rightarrow> state"},
                         var("v133",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LBU",@{typ Load},
                      var("v134",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LBU",@{typ "state \<Rightarrow> state"},
                         var("v134",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LD",@{typ Load},
                      var("v135",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LD",@{typ "state \<Rightarrow> state"},
                         var("v135",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LDL",@{typ Load},
                      var("v136",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDL",@{typ "state \<Rightarrow> state"},
                         var("v136",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LDR",@{typ Load},
                      var("v137",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LDR",@{typ "state \<Rightarrow> state"},
                         var("v137",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LH",@{typ Load},
                      var("v138",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LH",@{typ "state \<Rightarrow> state"},
                         var("v138",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LHU",@{typ Load},
                      var("v139",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LHU",@{typ "state \<Rightarrow> state"},
                         var("v139",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LL",@{typ Load},
                      var("v140",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LL",@{typ "state \<Rightarrow> state"},
                         var("v140",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LLD",@{typ Load},
                      var("v141",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LLD",@{typ "state \<Rightarrow> state"},
                         var("v141",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LW",@{typ Load},
                      var("v142",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LW",@{typ "state \<Rightarrow> state"},
                         var("v142",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWL",@{typ Load},
                      var("v143",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWL",@{typ "state \<Rightarrow> state"},
                         var("v143",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWR",@{typ Load},
                      var("v144",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWR",@{typ "state \<Rightarrow> state"},
                         var("v144",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Load.LWU",@{typ Load},
                      var("v145",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'LWU",@{typ "state \<Rightarrow> state"},
                         var("v145",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.MultDiv",@{typ instruction},var("v146",@{typ MultDiv}),@{theory}),
              cs(var("v146",@{typ MultDiv}),
                 [(call
                     ("MultDiv.DDIV",@{typ MultDiv},var("v147",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DDIV",@{typ "state \<Rightarrow> state"},
                         var("v147",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DDIVU",@{typ MultDiv},var("v148",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DDIVU",@{typ "state \<Rightarrow> state"},
                         var("v148",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DIV",@{typ MultDiv},var("v149",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DIV",@{typ "state \<Rightarrow> state"},
                         var("v149",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DIVU",@{typ MultDiv},var("v150",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DIVU",@{typ "state \<Rightarrow> state"},
                         var("v150",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DMULT",@{typ MultDiv},var("v151",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DMULT",@{typ "state \<Rightarrow> state"},
                         var("v151",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.DMULTU",@{typ MultDiv},var("v152",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'DMULTU",@{typ "state \<Rightarrow> state"},
                         var("v152",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MADD",@{typ MultDiv},var("v153",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADD",@{typ "state \<Rightarrow> state"},
                         var("v153",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MADDU",@{typ MultDiv},var("v154",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MADDU",@{typ "state \<Rightarrow> state"},
                         var("v154",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("MultDiv.MFHI",@{typ MultDiv},var_w("v155",5),@{theory}),
                   apply
                     (call("dfn'MFHI",@{typ "state \<Rightarrow> state"},var_w("v155",5),@{theory}),
                      var("state",qTy))),
                  (call("MultDiv.MFLO",@{typ MultDiv},var_w("v156",5),@{theory}),
                   apply
                     (call("dfn'MFLO",@{typ "state \<Rightarrow> state"},var_w("v156",5),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MSUB",@{typ MultDiv},var("v157",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUB",@{typ "state \<Rightarrow> state"},
                         var("v157",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MSUBU",@{typ MultDiv},var("v158",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MSUBU",@{typ "state \<Rightarrow> state"},
                         var("v158",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call("MultDiv.MTHI",@{typ MultDiv},var_w("v159",5),@{theory}),
                   apply
                     (call("dfn'MTHI",@{typ "state \<Rightarrow> state"},var_w("v159",5),@{theory}),
                      var("state",qTy))),
                  (call("MultDiv.MTLO",@{typ MultDiv},var_w("v160",5),@{theory}),
                   apply
                     (call("dfn'MTLO",@{typ "state \<Rightarrow> state"},var_w("v160",5),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MUL",@{typ MultDiv},
                      var("v161",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'MUL",@{typ "state \<Rightarrow> state"},
                         var("v161",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("MultDiv.MULT",@{typ MultDiv},var("v162",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MULT",@{typ "state \<Rightarrow> state"},
                         var("v162",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("MultDiv.MULTU",@{typ MultDiv},var("v163",@{typ "5 word \<times> 5 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'MULTU",@{typ "state \<Rightarrow> state"},
                         var("v163",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy)))],
                 @{context})),
             (call("instruction.Shift",@{typ instruction},var("v164",@{typ Shift}),@{theory}),
              cs(var("v164",@{typ Shift}),
                 [(call
                     ("Shift.DSLL",@{typ Shift},
                      var("v165",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLL",@{typ "state \<Rightarrow> state"},
                         var("v165",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSLL32",@{typ Shift},
                      var("v166",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLL32",@{typ "state \<Rightarrow> state"},
                         var("v166",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSLLV",@{typ Shift},
                      var("v167",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSLLV",@{typ "state \<Rightarrow> state"},
                         var("v167",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRA",@{typ Shift},
                      var("v168",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRA",@{typ "state \<Rightarrow> state"},
                         var("v168",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRA32",@{typ Shift},
                      var("v169",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRA32",@{typ "state \<Rightarrow> state"},
                         var("v169",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRAV",@{typ Shift},
                      var("v170",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRAV",@{typ "state \<Rightarrow> state"},
                         var("v170",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRL",@{typ Shift},
                      var("v171",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRL",@{typ "state \<Rightarrow> state"},
                         var("v171",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRL32",@{typ Shift},
                      var("v172",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRL32",@{typ "state \<Rightarrow> state"},
                         var("v172",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.DSRLV",@{typ Shift},
                      var("v173",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'DSRLV",@{typ "state \<Rightarrow> state"},
                         var("v173",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLL",@{typ Shift},
                      var("v174",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLL",@{typ "state \<Rightarrow> state"},
                         var("v174",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SLLV",@{typ Shift},
                      var("v175",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SLLV",@{typ "state \<Rightarrow> state"},
                         var("v175",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRA",@{typ Shift},
                      var("v176",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRA",@{typ "state \<Rightarrow> state"},
                         var("v176",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRAV",@{typ Shift},
                      var("v177",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRAV",@{typ "state \<Rightarrow> state"},
                         var("v177",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRL",@{typ Shift},
                      var("v178",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRL",@{typ "state \<Rightarrow> state"},
                         var("v178",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Shift.SRLV",@{typ Shift},
                      var("v179",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SRLV",@{typ "state \<Rightarrow> state"},
                         var("v179",@{typ "5 word \<times> 5 word \<times> 5 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Store",@{typ instruction},var("v180",@{typ Store}),@{theory}),
              cs(var("v180",@{typ Store}),
                 [(call
                     ("Store.SB",@{typ Store},
                      var("v181",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SB",@{typ "state \<Rightarrow> state"},
                         var("v181",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SC",@{typ Store},
                      var("v182",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SC",@{typ "state \<Rightarrow> state"},
                         var("v182",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SCD",@{typ Store},
                      var("v183",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SCD",@{typ "state \<Rightarrow> state"},
                         var("v183",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SD",@{typ Store},
                      var("v184",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SD",@{typ "state \<Rightarrow> state"},
                         var("v184",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SDL",@{typ Store},
                      var("v185",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDL",@{typ "state \<Rightarrow> state"},
                         var("v185",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SDR",@{typ Store},
                      var("v186",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SDR",@{typ "state \<Rightarrow> state"},
                         var("v186",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SH",@{typ Store},
                      var("v187",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SH",@{typ "state \<Rightarrow> state"},
                         var("v187",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SW",@{typ Store},
                      var("v188",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SW",@{typ "state \<Rightarrow> state"},
                         var("v188",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SWL",@{typ Store},
                      var("v189",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWL",@{typ "state \<Rightarrow> state"},
                         var("v189",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy))),
                  (call
                     ("Store.SWR",@{typ Store},
                      var("v190",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'SWR",@{typ "state \<Rightarrow> state"},
                         var("v190",@{typ "5 word \<times> 5 word \<times> 16 word"}),@{theory}),
                      var("state",qTy)))],@{context})),
             (call("instruction.Trap",@{typ instruction},var("v191",@{typ Trap}),@{theory}),
              cs(var("v191",@{typ Trap}),
                 [(call
                     ("Trap.TEQ",@{typ Trap},var("v192",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TEQ",@{typ "state \<Rightarrow> state"},
                         var("v192",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TEQI",@{typ Trap},var("v193",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TEQI",@{typ "state \<Rightarrow> state"},
                         var("v193",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGE",@{typ Trap},var("v194",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGE",@{typ "state \<Rightarrow> state"},
                         var("v194",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEI",@{typ Trap},var("v195",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGEI",@{typ "state \<Rightarrow> state"},
                         var("v195",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEIU",@{typ Trap},var("v196",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TGEIU",@{typ "state \<Rightarrow> state"},
                         var("v196",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TGEU",@{typ Trap},var("v197",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TGEU",@{typ "state \<Rightarrow> state"},
                         var("v197",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLT",@{typ Trap},var("v198",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLT",@{typ "state \<Rightarrow> state"},
                         var("v198",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTI",@{typ Trap},var("v199",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLTI",@{typ "state \<Rightarrow> state"},
                         var("v199",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTIU",@{typ Trap},var("v200",@{typ "5 word \<times> 16 word"}),
                      @{theory}),
                   apply
                     (call
                        ("dfn'TLTIU",@{typ "state \<Rightarrow> state"},
                         var("v200",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TLTU",@{typ Trap},var("v201",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TLTU",@{typ "state \<Rightarrow> state"},
                         var("v201",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TNE",@{typ Trap},var("v202",@{typ "5 word \<times> 5 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TNE",@{typ "state \<Rightarrow> state"},
                         var("v202",@{typ "5 word \<times> 5 word"}),@{theory}),var("state",qTy))),
                  (call
                     ("Trap.TNEI",@{typ Trap},var("v203",@{typ "5 word \<times> 16 word"}),@{theory}),
                   apply
                     (call
                        ("dfn'TNEI",@{typ "state \<Rightarrow> state"},
                         var("v203",@{typ "5 word \<times> 16 word"}),@{theory}),var("state",qTy)))],
                 @{context}))],@{context}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP1Decode",
   close
     (var_w("v",26),
      call
        ("instruction.COP1",@{typ instruction},
         let'
           (tp[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",
               var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
            call
              ("boolify'26",
               @{typ
               "bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
               var_w("v",26),@{theory}),
            itb([(var_b"b'21",
                  itb([(var_b"b'3",
                        itb([(var_b"b'2",
                              ite(bop(And,var_b"b'25",
                                      bop(And,mop(Not,var_b"b'24"),
                                          bop(And,mop(Not,var_b"b'23"),
                                              bop(And,mop(Not,var_b"b'22"),
                                                  bop(And,mop(Not,var_b"b'20"),
                                                      bop(And,mop(Not,var_b"b'19"),
                                                          bop(And,mop(Not,var_b"b'18"),
                                                              bop(And,mop(Not,var_b"b'17"),
                                                                  bop(And,mop(Not,var_b"b'16"),
                                                                      bop(And,mop(Not,var_b"b'5"),
                                                                          mop(Not,var_b"b'4"))))))))))),
                                  itb([(bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")),
                                        call
                                          ("COP1.ROUND_W_D",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,mop(Not,var_b"b'1"),var_b"b'0"),
                                        call
                                          ("COP1.TRUNC_W_D",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,var_b"b'1",mop(Not,var_b"b'0")),
                                        call
                                          ("COP1.CEIL_W_D",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,var_b"b'1",var_b"b'0"),
                                        call
                                          ("COP1.FLOOR_W_D",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory}))],
                                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                                  Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'22"),
                                              bop(And,mop(Not,var_b"b'20"),
                                                  bop(And,mop(Not,var_b"b'19"),
                                                      bop(And,mop(Not,var_b"b'18"),
                                                          bop(And,mop(Not,var_b"b'17"),
                                                              bop(And,mop(Not,var_b"b'16"),
                                                                  bop(And,mop(Not,var_b"b'5"),
                                                                      mop(Not,var_b"b'4"))))))))))),
                              itb([(bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")),
                                    call
                                      ("COP1.ROUND_L_D",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,mop(Not,var_b"b'1"),var_b"b'0"),
                                    call
                                      ("COP1.TRUNC_L_D",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,var_b"b'1",mop(Not,var_b"b'0")),
                                    call
                                      ("COP1.CEIL_L_D",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,var_b"b'1",var_b"b'0"),
                                    call
                                      ("COP1.FLOOR_L_D",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory}))],
                                  Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (var_b"b'5",
                        ite(bop(And,var_b"b'25",bop(And,mop(Not,var_b"b'24"),mop(Not,var_b"b'22"))),
                            itb([(bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'7"),
                                          bop(And,mop(Not,var_b"b'6"),var_b"b'4"))),
                                  call
                                    ("COP1.C_cond_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      mop(Not,var_b"b'0")))))))))),
                                  call
                                    ("COP1.CVT_S_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,var_b"b'23",
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      mop(Not,var_b"b'0")))))))))),
                                  call
                                    ("COP1.CVT_S_L",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,var_b"b'23",
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      var_b"b'0"))))))))),
                                  call
                                    ("COP1.CVT_D_L",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      mop(Not,var_b"b'0")))))))))),
                                  call
                                    ("COP1.CVT_W_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      var_b"b'0"))))))))),
                                  call
                                    ("COP1.CVT_L_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory}))],
                                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (var_b"b'0",
                        ite(bop(And,var_b"b'25",
                                bop(And,mop(Not,var_b"b'24"),
                                    bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'22")))),
                            itb([(bop(And,mop(Not,var_b"b'4"),
                                      bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))),
                                  call
                                    ("COP1.SUB_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'4"),
                                      bop(And,mop(Not,var_b"b'2"),var_b"b'1")),
                                  call
                                    ("COP1.DIV_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'20"),
                                      bop(And,mop(Not,var_b"b'19"),
                                          bop(And,mop(Not,var_b"b'18"),
                                              bop(And,mop(Not,var_b"b'17"),
                                                  bop(And,mop(Not,var_b"b'16"),
                                                      bop(And,mop(Not,var_b"b'4"),
                                                          bop(And,var_b"b'2",mop(Not,var_b"b'1")))))))),
                                  call
                                    ("COP1.ABS_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'20"),
                                      bop(And,mop(Not,var_b"b'19"),
                                          bop(And,mop(Not,var_b"b'18"),
                                              bop(And,mop(Not,var_b"b'17"),
                                                  bop(And,mop(Not,var_b"b'16"),
                                                      bop(And,mop(Not,var_b"b'4"),
                                                          bop(And,var_b"b'2",var_b"b'1"))))))),
                                  call
                                    ("COP1.NEG_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'17"),
                                      bop(And,mop(Not,var_b"b'16"),
                                          bop(And,var_b"b'4",
                                              bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))))),
                                  call
                                    ("COP1.MOVF_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'17"),
                                      bop(And,var_b"b'16",
                                          bop(And,var_b"b'4",
                                              bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))))),
                                  call
                                    ("COP1.MOVT_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                                 (bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'2"),var_b"b'1")),
                                  call
                                    ("COP1.MOVN_D",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory}))],
                                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (bop(And,mop(Not,var_b"b'24"),mop(Not,var_b"b'22")),
                        itb([(bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'10"),
                                          bop(And,mop(Not,var_b"b'9"),
                                              bop(And,mop(Not,var_b"b'8"),
                                                  bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  mop(Not,var_b"b'1")))))))))),
                              call
                                ("COP1.DMFC1",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,var_b"b'23",
                                      bop(And,mop(Not,var_b"b'10"),
                                          bop(And,mop(Not,var_b"b'9"),
                                              bop(And,mop(Not,var_b"b'8"),
                                                  bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  mop(Not,var_b"b'1")))))))))),
                              call
                                ("COP1.DMTC1",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'4"),
                                          bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))))),
                              call
                                ("COP1.ADD_D",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory})),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'4"),
                                          bop(And,mop(Not,var_b"b'2"),var_b"b'1")))),
                              call
                                ("COP1.MUL_D",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory})),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",mop(Not,var_b"b'1")))))))))),
                              call
                                ("COP1.SQRT_D",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",var_b"b'1"))))))))),
                              call
                                ("COP1.MOV_D",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,var_b"b'25",
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'2"),var_b"b'1")))),
                              call
                                ("COP1.MOVZ_D",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory}))],
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                 (var_b"b'25",
                  itb([(var_b"b'3",
                        itb([(var_b"b'2",
                              ite(bop(And,mop(Not,var_b"b'24"),
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'22"),
                                              bop(And,mop(Not,var_b"b'20"),
                                                  bop(And,mop(Not,var_b"b'19"),
                                                      bop(And,mop(Not,var_b"b'18"),
                                                          bop(And,mop(Not,var_b"b'17"),
                                                              bop(And,mop(Not,var_b"b'16"),
                                                                  bop(And,mop(Not,var_b"b'5"),
                                                                      mop(Not,var_b"b'4")))))))))),
                                  itb([(bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")),
                                        call
                                          ("COP1.ROUND_W_S",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,mop(Not,var_b"b'1"),var_b"b'0"),
                                        call
                                          ("COP1.TRUNC_W_S",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,var_b"b'1",mop(Not,var_b"b'0")),
                                        call
                                          ("COP1.CEIL_W_S",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory})),
                                       (bop(And,var_b"b'1",var_b"b'0"),
                                        call
                                          ("COP1.FLOOR_W_S",@{typ COP1},
                                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                     var_b"b'6"]),
                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                     var_b"b'12",var_b"b'11"])],@{theory}))],
                                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                                  Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                             (bop(And,mop(Not,var_b"b'24"),
                                  bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'22"),
                                          bop(And,mop(Not,var_b"b'20"),
                                              bop(And,mop(Not,var_b"b'19"),
                                                  bop(And,mop(Not,var_b"b'18"),
                                                      bop(And,mop(Not,var_b"b'17"),
                                                          bop(And,mop(Not,var_b"b'16"),
                                                              bop(And,mop(Not,var_b"b'5"),
                                                                  mop(Not,var_b"b'4")))))))))),
                              itb([(bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")),
                                    call
                                      ("COP1.ROUND_L_S",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,mop(Not,var_b"b'1"),var_b"b'0"),
                                    call
                                      ("COP1.TRUNC_L_S",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,var_b"b'1",mop(Not,var_b"b'0")),
                                    call
                                      ("COP1.CEIL_L_S",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory})),
                                   (bop(And,var_b"b'1",var_b"b'0"),
                                    call
                                      ("COP1.FLOOR_L_S",@{typ COP1},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                                 var_b"b'6"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11"])],@{theory}))],
                                  Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (var_b"b'5",
                        ite(bop(And,mop(Not,var_b"b'24"),mop(Not,var_b"b'22")),
                            itb([(bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'7"),
                                          bop(And,mop(Not,var_b"b'6"),var_b"b'4"))),
                                  call
                                    ("COP1.C_cond_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        mop(Cast (Word_Lib.mk_wordT 3),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8"])],@{theory})),
                                 (bop(And,var_b"b'23",
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      mop(Not,var_b"b'0")))))))))),
                                  call
                                    ("COP1.CVT_S_W",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      var_b"b'0"))))))))),
                                  call
                                    ("COP1.CVT_D_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,var_b"b'23",
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,mop(Not,var_b"b'2"),
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      var_b"b'0"))))))))),
                                  call
                                    ("COP1.CVT_D_W",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      mop(Not,var_b"b'0")))))))))),
                                  call
                                    ("COP1.CVT_W_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'23"),
                                      bop(And,mop(Not,var_b"b'20"),
                                          bop(And,mop(Not,var_b"b'19"),
                                              bop(And,mop(Not,var_b"b'18"),
                                                  bop(And,mop(Not,var_b"b'17"),
                                                      bop(And,mop(Not,var_b"b'16"),
                                                          bop(And,mop(Not,var_b"b'4"),
                                                              bop(And,var_b"b'2",
                                                                  bop(And,mop(Not,var_b"b'1"),
                                                                      var_b"b'0"))))))))),
                                  call
                                    ("COP1.CVT_L_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory}))],
                                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (var_b"b'1",
                        ite(bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'22"))),
                            itb([(bop(And,mop(Not,var_b"b'4"),
                                      bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'0"))),
                                  call
                                    ("COP1.MUL_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'4"),
                                      bop(And,mop(Not,var_b"b'2"),var_b"b'0")),
                                  call
                                    ("COP1.DIV_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'20"),
                                      bop(And,mop(Not,var_b"b'19"),
                                          bop(And,mop(Not,var_b"b'18"),
                                              bop(And,mop(Not,var_b"b'17"),
                                                  bop(And,mop(Not,var_b"b'16"),
                                                      bop(And,mop(Not,var_b"b'4"),
                                                          bop(And,var_b"b'2",mop(Not,var_b"b'0")))))))),
                                  call
                                    ("COP1.MOV_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,mop(Not,var_b"b'20"),
                                      bop(And,mop(Not,var_b"b'19"),
                                          bop(And,mop(Not,var_b"b'18"),
                                              bop(And,mop(Not,var_b"b'17"),
                                                  bop(And,mop(Not,var_b"b'16"),
                                                      bop(And,mop(Not,var_b"b'4"),
                                                          bop(And,var_b"b'2",var_b"b'0"))))))),
                                  call
                                    ("COP1.NEG_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"])],@{theory})),
                                 (bop(And,var_b"b'4",
                                      bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'0"))),
                                  call
                                    ("COP1.MOVZ_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory})),
                                 (bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'2"),var_b"b'0")),
                                  call
                                    ("COP1.MOVN_S",@{typ COP1},
                                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                               var_b"b'6"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                               var_b"b'11"]),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"])],@{theory}))],
                                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                       (bop(And,mop(Not,var_b"b'24"),
                            bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'22"))),
                        itb([(bop(And,mop(Not,var_b"b'4"),
                                  bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'0"))),
                              call
                                ("COP1.ADD_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'2"),var_b"b'0")),
                              call
                                ("COP1.SUB_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'20"),
                                  bop(And,mop(Not,var_b"b'19"),
                                      bop(And,mop(Not,var_b"b'18"),
                                          bop(And,mop(Not,var_b"b'17"),
                                              bop(And,mop(Not,var_b"b'16"),
                                                  bop(And,mop(Not,var_b"b'4"),
                                                      bop(And,var_b"b'2",mop(Not,var_b"b'0")))))))),
                              call
                                ("COP1.SQRT_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'20"),
                                  bop(And,mop(Not,var_b"b'19"),
                                      bop(And,mop(Not,var_b"b'18"),
                                          bop(And,mop(Not,var_b"b'17"),
                                              bop(And,mop(Not,var_b"b'16"),
                                                  bop(And,mop(Not,var_b"b'4"),
                                                      bop(And,var_b"b'2",var_b"b'0"))))))),
                              call
                                ("COP1.ABS_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'17"),
                                  bop(And,mop(Not,var_b"b'16"),
                                      bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'2"),var_b"b'0")))),
                              call
                                ("COP1.MOVF_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                             (bop(And,mop(Not,var_b"b'17"),
                                  bop(And,var_b"b'16",
                                      bop(And,var_b"b'4",bop(And,mop(Not,var_b"b'2"),var_b"b'0")))),
                              call
                                ("COP1.MOVT_S",@{typ COP1},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"]),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory}))],
                            Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                 (var_b"b'24",
                  ite(bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'22")),
                      itb([(bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")),
                            call
                              ("COP1.BC1F",@{typ COP1},
                               tp[mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  mop(Cast (Word_Lib.mk_wordT 3),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                           (bop(And,mop(Not,var_b"b'17"),var_b"b'16"),
                            call
                              ("COP1.BC1T",@{typ COP1},
                               tp[mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  mop(Cast (Word_Lib.mk_wordT 3),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                           (bop(And,var_b"b'17",mop(Not,var_b"b'16")),
                            call
                              ("COP1.BC1FL",@{typ COP1},
                               tp[mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  mop(Cast (Word_Lib.mk_wordT 3),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory})),
                           (bop(And,var_b"b'17",var_b"b'16"),
                            call
                              ("COP1.BC1TL",@{typ COP1},
                               tp[mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  mop(Cast (Word_Lib.mk_wordT 3),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18"])],@{theory}))],
                          Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                 (bop(And,mop(Not,var_b"b'10"),
                      bop(And,mop(Not,var_b"b'9"),
                          bop(And,mop(Not,var_b"b'8"),
                              bop(And,mop(Not,var_b"b'7"),
                                  bop(And,mop(Not,var_b"b'6"),
                                      bop(And,mop(Not,var_b"b'5"),
                                          bop(And,mop(Not,var_b"b'4"),
                                              bop(And,mop(Not,var_b"b'3"),
                                                  bop(And,mop(Not,var_b"b'2"),
                                                      bop(And,mop(Not,var_b"b'1"),
                                                          mop(Not,var_b"b'0"))))))))))),
                  itb([(bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'22")),
                        call
                          ("COP1.MFC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory})),
                       (bop(And,mop(Not,var_b"b'23"),var_b"b'22"),
                        call
                          ("COP1.CFC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory})),
                       (bop(And,var_b"b'23",mop(Not,var_b"b'22")),
                        call
                          ("COP1.MTC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory})),
                       (bop(And,var_b"b'23",var_b"b'22"),
                        call
                          ("COP1.CTC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                           @{theory}))],Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LDC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call
        ("instruction.COP1",@{typ instruction},
         call
           ("COP1.LDC1",@{typ COP1},tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LWC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call
        ("instruction.COP1",@{typ instruction},
         call
           ("COP1.LWC1",@{typ COP1},tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SDC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call
        ("instruction.COP1",@{typ instruction},
         call
           ("COP1.SDC1",@{typ COP1},tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SWC1Decode",
   close
     (tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],
      call
        ("instruction.COP1",@{typ instruction},
         call
           ("COP1.SWC1",@{typ COP1},tp[var_w("base",5),var_w("offset",16),var_w("ft",5)],@{theory}),
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("MOVCIDecode",
   close
     (tp[var_w("rs",5),var_w("rt",5),var_w("rd",5)],
      let'
        (tp[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'5",@{typ "bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("rt",5),@{theory}),
         ite(mop(Not,var_b"b'1"),
             itb([(mop(Not,var_b"b'0"),
                   call
                     ("instruction.COP1",@{typ instruction},
                      call
                        ("COP1.MOVF",@{typ COP1},
                         tp[var_w("rd",5),var_w("rs",5),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'4",var_b"b'3",var_b"b'2"])],
                         @{theory}),@{theory})),
                  (var_b"b'0",
                   call
                     ("instruction.COP1",@{typ instruction},
                      call
                        ("COP1.MOVT",@{typ COP1},
                         tp[var_w("rd",5),var_w("rs",5),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'4",var_b"b'3",var_b"b'2"])],
                         @{theory}),@{theory}))],
                 Term.Const(@{const_name "ReservedInstruction"},@{typ instruction})),
             Term.Const(@{const_name "ReservedInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("COP3Decode",
   close
     (var_w("v",26),
      call
        ("instruction.COP1",@{typ instruction},
         let'
           (tp[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",
               var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
               var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
            call
              ("boolify'26",
               @{typ
               "bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
               var_w("v",26),@{theory}),
            itb([(var_b"b'5",
                  ite(bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))),
                      itb([(bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'0")),
                            call
                              ("COP1.MADD_S",@{typ COP1},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                               @{theory})),
                           (bop(And,mop(Not,var_b"b'3"),var_b"b'0"),
                            call
                              ("COP1.MADD_D",@{typ COP1},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                               @{theory})),
                           (bop(And,var_b"b'3",mop(Not,var_b"b'0")),
                            call
                              ("COP1.MSUB_S",@{typ COP1},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                               @{theory})),
                           (bop(And,var_b"b'3",var_b"b'0"),
                            call
                              ("COP1.MSUB_D",@{typ COP1},
                               tp[mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                                  mop(Cast (Word_Lib.mk_wordT 5),
                                      ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                               @{theory}))],
                          Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})),
                      Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),
                 (bop(And,mop(Not,var_b"b'4"),bop(And,mop(Not,var_b"b'2"),mop(Not,var_b"b'1"))),
                  itb([(bop(And,mop(Not,var_b"b'15"),
                            bop(And,mop(Not,var_b"b'14"),
                                bop(And,mop(Not,var_b"b'13"),
                                    bop(And,mop(Not,var_b"b'12"),
                                        bop(And,mop(Not,var_b"b'11"),
                                            bop(And,mop(Not,var_b"b'3"),mop(Not,var_b"b'0"))))))),
                        call
                          ("COP1.LWXC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                           @{theory})),
                       (bop(And,mop(Not,var_b"b'15"),
                            bop(And,mop(Not,var_b"b'14"),
                                bop(And,mop(Not,var_b"b'13"),
                                    bop(And,mop(Not,var_b"b'12"),
                                        bop(And,mop(Not,var_b"b'11"),
                                            bop(And,mop(Not,var_b"b'3"),var_b"b'0")))))),
                        call
                          ("COP1.LDXC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                           @{theory})),
                       (bop(And,mop(Not,var_b"b'10"),
                            bop(And,mop(Not,var_b"b'9"),
                                bop(And,mop(Not,var_b"b'8"),
                                    bop(And,mop(Not,var_b"b'7"),
                                        bop(And,mop(Not,var_b"b'6"),
                                            bop(And,var_b"b'3",mop(Not,var_b"b'0"))))))),
                        call
                          ("COP1.SWXC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                           @{theory})),
                       (bop(And,mop(Not,var_b"b'10"),
                            bop(And,mop(Not,var_b"b'9"),
                                bop(And,mop(Not,var_b"b'8"),
                                    bop(And,mop(Not,var_b"b'7"),
                                        bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'3",var_b"b'0")))))),
                        call
                          ("COP1.SDXC1",@{typ COP1},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                           @{theory}))],Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1})))],
                Term.Const(@{const_name "UnknownFPInstruction"},@{typ COP1}))),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Decode",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",var_b"b'25",
            var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",
            var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
            var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
            var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'32",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            var_w("w",32),@{theory}),
         itb([(var_b"b'26",
               itb([(var_b"b'28",
                     itb([(var_b"b'31",
                           itb([(var_b"b'30",
                                 itb([(bop(And,mop(Not,var_b"b'29"),var_b"b'27"),
                                       call
                                         ("instruction.Load",@{typ instruction},
                                          call
                                            ("Load.LD",@{typ Load},
                                             tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'25",var_b"b'24",var_b"b'23",
                                                       var_b"b'22",var_b"b'21"]),
                                                mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                       var_b"b'17",var_b"b'16"]),
                                                mop(Cast w16,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12",var_b"b'11",var_b"b'10",
                                                       var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                                       var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                                       var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                                      (bop(And,var_b"b'29",var_b"b'27"),
                                       call
                                         ("instruction.Store",@{typ instruction},
                                          call
                                            ("Store.SD",@{typ Store},
                                             tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'25",var_b"b'24",var_b"b'23",
                                                       var_b"b'22",var_b"b'21"]),
                                                mop(Cast (Word_Lib.mk_wordT 5),
                                                    ll[var_b"b'20",var_b"b'19",var_b"b'18",
                                                       var_b"b'17",var_b"b'16"]),
                                                mop(Cast w16,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12",var_b"b'11",var_b"b'10",
                                                       var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                                       var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                                       var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                                      (bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27")),
                                       call
                                         ("LDC1Decode",@{typ instruction},
                                          tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                    var_b"b'16"]),
                                             mop(Cast w16,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                    var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                    var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                    var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                             mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                    var_b"b'21"])],@{theory})),
                                      (bop(And,var_b"b'29",mop(Not,var_b"b'27")),
                                       call
                                         ("SDC1Decode",@{typ instruction},
                                          tp[mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                    var_b"b'16"]),
                                             mop(Cast w16,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                    var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                    var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                    var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                             mop(Cast (Word_Lib.mk_wordT 5),
                                                 ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                    var_b"b'21"])],@{theory}))],
                                     Term.Const
                                       (@{const_name "ReservedInstruction"},@{typ instruction}))),
                                (bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27")),
                                 call
                                   ("instruction.Load",@{typ instruction},
                                    call
                                      ("Load.LHU",@{typ Load},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,mop(Not,var_b"b'29"),var_b"b'27"),
                                 call
                                   ("instruction.Load",@{typ instruction},
                                    call
                                      ("Load.LWU",@{typ Load},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,var_b"b'29",mop(Not,var_b"b'27")),
                                 call
                                   ("instruction.Store",@{typ instruction},
                                    call
                                      ("Store.SDR",@{typ Store},
                                       tp[mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                                 var_b"b'21"]),
                                          mop(Cast (Word_Lib.mk_wordT 5),
                                              ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                                 var_b"b'16"]),
                                          mop(Cast w16,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                                 var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                                 var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                 var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                       @{theory}),@{theory})),
                                (bop(And,var_b"b'29",var_b"b'27"),
                                 call
                                   ("instruction.CACHE",@{typ instruction},
                                    tp[mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                              var_b"b'21"]),
                                       mop(Cast (Word_Lib.mk_wordT 5),
                                           ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                              var_b"b'16"]),
                                       mop(Cast w16,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                              var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                                              var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                              var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],
                                    @{theory}))],
                               Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'19"),
                                               bop(And,mop(Not,var_b"b'18"),
                                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BGTZ",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,var_b"b'29",
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'25"),
                                           bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'21")))))))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.LUI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,mop(Not,var_b"b'29"),
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'20"),
                                           bop(And,mop(Not,var_b"b'19"),
                                               bop(And,mop(Not,var_b"b'18"),
                                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BGTZL",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),
                               bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BNE",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'30"),bop(And,var_b"b'29",mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.ORI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",bop(And,mop(Not,var_b"b'29"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Branch",@{typ instruction},
                              call
                                ("Branch.BNEL",@{typ Branch},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'30",
                               bop(And,var_b"b'29",
                                   bop(And,var_b"b'27",
                                       bop(And,mop(Not,var_b"b'25"),
                                           bop(And,mop(Not,var_b"b'24"),
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,mop(Not,var_b"b'22"),
                                                       bop(And,mop(Not,var_b"b'21"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,var_b"b'5",
                                                                                   bop(And,
                                                                                       var_b"b'4",
                                                                                       bop(And,
                                                                                           var_b"b'3",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'2"),
                                                                                               bop(And,
                                                                                                   var_b"b'1",
                                                                                                   var_b"b'0")))))))))))))))))),
                           call
                             ("instruction.RDHWR",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                              @{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (var_b"b'29",
                     itb([(bop(And,mop(Not,var_b"b'31"),
                               bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.ADDIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.SLTIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.DADDIU",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",var_b"b'27")),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LDR",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SH",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SW",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                           call
                             ("SWC1Decode",@{typ instruction},
                              tp[mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mop(Cast w16,
                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                        var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                        var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                        var_b"b'0"]),
                                 mop(Cast (Word_Lib.mk_wordT 5),
                                     ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                              @{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZ",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZ",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TGEI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TGEIU",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TLTI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TLTIU",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,var_b"b'18",
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TEQI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,var_b"b'19",
                                         bop(And,var_b"b'18",
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Trap",@{typ instruction},
                        call
                          ("Trap.TNEI",@{typ Trap},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,var_b"b'24",
                                         bop(And,var_b"b'23",
                                             bop(And,var_b"b'22",
                                                 bop(And,var_b"b'21",
                                                     bop(And,var_b"b'20",
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             mop(Not,var_b"b'18"))))))))))),
                     Term.Const(@{const_name "Unpredictable"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZAL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZAL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLTZALL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'30"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,var_b"b'17",var_b"b'16"))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BGEZALL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.JAL",@{typ Branch},
                           mop(Cast (Word_Lib.mk_wordT 26),
                               ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                                  var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                                  var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                           @{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),mop(Not,var_b"b'27"))),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LH",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'30"),var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LW",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                     call
                       ("COP1Decode",@{typ instruction},
                        mop(Cast (Word_Lib.mk_wordT 26),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'30",var_b"b'27")),
                     call
                       ("COP3Decode",@{typ instruction},
                        mop(Cast (Word_Lib.mk_wordT 26),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
                               var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                               var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory})),
                    (bop(And,var_b"b'31",bop(And,var_b"b'30",mop(Not,var_b"b'27"))),
                     call
                       ("LWC1Decode",@{typ instruction},
                        tp[mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           mop(Cast w16,
                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                  var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                  var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                           mop(Cast (Word_Lib.mk_wordT 5),
                               ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"])],
                        @{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'30",
               itb([(var_b"b'29",
                     itb([(bop(And,mop(Not,var_b"b'31"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'15"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),
                                                   bop(And,mop(Not,var_b"b'12"),
                                                       bop(And,mop(Not,var_b"b'11"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'5"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'4"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'3"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'2"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'1"),
                                                                                                   mop(Not,
                                                                                                       var_b"b'0"))))))))))))))))))),
                           call
                             ("instruction.MultDiv",@{typ instruction},
                              call
                                ("MultDiv.MADD",@{typ MultDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'15"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),
                                                   bop(And,mop(Not,var_b"b'12"),
                                                       bop(And,mop(Not,var_b"b'11"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'5"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'4"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'3"),
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'2"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'1"),
                                                                                                   var_b"b'0")))))))))))))))))),
                           call
                             ("instruction.MultDiv",@{typ instruction},
                              call
                                ("MultDiv.MADDU",@{typ MultDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'15"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),
                                                   bop(And,mop(Not,var_b"b'12"),
                                                       bop(And,mop(Not,var_b"b'11"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'5"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'4"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'3"),
                                                                                           bop(And,
                                                                                               var_b"b'2",
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'1"),
                                                                                                   mop(Not,
                                                                                                       var_b"b'0"))))))))))))))))))),
                           call
                             ("instruction.MultDiv",@{typ instruction},
                              call
                                ("MultDiv.MSUB",@{typ MultDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'15"),
                                           bop(And,mop(Not,var_b"b'14"),
                                               bop(And,mop(Not,var_b"b'13"),
                                                   bop(And,mop(Not,var_b"b'12"),
                                                       bop(And,mop(Not,var_b"b'11"),
                                                           bop(And,mop(Not,var_b"b'10"),
                                                               bop(And,mop(Not,var_b"b'9"),
                                                                   bop(And,mop(Not,var_b"b'8"),
                                                                       bop(And,mop(Not,var_b"b'7"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'6"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'5"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'4"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'3"),
                                                                                           bop(And,
                                                                                               var_b"b'2",
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'1"),
                                                                                                   var_b"b'0")))))))))))))))))),
                           call
                             ("instruction.MultDiv",@{typ instruction},
                              call
                                ("MultDiv.MSUBU",@{typ MultDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,var_b"b'28",
                                   bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'10"),
                                           bop(And,mop(Not,var_b"b'9"),
                                               bop(And,mop(Not,var_b"b'8"),
                                                   bop(And,mop(Not,var_b"b'7"),
                                                       bop(And,mop(Not,var_b"b'6"),
                                                           bop(And,mop(Not,var_b"b'5"),
                                                               bop(And,mop(Not,var_b"b'4"),
                                                                   bop(And,mop(Not,var_b"b'3"),
                                                                       bop(And,mop(Not,var_b"b'2"),
                                                                           bop(And,var_b"b'1",
                                                                               mop(Not,var_b"b'0")))))))))))))),
                           call
                             ("instruction.MultDiv",@{typ instruction},
                              call
                                ("MultDiv.MUL",@{typ MultDiv},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),
                               bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.ArithI",@{typ instruction},
                              call
                                ("ArithI.DADDI",@{typ ArithI},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'31"),bop(And,mop(Not,var_b"b'28"),var_b"b'27")),
                           call
                             ("instruction.Load",@{typ instruction},
                              call
                                ("Load.LDL",@{typ Load},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SC",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'31",bop(And,var_b"b'28",mop(Not,var_b"b'27"))),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SCD",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'5"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'4"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'3"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'2"),
                                                                                                                                 bop(And,
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'1"),
                                                                                                                                     var_b"b'0")))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBR"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'5"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'4"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'3"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'2"),
                                                                                                                                 bop(And,
                                                                                                                                     var_b"b'1",
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'0"))))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBWI"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'5"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'4"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'3"),
                                                                                                                             bop(And,
                                                                                                                                 var_b"b'2",
                                                                                                                                 bop(And,
                                                                                                                                     var_b"b'1",
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'0"))))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBWR"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'5"),
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'4"),
                                                                                                                         bop(And,
                                                                                                                             var_b"b'3",
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'2"),
                                                                                                                                 bop(And,
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'1"),
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'0"))))))))))))))))))))))))))))),
                     Term.Const(@{const_name "TLBP"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     mop(Not,
                                                                                                                         var_b"b'5"),
                                                                                                                     bop(And,
                                                                                                                         var_b"b'4",
                                                                                                                         bop(And,
                                                                                                                             var_b"b'3",
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'2"),
                                                                                                                                 bop(And,
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'1"),
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'0"))))))))))))))))))))))))))))),
                     Term.Const(@{const_name "ERET"},@{typ instruction})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'10"),
                                                         bop(And,mop(Not,var_b"b'9"),
                                                             bop(And,mop(Not,var_b"b'8"),
                                                                 bop(And,mop(Not,var_b"b'7"),
                                                                     bop(And,mop(Not,var_b"b'6"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'5"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'4"),
                                                                                 mop(Not,var_b"b'3")))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.MFC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,var_b"b'21",
                                                     bop(And,mop(Not,var_b"b'10"),
                                                         bop(And,mop(Not,var_b"b'9"),
                                                             bop(And,mop(Not,var_b"b'8"),
                                                                 bop(And,mop(Not,var_b"b'7"),
                                                                     bop(And,mop(Not,var_b"b'6"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'5"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'4"),
                                                                                 mop(Not,var_b"b'3")))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.DMFC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'10"),
                                                         bop(And,mop(Not,var_b"b'9"),
                                                             bop(And,mop(Not,var_b"b'8"),
                                                                 bop(And,mop(Not,var_b"b'7"),
                                                                     bop(And,mop(Not,var_b"b'6"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'5"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'4"),
                                                                                 mop(Not,var_b"b'3")))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.MTC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,mop(Not,var_b"b'25"),
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,var_b"b'23",
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,var_b"b'21",
                                                     bop(And,mop(Not,var_b"b'10"),
                                                         bop(And,mop(Not,var_b"b'9"),
                                                             bop(And,mop(Not,var_b"b'8"),
                                                                 bop(And,mop(Not,var_b"b'7"),
                                                                     bop(And,mop(Not,var_b"b'6"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'5"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'4"),
                                                                                 mop(Not,var_b"b'3")))))))))))))))),
                     call
                       ("instruction.CP",@{typ instruction},
                        call
                          ("CP.DMTC0",@{typ CP},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                           @{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,var_b"b'28",
                             bop(And,var_b"b'27",
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16")))))))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BLEZL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),bop(And,var_b"b'28",mop(Not,var_b"b'27"))),
                     call
                       ("instruction.Branch",@{typ instruction},
                        call
                          ("Branch.BEQL",@{typ Branch},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27"))),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LL",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'31",bop(And,var_b"b'28",mop(Not,var_b"b'27"))),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LLD",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'31"),
                         bop(And,mop(Not,var_b"b'28"),
                             bop(And,mop(Not,var_b"b'27"),
                                 bop(And,var_b"b'25",
                                     bop(And,mop(Not,var_b"b'24"),
                                         bop(And,mop(Not,var_b"b'23"),
                                             bop(And,mop(Not,var_b"b'22"),
                                                 bop(And,mop(Not,var_b"b'21"),
                                                     bop(And,mop(Not,var_b"b'20"),
                                                         bop(And,mop(Not,var_b"b'19"),
                                                             bop(And,mop(Not,var_b"b'18"),
                                                                 bop(And,mop(Not,var_b"b'17"),
                                                                     bop(And,mop(Not,var_b"b'16"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'15"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'14"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'13"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'12"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'11"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'10"),
                                                                                                 bop(And,
                                                                                                     mop(Not,
                                                                                                         var_b"b'9"),
                                                                                                     bop(And,
                                                                                                         mop(Not,
                                                                                                             var_b"b'8"),
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'7"),
                                                                                                             bop(And,
                                                                                                                 mop(Not,
                                                                                                                     var_b"b'6"),
                                                                                                                 bop(And,
                                                                                                                     var_b"b'5",
                                                                                                                     bop(And,
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'4"),
                                                                                                                         bop(And,
                                                                                                                             mop(Not,
                                                                                                                                 var_b"b'3"),
                                                                                                                             bop(And,
                                                                                                                                 mop(Not,
                                                                                                                                     var_b"b'2"),
                                                                                                                                 bop(And,
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'1"),
                                                                                                                                     mop(Not,
                                                                                                                                         var_b"b'0"))))))))))))))))))))))))))))),
                     Term.Const(@{const_name "WAIT"},@{typ instruction}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'31",
               itb([(var_b"b'29",
                     itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SB",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SWL",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SDL",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory})),
                          (bop(And,var_b"b'28",var_b"b'27"),
                           call
                             ("instruction.Store",@{typ instruction},
                              call
                                ("Store.SWR",@{typ Store},
                                 tp[mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                                           var_b"b'21"]),
                                    mop(Cast (Word_Lib.mk_wordT 5),
                                        ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                           var_b"b'16"]),
                                    mop(Cast w16,
                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                           var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                           var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                           var_b"b'1",var_b"b'0"])],@{theory}),@{theory}))],
                         Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
                    (bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LB",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LWL",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LBU",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",var_b"b'27"),
                     call
                       ("instruction.Load",@{typ instruction},
                        call
                          ("Load.LWR",@{typ Load},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (var_b"b'29",
               itb([(bop(And,mop(Not,var_b"b'28"),mop(Not,var_b"b'27")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.ADDI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.SLTI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.ANDI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory})),
                    (bop(And,var_b"b'28",var_b"b'27"),
                     call
                       ("instruction.ArithI",@{typ instruction},
                        call
                          ("ArithI.XORI",@{typ ArithI},
                           tp[mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              mop(Cast w16,
                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                     var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                     var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                     var_b"b'0"])],@{theory}),@{theory}))],
                   Term.Const(@{const_name "ReservedInstruction"},@{typ instruction}))),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("MOVCIDecode",@{typ instruction},
                  tp[mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SLL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRA",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SLLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.SRAV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,mop(Not,var_b"b'4"),
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.JR",@{typ Branch},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.JALR",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.MOVZ",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.MOVN",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               Term.Const(@{const_name "SYSCALL"},@{typ instruction})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               Term.Const(@{const_name "BREAK"},@{typ instruction})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'15"),
                                                                   bop(And,mop(Not,var_b"b'14"),
                                                                       bop(And,mop(Not,var_b"b'13"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'12"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'11"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           mop(Not,
                                                                                               var_b"b'4"),
                                                                                           bop(And,
                                                                                               var_b"b'3",
                                                                                               bop(And,
                                                                                                   var_b"b'2",
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.SYNC",@{typ instruction},
                  mop(Cast (Word_Lib.mk_wordT 5),
                      ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'1"),
                                                                                                       mop(Not,
                                                                                                           var_b"b'0"))))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MFHI",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       mop(Not,
                                                                                                           var_b"b'1"),
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MTHI",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,mop(Not,var_b"b'20"),
                                               bop(And,mop(Not,var_b"b'19"),
                                                   bop(And,mop(Not,var_b"b'18"),
                                                       bop(And,mop(Not,var_b"b'17"),
                                                           bop(And,mop(Not,var_b"b'16"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       mop(Not,
                                                                                                           var_b"b'0"))))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MFLO",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),
                                       bop(And,mop(Not,var_b"b'16"),
                                           bop(And,mop(Not,var_b"b'15"),
                                               bop(And,mop(Not,var_b"b'14"),
                                                   bop(And,mop(Not,var_b"b'13"),
                                                       bop(And,mop(Not,var_b"b'12"),
                                                           bop(And,mop(Not,var_b"b'11"),
                                                               bop(And,mop(Not,var_b"b'10"),
                                                                   bop(And,mop(Not,var_b"b'9"),
                                                                       bop(And,mop(Not,var_b"b'8"),
                                                                           bop(And,
                                                                               mop(Not,var_b"b'7"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'6"),
                                                                                   bop(And,
                                                                                       mop(Not,
                                                                                           var_b"b'5"),
                                                                                       bop(And,
                                                                                           var_b"b'4",
                                                                                           bop(And,
                                                                                               mop(Not,
                                                                                                   var_b"b'3"),
                                                                                               bop(And,
                                                                                                   mop(Not,
                                                                                                       var_b"b'2"),
                                                                                                   bop(And,
                                                                                                       var_b"b'1",
                                                                                                       var_b"b'0")))))))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MTLO",@{typ MultDiv},
                     mop(Cast (Word_Lib.mk_wordT 5),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRLV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,mop(Not,var_b"b'5"),
                                               bop(And,var_b"b'4",
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRAV",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MULT",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.MULTU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,var_b"b'1",
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DIV",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,
                                                                               mop(Not,var_b"b'2"),
                                                                               bop(And,var_b"b'1",
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DIVU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DMULT",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,
                                                                                   mop(Not,
                                                                                       var_b"b'1"),
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DMULTU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,var_b"b'1",
                                                                                   mop(Not,
                                                                                       var_b"b'0")))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DDIV",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'15"),
                           bop(And,mop(Not,var_b"b'14"),
                               bop(And,mop(Not,var_b"b'13"),
                                   bop(And,mop(Not,var_b"b'12"),
                                       bop(And,mop(Not,var_b"b'11"),
                                           bop(And,mop(Not,var_b"b'10"),
                                               bop(And,mop(Not,var_b"b'9"),
                                                   bop(And,mop(Not,var_b"b'8"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,mop(Not,var_b"b'5"),
                                                                   bop(And,var_b"b'4",
                                                                       bop(And,var_b"b'3",
                                                                           bop(And,var_b"b'2",
                                                                               bop(And,var_b"b'1",
                                                                                   var_b"b'0"))))))))))))))))),
               call
                 ("instruction.MultDiv",@{typ instruction},
                  call
                    ("MultDiv.DDIVU",@{typ MultDiv},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.ADD",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.ADDU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SUB",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SUBU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.AND",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.OR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.XOR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,mop(Not,var_b"b'3"),
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.NOR",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SLT",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.SLTU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DADD",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DADDU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DSUB",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'10"),
                           bop(And,mop(Not,var_b"b'9"),
                               bop(And,mop(Not,var_b"b'8"),
                                   bop(And,mop(Not,var_b"b'7"),
                                       bop(And,mop(Not,var_b"b'6"),
                                           bop(And,var_b"b'5",
                                               bop(And,mop(Not,var_b"b'4"),
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.ArithR",@{typ instruction},
                  call
                    ("ArithR.DSUBU",@{typ ArithR},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TGE",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,mop(Not,var_b"b'1"),var_b"b'0"))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TGEU",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),
                                       bop(And,var_b"b'1",mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TLT",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,mop(Not,var_b"b'2"),bop(And,var_b"b'1",var_b"b'0"))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TLTU",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,var_b"b'2",
                                       bop(And,mop(Not,var_b"b'1"),mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TEQ",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,var_b"b'5",
                           bop(And,var_b"b'4",
                               bop(And,mop(Not,var_b"b'3"),
                                   bop(And,var_b"b'2",bop(And,var_b"b'1",mop(Not,var_b"b'0")))))))),
               call
                 ("instruction.Trap",@{typ instruction},
                  call
                    ("Trap.TNE",@{typ Trap},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"])],
                     @{theory}),@{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRL",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,mop(Not,var_b"b'2"),
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRA",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,mop(Not,var_b"b'1"),
                                                               mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSLL32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",mop(Not,var_b"b'0"))))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRL32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),
                   bop(And,mop(Not,var_b"b'27"),
                       bop(And,mop(Not,var_b"b'25"),
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,mop(Not,var_b"b'23"),
                                   bop(And,mop(Not,var_b"b'22"),
                                       bop(And,mop(Not,var_b"b'21"),
                                           bop(And,var_b"b'5",
                                               bop(And,var_b"b'4",
                                                   bop(And,var_b"b'3",
                                                       bop(And,var_b"b'2",
                                                           bop(And,var_b"b'1",var_b"b'0")))))))))))),
               call
                 ("instruction.Shift",@{typ instruction},
                  call
                    ("Shift.DSRA32",@{typ Shift},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"])],@{theory}),
                  @{theory})),
              (bop(And,mop(Not,var_b"b'28"),var_b"b'27"),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.J",@{typ Branch},
                     mop(Cast (Word_Lib.mk_wordT 26),
                         ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                            var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",
                            var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",
                            var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                            var_b"b'1",var_b"b'0"]),@{theory}),@{theory})),
              (bop(And,var_b"b'28",
                   bop(And,var_b"b'27",
                       bop(And,mop(Not,var_b"b'20"),
                           bop(And,mop(Not,var_b"b'19"),
                               bop(And,mop(Not,var_b"b'18"),
                                   bop(And,mop(Not,var_b"b'17"),mop(Not,var_b"b'16"))))))),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.BLEZ",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast w16,
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                  @{theory})),
              (bop(And,var_b"b'28",mop(Not,var_b"b'27")),
               call
                 ("instruction.Branch",@{typ instruction},
                  call
                    ("Branch.BEQ",@{typ Branch},
                     tp[mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                        mop(Cast (Word_Lib.mk_wordT 5),
                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                        mop(Cast w16,
                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                               var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                               var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory}),
                  @{theory}))],Term.Const(@{const_name "ReservedInstruction"},@{typ instruction})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("Next",
   close
     (var("state",qTy),
      let'
        (tp[var("v",@{typ "32 word option"}),var("s",qTy)],
         apply
           (const("Fetch",@{typ "state \<Rightarrow> ((32 word option) \<times> state)"},@{theory}),
            var("state",qTy)),
         let'
           (var("s",qTy),
            cs(var("v",@{typ "32 word option"}),
               [(mop(Some,var_w("w",32)),
                 apply
                   (call
                      ("Run",@{typ "state \<Rightarrow> state"},
                       call("Decode",@{typ instruction},var_w("w",32),@{theory}),@{theory}),
                    var("s",qTy))),(lo w32,var("s",qTy))],@{context}),
            let'
              (var("s",qTy),
               rupd
                 ("state.exceptionSignalled",
                  tp[cs(tp[call
                             ("state.BranchDelay",@{typ "(64 word option) option"},var("s",qTy),
                              @{theory}),
                           call
                             ("state.BranchTo",@{typ "(bool \<times> 64 word) option"},var("s",qTy),
                              @{theory})],
                        [(tp[lo(@{typ "64 word option"}),lo(@{typ "bool \<times> 64 word"})],
                          rupd
                            ("state.PC",
                             tp[var("s",qTy),
                                bop(Add,call("state.PC",w64,var("s",qTy),@{theory}),lw(4,64))],
                             @{theory})),
                         (tp[lo(@{typ "64 word option"}),mop(Some,tp[lt,var_w("addr",64)])],
                          rupd
                            ("state.PC",
                             tp[rupd
                                  ("state.BranchTo",
                                   tp[rupd
                                        ("state.BranchDelay",tp[var("s",qTy),mop(Some,lo w64)],
                                         @{theory}),lo(@{typ "bool \<times> 64 word"})],@{theory}),
                                var_w("addr",64)],@{theory})),
                         (tp[lo(@{typ "64 word option"}),mop(Some,tp[lf,var_w("addr",64)])],
                          let'
                            (var("s",qTy),
                             rupd
                               ("state.BranchTo",
                                tp[rupd
                                     ("state.BranchDelay",
                                      tp[var("s",qTy),mop(Some,mop(Some,var_w("addr",64)))],
                                      @{theory}),lo(@{typ "bool \<times> 64 word"})],@{theory}),
                             rupd
                               ("state.PC",
                                tp[var("s",qTy),
                                   bop(Add,call("state.PC",w64,var("s",qTy),@{theory}),lw(4,64))],
                                @{theory}))),
                         (tp[mop(Some,lo w64),lo(@{typ "bool \<times> 64 word"})],
                          let'
                            (var("s",qTy),
                             rupd
                               ("state.BranchDelay",tp[var("s",qTy),lo(@{typ "64 word option"})],
                                @{theory}),
                             rupd
                               ("state.PC",
                                tp[var("s",qTy),
                                   bop(Add,call("state.PC",w64,var("s",qTy),@{theory}),lw(4,64))],
                                @{theory}))),
                         (tp[mop(Some,mop(Some,var_w("addr",64))),lo(@{typ "bool \<times> 64 word"})],
                          rupd
                            ("state.PC",
                             tp[rupd
                                  ("state.BranchDelay",tp[var("s",qTy),lo(@{typ "64 word option"})],
                                   @{theory}),var_w("addr",64)],@{theory})),
                         (var_a
                            (@{typ
                             "((64 word option) option) \<times> (bool \<times> 64 word) option"}),
                          mop(Snd,
                              apply
                                (call
                                   ("raise'exception",
                                    @{typ "state \<Rightarrow> (unit \<times> state)"},
                                    call
                                      ("exception.UNPREDICTABLE",@{typ exception},
                                       ls"Branch follows branch",@{theory}),@{theory}),var("s",qTy))))],
                        @{context}),lf],@{theory}),
               rupd
                 ("state.CP0",
                  tp[var("s",qTy),
                     rupd
                       ("CP0.Count",
                        tp[call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),
                           bop(Add,
                               call
                                 ("CP0.Count",w32,
                                  call("state.CP0",@{typ CP0},var("s",qTy),@{theory}),@{theory}),
                               lw(1,32))],@{theory})],@{theory}))))))
end
\<close>
end